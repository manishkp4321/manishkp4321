{
  "info": {
    "_postman_id": "3d244c70-a663-4de3-a462-b6d89ebe1d71",
    "name": "2_Create_Events_Per_Day copy_newest copy",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Create Yoga for 10:30AM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b55ee90f-cb88-4aaf-bc3e-5ca0e13cb412",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventId_1030am\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cde9cade-cec5-431c-b391-404a714f3699",
                "type": "text/javascript",
                "exec": [
                  "var date = data.dateForEventCreation;",
                  "// var date = \"2018-03-13\";",
                  "",
                  "if (date === 'today')",
                  "{",
                  "    var current_timestamp = new Date();",
                  "    //current_timestamp = current_timestamp.setDate(current_timestamp.getDate() + 1);",
                  "    var current_year = current_timestamp.getFullYear();",
                  "    var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "    var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "    ",
                  "    var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T15:30:00Z\";",
                  "    var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T16:00:00Z\";",
                  "} else {",
                  "    var eventStartTime = date + \"T15:30:00Z\";",
                  "    var eventEndTime = date + \"T16:00:00Z\";",
                  "}",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeUserId\"),postman.getEnvironmentVariable(\"employeeUserId_2\"),postman.getEnvironmentVariable(\"employeeUserId_3\"),postman.getEnvironmentVariable(\"employeeUserId_4\"),postman.getEnvironmentVariable(\"employeeUserId_5\"),postman.getEnvironmentVariable(\"employeeUserId_6\"),postman.getEnvironmentVariable(\"employeeUserId_7\"),postman.getEnvironmentVariable(\"employeeUserId_8\"),postman.getEnvironmentVariable(\"employeeUserId_9\"),postman.getEnvironmentVariable(\"employeeUserId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_yoga}}\",\r\n  \"name\" : \"Yoga\",\r\n  \"description\" : \"Where you can get your Sweat On!\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"eventCategoryId\" : \"{{eventCategoryId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"duration\" : 60,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"hosts\" : [ {\r\n    \"substituteId\" : \"{{employeeUserId_8}}\",\r\n    \"employeeId\" : \"{{randEmployee}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create P90X for 12PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b15fd9e0-ac2e-42f6-8f9b-92a7eceddf14",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventId_1200pm\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a1c64c1e-93a7-424f-8645-9b0560af9c56",
                "type": "text/javascript",
                "exec": [
                  "var date = data.dateForEventCreation;",
                  "",
                  "if (date === 'today')",
                  "{",
                  "    var current_timestamp = new Date();",
                  "    var current_year = current_timestamp.getFullYear();",
                  "    var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "    var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "    ",
                  "    var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:00:00Z\";",
                  "    var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:30:00Z\";",
                  "} else {",
                  "    var eventStartTime = date + \"T17:00:00Z\";",
                  "    var eventEndTime = date + \"T17:30:00Z\";",
                  "}",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeUserId\"),postman.getEnvironmentVariable(\"employeeUserId_2\"),postman.getEnvironmentVariable(\"employeeUserId_3\"),postman.getEnvironmentVariable(\"employeeUserId_4\"),postman.getEnvironmentVariable(\"employeeUserId_5\"),postman.getEnvironmentVariable(\"employeeUserId_6\"),postman.getEnvironmentVariable(\"employeeUserId_7\"),postman.getEnvironmentVariable(\"employeeUserId_8\"),postman.getEnvironmentVariable(\"employeeUserId_9\"),postman.getEnvironmentVariable(\"employeeUserId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_p90x}}\",\r\n  \"name\" : \"P90X\",\r\n  \"description\" : \"Where you can get your Sweat On!\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"eventCategoryId\" : \"{{eventCategoryId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"duration\" : 60,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"hosts\" : [ {\r\n    \"employeeId\" : \"{{randEmployee}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Aerobics for 1PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6e05b77e-dbe7-4ebe-9cab-b692d3624623",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventId_100pm\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ff3f8613-9919-419e-9091-8ecf578a471f",
                "type": "text/javascript",
                "exec": [
                  "var date = data.dateForEventCreation;",
                  "",
                  "if (date === 'today')",
                  "{",
                  "    var current_timestamp = new Date();",
                  "    var current_year = current_timestamp.getFullYear();",
                  "    var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "    var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "    ",
                  "    var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T18:00:00Z\";",
                  "    var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T18:30:00Z\";",
                  "} else {",
                  "    var eventStartTime = date + \"T18:00:00Z\";",
                  "    var eventEndTime = date + \"T18:30:00Z\";",
                  "}",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeUserId\"),postman.getEnvironmentVariable(\"employeeUserId_2\"),postman.getEnvironmentVariable(\"employeeUserId_3\"),postman.getEnvironmentVariable(\"employeeUserId_4\"),postman.getEnvironmentVariable(\"employeeUserId_5\"),postman.getEnvironmentVariable(\"employeeUserId_6\"),postman.getEnvironmentVariable(\"employeeUserId_7\"),postman.getEnvironmentVariable(\"employeeUserId_8\"),postman.getEnvironmentVariable(\"employeeUserId_9\"),postman.getEnvironmentVariable(\"employeeUserId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_aerobics}}\",\r\n  \"name\" : \"Aerobics\",\r\n  \"description\" : \"Where you can get your Sweat On!\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"eventCategoryId\" : \"{{eventCategoryId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"duration\" : 60,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"hosts\" : [ {\r\n    \"substituteId\" : \"{{employeeUserId_8}}\",\r\n    \"employeeId\" : \"{{randEmployee}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Pilates for 2PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "86df8e2f-ffb0-410c-afc8-40b82915cf02",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventId_200pm\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5e50daaa-41cd-4bd8-a5a9-8f81cc313a91",
                "type": "text/javascript",
                "exec": [
                  "var date = data.dateForEventCreation;",
                  "",
                  "if (date === 'today')",
                  "{",
                  "    var current_timestamp = new Date();",
                  "    var current_year = current_timestamp.getFullYear();",
                  "    var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "    var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "    ",
                  "    var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T19:00:00Z\";",
                  "    var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T19:30:00Z\";",
                  "} else {",
                  "    var eventStartTime = date + \"T19:00:00Z\";",
                  "    var eventEndTime = date + \"T19:30:00Z\";",
                  "}",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeUserId\"),postman.getEnvironmentVariable(\"employeeUserId_2\"),postman.getEnvironmentVariable(\"employeeUserId_3\"),postman.getEnvironmentVariable(\"employeeUserId_4\"),postman.getEnvironmentVariable(\"employeeUserId_5\"),postman.getEnvironmentVariable(\"employeeUserId_6\"),postman.getEnvironmentVariable(\"employeeUserId_7\"),postman.getEnvironmentVariable(\"employeeUserId_8\"),postman.getEnvironmentVariable(\"employeeUserId_9\"),postman.getEnvironmentVariable(\"employeeUserId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_pilates}}\",\r\n  \"name\" : \"Pilates\",\r\n  \"description\" : \"Where you can get your Sweat On!\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"eventCategoryId\" : \"{{eventCategoryId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"duration\" : 60,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"hosts\" : [ {\r\n    \"employeeId\" : \"{{randEmployee}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Zumba for 3PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "681d5de4-d613-452e-9304-c84bf0d859cf",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventId_300pm\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9f35b79e-7d2f-4c40-8775-cd8a9f718327",
                "type": "text/javascript",
                "exec": [
                  "var date = data.dateForEventCreation;",
                  "",
                  "if (date === 'today')",
                  "{",
                  "    var current_timestamp = new Date();",
                  "    var current_year = current_timestamp.getFullYear();",
                  "    var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "    var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "    ",
                  "    var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T20:00:00Z\";",
                  "    var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T20:30:00Z\";",
                  "} else {",
                  "    var eventStartTime = date + \"T20:00:00Z\";",
                  "    var eventEndTime = date + \"T20:30:00Z\";",
                  "}",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeUserId\"),postman.getEnvironmentVariable(\"employeeUserId_2\"),postman.getEnvironmentVariable(\"employeeUserId_3\"),postman.getEnvironmentVariable(\"employeeUserId_4\"),postman.getEnvironmentVariable(\"employeeUserId_5\"),postman.getEnvironmentVariable(\"employeeUserId_6\"),postman.getEnvironmentVariable(\"employeeUserId_7\"),postman.getEnvironmentVariable(\"employeeUserId_8\"),postman.getEnvironmentVariable(\"employeeUserId_9\"),postman.getEnvironmentVariable(\"employeeUserId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_zumba}}\",\r\n  \"name\" : \"Zumba\",\r\n  \"description\" : \"Where you can get your Sweat On!\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"eventCategoryId\" : \"{{eventCategoryId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"duration\" : 60,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"hosts\" : [ {\r\n    \"substituteId\" : \"{{employeeUserId_8}}\",\r\n    \"employeeId\" : \"{{randEmployee}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Turbo Kick for 4:30PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4af80035-be8c-48c0-992c-80dd090d2593",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventId_430pm\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "073f3900-dac1-4637-bf0e-38689e8a9429",
                "type": "text/javascript",
                "exec": [
                  "var date = data.dateForEventCreation;",
                  "",
                  "if (date === 'today')",
                  "{",
                  "    var current_timestamp = new Date();",
                  "    var current_year = current_timestamp.getFullYear();",
                  "    var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "    var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "",
                  "    var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T21:30:00Z\";",
                  "    var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T22:00:00Z\";",
                  "} else {",
                  "    var eventStartTime = date + \"T21:30:00Z\";",
                  "    var eventEndTime = date + \"T22:00:00Z\";",
                  "}",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeUserId\"),postman.getEnvironmentVariable(\"employeeUserId_2\"),postman.getEnvironmentVariable(\"employeeUserId_3\"),postman.getEnvironmentVariable(\"employeeUserId_4\"),postman.getEnvironmentVariable(\"employeeUserId_5\"),postman.getEnvironmentVariable(\"employeeUserId_6\"),postman.getEnvironmentVariable(\"employeeUserId_7\"),postman.getEnvironmentVariable(\"employeeUserId_8\"),postman.getEnvironmentVariable(\"employeeUserId_9\"),postman.getEnvironmentVariable(\"employeeUserId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_turboKick}}\",\r\n  \"name\" : \"Turbo Kick\",\r\n  \"description\" : \"Where you can get your Sweat On!\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"eventCategoryId\" : \"{{eventCategoryId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"duration\" : 60,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"hosts\" : [ {\r\n    \"employeeId\" : \"{{randEmployee}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Cycling for 5PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "67fa8d06-8bfe-461f-a1a8-06201517c50e",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventId_500pm\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5619f821-3ec0-4a8e-bd72-16bead185aff",
                "type": "text/javascript",
                "exec": [
                  "var date = data.dateForEventCreation;",
                  "",
                  "if (date === 'today')",
                  "{",
                  "    var current_timestamp = new Date();",
                  "    var current_year = current_timestamp.getFullYear();",
                  "    var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "    var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "    ",
                  "    var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T22:00:00Z\";",
                  "    var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T22:30:00Z\";",
                  "} else {",
                  "    var eventStartTime = date + \"T22:00:00Z\";",
                  "    var eventEndTime = date + \"T22:30:00Z\";",
                  "}",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeUserId\"),postman.getEnvironmentVariable(\"employeeUserId_2\"),postman.getEnvironmentVariable(\"employeeUserId_3\"),postman.getEnvironmentVariable(\"employeeUserId_4\"),postman.getEnvironmentVariable(\"employeeUserId_5\"),postman.getEnvironmentVariable(\"employeeUserId_6\"),postman.getEnvironmentVariable(\"employeeUserId_7\"),postman.getEnvironmentVariable(\"employeeUserId_8\"),postman.getEnvironmentVariable(\"employeeUserId_9\"),postman.getEnvironmentVariable(\"employeeUserId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_cycling}}\",\r\n  \"name\" : \"Cycling\",\r\n  \"description\" : \"Where you can get your Sweat On!\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"eventCategoryId\" : \"{{eventCategoryId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"duration\" : 60,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"hosts\" : [ {\r\n    \"employeeId\" : \"{{randEmployee}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 10:30AM",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ec2877ac-b33f-4861-81c4-c2ac9c30d374",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"memberId_1030am\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d86b0b4f-9752-4070-bc58-3dc5c142b39f",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n    \"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createUnlimitedPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0fdb3e2-5f29-452f-a181-efc2cad70305",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0f2140b4-e126-4a2d-a4b6-b1befdd9e3b6",
                "type": "text/javascript",
                "exec": [
                  "// var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d6781178-5e0d-42f4-a8d8-503a200df8e0",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "263936df-abed-4b20-abcb-9eb127f63c52",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "83aee7ab-36d0-47b7-a835-41498f99f7d9",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 10:30AM (2)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "baae0247-a758-4ba6-9a05-03c4ae56ebb0",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "33700345-0038-4332-8aa1-d845a835275b",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n    \"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bbcded51-964f-48eb-a37e-2b72a4d0ba88",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "94adf1c3-b57a-454b-8b1a-ccac20e7ca3f",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "afc2017f-b09a-44f6-b1da-15344ff94cc2",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6f43d856-d994-4496-a3f3-c8a4350c0d83",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "52c1d6c6-843b-4b2b-a7e9-07f49fa6585e",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 10:30AM (3)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c9fa7263-1b88-417f-bfdd-8781a48a166d",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3358d093-8982-4340-9f4c-788886672a52",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n    \"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "212e023d-e9ff-420a-8f60-4333cdac74f5",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c63d5616-c3b9-4f5b-b4a8-e0155938f7f1",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1b96cb72-bcf3-473b-a362-28bd4c40c578",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3b03a5d0-1607-49b8-8136-4d01b2de40b9",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1ecf0736-a624-4607-8cb7-8008fd7fa05c",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 12PM",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "96a37e23-af83-40da-8902-a175675ac597",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "dbb31377-2058-46fa-a23b-ca49f20651f4",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createUnlimitedPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83bcd617-08ec-4ac3-ad38-40f8d4adb4f6",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a46d61a9-eeeb-4f1e-bf36-fb4b5d28aea8",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7d8f8fa5-be72-4b3f-9a83-a055f04fc572",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b51268c4-e25a-4f9d-ae14-d06bf5bb925f",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "17ed6c2f-67a8-4190-8abf-f5fb80f9e91c",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 12PM (2)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "427cfd3d-49d0-431f-a160-24366c9c2854",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f07f2b78-efca-4445-9db7-c7e4c630861d",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "20c286fa-35f7-4812-8492-8c226d7c2bb1",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6a796ede-3551-42f4-8722-d1a5b93ad0af",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b978ae50-c2c2-4c03-a99e-5ced7a648152",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "681d8d24-f453-459a-924b-d482ca3a3e77",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8ea6af7a-ad0d-43ef-a231-4a3e666be9a0",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 12PM (3)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8fef26cf-a72f-4489-bab0-4af7817a6cc1",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "91ab38c2-b356-4355-b4a4-4e8e24ab2726",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b873e274-3329-4ffe-9fc7-19842f6aaf65",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3077f3d5-ad30-457b-a2dc-63772def55a0",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7d35502c-263a-440e-a75c-601b141b5013",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd767ea7-afe1-419b-8ede-024b42444a70",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3eb61331-3544-4f59-9de4-cca923c1eb4f",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 1PM",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9566ebc4-d502-41cf-97b2-4c65ca5c5afd",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d231d7cd-cb0d-45d0-993f-b4034c3f782a",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createUnlimitedPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "054149e5-1340-496a-aa53-fea43853305b",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c0a98cd5-91bb-4087-9e52-eb6bba599058",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2999acce-f4d9-476a-82cb-4a9f01ebc106",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b56ed60-aa0f-4057-87ea-ce5fee8352b1",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "46a3c304-3dce-4196-9287-cec73eb1cf29",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 1PM (2)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "88e41c6a-9bfc-4038-8876-3e25299901c8",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c3d060bf-ddbe-4593-bee8-656d823a2d4c",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5c409655-42d3-482b-aca9-61eec5b2b6b2",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ea711b67-7cfa-45ea-962e-b94f7ac937c9",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d6f93a4-e34b-4ebb-8457-6b03d8488beb",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d6a04846-cc49-4276-acf1-e825eeeb9263",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c8fa912e-0a53-45d8-a866-640fc38ef8fc",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 1PM (3)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "705e9da0-d06c-4a43-8bd8-4c7acd1d5bc9",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ee4b78c8-1614-4eed-8729-5ffee4d4ff11",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ac6939ec-118a-4fa0-b65b-5431a697fd5f",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "67c99c38-2e90-432d-88cb-04befe82251c",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ca17f8c1-c296-4511-8344-5c5964ce5c91",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e7305cd-6d27-497a-a942-74e7b89a4d28",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d7614cb3-c9af-4b4d-85f6-7911b7d6435d",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 2PM",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4cb7d694-fdcf-4a38-b37a-63f094a991e4",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "47872c78-3cdb-4c35-8391-ac3783df1d6a",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f5dfd56d-dc82-4109-80a8-aa8a3cf6daa4",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "777c2f95-3b6f-4a97-b325-26bad81a5a4d",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = 1",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17ce9431-3506-49cc-b102-d395e0c98196",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "809330f1-90d7-4bd7-aaa8-beb1f7d10ba0",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e9d814c6-1b07-4b0b-aa6d-581153426d9d",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 2PM (2)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6584123f-a625-40cc-b7de-06b9d0dfafc5",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c0885d73-003b-4334-adac-82ae2bac963f",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "69b40b31-6362-403e-90aa-283cc247749d",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d79c1a58-03de-4dd2-b885-0be780aa82aa",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e581d12-df6b-4184-99aa-7affb6473571",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "630cd7cb-34e9-4c91-ba5c-d84a862480fe",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9006be65-eadb-41b3-ae33-d2096a36a133",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 2PM (3)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c251b853-7b1e-407b-9a64-77b9d2da71e2",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0314042b-86f5-4fa6-9e4d-82635bb4a8a3",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8c7a177d-43f8-4e83-bb48-fc333990417e",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "7777cede-3864-4d97-9b84-926475fe6b55",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dc9aa1de-6aa3-4646-a5ad-e5ba283076d8",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1592048e-7369-4bc2-a218-b1dc50a70bdb",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6076f3ce-faed-4323-a6e3-d138f6eae060",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 3PM",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "33f8ff8e-4173-4d36-bee0-78516b8e8cad",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "fe87659d-dc30-48f4-bf61-f7a91f7a71cf",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9ea9dcff-ef83-4280-98d3-9315d809e591",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "fc21df34-06da-46a5-ad71-12a5d13bbc17",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d83e4450-caf0-4492-b083-8ac8f9a22155",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4822cd2f-7eb2-48bd-80e9-5d3e8a8b38d8",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "40b0c21e-aa86-4ccd-a6d4-e66b9e1cfdc9",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 3PM (2)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91a505f6-9843-42fd-9b8c-c26b3470e124",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "65893f0f-ab2f-4633-8d2a-789044574b96",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5fa96168-c7c6-4ad4-a9de-3f4e14c0865a",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2032c6f1-8221-46be-b564-a2a7e043789b",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7d3bfc1f-7e9d-4a97-b109-f076933ab5e3",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5c0c3b7e-c5fb-4a45-a061-1e25437b75a2",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "fef89671-ef85-4a35-86b8-07d976fd6ccc",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 3PM (3)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bb098d0c-242e-453c-876a-eb051466d3f1",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e89bed00-4f29-4b27-bc98-fcf0433479e7",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "57bb9861-e3db-4d16-ac8a-efe5c1d57423",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "7ba76d8e-da35-456d-a7e6-9b6580ad8bb5",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b791d380-49c8-4a9e-b1c8-6766802994d9",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "64f3dc7e-31c3-4bc0-afb9-d1e09a1c5680",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bc12673b-349e-4f31-9e29-93b9e07a8980",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 4:30PM",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3012190-b7b3-4733-87d3-956cf89c5bfd",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a592a720-b76c-42cc-bbd6-94d9fa188b94",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b05d1c87-5591-46fa-bcb3-ec52b43c3d29",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2a60d598-d254-472c-993a-6b9b923ab1a0",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "445130e4-00ed-4e2b-a033-b62866cf8538",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "37c7c516-adf5-4017-8f1c-3453211d6582",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e3a68b86-18fc-4ec6-9872-07e377939031",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 4:30PM (2)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74216d07-d5e3-43a9-8608-40205ab295da",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "66fe6aeb-4470-4e5c-8ed5-ac91f3a39c25",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0746fe1d-c783-4d04-a508-644590dfc68a",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "80048e86-dc3d-42b3-b16f-cc348ac233a9",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "05f880e0-9109-4dda-95f6-0cd6154c1812",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fea3b199-6340-487d-b118-7b6ddefb3b58",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "fb676925-c6d0-4fd9-a6a9-339c7839c7b2",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 4:30PM (3)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a2133f42-cfa7-4122-83ba-f867490a3dce",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "95003bcb-e81d-4bd0-b5a7-b1d901192fa1",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f746955e-16cf-4c42-a7fa-1841f1b3fe44",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3a55aae6-4add-4a5c-b1bd-4a05e9a54a58",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d8a76f87-7d5a-4355-a200-73a9541e2442",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2433da1d-47bc-4d60-9758-e2bc96375302",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "052ac528-c966-409c-a086-bdc073ea53ee",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 5PM",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e2e092c1-c6bd-465c-bb3e-4987be6e4f2e",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f4f973e7-ae36-4667-9312-c6a11d8a2f3c",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc4a6fc7-7f2a-40ca-87fd-258d671bc4a5",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9cae0517-8269-4ffe-b2cc-b08de53f4060",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3df8b190-97b2-43c5-9ca2-ca91f48637ac",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "af7abefe-be08-464b-a557-8d0211739d71",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0f263da5-84dd-44ed-b09d-da33cb5735a5",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 5PM (2)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0cbe9cd6-333d-496b-9960-0b3236be1534",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "063da341-8693-4efd-9e73-85b598b2289e",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f8cde893-a164-4b03-a5c0-baef33aa4504",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "44f2b2f2-e85e-4b20-93f2-4a2746bc3490",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6dd5f8ff-4632-47c9-92b5-8e0ea42fbf42",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "27dfdc06-9dc1-4d08-97ac-ca772e3f759f",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4471aa7a-71f2-45af-bde5-074577eeca58",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 5PM (3)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b5269ac9-23e9-4653-a076-c7f176f50dbe",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1463141d-18e6-481a-8b93-2953a77caf72",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41b95903-b105-4e9c-9e8e-ca8d2ff25b44",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f13dad70-d586-400b-a377-ada88b4fcd25",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e6409504-0c32-47ba-ae8f-cf5f80b3b3b0",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3f08d95-a8b1-4563-b62c-c19b7175c934",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 409)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    else if (responseCode.code === 200)",
                  "    {",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d00f5e54-e6ac-4faf-9a75-641d4c12742a",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}