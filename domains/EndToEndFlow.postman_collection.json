{
  "info": {
    "_postman_id": "16acceb8-c87e-4725-b514-91bf7781649f",
    "name": "E2E Feb Milestone",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "E2E Testing_Scenarios",
      "item": [
        {
          "name": "Authorization",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "24ec140a-d8be-4a2f-badd-47552560a90b",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"authId\", jsonData.access_token);",
                  "   ",
                  "    tests[\"Response Body has Correct Token Type\"] = responseBody.has(\"\\\"token_type\\\":\\\"bearer\\\"\");",
                  "    tests[\"Response Body has Access Token\"] = responseBody.has(\"\\\"access_token\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"authId\")+\"\\\"\");",
                  "    tests[\"Response Body has Expiration Field\"] = responseBody.has(\"expires_in\");",
                  "    tests[\"Response Body has Correct Scope\"] = responseBody.has(\"\\\"scope\\\":\"+\"\\\"\"+jsonData.scope+\"\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Basic QVVUT01BVEVEX1RFU1RJTkc6dDNzdEBsbHRoM3RoMW5ncw=="
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "",
                "value": "",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/token?client_id=AUTOMATED_TESTING&grant_type=client_credentials",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "token"
              ],
              "query": [
                {
                  "key": "client_id",
                  "value": "AUTOMATED_TESTING"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"orgId\", jsonData.id);",
                  "   ",
                  "",
                  "   tests[\"Response Body has Correct Organization id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"orgId\")+\"\\\"\");",
                  "  ",
                  "   tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  "  text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var name= stringGen(5);",
                  "postman.setEnvironmentVariable(\"name\", \"Singh\"+name);",
                  "",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName1 = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName1);",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authId}}"
              },
              {
                "key": "",
                "value": "",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"    ABC {{name}}    \",\r\n  \"email\" : \"{{name}}@qa4life.com\",\r\n  \"phone\" : {\r\n    \"number\" : \"1234567\",\r\n    \"extension\" : \"38\"\r\n  },\r\n  \"signInLink\" : \"https://test.url.qa4life.com\",\r\n  \"websiteUrl\" : \"www.planet-fitness.com\",\r\n  \"timezone\" : \"US/Alaska\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"branding\" : {\r\n    \"colorScheme\" : {\r\n      \"primary\" : \"#666666\",\r\n      \"primaryHover\" : \"#666666\"\r\n    }\r\n  },\r\n  \"locale\" : {\r\n    \"language\" : \"UA\",\r\n    \"region\" : \"US\",\r\n    \"variant\" : \"MAC\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/organization",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "organization"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authId}}"
              },
              {
                "key": "ABCFS-ORGANIZATION-ID",
                "value": "{{orgId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"name\" : \"Admin/Owner\",\n \"description\" : \"Owner\",\n \"permissions\" : [\n         {\"key\" : \"role:write\"},\n     {\"key\" : \"role:read\"},\n     {\"key\" : \"user:write\"},\n     {\"key\" : \"user:read\"},\n     {\"key\" : \"user:protected\"},\n     {\"key\" : \"catalog-item:read\"},\n     {\"key\" : \"catalog-item:write\"},\n     {\"key\" : \"subscription-plan:read\"},\n     {\"key\" : \"subscription-plan:write\"},\n     {\"key\" : \"application:write\"},\n     {\"key\" : \"application:read\"},\n     {\"key\" : \"developer:write\"},\n     {\"key\" : \"developer:read\"},\n     {\"key\" : \"organization:read\"},\n     {\"key\" : \"organization:write\"},\n     {\"key\" : \"employee:read\"},\n     {\"key\" : \"employee:write\"},\n     {\"key\" : \"location:read\"},\n     {\"key\" : \"location:write\"},\n     {\"key\" : \"member:read\"},\n     {\"key\" : \"member:write\"},\n     {\"key\" : \"checkin:read\"},\n     {\"key\" : \"checkin:write\"},\n     {\"key\" : \"webhook:read\"},\n     {\"key\" : \"webhook:write\"},\n     {\"key\" : \"email-template:write\"},\n     {\"key\" : \"account:write\"},\n     {\"key\" : \"subscription:write\"},\n     {\"key\" : \"subscription:read\"},\n     {\"key\" : \"role:protected\"},\n     {\"key\" : \"catalog-item:protected\"},\n     {\"key\" : \"subscription-plan:protected\"},\n     {\"key\" : \"application:protected\"},\n     {\"key\" : \"developer:protected\"},\n     {\"key\" : \"employee:protected\"},\n     {\"key\" : \"location:protected\"},\n     {\"key\" : \"member:protected\"},\n     {\"key\" : \"checkin:protected\"},\n     {\"key\" : \"webhook:protected\"},\n     {\"key\" : \"organization-search:read\"},\n    \n\n    \n {\"key\":\"payment-company:write\"},\n{\"key\":\"payment-company:update\"},\n{\"key\":\"payment-company:read\"},\n{\"key\":\"payment-company:protected\"},\n{\"key\":\"payment-processor:write\"},\n{\"key\":\"payment-processor:update\"},\n{\"key\":\"payment-processor:read\"},\n{\"key\":\"payment-processor:protected\"},\n{\"key\":\"payment-originator:write\"},\n{\"key\":\"payment-originator:update\"},\n{\"key\":\"payment-originator:read\"},\n{\"key\":\"payment-originator:protected\"},\n{\"key\":\"payment-destination:write\"},\n{\"key\":\"payment-destination:update\"},\n{\"key\":\"payment-destination:read\"},\n{\"key\":\"payment-destination:protected\"},\n{\"key\":\"payment-merchant:write\"},\n{\"key\":\"payment-merchant:update\"},\n{\"key\":\"payment-merchant:read\"},\n{\"key\":\"payment-merchant:protected\"},\n{\"key\":\"payment-merchant-activate:write\"},\n{\"key\":\"payment-audit:read\"},\n{\"key\":\"payment-command:update\"},\n{\"key\":\"payment-command:read\"},\n{\"key\":\"payment-command:protected\"},\n{\"key\":\"payment-batch:protected\"},\n{\"key\":\"payment-remittance:read\"}\n\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/role",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "role"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_User",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    ",
                  "    postman.setEnvironmentVariable(\"username\", jsonData.identity);",
                  "     tests[\"Response Body has Correct id\"] = responseBody.has(\"id\");",
                  "   tests[\"Response Body has Correct provider\"] = responseBody.has(\"provider\");",
                  "   tests[\"Response Body has identity\"] = responseBody.has(\"identity\");",
                  "   tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has lastName\"] = responseBody.has(\"lastName\");",
                  "   tests[\"Response Body has roleName\"] = responseBody.has(\"roleName\");",
                  "   tests[\"Response Body has disabled\"] = responseBody.has(\"disabled\");",
                  "   tests[\"Response Body has  hasPassword\"] = responseBody.has(\"hasPassword\");",
                  "   ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var uniqueClient= stringGen(8)",
                  "postman.setEnvironmentVariable(\"UniqueClient\", \"Client\"+uniqueClient);",
                  "",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName1 = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName1);",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authId}}"
              },
              {
                "key": "ABCFS-ORGANIZATION-ID",
                "value": "{{orgId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"identity\" : \"{{UniqueClient}}.doee@hello.com\",\r\n  \"firstName\" : \"John\",\r\n  \"lastName\" : \"Doe\",\r\n  \"roleName\" : \"Admin/Owner\",\r\n  \"password\" : \"Qwerty123456\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/user",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Authorization_User",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "24ec140a-d8be-4a2f-badd-47552560a90b",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
                  "   ",
                  "   ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Basic QVVUT01BVEVEX1RFU1RJTkc6dDNzdEBsbHRoM3RoMW5ncw=="
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "ABCFS-ORGANIZATION-ID",
                "value": "{{orgId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/token?client_id=AUTOMATED_TESTING&grant_type=password&username={{username}}&password=Qwerty123456",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "token"
              ],
              "query": [
                {
                  "key": "client_id",
                  "value": "AUTOMATED_TESTING"
                },
                {
                  "key": "grant_type",
                  "value": "password"
                },
                {
                  "key": "username",
                  "value": "{{username}}"
                },
                {
                  "key": "password",
                  "value": "Qwerty123456"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Location",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa08bd94-c2c2-42b1-bf77-4c34707309dd",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"locationId\", jsonData.id);",
                  " tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  extension\"] = responseBody.has(\"extension\");",
                  "    tests[\"Response Body has cardAuthorizationDocId\"] = responseBody.has(\"cardAuthorizationDocId\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  waiverDocId\"] = responseBody.has(\"waiverDocId\");",
                  "    tests[\"Response Body has locale\"] = responseBody.has(\"locale\");",
                  "    tests[\"Response Body has emailIdentityVerified\"] = responseBody.has(\"emailIdentityVerified\");",
                  "    tests[\"Response Body has organizationId\"] = responseBody.has(\"organizationId\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "    ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"ABC Location\",\r\n  \"email\" : \"noreply@qa4life.com\",\r\n  \"phone\" : {\r\n    \"number\" : \"1234567\",\r\n    \"extension\" : \"38\"\r\n  },\r\n  \"timezone\" : \"US/Alaska\",\r\n  \"cardAuthorizationDocId\" : \"4c3cae02-de89-4fd8-943b-77fe3ee8903b\",\r\n  \"waiverDocId\" : \"b4f09941-3d46-4954-8e54-408785723188\",\r\n  \"termsDocId\" : \"e2726d52-58a4-4cdd-8a6a-220feae90410\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"zipCode\" : \"72120\",\r\n    \"country\" : \"USA\",\r\n    \"state\" : \"AR\"\r\n  },\r\n  \"locale\" : {\r\n    \"language\" : \"UA\",\r\n    \"region\" : \"US\",\r\n    \"variant\" : \"MAC\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/location",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "location"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Item_Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"itemcategoryId\", jsonData.id);",
                  "",
                  "",
                  "tests[\"Response Body has correct item Category id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemcategoryId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct name \"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randName\")+\"\\\"\");",
                  "tests[\"Response Body has Correct description \"] = responseBody.has(\"\\\"description\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randDescription\")+\"\\\"\");",
                  "tests[\"Response Body has Correct locationId \"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "   tests[\"Response Body has status \"] = responseBody.has(\"status\");",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                "exec": [
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var name1 = names[Math.floor(Math.random() * names.length)];",
                  "",
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  "  text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var name2= stringGen(5);",
                  "var randName=name1+\" \"+name2;",
                  "var description= stringGen(6);",
                  "var randDescription=name1+\" \"+description+name1;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"randDescription\", randDescription);",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "ABCFS-ORGANIZATION-ID",
                "value": "{{orgId}}",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"name\" : \"{{randName}}\",\r\n \"locationId\" : \"{{locationId}}\",\r\n \"description\" : \"{{randDescription}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/item-category",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "item-category"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Item",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"itemId\", jsonData.id.id);",
                  "postman.setEnvironmentVariable(\"version\", jsonData.id.version);",
                  "",
                  "tests[\"Response Body has correct location id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "tests[\"Response Body has correct item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId\")+\"\\\"\");",
                  "tests[\"Response Body has correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemName\")+\"\\\"\");",
                  "tests[\"Response Body has correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"expirationUnit\")+\"\\\"\");",
                  "tests[\"Response Body has correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemType\")+\"\\\"\");",
                  "tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "tests[\"Response Body has price\"] = responseBody.has(\"price\");",
                  "tests[\"Response Body has quantity\"] = responseBody.has(\"quantity\");",
                  "tests[\"Response Body has unlimited\"] = responseBody.has(\"unlimited\");",
                  "tests[\"Response Body has expirationStart\"] = responseBody.has(\"expirationStart\");",
                  "tests[\"Response Body has description\"] = responseBody.has(\"description\");",
                  "",
                  "tests[\"Response Body has currencyId\"] = responseBody.has(\"currencyId\");",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                "exec": [
                  "var randName=pm.environment.get(\"randName\");",
                  "var itemName= \"Item Name \"+randName;",
                  "var itemType= ['SERVICE', 'PRODUCT', 'AMENITY', 'FEE'];",
                  "",
                  "var itemType = itemType[Math.floor(Math.random() * itemType.length)];",
                  "postman.setEnvironmentVariable(\"itemType\", itemType);",
                  "",
                  "var expirationUnit =['DAYS', 'WEEKS', 'MONTHS', 'YEARS'];",
                  "var expirationUnit = expirationUnit[Math.floor(Math.random() * expirationUnit.length)];",
                  "postman.setEnvironmentVariable(\"expirationUnit\", expirationUnit);",
                  "",
                  "postman.setEnvironmentVariable(\"itemName\", itemName);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "ABCFS-ORGANIZATION-ID",
                "value": "{{orgId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"active\" : true,\r\n  \"name\" : \"{{itemName}}\",\r\n  \"type\" : \"{{itemType}}\",\r\n  \"price\" : \"12\",\r\n  \"quantity\" : \"1\",\r\n  \"unlimited\" : true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 14,\r\n  \"expirationUnit\" : \"{{expirationUnit}}\",\r\n  \"currencyId\" : \"USD\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"itemCategoryId\" : \"{{itemcategoryId}}\",\r\n  \"description\" : \"Test Description\"\r\n}\r\n"
            },
            "url": {
              "raw": "{{URL}}/item",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "item"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Subscription_Plan",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                "exec": [
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"planId\", jsonData.id.id);",
                  "tests[\"Response Body has correct location id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "tests[\"Response Body has correct Plan id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"planId\")+\"\\\"\");",
                  "tests[\"Response Body has correct frequency\"] = responseBody.has(\"\\\"frequency\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"frequencyForPlan\")+\"\\\"\");",
                  "tests[\"Response Body has correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"subscriptionPlanName\")+\"\\\"\");",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                "exec": [
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"subscriptionPlanName\", randName);",
                  "",
                  "var frequency= ['DAILY', 'WEEKLY', 'EVERY_OTHER_WEEK', 'MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY', 'SEMIANNUALLY'];",
                  "var frequencyForPlan = frequency[Math.floor(Math.random() * frequency.length)];",
                  "postman.setEnvironmentVariable(\"frequencyForPlan\", frequencyForPlan);",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "ABCFS-ORGANIZATION-ID",
                "value": "{{orgId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"{{subscriptionPlanName}}\",\r\n  \"active\" : true,\r\n  \"open\" : true,\r\n  \"frequency\" : \"{{frequencyForPlan}}\",\r\n  \"description\" : \"Donald Trump\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"items\" : [ {\r\n    \"id\" : {\r\n      \"id\" : \"{{itemId}}\",\r\n      \"version\" : \"{{version}}\"\r\n    },\r\n    \"active\" : true,\r\n    \"name\" : \"First Test Item1\",\r\n    \"type\" : \"AMENITY\",\r\n    \"price\" : \"729\",\r\n    \"quantity\" : \"8\",\r\n    \"unlimited\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"currencyId\" : \"USD\",\r\n    \"locationId\" : \"{{locationId}}\"\r\n  }]}"
            },
            "url": {
              "raw": "{{URL}}/subscription-plan",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription-plan"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Member",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                "exec": [
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "tests[\"Response Body has correct location id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "tests[\"Response Body has correct Member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\");",
                  "tests[\"Response Body has waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                  "tests[\"Response Body has termsDocumentId\"] = responseBody.has(\"termsDocumentId\");",
                  "tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                "exec": [
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{UniqueClient}}\",\r\n  \"lastName\" : \"{{UniqueClient}}\",\r\n  \"middleName\" : \"{{UniqueClient}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n \r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Member2",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                "exec": [
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"memberId2\", jsonData.id);",
                  "",
                  "",
                  "tests[\"Response Body has location id\"] = responseBody.has(\"locationId\");",
                  "tests[\"Response Body has member id\"] = responseBody.has(\"id\");",
                  "tests[\"Response Body has waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                  "tests[\"Response Body has termsDocumentId\"] = responseBody.has(\"termsDocumentId\");",
                  "tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                "exec": [
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{UniqueClient}}\",\r\n  \"lastName\" : \"{{UniqueClient}}\",\r\n  \"middleName\" : \"{{UniqueClient}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n \r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Payment_Method_Client",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"payment_method_Client\", jsonData.id);",
                  "",
                  "  ",
                  "  tests[\"Response Body has Correct Payment method Id\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                  "  ",
                  "}",
                  "   ",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"{{name}}\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": [
            {
              "name": "Response_200",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                },
                "url": {
                  "raw": "{{payment_gateway_server}}/accountinfotoken",
                  "host": [
                    "{{payment_gateway_server}}"
                  ],
                  "path": [
                    "accountinfotoken"
                  ]
                }
              },
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "CreateClientAccount",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  "var today = new Date();",
                  "var dd = today.getDate();",
                  "var mm = today.getMonth()+1; //January is 0!",
                  "var yyyy = today.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "    dd = '0'+dd",
                  "} ",
                  "",
                  "if(mm<10) {",
                  "    mm = '0'+mm",
                  "} ",
                  "",
                  "today = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"today\", today);",
                  "",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randClientId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randClientId\", randClientId);",
                  "",
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var uniqueClient= stringGen(8)",
                  "postman.setEnvironmentVariable(\"UniqueClient\", \"Client \"+uniqueClient);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "",
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"accountIdClient\", jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"merchantId\", jsonData.merchantId);",
                  "postman.setEnvironmentVariable(\"paymentMethodIdC\", jsonData.account.paymentMethod.id);",
                  "postman.setEnvironmentVariable(\"clientId\", jsonData.clientId);",
                  "postman.setEnvironmentVariable(\"ClientName\",jsonData.account.name);",
                  "",
                  "    tests[\"Response Body has locationId\"] = responseBody.has(\"locationId\");",
                  "    tests[\"Response Body has clientId\"] = responseBody.has(\"clientId\");",
                  "    tests[\"Response Body has merchantId\"] = responseBody.has(\"merchantId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has billingDate\"] = responseBody.has(\"billingDate\");",
                  "    ",
                  "    tests[\"Response Body has paymentmethodId\"] = responseBody.has(\"id\");",
                  "   ",
                  "    ",
                  "    ",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"locationId\" : \"{{locationId}}\",\n \"clientId\" : \"{{$guid}}\",\n \"account\" : {\n   \"name\" : \"{{UniqueClient}}\",\n   \"email\" : \"{{randName}}@qa4life.com\",\n   \"phone\" : \"1234567890\",\n   \"sevaluation\" : \"{{seval}}\",\n   \"billingDate\" : \"{{today}}\",\n   \"paymentMethod\" : {\n     \"type\" : \"BANK_ACCOUNT\",\n     \"tokenId\" : \"{{payment_method_Client}}\"\n   }\n }\n}"
            },
            "url": {
              "raw": "{{URL}}/account/location",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "location"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update_Client_Account",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "653f2710-6fee-4d1a-801f-9533d654472e",
                "exec": [
                  "",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fe96e46d-4d1a-48b2-973f-80ab779f4185",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "   tests[\"Response Body has Client Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Client Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Client Email\"] = responseBody.has(\"email\");",
                  "    tests[\"Response Body has Client Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Client Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "        tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\r\n  \"account\" : {\r\n    \"name\" : \"{{randName}}\",\r\n    \"phone\" : \"8009578015\",\r\n    \"sevaluation\" : \"{{seval}}\",\r\n    \"paymentMethod\" : { \"type\":\"BANK_ACCOUNT\" }\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update_Client_Account",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "653f2710-6fee-4d1a-801f-9533d654472e",
                "exec": [
                  "",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fe96e46d-4d1a-48b2-973f-80ab779f4185",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"clientname\", jsonData.account.name);",
                  " tests[\"Response Body has Client Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Client Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Client Email\"] = responseBody.has(\"email\");",
                  "    tests[\"Response Body has Client Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Client Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "        tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\r\n  \"account\" : {\r\n    \"name\" : \"{{randName}}\",\r\n    \"phone\" : \"8009578015\",\r\n    \"sevaluation\" : \"{{seval}}\",\r\n    \"paymentMethod\" : { \"type\":\"BANK_ACCOUNT\" }\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ReviewClientAccount",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbc233f8-6c37-461c-b607-18945dda70be",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  " ",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/account/client/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "client",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ReviewClientAccounts",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbc233f8-6c37-461c-b607-18945dda70be",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  " ",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/account/client?name={{ClientName}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "client"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{ClientName}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update_Client_Payment_Method",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "757ab54d-2c1c-44ac-b894-0be5ea9ce0a4",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{    \"type\" : \"BANK_ACCOUNT\",\n     \"tokenId\":\"{{payment_method_id_client}}\"\n   }"
            },
            "url": {
              "raw": "{{URL}}/paymentMethod/{{paymentMethodIdC}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "paymentMethod",
                "{{paymentMethodIdC}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Payment_Method_Payor",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"payment_method_Payor\", jsonData.id);",
                  "",
                  "    tests[\"Response Body has Correct Payment method Id\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                  "}",
                  "   ",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"{{name}}\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": [
            {
              "name": "Response_200",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                },
                "url": {
                  "raw": "{{payment_gateway_server}}/accountinfotoken",
                  "host": [
                    "{{payment_gateway_server}}"
                  ],
                  "path": [
                    "accountinfotoken"
                  ]
                }
              },
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "CreatePayorAccount",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  "",
                  "",
                  "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randPayorId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"payoraccountId\", jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"paymentMethodIdP\", jsonData.account.paymentMethod.id);",
                  "postman.setEnvironmentVariable(\"payorId\", jsonData.payorId);",
                  "postman.setEnvironmentVariable(\"payorname\", jsonData.account.paymentMethod.name);",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \r\n   \"locationId\":\"{{locationId}}\",\r\n \"payorId\":\"{{randPayorId}}c6d-8d53-4553-b03b-59b8757d1734\",\r\n   \"account\":{  \r\n      \"name\":\"{{name}}\",\r\n      \"phone\":\"8009578010\",\r\n      \"sevaluation\":\"DAILY\",\r\n     \"billingDate\" : \"{{today}}\",\r\n       \"paymentMethod\" : {\r\n     \"type\" : \"BANK_ACCOUNT\",\r\n     \"tokenId\": \"{{payment_method_Payor}}\"\r\n    \r\n    }\r\n   }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update_Payor_Account",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "653f2710-6fee-4d1a-801f-9533d654472e",
                "exec": [
                  "",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fe96e46d-4d1a-48b2-973f-80ab779f4185",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "   ",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\r\n  \"account\" : {\r\n    \"name\" : \"{{randName}}\",\r\n    \"phone\" : \"8009578015\",\r\n    \"sevaluation\" : \"{{seval}}\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/{{payoraccountId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "{{payoraccountId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ReviewPayorAccount",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbc233f8-6c37-461c-b607-18945dda70be",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "    tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/account/payor/{{payorId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor",
                "{{payorId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ReviewPayorAccounts",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4abfbb71-ada5-403b-be54-0e6b7a05573d",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/account/payor?name={{payorname}}&page=0&size=2",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{payorname}}"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update_Payor_Account_Details",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f147ecdc-33e1-4141-9a78-6d89f9ba7e30",
                "exec": [
                  "",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3f5edbed-063f-4434-b3ca-b60a05f5d809",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "   ",
                  "    tests[\"Response Body has Billing Date\"] = responseBody.has(\"billingDate\");",
                  "postman.setEnvironmentVariable(\"payorname\", jsonData.account.name);",
                  "",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\t{\r\n\t\"account\" :\r\n\t\r\n\t{ \"name\" : \"{{UniqueClient}}\",\r\n\t\"email\" : \"{{randName}}@qa4life.com\", \r\n\t\"phone\" : \"8009578010\",\r\n\t\t\"sevaluation\" : \"SEMIANNUALLY\"\r\n\t}\r\n\t}"
            },
            "url": {
              "raw": "{{URL}}/account-details/account/{{payoraccountId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account-details",
                "account",
                "{{payoraccountId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update_ Payor_Payment _Method",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "757ab54d-2c1c-44ac-b894-0be5ea9ce0a4",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has Payor Payment Method Id\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payor Payment Method Type\"] = responseBody.has(\"type\");",
                  "",
                  "",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n     \"type\" : \"BANK_ACCOUNT\",\r\n     \"tokenId\":\"{{payment_method_id}}\"\r\n\r\n   }"
            },
            "url": {
              "raw": "{{URL}}/paymentMethod/{{paymentMethodIdP}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "paymentMethod",
                "{{paymentMethodIdP}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateLocationTaxRate",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  "var randEmpId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randEmpId\", randEmpId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "if (responseCode.code != 201) {",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if (responseCode.code === 201) {",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "   postman.setEnvironmentVariable(\"locationTaxRate\", jsonData.id);",
                  "   postman.setEnvironmentVariable(\"locationId\", jsonData.locationId);",
                  "   postman.setEnvironmentVariable(\"LocitemCategoryId\", jsonData.itemCategoryId);",
                  "    postman.setEnvironmentVariable(\"LocEmpId\", jsonData.empId);",
                  "",
                  "     tests[\"Response Body has correct location tax rate\"] = responseBody.has(\"taxRate\");",
                  "    tests[\"Response Body has taxRate\"] = responseBody.has(\"taxRate\");",
                  "    tests[\"Response Body has taxCode\"] = responseBody.has(\"taxCode\");",
                  "    tests[\"Response Body has isOverriden\"] = responseBody.has(\"isOverriden\");",
                  "    tests[\"Response Body has suggestedTaxRate\"] = responseBody.has(\"suggestedTaxRate\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"empId\" : \"{{$guid}}\",\r\n  \"taxRate\" : 20.25745,\r\n  \"taxCode\" : \"rtr\",\r\n  \"isOverriden\" : true,\r\n  \"suggestedTaxRate\" : 100,\r\n   \"itemCategoryId\" : \"{{$guid}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/tax-rate",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "tax-rate"
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetLocationTaxRate",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "88ec3e17-caed-4a53-90a2-594e86ce266d",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "   tests[\"Response Body has locTaxRateId Id\"] = responseBody.has(\"locTaxRateId\");",
                  "   tests[\"Response Body has empId \"] = responseBody.has(\"empId\");",
                  "   tests[\"Response Body has taxCode\"] = responseBody.has(\"taxCode\");",
                  "   tests[\"Response Body has suggestedTaxRate\"] = responseBody.has(\"suggestedTaxRate\");",
                  "   tests[\"Response Body has isOverriden\"] = responseBody.has(\"isOverriden\");",
                  "   tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/tax-rate/{{locationId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "tax-rate",
                "{{locationId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "UpdateTaxRate",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2f04f32f-0008-44f4-bcd5-3449e886523f",
                "exec": [
                  "var randEmpId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randEmpId\", randEmpId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1c536bf2-bd10-4687-9283-1a9d72b4392b",
                "exec": [
                  "if ( responseCode.code!=200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"id\", jsonData.id);",
                  "",
                  "tests[\"Response Body has correct location tax rate id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"id\")+\"\\\"\");",
                  "",
                  "tests[\"Response Body has taxRate\"] = responseBody.has(\"taxRate\");",
                  "tests[\"Response Body has taxCode\"] = responseBody.has(\"taxCode\");",
                  "tests[\"Response Body has isOverriden\"] = responseBody.has(\"isOverriden\");",
                  "tests[\"Response Body has suggestedTaxRate\"] = responseBody.has(\"suggestedTaxRate\");",
                  "tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "",
                "value": "",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n   \"empId\" : \"{{LocEmpId}}\",\r\n    \"taxRate\" : 30,\r\n    \"taxCode\" : \"rtr\",\r\n    \"isOverriden\": true,\r\n    \"suggestedTaxRate\": 50\r\n \r\n}\r\n "
            },
            "url": {
              "raw": "{{URL}}/tax-rate/{{locationId}}?itemCategoryId={{LocitemCategoryId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "tax-rate",
                "{{locationId}}"
              ],
              "query": [
                {
                  "key": "itemCategoryId",
                  "value": "{{LocitemCategoryId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "DeleteTaxRate",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2f04f32f-0008-44f4-bcd5-3449e886523f",
                "exec": [
                  "var randEmpId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randEmpId\", randEmpId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1c536bf2-bd10-4687-9283-1a9d72b4392b",
                "exec": [
                  "if ( responseCode.code!=200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Response Body has taxRate\"] = responseBody.has(\"taxRate\");",
                  "tests[\"Response Body has taxCode\"] = responseBody.has(\"taxCode\");",
                  "tests[\"Response Body has isOverriden\"] = responseBody.has(\"isOverriden\");",
                  "tests[\"Response Body has suggestedTaxRate\"] = responseBody.has(\"suggestedTaxRate\");",
                  "tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "",
                "type": "text",
                "value": "",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/tax-rate/{{locationId}}?itemCategoryId={{LocitemCategoryId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "tax-rate",
                "{{locationId}}"
              ],
              "query": [
                {
                  "key": "itemCategoryId",
                  "value": "{{LocitemCategoryId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateSubscriptionAccountId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var frequencyTypes = ['DAILY', 'WEEKLY', 'EVERY_OTHER_WEEK', 'MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY', 'SEMIANNUALLY']",
                  "",
                  "var frequency = frequencyTypes[Math.floor(Math.random() * frequencyTypes.length)];",
                  "postman.setEnvironmentVariable(\"frequency\", frequency);",
                  "",
                  "",
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2e379ca3-0bdb-4515-bdb5-942b84db6baa",
                "exec": [
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"subIdAccount\", jsonData.subId);",
                  "",
                  " tests[\"Response Body has planId\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has locationId\"] = responseBody.has(\"locationId\");",
                  "    tests[\"Response Body has memberId\"] = responseBody.has(\"memberId\");",
                  "    tests[\"Response Body has frequency\"] = responseBody.has(\"frequency\");",
                  "     tests[\"Response Body has invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "    tests[\"Response Body has expirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has autoRenew\"] = responseBody.has(\"autoRenew\");",
                  "    tests[\"Response Body has openEnded\"] = responseBody.has(\"openEnded\");",
                  "      tests[\"Response Body has renew Date\"] = responseBody.has(\"renewDate\");",
                  "    tests[\"Response Body has renew Frequency\"] = responseBody.has(\"renewFrequency\");",
                  "      tests[\"Response Body has renew Sub Id\"] = responseBody.has(\"renewSubId\");",
                  "    tests[\"Response Body has renew Amount\"] = responseBody.has(\"renewAmount\");",
                  "    ",
                  "    ",
                  "    ",
                  "    ",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"{{planId}}\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n      \"locationId\": \"{{locationId}}\",\n    \"memberIdList\": [\"{{memberId}}\"],\n        \"accountId\": \"{{payoraccountId}}\",\n\"planVersion\": 11,\n\"start\" : \"{{today}}\",\n\"invoiceDate\" : \"{{today}}\",\n\"duration\":\"10\",\n\"expirationDate\":\"{{RfutureDate}}\",\n\"frequency\" : \"{{frequency}}\",\n\"name\" : \"E2E_Testing\",\n\"autoRenew\":\"true\",\n\"renewalOptions\":\n\n{ \n\"renewDate\": \"{{RfutureDate}}\", \n\"renewFrequency\": \"{{frequency}}\", \n\"renewDuration\": \"4\", \n\"renewType\": \"TERM\", \n\"renewAmount\": 100, \n\"renewInvoiceDate\" : \"{{RfutureDate}}\" , \n\"renewExpireDate\": \"{{RfutureDate}}\"\n\t\n},\n\"openEnded\": false,\n\"renewType\" : \"TERM\", \n\n\"items\": [\n\n{ \"itemName\": \"dance\", \"itemId\": \"{{itemId}}\", \"version\": 1, \"price\": 200, \"discountCode\": 1234, \"discountAmount\": 10, \"amountRemaining\": 200, \"taxAmount\": 20, \"type\": \"PRODUCT\", \"quantity\": \"1\", \"itemCategoryId\": \"{{itemcategoryId}}\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get SubscriptionAccount",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subIdAccount}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subIdAccount}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateSubscriptionPaymentMethodId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var frequencyTypes = ['DAILY', 'WEEKLY', 'EVERY_OTHER_WEEK', 'MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY', 'SEMIANNUALLY']",
                  "",
                  "var frequency = frequencyTypes[Math.floor(Math.random() * frequencyTypes.length)];",
                  "postman.setEnvironmentVariable(\"frequency\", frequency);",
                  "",
                  "",
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2e379ca3-0bdb-4515-bdb5-942b84db6baa",
                "exec": [
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"subIdPayment\", jsonData.subId);",
                  "",
                  "tests[\"Response Body has correct subscriptionId\"] = responseBody.has(\"subId\");",
                  " tests[\"Response Body has planId\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has locationId\"] = responseBody.has(\"locationId\");",
                  "    tests[\"Response Body has memberId\"] = responseBody.has(\"memberId\");",
                  "    tests[\"Response Body has frequency\"] = responseBody.has(\"frequency\");",
                  "     tests[\"Response Body has invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "    tests[\"Response Body has expirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has autoRenew\"] = responseBody.has(\"autoRenew\");",
                  "    tests[\"Response Body has openEnded\"] = responseBody.has(\"openEnded\");",
                  "      tests[\"Response Body has renew Date\"] = responseBody.has(\"renewDate\");",
                  "    tests[\"Response Body has renew Frequency\"] = responseBody.has(\"renewFrequency\");",
                  "      tests[\"Response Body has renew Sub Id\"] = responseBody.has(\"renewSubId\");",
                  "    tests[\"Response Body has renew Amount\"] = responseBody.has(\"renewAmount\");",
                  "    ",
                  "    ",
                  "    ",
                  "    ",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"{{planId}}\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n      \"locationId\": \"{{locationId}}\",\n    \"memberIdList\": [\"39707e47-fc58-4195-ada0-e9880153ad9a\"],\n        \"accountId\": \"{{paymentMethodIdP}}\",\n\"planVersion\": 11,\n\"start\" : \"{{today}}\",\n\"invoiceDate\" : \"{{today}}\",\n\"duration\":\"10\",\n\"expirationDate\":\"{{RfutureDate}}\",\n\"frequency\" : \"{{frequency}}\",\n\"name\" : \"E2E_Testing\",\n\"autoRenew\":\"true\",\n\"renewalOptions\":\n\n{ \n\"renewDate\": \"{{RfutureDate}}\", \n\"renewFrequency\": \"{{frequency}}\", \n\"renewDuration\": \"4\", \n\"renewType\": \"TERM\", \n\"renewAmount\": 100, \n\"renewInvoiceDate\" : \"{{RfutureDate}}\" , \n\"renewExpireDate\": \"{{RfutureDate}}\"\n\t\n},\n\"openEnded\": false,\n\"renewType\" : \"TERM\", \n\n\"items\": [\n\n{ \"itemName\": \"dance\", \"itemId\": \"{{itemId}}\", \"version\": 1, \"price\": 200, \"discountCode\": 1234, \"discountAmount\": 10, \"amountRemaining\": 200, \"taxAmount\": 20, \"type\": \"PRODUCT\", \"quantity\": \"1\", \"itemCategoryId\": \"{{itemcategoryId}}\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get SubscriptionPayment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Correct Payment Method price\"] = responseBody.has(\"price\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subIdPayment}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subIdPayment}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add_Member_Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "484d837e-6a4f-46aa-a14a-79f56bdd78ca",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"subId\",jsonData.subId);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Correct price\"] = responseBody.has(\"price\");",
                  "   ",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t \"memberId\" : \"{{memberId2}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subIdPayment}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subIdPayment}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Remove_Member_Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3ac00e9-bc2d-457a-b0b8-c703bda326bb",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "  ",
                  "  tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "       tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Correct price\"] = responseBody.has(\"price\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "",
                "type": "text",
                "value": "",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subIdPayment}}/member/{{memberId2}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subIdPayment}}",
                "member",
                "{{memberId2}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Invoice_Payor_AccountId",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7cc4b0be-b603-4b22-9f6a-18d684445c59",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "     postman.setEnvironmentVariable(\"invId\",jsonData.id);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct totalNetPrice\"] = responseBody.has(\"totalNetPrice\");",
                  "   tests[\"Response Body has totalDiscountAmount\"] = responseBody.has(\"totalDiscountAmount\");",
                  "       tests[\"Response Body has discountCode\"] = responseBody.has(\"discountCode\");",
                  "   ",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has  salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has  price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "    tests[\"Response Body has invoiceType\"] = responseBody.has(\"invoiceType\");",
                  "    tests[\"Response Body has invoiceNumber\"] = responseBody.has(\"invoiceNumber\");",
                  "    tests[\"Response Body has itemCategoryId\"] = responseBody.has(\"itemCategoryId\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n   \"locationId\":\"{{locationId}}\",\r\n   \"memberId\": \"{{memberId}}\",\r\n  \"accountId\": \"{{payoraccountId}}\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c74\",\r\n\"totalTax\": 0,\r\n\"totalAmount\": 0,\r\n\"totalDiscountAmount\": 0,\r\n\"totalNetPrice\": 40,\r\n\"items\": [\r\n\r\n{ \"itemName\": \"{{randName}}\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 200, \"discountCode\": 1234, \"discountAmount\": 10, \"amountRemaining\": 200, \"taxAmount\": 20, \"type\": \"PRODUCT\", \"quantity\": \"1\", \"itemCategoryId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c12\" }\r\n]\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor/invoice",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor",
                "invoice"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Invoice_Payor_PaymentId",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7cc4b0be-b603-4b22-9f6a-18d684445c59",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct totalNetPrice\"] = responseBody.has(\"totalNetPrice\");",
                  "   tests[\"Response Body has totalDiscountAmount\"] = responseBody.has(\"totalDiscountAmount\");",
                  "       tests[\"Response Body has discountCode\"] = responseBody.has(\"discountCode\");",
                  "   ",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has  salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has  price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "    tests[\"Response Body has invoiceType\"] = responseBody.has(\"invoiceType\");",
                  "    tests[\"Response Body has invoiceNumber\"] = responseBody.has(\"invoiceNumber\");",
                  "    tests[\"Response Body has itemCategoryId\"] = responseBody.has(\"itemCategoryId\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n   \"locationId\":\"{{locationId}}\",\r\n   \"memberId\": \"{{memberId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP}}\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c74\",\r\n\"totalTax\": 0,\r\n\"totalAmount\": 0,\r\n\"totalDiscountAmount\": 0,\r\n\"totalNetPrice\": 1000,\r\n\"items\": [\r\n\r\n{ \"itemName\": \"{{randName}}\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 200, \"discountCode\": 1234, \"discountAmount\": 10, \"amountRemaining\": 200, \"taxAmount\": 20, \"type\": \"PRODUCT\", \"quantity\": \"1\", \"itemCategoryId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c12\" }\r\n]\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor/invoice",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor",
                "invoice"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateAgreement",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"locationId\": \"{{locationId}}\",\r\n\"documentIdList\" : [ \"eaca4410-3686-4eda-87c3-1320d15e4b94\" ],\r\n\"memberIdList\" : [ \"{{memberId}}\"  ],\r\n\"subscriptionList\" : [ {\r\n\"primary\" : true,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"4\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"{{RfutureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{RfutureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 2554555, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n},\r\n{\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"4\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"{{RfutureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{RfutureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 3, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n}\r\n\r\n]\r\n\r\n}"
            },
            "url": {
              "raw": "{{URL}}/agreement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"statementId\", jsonData.statementId);",
                  "",
                  "tests[\"Response Body has statementAmount\"] = responseBody.has(\"statementAmount\");",
                  " ",
                  "   ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{payoraccountId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{payoraccountId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementId\", jsonData.statementId);",
                  "",
                  "if ( responseCode.code!=200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"statementIdA\", jsonData.statementId);",
                  "",
                  "tests[\"Response Body has correct locationId id\"] = responseBody.has(\"locationId\");",
                  "tests[\"Response Body has correct Statement id\"] = responseBody.has(\"\\\"statementId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"statementId\")+\"\\\"\");",
                  "tests[\"Response Body has correct accountId id\"] = responseBody.has(\"accountId\");",
                  "tests[\"Response Body has correct totalAmount\"] = responseBody.has(\"totalAmount\");",
                  "",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{     \"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{payoraccountId}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Payment_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"statementId\", jsonData.statementId);",
                  "",
                  " tests[\"Response Body has statementAmount\"] = responseBody.has(\"statementAmount\");",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Payment_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementId\", jsonData.statementId);",
                  "",
                  "if ( responseCode.code!=200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"statementId\", jsonData.statementId);",
                  "",
                  "",
                  "tests[\"Response Body has correct locationId id\"] = responseBody.has(\"locationId\");",
                  "tests[\"Response Body has correct Statement id\"] = responseBody.has(\"\\\"statementId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"statementId\")+\"\\\"\");",
                  "tests[\"Response Body has correct accountId id\"] = responseBody.has(\"accountId\");",
                  "tests[\"Response Body has correct totalAmount\"] = responseBody.has(\"totalAmount\");",
                  "",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{     \r\n  \"accountId\": \"{{paymentMethodIdP}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementId\", jsonData.statementId);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "    tests[\"Response Body has locationId\"] = responseBody.has(\"locationId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has amount\"] = responseBody.has(\"amount\");",
                  "    ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementId\", jsonData.statementId);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has settlementId\"] = responseBody.has(\"settlementId\");",
                  "    tests[\"Response Body has locationId\"] = responseBody.has(\"locationId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has amount\"] = responseBody.has(\"amount\");",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CancelSubscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3a520b09-e548-4fb9-bc18-a0f235977d46",
                "exec": [
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "tests[\"Response Body has correct subscription id\"] = responseBody.has(\"\\\"subId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"subId\")+\"\\\"\");",
                  "        ",
                  "     tests[\"Response Body has planId\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has locationId\"] = responseBody.has(\"locationId\");",
                  "  ",
                  "    tests[\"Response Body has frequency\"] = responseBody.has(\"frequency\");",
                  "     tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "      tests[\"Response Body has salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "     tests[\"Response Body has subCancellationDate\"] = responseBody.has(\"subCancellationDate\");",
                  "      tests[\"Response Body has itemCategoryId\"] = responseBody.has(\"itemCategoryId\");",
                  "     tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "      tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "     tests[\"Response Body has itemprice\"] = responseBody.has(\"price\");",
                  "",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f2d7024f-a490-4e92-9ee6-d22c5f85103c",
                "exec": [
                  "var CfutureDate = new Date();",
                  "var dd = CfutureDate.getDate();",
                  "var mm = CfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = CfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+1;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "CfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"CfutureDate\", CfutureDate);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"subCancellationDate\":\"{{CfutureDate}}\"\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subIdPayment}}/cancel",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subIdPayment}}",
                "cancel"
              ]
            }
          },
          "response": []
        },
        {
          "name": "UpdateCancelSubscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3a520b09-e548-4fb9-bc18-a0f235977d46",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "",
                  "tests[\"Response Body has correct subscription id\"] = responseBody.has(\"\\\"subId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"subId\")+\"\\\"\");",
                  "        ",
                  "",
                  " tests[\"Response Body has planId\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has locationId\"] = responseBody.has(\"locationId\");",
                  "   ",
                  "    tests[\"Response Body has frequency\"] = responseBody.has(\"frequency\");",
                  "     tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "      tests[\"Response Body has salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "     tests[\"Response Body has subCancellationDate\"] = responseBody.has(\"subCancellationDate\");",
                  "      tests[\"Response Body has itemCategoryId\"] = responseBody.has(\"itemCategoryId\");",
                  "     tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "      tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "     tests[\"Response Body has itemprice\"] = responseBody.has(\"price\");",
                  "",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"subCancellationDate\":\"{{CfutureDate}}\"\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subId}}/updateCancel",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subId}}",
                "updateCancel"
              ]
            }
          },
          "response": []
        },
        {
          "name": "RemoveCancelSubscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3a520b09-e548-4fb9-bc18-a0f235977d46",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "",
                  " tests[\"Response Body has planId\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has locationId\"] = responseBody.has(\"locationId\");",
                  "",
                  "    tests[\"Response Body has frequency\"] = responseBody.has(\"frequency\");",
                  "     tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "      tests[\"Response Body has salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "      tests[\"Response Body has itemCategoryId\"] = responseBody.has(\"itemCategoryId\");",
                  "     tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "      tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "     tests[\"Response Body has itemprice\"] = responseBody.has(\"price\");",
                  "",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subId}}/removeCancel",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subId}}",
                "removeCancel"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ExpireSubscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "58f8ed42-c97e-41e4-8af1-6eb1689c02ca",
                "exec": [
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "     ",
                  "      tests[\"Response Body has expirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    ",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"expirationDate\": \"{{CfutureDate}}\"\n}\n"
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subId}}/expire",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subId}}",
                "expire"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateFreezeSubscription",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var today = new Date();",
                  "var dd = today.getDate();",
                  "var mm = today.getMonth()+1; //January is 0!",
                  "var yyyy = today.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "    dd = '0'+dd",
                  "} ",
                  "",
                  "if(mm<10) {",
                  "    mm = '0'+mm",
                  "} ",
                  "",
                  "today = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"today\", today);",
                  "",
                  "////////////////////////////////////////////////////////////"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2e379ca3-0bdb-4515-bdb5-942b84db6baa",
                "exec": [
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"freezeid\", jsonData.id);",
                  "",
                  "tests[\"Response Body has correct freeze subscription id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"freezeid\")+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has freeze Start Date\"] = responseBody.has(\"freezeStartDate\");",
                  "     tests[\"Response Body has freeze End Date\"] = responseBody.has(\"freezeEndDate\");",
                  "      tests[\"Response Body has freeze Amount\"] = responseBody.has(\"freezeAmount\");",
                  "     ",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"freezeStartDate\" : \"{{today}}\",\n\"freezeEndDate\" : \"{{RfutureDate}}\",\n\"freezeAmount\": \"10\"\n\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/freeze/{{subId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "freeze",
                "{{subId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetFreezeSubscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "88ec3e17-caed-4a53-90a2-594e86ce266d",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "",
                  "      tests[\"Response Body has freeze Id\"] = responseBody.has(\"freezeSubId\");",
                  "      tests[\"Response Body has freeze Start Date\"] = responseBody.has(\"freezeStartDate\");",
                  "      tests[\"Response Body has freeze End Date\"] = responseBody.has(\"freezeEndDate\");",
                  "        tests[\"Response Body has freeze Amount\"] = responseBody.has(\"freezeAmount\");",
                  "       tests[\"Response Body has freeze status\"] = responseBody.has(\"freeze\");",
                  "      tests[\"Response Body has sales Employee Id\"] = responseBody.has(\"salesEmployeeId\");",
                  "      tests[\"Response Body has susbcription planId\"] = responseBody.has(\"planId\");",
                  "       tests[\"Response Body has location Id\"] = responseBody.has(\"locationId\");",
                  "      tests[\"Response Body has susbcription Start Date\"] = responseBody.has(\"start\");",
                  "      tests[\"Response Body has subscription expiration Date\"] = responseBody.has(\"expirationDate\");",
                  "        tests[\"Response Body has susbcription frequency\"] = responseBody.has(\"frequency\");",
                  "      tests[\"Response Body has subscription duration\"] = responseBody.has(\"duration\");",
                  "",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/subscription/freeze/{{freezeid}}/location/{{locationId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "freeze",
                "{{freezeid}}",
                "location",
                "{{locationId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "UpdateFreezeSubscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3a520b09-e548-4fb9-bc18-a0f235977d46",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "",
                  "      tests[\"Response Body has freeze Id\"] = responseBody.has(\"subId\");",
                  "      tests[\"Response Body has freeze Start Date\"] = responseBody.has(\"freezeStartDate\");",
                  "      tests[\"Response Body has freeze End Date\"] = responseBody.has(\"freezeEndDate\");",
                  "      tests[\"Response Body has freeze Amount\"] = responseBody.has(\"freezeAmount\");",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "54a2c361-e870-4681-888f-ff5238ab3e40",
                "exec": [
                  "var today = new Date();",
                  "var dd = today.getDate();",
                  "var mm = today.getMonth()+4; //January is 0!",
                  "var yyyy = today.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "    dd = '0'+dd",
                  "} ",
                  "",
                  "if(mm<10) {",
                  "    mm = '0'+mm",
                  "} ",
                  "",
                  "today = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"freezeFutureDate\", today);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"freezeEndDate\" : \"{{freezeFutureDate}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/freeze/{{freezeid}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "freeze",
                "{{freezeid}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "RemoveFreezeSubscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3f55d3c1-9ed8-4b03-b559-14fb344c451c",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "",
                  "      tests[\"Response Body has freeze Id\"] = responseBody.has(\"id\");",
                  "      tests[\"Response Body has freeze Start Date\"] = responseBody.has(\"freezeStartDate\");",
                  "      tests[\"Response Body has freeze End Date\"] = responseBody.has(\"freezeEndDate\");",
                  "      tests[\"Response Body has freeze Amount\"] = responseBody.has(\"freezeAmount\");",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\r\n\t\r\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/unfreeze/{{freezeid}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "unfreeze",
                "{{freezeid}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "UpdateSalesEmpId",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd4dbd97-2757-4f98-a858-ca305cd2e9bd",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "",
                  "    tests[\"Response Body has subId\"] = responseBody.has(\"subId\");",
                  "    tests[\"Response Body has planId\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has locationId\"] = responseBody.has(\"locationId\");",
                  "    tests[\"Response Body has frequency\"] = responseBody.has(\"frequency\");",
                  " ",
                  "    tests[\"Response Body has expirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has autoRenew\"] = responseBody.has(\"autoRenew\");",
                  "    tests[\"Response Body has openEnded\"] = responseBody.has(\"openEnded\");",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"salesEmployeeId\": \t\"{{subId}}\"\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subId}}"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}