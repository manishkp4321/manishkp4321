
{
  "info": {
    "_postman_id": "87de2bc2-167e-4b21-84ed-7d3d2465e5eb",
    "name": "Billing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authorization and Organization",
      "item": [
        {
          "name": "Authorization",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2b49fb61-2244-4ebe-8877-c12942d44c9b",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"authId\", jsonData.access_token);",
                  "   ",
                  "    tests[\"Response Body has Correct Token Type\"] = responseBody.has(\"\\\"token_type\\\":\\\"bearer\\\"\");",
                  "    tests[\"Response Body has Access Token\"] = responseBody.has(\"\\\"access_token\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"authId\")+\"\\\"\");",
                  "    tests[\"Response Body has Expiration Field\"] = responseBody.has(\"expires_in\");",
                  "    tests[\"Response Body has Correct Scope\"] = responseBody.has(\"\\\"scope\\\":\"+\"\\\"\"+jsonData.scope+\"\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Basic QVVUT01BVEVEX1RFU1RJTkc6dDNzdEBsbHRoM3RoMW5ncw=="
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "ABCFS-ORGANIZATION-ID",
                "value": "ee05d5fe-07fb-4ee7-91db-756263f95be9"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/token?client_id=AUTOMATED_TESTING&grant_type=client_credentials",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "token"
              ],
              "query": [
                {
                  "key": "client_id",
                  "value": "AUTOMATED_TESTING"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"orgId\", jsonData.id);",
                  "",
                  " tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  extension\"] = responseBody.has(\"extension\");",
                  "    tests[\"Response Body has signInLink\"] = responseBody.has(\"signInLink\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  websiteUrl\"] = responseBody.has(\"websiteUrl\");",
                  "    tests[\"Response Body has timezone\"] = responseBody.has(\"timezone\");",
                  "    tests[\"Response Body has language\"] = responseBody.has(\"language\");",
                  "    tests[\"Response Body has region\"] = responseBody.has(\"region\");",
                  "    tests[\"Response Body has variant\"] = responseBody.has(\"variant\");",
                  "    tests[\"Response Body has branding\"] = responseBody.has(\"branding\");",
                  "   ",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  "  text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var name= stringGen(5)",
                  "postman.setEnvironmentVariable(\"name\", \"Singh\"+name);",
                  "",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName1 = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName1);",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authId}}"
              },
              {
                "key": "",
                "value": "",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"    ABC {{name}}    \",\r\n  \"email\" : \"{{name}}@qa4life.com\",\r\n  \"phone\" : {\r\n    \"number\" : \"1234567\",\r\n    \"extension\" : \"38\"\r\n  },\r\n  \"signInLink\" : \"https://test.url.qa4life.com\",\r\n  \"websiteUrl\" : \"www.planet-fitness.com\",\r\n  \"timezone\" : \"US/Alaska\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"branding\" : {\r\n    \"colorScheme\" : {\r\n      \"primary\" : \"#666666\",\r\n      \"primaryHover\" : \"#666666\"\r\n    }\r\n  },\r\n  \"locale\" : {\r\n    \"language\" : \"UA\",\r\n    \"region\" : \"US\",\r\n    \"variant\" : \"MAC\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/organization",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "organization"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                  "   tests[\"Response Body has Correct description\"] = responseBody.has(\"description\");",
                  "   tests[\"Response Body has permissions\"] = responseBody.has(\"permissions\");",
                  "   tests[\"Response Body has  key\"] = responseBody.has(\"key\");",
                  "   ",
                  "   ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authId}}"
              },
              {
                "key": "ABCFS-ORGANIZATION-ID",
                "value": "{{orgId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\" : \"Admin/Owner\",\n  \"description\" : \"Owner\",\n  \"permissions\" : [ {\n    \"key\" : \"role:write\"\n  }, {\n    \"key\" : \"role:read\"\n  }, {\n    \"key\" : \"user:write\"\n  }, {\n    \"key\" : \"user:read\"\n  }, {\n    \"key\" : \"user:protected\"\n  }, {\n    \"key\" : \"catalog-item:read\"\n  }, {\n    \"key\" : \"catalog-item:write\"\n  }, {\n    \"key\" : \"application:write\"\n  }, {\n    \"key\" : \"application:read\"\n  }, {\n    \"key\" : \"developer:write\"\n  }, {\n    \"key\" : \"developer:read\"\n  }, {\n    \"key\" : \"organization:read\"\n  }, {\n    \"key\" : \"organization:write\"\n  }, {\n    \"key\" : \"employee:read\"\n  }, {\n    \"key\" : \"employee:write\"\n  }, {\n    \"key\" : \"location:read\"\n  }, {\n    \"key\" : \"location:write\"\n  }, {\n    \"key\" : \"member:read\"\n  }, {\n    \"key\" : \"member:write\"\n  },  {\n    \"key\" : \"email-template:write\"\n  }, {\n    \"key\" : \"account:write\"\n  },  {\n    \"key\" : \"role:protected\"\n  }, {\n    \"key\" : \"catalog-item:protected\"\n  }, {\n    \"key\" : \"application:protected\"\n  }, {\n    \"key\" : \"developer:protected\"\n  }, {\n    \"key\" : \"employee:protected\"\n  }, {\n    \"key\" : \"location:protected\"\n  }, {\n    \"key\" : \"member:protected\"\n  }, {\n    \"key\" : \"organization-search:read\"\n  } ]\n}"
            },
            "url": {
              "raw": "{{URL}}/role",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "role"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    ",
                  "    postman.setEnvironmentVariable(\"username\", jsonData.identity);",
                  "     tests[\"Response Body has Correct id\"] = responseBody.has(\"id\");",
                  "   tests[\"Response Body has Correct provider\"] = responseBody.has(\"provider\");",
                  "   tests[\"Response Body has identity\"] = responseBody.has(\"identity\");",
                  "   tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has lastName\"] = responseBody.has(\"lastName\");",
                  "   tests[\"Response Body has roleName\"] = responseBody.has(\"roleName\");",
                  "   tests[\"Response Body has disabled\"] = responseBody.has(\"disabled\");",
                  "   tests[\"Response Body has  hasPassword\"] = responseBody.has(\"hasPassword\");",
                  "   ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var uniqueClient= stringGen(8)",
                  "postman.setEnvironmentVariable(\"UniqueClient\", \"Client\"+uniqueClient);",
                  "",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName1 = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName1);",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authId}}"
              },
              {
                "key": "ABCFS-ORGANIZATION-ID",
                "value": "{{orgId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"identity\" : \"{{UniqueClient}}.doee@hello.com\",\r\n  \"firstName\" : \"John\",\r\n  \"lastName\" : \"Doe\",\r\n  \"roleName\" : \"Admin/Owner\",\r\n  \"password\" : \"Password123\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/user",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Authorization_User",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "24ec140a-d8be-4a2f-badd-47552560a90b",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
                  "    tests[\"Response Body has Correct token_type\"] = responseBody.has(\"token_type\");",
                  "   tests[\"Response Body has Correct scope\"] = responseBody.has(\"scope\");",
                  "   tests[\"Response Body has role\"] = responseBody.has(\"role\");",
                  "   tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has lastName\"] = responseBody.has(\"lastName\");",
                  "   tests[\"Response Body has user_id\"] = responseBody.has(\"user_id\");",
                  "   tests[\"Response Body has organization_id\"] = responseBody.has(\"organization_id\");",
                  "   tests[\"Response Body has  profiles\"] = responseBody.has(\"profiles\");",
                  "   ",
                  "   ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Basic QVVUT01BVEVEX1RFU1RJTkc6dDNzdEBsbHRoM3RoMW5ncw=="
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "ABCFS-ORGANIZATION-ID",
                "value": "{{orgId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/token?client_id=AUTOMATED_TESTING&grant_type=password&username={{username}}&password=Password123",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "token"
              ],
              "query": [
                {
                  "key": "client_id",
                  "value": "AUTOMATED_TESTING"
                },
                {
                  "key": "grant_type",
                  "value": "password"
                },
                {
                  "key": "username",
                  "value": "{{username}}"
                },
                {
                  "key": "password",
                  "value": "Password123"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Location",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"locationId\", jsonData.id);",
                  " tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  extension\"] = responseBody.has(\"extension\");",
                  "    tests[\"Response Body has cardAuthorizationDocId\"] = responseBody.has(\"cardAuthorizationDocId\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "   ",
                  "    tests[\"Response Body has locale\"] = responseBody.has(\"locale\");",
                  "    tests[\"Response Body has emailIdentityVerified\"] = responseBody.has(\"emailIdentityVerified\");",
                  "    tests[\"Response Body has organizationId\"] = responseBody.has(\"organizationId\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "    ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"ABC Location\",\r\n  \"email\" : \"noreply@qa4life.com\",\r\n  \"phone\" : {\r\n    \"number\" : \"1234567\",\r\n    \"extension\" : \"38\"\r\n  },\r\n  \"timezone\" : \"US/Alaska\",\r\n  \"cardAuthorizationDocId\" : \"4c3cae02-de89-4fd8-943b-77fe3ee8903b\",\r\n  \"waiverDocId\" : \"b4f09941-3d46-4954-8e54-408785723188\",\r\n  \"termsDocId\" : \"e2726d52-58a4-4cdd-8a6a-220feae90410\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"zipCode\" : \"72120\",\r\n    \"country\" : \"USA\",\r\n    \"state\" : \"AR\"\r\n  },\r\n  \"locale\" : {\r\n    \"language\" : \"UA\",\r\n    \"region\" : \"US\",\r\n    \"variant\" : \"MAC\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/location",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "location"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Member 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                  "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "72edf1d5-e2be-4dd3-85ca-0326897cc421",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var member= stringGen(8)",
                  "postman.setEnvironmentVariable(\"member\", \"member\"+member);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{member}}\",\r\n  \"lastName\" : \"{{member}}\",\r\n  \"middleName\" : \"{{member}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n  \"email\" : \"{{member}}.doe@qa4life.com\",\r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Member 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId2\", jsonData.id);",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                  "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4efccf22-7909-4b41-8393-67193abb713c",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var member2= stringGen(8)",
                  "postman.setEnvironmentVariable(\"member2\", \"member\"+member2);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{member2}}\",\r\n  \"lastName\" : \"{{member2}}\",\r\n  \"middleName\" : \"{{member2}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n  \"email\" : \"{{member2}}.doe@qa4life.com\",\r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Member 3",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId3\", jsonData.id);",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                  "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6fb6d384-d91f-4d60-9bc3-51ef6eafb234",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var member3= stringGen(8)",
                  "postman.setEnvironmentVariable(\"member3\", \"member\"+member3);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{member3}}\",\r\n  \"lastName\" : \"{{member3}}\",\r\n  \"middleName\" : \"{{member3}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n  \"email\" : \"{{member3}}@qa4life.com\",\r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Member 4",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId4\", jsonData.id);",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                  "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0ad15d10-56e4-44db-8a44-2694d24dbab0",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var member4= stringGen(8)",
                  "postman.setEnvironmentVariable(\"member4\", \"member\"+member4);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{member4}}\",\r\n  \"lastName\" : \"{{member4}}\",\r\n  \"middleName\" : \"{{member4}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n  \"email\" : \"{{member4}}.doe@qa4life.com\",\r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Member 5",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId5\", jsonData.id);",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                  "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3b774517-43e7-45f2-aee4-ec1d817a0a4c",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var member5= stringGen(8)",
                  "postman.setEnvironmentVariable(\"member5\", \"member\"+member5);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{member5}}\",\r\n  \"lastName\" : \"{{member5}}\",\r\n  \"middleName\" : \"{{member5}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n  \"email\" : \"{{member5}}.doe@qa4life.com\",\r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Member 6",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId6\", jsonData.id);",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                  "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3b774517-43e7-45f2-aee4-ec1d817a0a4c",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var member6= stringGen(8)",
                  "postman.setEnvironmentVariable(\"member6\", \"member\"+member6);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{member6}}\",\r\n  \"lastName\" : \"{{member6}}\",\r\n  \"middleName\" : \"{{member6}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n  \"email\" : \"{{member6}}.doe@qa4life.com\",\r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Member 7",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId7\", jsonData.id);",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                  "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3b774517-43e7-45f2-aee4-ec1d817a0a4c",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var member7= stringGen(8)",
                  "postman.setEnvironmentVariable(\"member7\", \"member\"+member7);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{member7}}\",\r\n  \"lastName\" : \"{{member7}}\",\r\n  \"middleName\" : \"{{member7}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n  \"email\" : \"{{member7}}.doe@qa4life.com\",\r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Member 8",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId8\", jsonData.id);",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                  "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3b774517-43e7-45f2-aee4-ec1d817a0a4c",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var member8= stringGen(8)",
                  "postman.setEnvironmentVariable(\"member8\", \"member\"+member8);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{member8}}\",\r\n  \"lastName\" : \"{{member8}}\",\r\n  \"middleName\" : \"{{member8}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n  \"email\" : \"{{member8}}.doe@qa4life.com\",\r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Member 9",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId9\", jsonData.id);",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                  "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3b774517-43e7-45f2-aee4-ec1d817a0a4c",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var member9= stringGen(8)",
                  "postman.setEnvironmentVariable(\"member9\", \"member\"+member9);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{member9}}\",\r\n  \"lastName\" : \"{{member9}}\",\r\n  \"middleName\" : \"{{member9}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n  \"email\" : \"{{member9}}.doe@qa4life.com\",\r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Member 10",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId10\", jsonData.id);",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                  "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3b774517-43e7-45f2-aee4-ec1d817a0a4c",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var member10= stringGen(8)",
                  "postman.setEnvironmentVariable(\"member10\", \"member\"+member10);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{member10}}\",\r\n  \"lastName\" : \"{{member10}}\",\r\n  \"middleName\" : \"{{member10}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n  \"email\" : \"{{member10}}.doe@qa4life.com\",\r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Member 11",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId11\", jsonData.id);",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                  "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3b774517-43e7-45f2-aee4-ec1d817a0a4c",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var member11= stringGen(8)",
                  "postman.setEnvironmentVariable(\"member11\", \"member\"+member11);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{member11}}\",\r\n  \"lastName\" : \"{{member11}}\",\r\n  \"middleName\" : \"{{member11}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n  \"email\" : \"{{member11}}.doe@qa4life.com\",\r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "member"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Payment Method for Client and Payer",
      "item": [
        {
          "name": "Create_Payment_Method_Client",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"payment_method_id_client\", jsonData.id);",
                  "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                  "",
                  "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                  "   tests[\"Response Body has  accountHolderName\"] = responseBody.has(\"accountHolderName\");",
                  "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                  "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                  "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                  "",
                  "  ",
                  "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                  "}",
                  "   ",
                  "tests[\"Response code should be 200\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"monika Phoughat\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": [
            {
              "name": "Response_200",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                },
                "url": {
                  "raw": "{{payment_gateway_server}}/accountinfotoken",
                  "host": [
                    "{{payment_gateway_server}}"
                  ],
                  "path": [
                    "accountinfotoken"
                  ]
                }
              },
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create_Payment_Method_Payor 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"payment_method_id\", jsonData.id);",
                  "",
                  "   tests[\"Response Body has Payment Method  Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"payment_method_id\")+\"\\\"\");",
                  "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                  "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                  "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                  "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                  "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                  "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                  "}",
                  "   ",
                  "tests[\"Response code should be 200\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"monika Phoughat\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": [
            {
              "name": "Response_200",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                },
                "url": {
                  "raw": "{{payment_gateway_server}}/accountinfotoken",
                  "host": [
                    "{{payment_gateway_server}}"
                  ],
                  "path": [
                    "accountinfotoken"
                  ]
                }
              },
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create_Payment_Method_Payor 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"payment_method_id2\", jsonData.id);",
                  "",
                  "   ",
                  "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                  "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                  "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                  "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                  "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                  "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                  "}",
                  "   ",
                  "tests[\"Response code should be 200\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"monika Phoughat\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": [
            {
              "name": "Response_200",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                },
                "url": {
                  "raw": "{{payment_gateway_server}}/accountinfotoken",
                  "host": [
                    "{{payment_gateway_server}}"
                  ],
                  "path": [
                    "accountinfotoken"
                  ]
                }
              },
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create_Payment_Method_Payor 3",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"payment_method_id3\", jsonData.id);",
                  "",
                  "   ",
                  "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                  "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                  "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                  "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                  "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                  "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                  "}",
                  "   ",
                  "tests[\"Response code should be 200\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"monika Phoughat\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": [
            {
              "name": "Response_200",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                },
                "url": {
                  "raw": "{{payment_gateway_server}}/accountinfotoken",
                  "host": [
                    "{{payment_gateway_server}}"
                  ],
                  "path": [
                    "accountinfotoken"
                  ]
                }
              },
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create_Payment_Method_Payor 4",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"payment_method_id4\", jsonData.id);",
                  "",
                  "   ",
                  "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                  "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                  "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                  "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                  "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                  "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                  "}",
                  "   ",
                  "tests[\"Response code should be 200\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"monika Phoughat\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": [
            {
              "name": "Response_200",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                },
                "url": {
                  "raw": "{{payment_gateway_server}}/accountinfotoken",
                  "host": [
                    "{{payment_gateway_server}}"
                  ],
                  "path": [
                    "accountinfotoken"
                  ]
                }
              },
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create_Payment_Method_Payor 5",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"payment_method_id5\", jsonData.id);",
                  "",
                  "   ",
                  "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                  "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                  "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                  "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                  "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                  "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                  "}",
                  "   ",
                  "tests[\"Response code should be 200\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"monika Phoughat\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": [
            {
              "name": "Response_200",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                },
                "url": {
                  "raw": "{{payment_gateway_server}}/accountinfotoken",
                  "host": [
                    "{{payment_gateway_server}}"
                  ],
                  "path": [
                    "accountinfotoken"
                  ]
                }
              },
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create_Payment_Method_Payor 6",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"payment_method_id6\", jsonData.id);",
                  "",
                  "   ",
                  "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                  "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                  "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                  "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                  "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                  "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                  "}",
                  "   ",
                  "tests[\"Response code should be 200\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"monika Phoughat\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": [
            {
              "name": "Response_200",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                },
                "url": {
                  "raw": "{{payment_gateway_server}}/accountinfotoken",
                  "host": [
                    "{{payment_gateway_server}}"
                  ],
                  "path": [
                    "accountinfotoken"
                  ]
                }
              },
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create_Payment_Method_Payor 11",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"payment_method_id11\", jsonData.id);",
                  "",
                  "   ",
                  "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                  "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                  "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                  "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                  "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                  "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                  "}",
                  "   ",
                  "tests[\"Response code should be 200\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"monika Phoughat\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": [
            {
              "name": "Response_200",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                },
                "url": {
                  "raw": "{{payment_gateway_server}}/accountinfotoken",
                  "host": [
                    "{{payment_gateway_server}}"
                  ],
                  "path": [
                    "accountinfotoken"
                  ]
                }
              },
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "body": ""
            }
          ]
        }
      ]
    },
    {
      "name": "Billing On-Boarding",
      "item": [
        {
          "name": "Create Location Tax Rate",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  " tests[\"Response Body has Correct locationId\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct empId\"] = responseBody.has(\"empId\");",
                  "   tests[\"Response Body has taxRate\"] = responseBody.has(\"taxRate\");",
                  "   tests[\"Response Body has  taxCode\"] = responseBody.has(\"taxCode\");",
                  "    tests[\"Response Body has  isOverriden\"] = responseBody.has(\"isOverriden\");",
                  "    tests[\"Response Body has suggestedTaxRate\"] = responseBody.has(\"suggestedTaxRate\");",
                  "    tests[\"Response Body has  version\"] = responseBody.has(\"version\");",
                  "   ",
                  "   ",
                  "",
                  "",
                  "    ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"empId\" : \"cc40e83e-504c-4e3a-9868-3165fb67739e\",\r\n  \"taxRate\" : 20.25745,\r\n  \"taxCode\" : \"rtr\",\r\n  \"isOverriden\" : true,\r\n  \"suggestedTaxRate\" : 0\r\n}"
            },
            "url": {
              "raw": "{{URL}}/tax-rate",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "tax-rate"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateClientAccount",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e8b2e784-73c8-4d3e-a7a2-1b7e69cf587a",
                "exec": [
                  "var today = new Date();",
                  "var dd = today.getDate();",
                  "var mm = today.getMonth()+1; //January is 0!",
                  "var yyyy = today.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "    dd = '0'+dd",
                  "} ",
                  "",
                  "if(mm<10) {",
                  "    mm = '0'+mm",
                  "} ",
                  "",
                  "today = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"today\", today);",
                  "",
                  "",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randClientId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randClientId\", randClientId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var uniqueClient= stringGen(10)",
                  "postman.setEnvironmentVariable(\"UniqueClient\", \"Client \"+uniqueClient);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1f895b06-b44c-4457-80c7-721c46cb9ac2",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"accountIdClient\", jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"locationId\", jsonData.locationId);",
                  "postman.setEnvironmentVariable(\"clientId\", jsonData.clientId);",
                  "postman.setEnvironmentVariable(\"paymentMethodIdC\", jsonData.account.paymentMethod.id);",
                  "",
                  "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Client Id\"] = responseBody.has(\"clientId\");",
                  "   tests[\"Response Body has MerchantId\"] = responseBody.has(\"merchantId\");",
                  "   tests[\"Response Body has Client Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Client Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Client Email\"] = responseBody.has(\"email\");",
                  "    tests[\"Response Body has Client Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Client Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Client Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"locationId\" : \"{{locationId}}\",\n \"clientId\" : \"{{$guid}}\",\n \"account\" : {\n   \"name\" : \"{{UniqueClient}}\",\n   \"email\" : \"{{randName}}@qa4life.com\",\n   \"phone\" : \"1234567890\",\n   \"sevaluation\" : \"{{seval}}\",\n   \"billingDate\" : \"{{today}}\",\n   \"paymentMethod\" : {    \"type\" : \"BANK_ACCOUNT\",\n     \"tokenId\":\"{{payment_method_id_client}}\",\n     \t\"sevaluation\" : \"DAILY\",\n  \"billingDate\" : \"{{today}}\"\n   }\n }\n}"
            },
            "url": {
              "raw": "{{URL}}/account/client",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "client"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreatePayorAccount 1",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "   ",
                  "postman.setEnvironmentVariable(\"accountIdpayor\", jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"payorId\", jsonData.payorId);",
                  "",
                  "postman.setEnvironmentVariable(\"paymentMethodIdP\", jsonData.account.paymentMethod.id);",
                  "",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \r\n   \"locationId\":\"{{locationId}}\",\r\n   \"payorId\":\"{{$guid}}\",\r\n   \"memberId\": \"{{memberId}}\",\r\n   \"account\":{  \r\n      \"name\":\"{{UniqueClient}}\",\r\n      \"phone\":\"8009578010\",\r\n      \"sevaluation\":\"WEEKLY\",\r\n     \"billingDate\" : \"{{today}}\",\r\n      \"paymentMethod\":{\r\n     \"type\" : \"BANK_ACCOUNT\",\r\n     \"tokenId\":\"{{payment_method_id}}\",\r\n     \t\"sevaluation\" : \"DAILY\",\r\n  \"billingDate\" : \"{{today}}\"\r\n\r\n   }\r\n   }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreatePayorAccount 2",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    ",
                  "postman.setEnvironmentVariable(\"accountIdpayor2\", jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"payorId2\", jsonData.payorId);",
                  "",
                  "postman.setEnvironmentVariable(\"paymentMethodIdP2\", jsonData.account.paymentMethod.id);",
                  "",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \r\n   \"locationId\":\"{{locationId}}\",\r\n   \"payorId\":\"{{$guid}}\",\r\n   \"memberId\": \"{{memberId2}}\",\r\n   \"account\":{  \r\n      \"name\":\"{{UniqueClient}}\",\r\n      \"phone\":\"8009578010\",\r\n      \"sevaluation\":\"WEEKLY\",\r\n     \"billingDate\" : \"{{today}}\",\r\n      \"paymentMethod\":{\r\n     \"type\" : \"BANK_ACCOUNT\",\r\n     \"tokenId\":\"{{payment_method_id2}}\",\r\n     \t\"sevaluation\" : \"DAILY\",\r\n  \"billingDate\" : \"{{today}}\"\r\n\r\n   }\r\n   }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreatePayorAccount 3",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    ",
                  "postman.setEnvironmentVariable(\"accountIdpayor3\", jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"payorId3\", jsonData.payorId);",
                  "",
                  "postman.setEnvironmentVariable(\"paymentMethodIdP3\", jsonData.account.paymentMethod.id);",
                  "",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \r\n   \"locationId\":\"{{locationId}}\",\r\n   \"payorId\":\"{{$guid}}\",\r\n   \"memberId\": \"{{memberId3}}\",\r\n   \"account\":{  \r\n      \"name\":\"{{UniqueClient}}\",\r\n      \"phone\":\"8009578010\",\r\n      \"sevaluation\":\"WEEKLY\",\r\n     \"billingDate\" : \"{{today}}\",\r\n      \"paymentMethod\":{\r\n     \"type\" : \"BANK_ACCOUNT\",\r\n     \"tokenId\":\"{{payment_method_id3}}\",\r\n     \t\"sevaluation\" : \"DAILY\",\r\n  \"billingDate\" : \"{{today}}\"\r\n\r\n   }\r\n   }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreatePayorAccount 4",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    ",
                  "postman.setEnvironmentVariable(\"accountIdpayor4\", jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"payorId4\", jsonData.payorId);",
                  "",
                  "postman.setEnvironmentVariable(\"paymentMethodIdP4\", jsonData.account.paymentMethod.id);",
                  "",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \r\n   \"locationId\":\"{{locationId}}\",\r\n   \"payorId\":\"{{$guid}}\",\r\n   \"memberId\": \"{{memberId4}}\",\r\n   \"account\":{  \r\n      \"name\":\"{{UniqueClient}}\",\r\n      \"phone\":\"8009578010\",\r\n      \"sevaluation\":\"WEEKLY\",\r\n     \"billingDate\" : \"{{today}}\",\r\n      \"paymentMethod\":{\r\n     \"type\" : \"BANK_ACCOUNT\",\r\n     \"tokenId\":\"{{payment_method_id4}}\",\r\n     \t\"sevaluation\" : \"DAILY\",\r\n  \"billingDate\" : \"{{today}}\"\r\n\r\n   }\r\n   }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreatePayorAccount 5",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    ",
                  "postman.setEnvironmentVariable(\"accountIdpayor5\", jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"payorId5\", jsonData.payorId);",
                  "",
                  "postman.setEnvironmentVariable(\"paymentMethodIdP5\", jsonData.account.paymentMethod.id);",
                  "",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \r\n   \"locationId\":\"{{locationId}}\",\r\n   \"payorId\":\"{{$guid}}\",\r\n   \"memberId\": \"{{memberId5}}\",\r\n   \"account\":{  \r\n      \"name\":\"{{UniqueClient}}\",\r\n      \"phone\":\"8009578010\",\r\n      \"sevaluation\":\"WEEKLY\",\r\n     \"billingDate\" : \"{{today}}\",\r\n      \"paymentMethod\":{\r\n     \"type\" : \"BANK_ACCOUNT\",\r\n     \"tokenId\":\"{{payment_method_id5}}\",\r\n     \t\"sevaluation\" : \"DAILY\",\r\n  \"billingDate\" : \"{{today}}\"\r\n\r\n   }\r\n   }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreatePayorAccount 6",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    ",
                  "postman.setEnvironmentVariable(\"accountIdpayor6\", jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"payorId6\", jsonData.payorId);",
                  "",
                  "postman.setEnvironmentVariable(\"paymentMethodIdP6\", jsonData.account.paymentMethod.id);",
                  "",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \r\n   \"locationId\":\"{{locationId}}\",\r\n   \"payorId\":\"{{$guid}}\",\r\n   \"memberId\": \"{{memberId6}}\",\r\n   \"account\":{  \r\n      \"name\":\"{{UniqueClient}}\",\r\n      \"phone\":\"8009578010\",\r\n      \"sevaluation\":\"WEEKLY\",\r\n     \"billingDate\" : \"{{today}}\",\r\n      \"paymentMethod\":{\r\n     \"type\" : \"BANK_ACCOUNT\",\r\n     \"tokenId\":\"{{payment_method_id6}}\",\r\n     \t\"sevaluation\" : \"DAILY\",\r\n  \"billingDate\" : \"{{today}}\"\r\n\r\n   }\r\n   }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreatePayorAccount 11",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    ",
                  "postman.setEnvironmentVariable(\"accountIdpayor11\", jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"payorId11\", jsonData.payorId);",
                  "",
                  "postman.setEnvironmentVariable(\"paymentMethodIdP11\", jsonData.account.paymentMethod.id);",
                  "",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \r\n   \"locationId\":\"{{locationId}}\",\r\n   \"payorId\":\"{{$guid}}\",\r\n   \"memberId\": \"{{memberId11}}\",\r\n   \"account\":{  \r\n      \"name\":\"{{UniqueClient}}\",\r\n      \"phone\":\"8009578010\",\r\n      \"sevaluation\":\"WEEKLY\",\r\n     \"billingDate\" : \"{{today}}\",\r\n      \"paymentMethod\":{\r\n     \"type\" : \"BANK_ACCOUNT\",\r\n     \"tokenId\":\"{{payment_method_id11}}\",\r\n     \t\"sevaluation\" : \"DAILY\",\r\n  \"billingDate\" : \"{{today}}\"\r\n\r\n   }\r\n   }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Calculate pricing",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "   ",
                  "",
                  "tests[\"Response Body has Correct itemCategoryId\"] = responseBody.has(\"itemCategoryId\");",
                  "   tests[\"Response Body has Correct totalTax\"] = responseBody.has(\"totalTax\");",
                  "   tests[\"Response Body has items\"] = responseBody.has(\"items\");",
                  "   tests[\"Response Body has totalAmount\"] = responseBody.has(\"totalAmount\");",
                  "    tests[\"Response Body has  price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has  taxAmount\"] = responseBody.has(\"taxAmount\");",
                  "    tests[\"Response Body has  totalNetAmount\"] = responseBody.has(\"totalNetAmount\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"items\" : [ 200.2, 500 ],\r\n  \"itemCategoryId\" : [ \"c6626502-cd5b-4c3f-9023-4a436282a75d\" ]\r\n}"
            },
            "url": {
              "raw": "{{URL}}/pricing",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "pricing"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Calculate pricing without item CatId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "   ",
                  "",
                  "   tests[\"Response Body has Correct totalTax\"] = responseBody.has(\"totalTax\");",
                  "   tests[\"Response Body has items\"] = responseBody.has(\"items\");",
                  "   tests[\"Response Body has totalAmount\"] = responseBody.has(\"totalAmount\");",
                  "    tests[\"Response Body has  price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has  taxAmount\"] = responseBody.has(\"taxAmount\");",
                  "    tests[\"Response Body has  totalNetAmount\"] = responseBody.has(\"totalNetAmount\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"items\" : [ 200.2, 500 ]\r\n}"
            },
            "url": {
              "raw": "{{URL}}/pricing",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "pricing"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Statement -Basic Subscription (Current )Account Id",
      "item": [
        {
          "name": "Basic CreateSubscription Current_date",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"subIdaccountcancel\",jsonData.subId);",
                  "postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"{{accountIdpayor}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"DAILY\",\n\"duration\": \"1\",\n\"name\": \"ankit\",\n\"autoRenew\": \"false\",\n\"openEnded\": false,\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c4df47ed-b09a-424b-9bfe-3b162013e595",
                "exec": [
                  "setTimeout(function(){}, [28000]);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4a6e88ee-d8f7-412f-88fc-0b30c2dc00f5",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "console.log(jsonData.statementAmount);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO]  Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{accountIdpayor}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{accountIdpayor}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply payment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8699b436-f69c-4969-b713-d6995a8069cd",
                "exec": [
                  "setTimeout(function(){}, [5000]);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bd4a87d9-bc02-4ee4-a722-789c7a35aa96",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"{{statementAmount}}\" \r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{accountIdpayor}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{accountIdpayor}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Statement -Basic Subscription (Past ) Account Id",
      "item": [
        {
          "name": "Basic CreateSubscription Past_date",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "",
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "  postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId2}}\"],\n\"accountId\": \"{{accountIdpayor2}}\",\n\"planVersion\": 11,\n\"start\": \"04-04-2019\",\n\"invoiceDate\": \"04-04-2019\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"DAILY\",\n\"duration\": \"2\",\n\"name\": \"ankit\",\n\"autoRenew\": \"false\",\n\"openEnded\": false,\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price*2 != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price *2== statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price*2);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "56fdf00e-20bf-4523-a1e4-ea81b1b80dbd",
                "exec": [
                  "//setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{accountIdpayor2}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{accountIdpayor2}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"{{statementAmount}}\" \r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{accountIdpayor2}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{accountIdpayor2}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Statement -Basic Subscription (Future )Account Id",
      "item": [
        {
          "name": "Basic CreateSubscription Future_date",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var subfutureDate = new Date();",
                  "var dd = subfutureDate.getDate()-1;",
                  "var mm = subfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = subfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+1;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "subfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"subfutureDate\", subfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  "",
                  "postman.setEnvironmentVariable(\"subIdFreeze\",jsonData.subId);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId3}}\"],\n\"accountId\": \"{{accountIdpayor3}}\",\n\"planVersion\": 11,\n\"start\": \"{{subfutureDate}}\",\n\"invoiceDate\": \"{{subfutureDate}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"DAILY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"false\",\n\"openEnded\": false,\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (statementAmount !==0)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(statementAmount-price);",
                  "    }",
                  "    ",
                  "    else if (statementAmount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(statementAmount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b24f47c9-45b9-44ce-9764-4d6f048bb372",
                "exec": [
                  "//setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{accountIdpayor3}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{accountIdpayor3}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Statement -OPEN-Ended Subscription (Current  )Account Id",
      "item": [
        {
          "name": "CreateSubscription_OPEN Acount Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  "    postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "   ",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "  ",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId4}}\"],\n\"accountId\": \"{{accountIdpayor4}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"frequency\": \"MONTHLY\",\n\"name\": \"ankit\",\n\n\"openEnded\": true,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 200, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "64fd1ab7-8113-4baf-99b9-3efb9939eaaf",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{accountIdpayor4}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{accountIdpayor4}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"{{statementAmount}}\" \r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{accountIdpayor4}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{accountIdpayor4}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Statement -OPEN-Ended Subscription (Past  )Account Id",
      "item": [
        {
          "name": "CreateSubscription_OPEN Acount Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  " ",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "   ",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "  ",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId5}}\"],\n\"accountId\": \"{{accountIdpayor5}}\",\n\"planVersion\": 11,\n\"start\": \"04-04-2019\",\n\"invoiceDate\": \"04-04-2019\",\n\"frequency\": \"ANNUALLY\",\n\"name\": \"ankit\",\n\n\"openEnded\": true,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 200, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "fa4f1bb1-8ac7-4d75-8c77-8646df68ed12",
                "exec": [
                  "//setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{accountIdpayor5}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{accountIdpayor5}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"{{statementAmount}}\" \r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{accountIdpayor5}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{accountIdpayor5}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Statement -OPEN-Ended Subscription(Future )Account Id",
      "item": [
        {
          "name": "CreateSubscription_OPEN Acount Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "   ",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "  ",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId6}}\"],\n\"accountId\": \"{{accountIdpayor6}}\",\n\"planVersion\": 11,\n\"start\": \"{{subfutureDate}}\",\n\"invoiceDate\": \"{{subfutureDate}}\",\n\"frequency\": \"ANNUALLY\",\n\"name\": \"ankit\",\n\n\"openEnded\": true,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 200, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (statementAmount !==0)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(statementAmount-price);",
                  "    }",
                  "    ",
                  "    else if (statementAmount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(statementAmount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2a14ae5c-74d2-4f2e-85a3-fd59ad556b78",
                "exec": [
                  "//setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{accountIdpayor6}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{accountIdpayor6}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Statement -RENEW Subscription (Current )Account Id",
      "item": [
        {
          "name": "CreateSubscription_Renew_Type_TERM",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+7;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  "    postman.setEnvironmentVariable(\"subIdaccount\",jsonData.subId);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"{{accountIdpayor}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"{{RfutureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{RfutureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "196f6d9d-b25d-4f1f-b1c0-851b49dfbf0a",
                "exec": [
                  "setTimeout(function(){}, [75000]);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8319800a-66a3-468d-9403-75bb85a9baf1",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{accountIdpayor}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{accountIdpayor}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"{{statementAmount}}\" \r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{accountIdpayor}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{accountIdpayor}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Statement -RENEW Subscription (Past ) Account Id",
      "item": [
        {
          "name": "CreateSubscription_Renew_Type_TERM",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var Ptoday = new Date();",
                  "var dd = Ptoday.getDate();",
                  "var mm = Ptoday.getMonth()+1; //January is 0!",
                  "var yyyy = Ptoday.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "    dd = '0'+dd",
                  "} ",
                  "",
                  "if(mm<8) {",
                  "    mm = '0'+mm",
                  "} ",
                  "",
                  "Ptoday = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"Ptoday\", Ptoday);",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "var BFfutureDate = new Date();",
                  "var dd = BFfutureDate.getDate();",
                  "var mm = BFfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = BFfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+1;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "BFfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"BFfutureDate\", BFfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId2}}\"],\n\"accountId\": \"{{accountIdpayor2}}\",\n\"planVersion\": 11,\n\"start\": \"03-31-2019\",\n\"invoiceDate\": \"03-31-2019\",\n\"expirationDate\": \"03-31-2019\",\n\"frequency\": \"DAILY\",\n\"duration\": \"1\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"{{Ptoday}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"1\", \"renewType\": \"TERM\", \"renewAmount\": 4000, \"renewInvoiceDate\" : \"{{Ptoday}}\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e42ff785-98c8-467f-bf4c-16706815f85f",
                "exec": [
                  "setTimeout(function(){}, [100000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{accountIdpayor2}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{accountIdpayor2}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"{{statementAmount}}\" \r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{accountIdpayor2}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{accountIdpayor2}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Statement -RENEW  Subscription  (Future  ) Account Id",
      "item": [
        {
          "name": "CreateSubscription_Renew_Type_TERM",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var BFfutureDate = new Date();",
                  "var dd = BFfutureDate.getDate();",
                  "var mm = BFfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = BFfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+1;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "BFfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"BFfutureDate\", BFfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "  postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId3}}\"],\n\"accountId\": \"{{accountIdpayor3}}\",\n\"planVersion\": 11,\n\"start\": \"{{subfutureDate}}\",\n\"invoiceDate\": \"{{subfutureDate}}\",\n\"expirationDate\": \"{{BFfutureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"{{subfutureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{subfutureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a9105302-6669-418a-8cea-68099146982c",
                "exec": [
                  "//setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d70637d9-1ec3-4f81-9af3-b8cafffb94f0",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (statementAmount !==0)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(statementAmount-price);",
                  "    }",
                  "    ",
                  "    else if (statementAmount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(statementAmount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{accountIdpayor3}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{accountIdpayor3}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Statement -RENEW-OPEN Subscription(Current )Account Id",
      "item": [
        {
          "name": "CreateSubscription_Renew_Type_TERM",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var BFfutureDate = new Date();",
                  "var dd = BFfutureDate.getDate();",
                  "var mm = BFfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = BFfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+1;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "BFfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"BFfutureDate\", BFfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "     postman.setEnvironmentVariable(\"addMemberforSub\",jsonData.subId);",
                  "     postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId4}}\"],\n\"accountId\": \"{{accountIdpayor4}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{BFfutureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"{{today}}\", \"renewFrequency\": \"DAILY\", \"renewType\": \"OPEN\", \"renewAmount\": 4000, \"renewInvoiceDate\" : \"{{today}}\" }\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2e424539-0d15-471f-8cf4-14db5dd3030f",
                "exec": [
                  "setTimeout(function(){}, [60000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{accountIdpayor4}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{accountIdpayor4}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"{{statementAmount}}\" \r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{accountIdpayor4}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{accountIdpayor4}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Statement - Invoice Payer Account - Account Id",
      "item": [
        {
          "name": "Invoice payor Account_account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7cc4b0be-b603-4b22-9f6a-18d684445c59",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "  postman.setEnvironmentVariable(\"invoiceID\", jsonData.id);",
                  "postman.setEnvironmentVariable(\"amount\", jsonData.totalAmount);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct totalNetPrice\"] = responseBody.has(\"totalNetPrice\");",
                  "   tests[\"Response Body has totalDiscountAmount\"] = responseBody.has(\"totalDiscountAmount\");",
                  "       tests[\"Response Body has discountCode\"] = responseBody.has(\"discountCode\");",
                  "   ",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has  salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has  price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "    tests[\"Response Body has invoiceType\"] = responseBody.has(\"invoiceType\");",
                  "    tests[\"Response Body has invoiceNumber\"] = responseBody.has(\"invoiceNumber\");",
                  "    tests[\"Response Body has itemCategoryId\"] = responseBody.has(\"itemCategoryId\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n   \"locationId\":\"{{locationId}}\",\r\n   \"memberId\": \"{{memberId5}}\",\r\n\"accountId\": \"{{accountIdpayor5}}\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c74\",\r\n\"totalTax\": 0,\r\n\"totalAmount\": 400,\r\n\"totalDiscountAmount\": 0,\r\n\"totalNetPrice\": 0,\r\n\"items\": [\r\n\r\n{ \"itemName\": \"{{randName}}\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 200, \"discountCode\": 1234, \"discountAmount\": 10, \"amountRemaining\": 200, \"taxAmount\": 20, \"type\": \"PRODUCT\", \"quantity\": \"1\", \"itemCategoryId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c12\" }\r\n]\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor/invoice",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor",
                "invoice"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var amount=postman.getEnvironmentVariable(\"amount\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (amount != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(amount);",
                  "    }",
                  "    ",
                  "    else if (amount == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(amount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "24061d10-777a-4a2b-8f36-8214ce93eb9d",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{accountIdpayor5}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{accountIdpayor5}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"{{statementAmount}}\" , \r\n\"invoiceId\":\"{{invoiceID}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{accountIdpayor5}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{accountIdpayor5}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Statement - Agreement(Single Subscription) - Account Id",
      "item": [
        {
          "name": "CreateAgreement Single",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGHIJKLMNO\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var agreementNumber= stringGen(11)",
                  "postman.setEnvironmentVariable(\"agreementNumber\",\"1234\" +agreementNumber);",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"price\",jsonData.subscriptionList[0].items[0].price);",
                  "    postman.setEnvironmentVariable(\"agreementNumber\", jsonData.agreementNumber);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"locationId\": \"{{locationId}}\",\r\n\"documentIdList\" : [ \"eaca4410-3686-4eda-87c3-1320d15e4b94\" ],\r\n\"memberIdList\" : [ {  \"memberId\" :\"{{memberId6}}\" ,\r\n\"primary\" : true} ],\r\n\"agreementNumber\" : \"{{agreementNumber}}\",\r\n\"subscriptionList\" : [ {\r\n\"primary\" : true,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId6}}\"],\r\n\"accountId\": \"{{accountIdpayor6}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"4\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"false\",\r\n\"openEnded\": false,\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]}]}"
            },
            "url": {
              "raw": "{{URL}}/agreement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "41c03d1e-6a09-4b00-aecd-8182852df045",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9205a505-4185-48c0-a8b5-65284a850dfc",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{accountIdpayor6}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{accountIdpayor6}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"{{statementAmount}}\" \r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{accountIdpayor6}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{accountIdpayor6}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Statement - Agreement(Single - Member Id List ) - Account Id",
      "item": [
        {
          "name": "CreateAgreement Single",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGHIJKLMNO\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var agreementNumber= stringGen(11)",
                  "postman.setEnvironmentVariable(\"agreementNumber\",\"5678\" +agreementNumber);",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "  postman.setEnvironmentVariable(\"price\",jsonData.subscriptionList[0].items[0].price);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"locationId\": \"{{locationId}}\",\r\n\"documentIdList\" : [ \"eaca4410-3686-4eda-87c3-1320d15e4b94\" ],\r\n\"memberIdList\" : [ {\r\n    \"memberId\" : \"{{memberId}}\",\r\n    \"primary\" : true\r\n  },{\r\n    \"memberId\" : \"{{memberId7}}\",\r\n    \"primary\" : false\r\n  },{\r\n    \"memberId\" : \"{{memberId8}}\",\r\n    \"primary\" : false\r\n  },{\r\n    \"memberId\" : \"{{memberId9}}\",\r\n    \"primary\" : false\r\n  },\r\n {\r\n    \"memberId\" : \"{{memberId10}}\",\r\n    \"primary\" : false\r\n  }],\r\n\"agreementNumber\" : \"{{agreementNumber}}\",\r\n\"subscriptionList\" : [ {\r\n\"primary\" : true,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{accountIdpayor}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"4\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"false\",\r\n\"openEnded\": false,\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]}]}"
            },
            "url": {
              "raw": "{{URL}}/agreement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5530e282-01c5-448d-8e0e-40be4339a92d",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bc9315b7-d9cf-4e76-a45e-9b9affce2c43",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{accountIdpayor}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{accountIdpayor}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"{{statementAmount}}\" \r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{accountIdpayor}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{accountIdpayor}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Statement - Agreement (Multiple Subscriptions) - Account Id",
      "item": [
        {
          "name": "CreateAgreement account Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGHIJKLMNO\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var agreementNumber= stringGen(11)",
                  "postman.setEnvironmentVariable(\"agreementNumber\",\"9012\" +agreementNumber);",
                  "",
                  "",
                  "",
                  "var renewfutureDate = new Date();",
                  "var dd = renewfutureDate.getDate();",
                  "var mm = renewfutureDate.getMonth()+2; //January is 0!",
                  "var yyyy = renewfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+3;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "renewfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"renewfutureDate\", renewfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "  ",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"locationId\": \"{{locationId}}\",\r\n\"documentIdList\" : [ \"eaca4410-3686-4eda-87c3-1320d15e4b94\" ],\r\n\"memberIdList\" : [ {  \"memberId\" :\"{{memberId}}\" ,\r\n\"primary\" : true} ],\r\n\"agreementNumber\" : \"{{agreementNumber}}\",\r\n\"subscriptionList\" : [ {\r\n\"primary\" : true,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{accountIdpayor}}\",\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"DAILY\",\r\n\"duration\": \"1\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"01-01-2020\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"01-01-2020\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 9, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{accountIdpayor}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"1\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"false\",\r\n\"openEnded\": false,\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\t\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{accountIdpayor}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"DAILY\",\r\n\"duration\": \"1\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"false\",\r\n\"openEnded\": false,\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{accountIdpayor}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"name\": \"ankit\",\r\n\r\n\"openEnded\": true,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{accountIdpayor}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"name\": \"ankit\",\r\n\r\n\"openEnded\": true,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\"primary\" : false,\t\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{accountIdpayor}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"frequency\": \"MONTHLY\",\r\n\"name\": \"ankit\",\r\n\r\n\"openEnded\": true,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\t\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{accountIdpayor}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"MONTHLY\",\r\n\"duration\": \"1\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"01-01-2020\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"01-01-2020\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{accountIdpayor}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"ANNUALLY\",\r\n\"duration\": \"1\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"01-01-2020\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"01-01-2020\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{accountIdpayor}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{BFfutureDate}}\",\r\n\"frequency\": \"SEMIANNUALLY\",\r\n\"duration\": \"1\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"01-01-2020\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"01-01-2020\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{accountIdpayor}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{BFfutureDate}}\",\r\n\"frequency\": \"QUARTERLY\",\r\n\"duration\": \"1\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"01-01-2020\", \"renewFrequency\": \"DAILY\", \"renewType\": \"OPEN\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"01-01-2020\" }\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n}\r\n\r\n\r\n\r\n]\r\n}"
            },
            "url": {
              "raw": "{{URL}}/agreement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (statementAmount !==0)",
                  "    {",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(statementAmount=10);",
                  "    }",
                  "    ",
                  "    else if (statementAmount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(statementAmount!=10);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6e1563ff-7efb-4036-b86b-18876146f9d1",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{accountIdpayor}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{accountIdpayor}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"{{statementAmount}}\" \r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{accountIdpayor}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{accountIdpayor}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Down Payment - Invoice Payer Account - Account Id",
      "item": [
        {
          "name": "Invoice payor Account_account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7cc4b0be-b603-4b22-9f6a-18d684445c59",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "     postman.setEnvironmentVariable(\"invId\",jsonData.id);",
                  "     postman.setEnvironmentVariable(\"invamt\",jsonData.totalAmount);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct totalNetPrice\"] = responseBody.has(\"totalNetPrice\");",
                  "   tests[\"Response Body has totalDiscountAmount\"] = responseBody.has(\"totalDiscountAmount\");",
                  "       tests[\"Response Body has discountCode\"] = responseBody.has(\"discountCode\");",
                  "   ",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has  salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has  price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "    tests[\"Response Body has invoiceType\"] = responseBody.has(\"invoiceType\");",
                  "    tests[\"Response Body has invoiceNumber\"] = responseBody.has(\"invoiceNumber\");",
                  "    tests[\"Response Body has itemCategoryId\"] = responseBody.has(\"itemCategoryId\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n   \"locationId\":\"{{locationId}}\",\r\n   \"memberId\": \"{{memberId11}}\",\r\n  \"accountId\": \"{{accountIdpayor11}}\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c74\",\r\n\"totalTax\": 0,\r\n\"totalAmount\": 400,\r\n\"totalDiscountAmount\": 0,\r\n\"totalNetPrice\": 0,\r\n\"items\": [\r\n\r\n{ \"itemName\": \"{{randName}}\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 200, \"discountCode\": 1234, \"discountAmount\": 10, \"amountRemaining\": 200, \"taxAmount\": 20, \"type\": \"PRODUCT\", \"quantity\": \"1\", \"itemCategoryId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c12\" }\r\n]\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor/invoice",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor",
                "invoice"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"{{invamt}}\" \r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{accountIdpayor11}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{accountIdpayor11}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var invamt=postman.getEnvironmentVariable(\"invamt\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (statementAmount !=0 )",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(statementAmount!=0);",
                  "    }",
                  "    ",
                  "    else if (statementAmount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(statementAmount=0);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{accountIdpayor11}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{accountIdpayor11}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Down Payment - Create Subscription - Account Id",
      "item": [
        {
          "name": "CreateSubscription_Basic",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId11}}\"],\n\"accountId\": \"{{accountIdpayor11}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"{{RfutureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{RfutureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"{{price}}\" \r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{accountIdpayor11}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{accountIdpayor11}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (statementAmount !=0 )",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(statementAmount!=0);",
                  "    }",
                  "    ",
                  "    else if (statementAmount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(statementAmount=0);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "56d488e7-1ea7-4f0a-bacb-57547d743a0d",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{accountIdpayor11}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{accountIdpayor11}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Settlement -Basic Subscription (Current ) Payment MethodId",
      "item": [
        {
          "name": "Basic CreateSubscription Current_date",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"subIdFreeze\",jsonData.subId);",
                  "postman.setEnvironmentVariable(\"priceP\",jsonData.items[0].price);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"{{paymentMethodIdP}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"false\",\n\"openEnded\": false,\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Payment Method_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "console.log(jsonData.statementAmount);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO]  Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price );",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "675ab875-1d25-400d-8a0f-7b554ec500da",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Payment Method_id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "console.log(jsonData.statementAmount);",
                  "postman.setEnvironmentVariable(\"totalAmount\",jsonData.totalAmount);",
                  "postman.setEnvironmentVariable(\"statementId\",jsonData.statementId);",
                  "var totalAmount = postman.getEnvironmentVariable(\"totalAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO]  Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != totalAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price!=totalAmount);",
                  "    }",
                  "    ",
                  "    else if (price == totalAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(totalAmount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f36c8509-15fb-4e21-9354-fddc509a3ea1",
                "exec": [
                  "setTimeout(function(){}, [5000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{     \"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "console.log(jsonData.statementAmount);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO]  Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(amount!=price);",
                  "    }",
                  "    ",
                  "    else if (price == amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(amount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "fe5d6cfa-c4f3-44af-b650-f27966168052",
                "exec": [
                  "setTimeout(function(){}, [250000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "console.log(jsonData.statementAmount);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO]  Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    if (price != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(amount!=price);",
                  "    }",
                  "    ",
                  "    else if (price == amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(amount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9f98873f-d2ed-4bfb-8359-2afeab995680",
                "exec": [
                  "setTimeout(function(){}, [15000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Settlement-Basic Subscription (Past )Payment Method Id",
      "item": [
        {
          "name": "Basic CreateSubscription Past_date",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+4;",
                  "if(mm>10)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"priceP\",jsonData.items[0].price);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId2}}\"],\n\"accountId\": \"{{paymentMethodIdP2}}\",\n\"planVersion\": 11,\n\"start\": \"05-04-2019\",\n\"invoiceDate\": \"05-04-2019\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"DAILY\",\n\"duration\": \"1\",\n\"name\": \"ankit\",\n\"autoRenew\": \"false\",\n\"openEnded\": false,\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Payment Method_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var priceP=postman.getEnvironmentVariable(\"priceP\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (priceP*2 != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(priceP);",
                  "    }",
                  "    ",
                  "    else if (priceP *2== statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(priceP*2);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b40b1572-d24f-473a-bf7c-128642ec70e6",
                "exec": [
                  "//setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP2}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP2}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Payment Method_Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "62d5bb3f-47f3-4bb4-b84f-f1a527a9bbb5",
                "exec": [
                  "//setTimeout(function(){}, [15000]);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2d47a650-0759-4cf0-9f9d-5746939fee4e",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"totalAmount\",jsonData.totalAmount);",
                  "postman.setEnvironmentVariable(\"statementId\",jsonData.statementId);",
                  "var totalAmount = postman.getEnvironmentVariable(\"totalAmount\");",
                  "var priceP=postman.getEnvironmentVariable(\"priceP\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (priceP*2 != totalAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(priceP);",
                  "    }",
                  "    ",
                  "    else if (priceP *2== totalAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(priceP*2);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{     \"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP2}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "console.log(jsonData.statementAmount);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var priceP=postman.getEnvironmentVariable(\"priceP\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO]  Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (priceP*2 != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(priceP);",
                  "    }",
                  "    ",
                  "    else if (priceP *2== amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(priceP*2);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4a4f69b4-e166-4383-ba1e-e6563404ba81",
                "exec": [
                  "setTimeout(function(){}, [200000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "console.log(jsonData.statementAmount);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var priceP=postman.getEnvironmentVariable(\"priceP\");",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO]  Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    if (priceP*2 != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(priceP);",
                  "    }",
                  "    ",
                  "    else if (priceP *2== amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(priceP*2);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "78153b46-c605-4fa9-93d9-003b9ed29734",
                "exec": [
                  "setTimeout(function(){}, [15000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Settlement-Basic Subscription (Future ) Payment Method Id",
      "item": [
        {
          "name": "Basic CreateSubscription Future_date",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var subfutureDate = new Date();",
                  "var dd = subfutureDate.getDate()-1;",
                  "var mm = subfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = subfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+1;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "subfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"subfutureDate\", subfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId3}}\"],\n\"accountId\": \"{{paymentMethodIdP3}}\",\n\"planVersion\": 11,\n\"start\": \"{{subfutureDate}}\",\n\"invoiceDate\": \"{{subfutureDate}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"DAILY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"false\",\n\"openEnded\": false,\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Payment Method_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (statementAmount !==0)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(statementAmount-price);",
                  "    }",
                  "    ",
                  "    else if (statementAmount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(statementAmount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "891b19c8-e377-4c69-a7f8-d684decd5295",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP3}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP3}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Payment Method_id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"totalAmount\",jsonData.totalAmount);",
                  "var totalAmount = postman.getEnvironmentVariable(\"totalAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "postman.setEnvironmentVariable(\"statementId\",jsonData.statementId);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (totalAmount !==0)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(totalAmount-price);",
                  "    }",
                  "    ",
                  "    else if (totalAmount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(totalAmount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5e1cc53d-097e-4737-ae08-d63328c87137",
                "exec": [
                  "setTimeout(function(){}, [15000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{     \"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP3}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (amount !==0)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(amount-price);",
                  "    }",
                  "    ",
                  "    else if (amount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(amount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5efd31f6-9d3f-4e79-8556-3da243adb6dd",
                "exec": [
                  "setTimeout(function(){}, [200000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    if (amount !==0)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(amount-price);",
                  "    }",
                  "    ",
                  "    else if (amount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(amount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c327441f-c0b5-4a48-8450-ef79a2b19e09",
                "exec": [
                  "setTimeout(function(){}, [15000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Settlement-OPEN-Ended Subscription (Current )Payment MethodId",
      "item": [
        {
          "name": "CreateSubscription_OPEN Payment Method Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "  postman.setEnvironmentVariable(\"addMemberforSub\",jsonData.subId);",
                  "  postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "   ",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "  ",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId4}}\"],\n\"accountId\": \"{{paymentMethodIdP4}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"frequency\": \"WEEKLY\",\n\"name\": \"ankit\",\n\n\"openEnded\": true,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 200, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Payment Method_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "62d9ea2c-90e7-49c3-a4e9-f6102f557b3c",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP4}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP4}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Pyment Method_id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"totalAmount\",jsonData.totalAmount);",
                  "var totalAmount = postman.getEnvironmentVariable(\"totalAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "postman.setEnvironmentVariable(\"statementId\",jsonData.statementId);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != totalAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == totalAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "871c08d7-62f5-49e5-b8a9-1bda9c89acc4",
                "exec": [
                  "setTimeout(function(){}, [15000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{     \"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP4}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "console.log(jsonData.statementAmount);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO]  Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(amount!=price);",
                  "    }",
                  "    ",
                  "    else if (price == amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(amount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "00750e7e-9d6c-4d54-b979-e78bd9ab46f8",
                "exec": [
                  "setTimeout(function(){}, [250000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "console.log(jsonData.statementAmount);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO]  Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    if (price != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(amount!=price);",
                  "    }",
                  "    ",
                  "    else if (price == amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(amount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "416d5214-5551-4122-b36c-df6cf0d83d72",
                "exec": [
                  "setTimeout(function(){}, [15000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Settlement-OPEN-Ended Subscription (Past  )Payment Method Id",
      "item": [
        {
          "name": "CreateSubscription_OPEN payment Method Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "     postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "   ",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "  ",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId5}}\"],\n\"accountId\": \"{{paymentMethodIdP5}}\",\n\"planVersion\": 11,\n\"start\": \"03-04-2019\",\n\"invoiceDate\": \"03-04-2019\",\n\"frequency\": \"ANNUALLY\",\n\"name\": \"ankit\",\n\n\"openEnded\": true,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 200, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Payment Method_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price!= statementAmount);",
                  "    }",
                  "    ",
                  "    else if (price == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0c3ad868-3098-41b4-bae2-672d621d1a8e",
                "exec": [
                  "//setTimeout(function(){}, [40000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP5}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP5}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Payment Method_id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"totalAmount\",jsonData.totalAmount);",
                  "var totalAmount = postman.getEnvironmentVariable(\"totalAmount\");",
                  "postman.setEnvironmentVariable(\"statementId\",jsonData.statementId);",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != totalAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price!= totalAmount);",
                  "    }",
                  "    ",
                  "    else if (price == totalAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "901c3057-61da-4fb5-89bf-02a2ec4cf89d",
                "exec": [
                  "//setTimeout(function(){}, [40000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{     \"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP5}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0b8e4b2a-61f9-4e96-82a5-ea344f8efade",
                "exec": [
                  "setTimeout(function(){}, [200000]);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "197fd788-9cb4-4ad8-a49f-37f167e240f4",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "console.log(jsonData.statementAmount);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO]  Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price*2 != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price*2== amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(price*2);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "console.log(jsonData.statementAmount);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO]  Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    if (price*2 != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price*2== amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(price*2);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bc60533d-3877-4cab-93f5-47907d9a769c",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Settlement -OPEN-Ended Subscription(Future )Payment method Id",
      "item": [
        {
          "name": "CreateSubscription_OPEN Payment Method Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "     postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  "   ",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "   ",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "  ",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId6}}\"],\n\"accountId\": \"{{paymentMethodIdP6}}\",\n\"planVersion\": 11,\n\"start\": \"{{subfutureDate}}\",\n\"invoiceDate\": \"{{subfutureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"name\": \"ankit\",\n\n\"openEnded\": true,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 200, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Paymnet Method_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (statementAmount !==0)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(statementAmount-price);",
                  "    }",
                  "    ",
                  "    else if (statementAmount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(statementAmount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4ee184c2-8b39-4ec2-bf0d-d05bd23ea742",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP6}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP6}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Payment Method_id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"totalAmount\",jsonData.totalAmount);",
                  "var totalAmount = postman.getEnvironmentVariable(\"totalAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "postman.setEnvironmentVariable(\"statementId\",jsonData.statementId);",
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (totalAmount !==0)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(totalAmount-price);",
                  "    }",
                  "    ",
                  "    else if (totalAmount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(totalAmount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c353709e-8251-4ebe-b0f0-1b0042c80f0c",
                "exec": [
                  "setTimeout(function(){}, [15000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{     \"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP6}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (amount !==0)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(amount-price);",
                  "    }",
                  "    ",
                  "    else if (amount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(amount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9eddcbd8-8cf3-4e4f-a71f-a76b55d005c6",
                "exec": [
                  "setTimeout(function(){}, [200000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    if (amount !==0)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(amount-price);",
                  "    }",
                  "    ",
                  "    else if (amount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(amount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "98057c01-24fe-4e83-92f4-9c09143999a1",
                "exec": [
                  "setTimeout(function(){}, [15000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Settlement -RENEW Subscription (Current )Payment Method Id",
      "item": [
        {
          "name": "CreateSubscription_Renew_Type_TERM",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+7;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "  ",
                  "postman.setEnvironmentVariable(\"addMemberforSub\",jsonData.subId);",
                  " postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"{{paymentMethodIdP}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"{{RfutureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{RfutureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Payment Method Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "38cae8f8-853e-401d-806a-afd2a6390d2e",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Payment Method Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"totalAmount\",jsonData.totalAmount);",
                  "var totalAmount = postman.getEnvironmentVariable(\"totalAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "postman.setEnvironmentVariable(\"statementId\",jsonData.statementId);",
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != totalAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == totalAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e02b430f-4e41-4e71-b6fc-eb8aafba7bfb",
                "exec": [
                  "setTimeout(function(){}, [15000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{     \"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "console.log(jsonData.statementAmount);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO]  Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(amount!=price);",
                  "    }",
                  "    ",
                  "    else if (price == amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(amount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "504e197b-ecbb-4695-83e9-476cba4fe1ac",
                "exec": [
                  "setTimeout(function(){}, [200000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "console.log(jsonData.statementAmount);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO]  Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    if (price != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(amount!=price);",
                  "    }",
                  "    ",
                  "    else if (price == amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(amount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "633a6d35-9448-4f89-90c7-a2af9a37b2d4",
                "exec": [
                  "setTimeout(function(){}, [15000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Settlement -RENEW Subscription (Past ) Payment Method Id",
      "item": [
        {
          "name": "CreateSubscription_Renew_Type_TERM",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var BFfutureDate = new Date();",
                  "var dd = BFfutureDate.getDate();",
                  "var mm = BFfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = BFfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+1;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "BFfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"BFfutureDate\", BFfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId2}}\"],\n\"accountId\": \"{{paymentMethodIdP2}}\",\n\"planVersion\": 11,\n\"start\": \"03-31-2019\",\n\"invoiceDate\": \"03-31-2019\",\n\"expirationDate\": \"03-31-2019\",\n\"frequency\": \"DAILY\",\n\"duration\": \"1\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"{{Ptoday}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"1\", \"renewType\": \"TERM\", \"renewAmount\": 4000, \"renewInvoiceDate\" : \"{{Ptoday}}\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Payment Method_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " if (price != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong statement Amount\"] = responseBody.has(price!= statementAmount);",
                  "    }",
                  "    ",
                  "    else if (price== statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "tests[\"Response Body has statementAmount\"] = responseBody.has(\"statementAmount\");",
                  " ",
                  "   ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b4dc710e-760d-4c46-a156-b7d7a3bae411",
                "exec": [
                  "setTimeout(function(){}, [80000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP2}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP2}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Payment Method_id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "postman.setEnvironmentVariable(\"totalAmount\",jsonData.totalAmount);",
                  "postman.setEnvironmentVariable(\"statementId\",jsonData.statementId);",
                  "var totalAmount = postman.getEnvironmentVariable(\"totalAmount\");",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " if (price != totalAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price!= totalAmount);",
                  "    }",
                  "    ",
                  "    else if (price== totalAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "",
                  " ",
                  "   ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "901c3057-61da-4fb5-89bf-02a2ec4cf89d",
                "exec": [
                  "setTimeout(function(){}, [40000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{     \"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP2}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0b8e4b2a-61f9-4e96-82a5-ea344f8efade",
                "exec": [
                  "setTimeout(function(){}, [200000]);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "197fd788-9cb4-4ad8-a49f-37f167e240f4",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "console.log(jsonData.statementAmount);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO]  Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price*2 != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price*2== amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(price*2);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "console.log(jsonData.statementAmount);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO]  Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    if (price*2 != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price*2== amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(price*2);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bc60533d-3877-4cab-93f5-47907d9a769c",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Settlement-RENEW  Subscription  (Future  ) Payment Method Id",
      "item": [
        {
          "name": "CreateSubscription_Renew_Type_TERM",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var BFfutureDate = new Date();",
                  "var dd = BFfutureDate.getDate();",
                  "var mm = BFfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = BFfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+1;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "BFfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"BFfutureDate\", BFfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId3}}\"],\n\"accountId\": \"{{paymentMethodIdP3}}\",\n\"planVersion\": 11,\n\"start\": \"{{subfutureDate}}\",\n\"invoiceDate\": \"{{subfutureDate}}\",\n\"expirationDate\": \"{{BFfutureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"{{subfutureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{subfutureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Payment Method Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (statementAmount !==0)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(statementAmount-price);",
                  "    }",
                  "    ",
                  "    else if (statementAmount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(statementAmount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1c65a562-ba47-4733-833b-7d83ff99efc8",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP3}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP3}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Payment method Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"totalAmount\",jsonData.totalAmount);",
                  "var totalAmount = postman.getEnvironmentVariable(\"totalAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "postman.setEnvironmentVariable(\"statementId\",jsonData.statementId);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (totalAmount !==0)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(totalAmount-price);",
                  "    }",
                  "    ",
                  "    else if (totalAmount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(totalAmount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ad7dea8c-c764-45f2-b218-1b935ab828f1",
                "exec": [
                  "setTimeout(function(){}, [15000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{     \"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP3}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (amount !==0)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(amount-price);",
                  "    }",
                  "    ",
                  "    else if (amount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(amount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1e3c253a-36e0-4c87-9c40-01b697190e4f",
                "exec": [
                  "setTimeout(function(){}, [200000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    if (amount !==0)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(amount-price);",
                  "    }",
                  "    ",
                  "    else if (amount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(amount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "34b1502e-7920-410d-baf0-536d30cd918a",
                "exec": [
                  "setTimeout(function(){}, [15000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Settlement -RENEW-OPEN Subscription(Current )Payment Method Id",
      "item": [
        {
          "name": "CreateSubscription_Renew_Type_TERM",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var BFfutureDate = new Date();",
                  "var dd = BFfutureDate.getDate();",
                  "var mm = BFfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = BFfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+1;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "BFfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"BFfutureDate\", BFfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"price\",jsonData.items[0].price);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId4}}\"],\n\"accountId\": \"{{paymentMethodIdP4}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{BFfutureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"{{today}}\", \"renewFrequency\": \"DAILY\", \"renewType\": \"OPEN\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{today}}\" }\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 100, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Payment Method Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ff4a3769-a1fd-4a6c-af09-f9f77db901cc",
                "exec": [
                  "setTimeout(function(){}, [160000]);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b534547d-68f3-4a6e-820d-537d82f8bc13",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP4}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP4}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Payment Method Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"totalAmount\",jsonData.totalAmount);",
                  "var totalAmount = postman.getEnvironmentVariable(\"totalAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "postman.setEnvironmentVariable(\"statementId\",jsonData.statementId);",
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != totalAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == totalAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5b8eb14a-9b16-4cfd-ba78-981ff055848b",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{     \"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP4}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "31fb22b5-9cda-4898-8b3e-89ced59cc682",
                "exec": [
                  "setTimeout(function(){}, [200000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    if (price != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6f6ce729-3c1c-470a-921b-d7da15514d78",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Settlement - Invoice Payer Account - Payment Method Id",
      "item": [
        {
          "name": "Invoice payor Account_Payment Method_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7cc4b0be-b603-4b22-9f6a-18d684445c59",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"amount\", jsonData.totalAmount);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct totalNetPrice\"] = responseBody.has(\"totalNetPrice\");",
                  "   tests[\"Response Body has totalDiscountAmount\"] = responseBody.has(\"totalDiscountAmount\");",
                  "       tests[\"Response Body has discountCode\"] = responseBody.has(\"discountCode\");",
                  "   ",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has  salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has  price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "    tests[\"Response Body has invoiceType\"] = responseBody.has(\"invoiceType\");",
                  "    tests[\"Response Body has invoiceNumber\"] = responseBody.has(\"invoiceNumber\");",
                  "    tests[\"Response Body has itemCategoryId\"] = responseBody.has(\"itemCategoryId\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n   \"locationId\":\"{{locationId}}\",\r\n   \"memberId\": \"{{memberId5}}\",\r\n  \"accountId\": \"{{paymentMethodIdP5}}\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c74\",\r\n\"totalTax\": 0,\r\n\"totalAmount\": 1000,\r\n\"totalDiscountAmount\": 0,\r\n\"totalNetPrice\": 0,\r\n\"items\": [\r\n\r\n{ \"itemName\": \"{{randName}}\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 200, \"discountCode\": 1234, \"discountAmount\": 10, \"amountRemaining\": 200, \"taxAmount\": 20, \"type\": \"PRODUCT\", \"quantity\": \"1\", \"itemCategoryId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c12\" }\r\n]\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor/invoice",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor",
                "invoice"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Payment Method Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var amount=postman.getEnvironmentVariable(\"amount\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (amount != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(amount);",
                  "    }",
                  "    ",
                  "    else if (amount == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(amount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d341648d-fd7d-4266-addf-4314f4a3d0c1",
                "exec": [
                  "//setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP5}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP5}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Payment Method Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"totalAmount\",jsonData.totalAmount);",
                  "var totalAmount = postman.getEnvironmentVariable(\"totalAmount\");",
                  "var amount=postman.getEnvironmentVariable(\"amount\");",
                  "postman.setEnvironmentVariable(\"statementId\",jsonData.statementId);",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (amount != totalAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(amount);",
                  "    }",
                  "    ",
                  "    else if (amount == totalAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(amount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "40c1f698-5474-4834-861f-088e5eb3a134",
                "exec": [
                  "//setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{     \"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP5}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"stamount\",jsonData.amount);",
                  "var totalAmount = postman.getEnvironmentVariable(\"totalAmount\");",
                  "var stamount=postman.getEnvironmentVariable(\"stamount\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (stamount != totalAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(stamount!= totalAmount);",
                  "    }",
                  "    ",
                  "    else if (stamount == totalAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(stamount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "dcf612ab-1d49-47aa-9740-55ff2f61190b",
                "exec": [
                  "setTimeout(function(){}, [200000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"stamount\",jsonData.amount);",
                  "postman.setEnvironmentVariable(\"settlementId\",jsonData.settlementId);",
                  "var totalAmount = postman.getEnvironmentVariable(\"totalAmount\");",
                  "var stamount=postman.getEnvironmentVariable(\"stamount\");",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    if (stamount != totalAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(stamount!= totalAmount);",
                  "    }",
                  "    ",
                  "    else if (stamount == totalAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(stamount);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e9ff68ea-6de9-48de-9daf-f9a088607b39",
                "exec": [
                  "//setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Settlement- Agreement(Single Subscription) - Payment method Id",
      "item": [
        {
          "name": "CreateAgreement Single",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGHIJKLMNO\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var agreementNumber= stringGen(11)",
                  "postman.setEnvironmentVariable(\"agreementNumber\",\"3456\" +agreementNumber);",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"price\",jsonData.subscriptionList[0].items[0].price);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"locationId\": \"{{locationId}}\",\r\n\"documentIdList\" : [ \"eaca4410-3686-4eda-87c3-1320d15e4b94\" ],\r\n\"memberIdList\" : [ {  \"memberId\" :\"{{memberId6}}\" ,\r\n\"primary\" : true} ],\r\n\"agreementNumber\" : \"{{agreementNumber}}\",\r\n\"subscriptionList\" : [ {\r\n\"primary\" : true,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId6}}\"],\r\n\"accountId\": \"{{paymentMethodIdP6}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"4\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"false\",\r\n\"openEnded\": false,\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]}]}"
            },
            "url": {
              "raw": "{{URL}}/agreement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Payment method_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d0ebbd68-c3e9-4490-a36c-d3df12611c2e",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP6}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP6}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Payment Method_id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"totalAmount\",jsonData.totalAmount);",
                  "var totalAmount = postman.getEnvironmentVariable(\"totalAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "postman.setEnvironmentVariable(\"statementId\",jsonData.statementId);",
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != totalAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price!= totalAmount);",
                  "    }",
                  "    ",
                  "    else if (price == totalAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2d3979fd-8f2e-47f5-8353-746651378c9e",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{     \"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP6}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(price!= amount);",
                  "    }",
                  "    ",
                  "    else if (price == amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1dc96a55-6172-48d3-9e66-258d30788de9",
                "exec": [
                  "setTimeout(function(){}, [200000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    if (price != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(price!= amount);",
                  "    }",
                  "    ",
                  "    else if (price == amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cafe687c-de76-46be-b76e-6a8ec21f7958",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Settlement- Agreement(Single -Member Id List) - Payment method Id",
      "item": [
        {
          "name": "CreateAgreement Single",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "089b018d-196f-4ff4-bb29-a793bc49511b",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "     postman.setEnvironmentVariable(\"price\",jsonData.subscriptionList[0].items[0].price);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "18d01568-2b8b-4159-99cd-2c9f0e39159d",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGHIJKLMNO\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var agreementNumber= stringGen(11)",
                  "postman.setEnvironmentVariable(\"agreementNumber\",\"8574\" +agreementNumber);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"locationId\": \"{{locationId}}\",\r\n\"documentIdList\" : [ \"eaca4410-3686-4eda-87c3-1320d15e4b94\" ],\r\n\"memberIdList\" : [ {\r\n    \"memberId\" : \"{{memberId}}\",\r\n    \"primary\" : true\r\n  },{\r\n    \"memberId\" : \"{{memberId7}}\",\r\n    \"primary\" : false\r\n  },{\r\n    \"memberId\" : \"{{memberId8}}\",\r\n    \"primary\" : false\r\n  },{\r\n    \"memberId\" : \"{{memberId9}}\",\r\n    \"primary\" : false\r\n  },\r\n {\r\n    \"memberId\" : \"{{memberId10}}\",\r\n    \"primary\" : false\r\n  }],\r\n\"agreementNumber\" : \"{{agreementNumber}}\",\r\n\"subscriptionList\" : [ {\r\n\"primary\" : true,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"4\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"false\",\r\n\"openEnded\": false,\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]}]}"
            },
            "url": {
              "raw": "{{URL}}/agreement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Payment method_Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b9ee20f8-4232-446d-a3ff-79ab5edb8c8a",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6b5347ef-55bf-4eb1-b457-99f6cd59c096",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != statementAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price);",
                  "    }",
                  "    ",
                  "    else if (price == statementAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Payment Method_id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "549382fb-c9aa-41cc-9584-4f839f887657",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ceadf879-bc36-4cf8-8264-b369e2cf90e1",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"totalAmount\",jsonData.totalAmount);",
                  "var totalAmount = postman.getEnvironmentVariable(\"totalAmount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "postman.setEnvironmentVariable(\"statementId\",jsonData.statementId);",
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != totalAmount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(price!= totalAmount);",
                  "    }",
                  "    ",
                  "    else if (price == totalAmount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{     \"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c732bddd-62c7-4673-b011-7ef515323186",
                "exec": [
                  "setTimeout(function(){}, [200000]);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1ad02aba-af9c-437c-9f74-d6bfca808aa8",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (price != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(price!= amount);",
                  "    }",
                  "    ",
                  "    else if (price == amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "var price=postman.getEnvironmentVariable(\"price\");",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    if (price != amount)",
                  "    {",
                  "       tests[\"Response Body has Wrong Settlement Amount\"] = responseBody.has(price!= amount);",
                  "    }",
                  "    ",
                  "    else if (price == amount)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Settlement Amount\"] = responseBody.has(price);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "63583b51-6e87-4023-a92f-a363e0f966dd",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Settlement - Agreement (Multiple Subscriptions) - Payment Method Id",
      "item": [
        {
          "name": "CreateAgreement",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGHIJKLMNO\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var agreementNumber= stringGen(11)",
                  "postman.setEnvironmentVariable(\"agreementNumber\",\"7890\" +agreementNumber);",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"locationId\": \"{{locationId}}\",\r\n\"documentIdList\" : [ \"eaca4410-3686-4eda-87c3-1320d15e4b94\" ],\r\n\"memberIdList\" : [ {  \"memberId\" :\"{{memberId}}\" ,\r\n\"primary\" : true} ],\r\n\"agreementNumber\" : \"{{agreementNumber}}\",\r\n\"subscriptionList\" : [ {\r\n\"primary\" : true,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"DAILY\",\r\n\"duration\": \"1\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"01-01-2020\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"01-01-2020\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 9, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"1\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"false\",\r\n\"openEnded\": false,\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\t\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"DAILY\",\r\n\"duration\": \"1\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"false\",\r\n\"openEnded\": false,\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"name\": \"ankit\",\r\n\r\n\"openEnded\": true,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"name\": \"ankit\",\r\n\r\n\"openEnded\": true,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\"primary\" : false,\t\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"frequency\": \"MONTHLY\",\r\n\"name\": \"ankit\",\r\n\r\n\"openEnded\": true,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\t\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"MONTHLY\",\r\n\"duration\": \"1\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"01-01-2020\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"01-01-2020\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"ANNUALLY\",\r\n\"duration\": \"1\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"01-01-2020\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"01-01-2020\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{BFfutureDate}}\",\r\n\"frequency\": \"SEMIANNUALLY\",\r\n\"duration\": \"1\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"01-01-2020\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"01-01-2020\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n},\r\n{\r\n\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{BFfutureDate}}\",\r\n\"frequency\": \"QUARTERLY\",\r\n\"duration\": \"1\",\r\n\"name\": \"ankit\",\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"01-01-2020\", \"renewFrequency\": \"DAILY\", \"renewType\": \"OPEN\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"01-01-2020\" }\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 1, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n}\r\n\r\n\r\n\r\n]\r\n}"
            },
            "url": {
              "raw": "{{URL}}/agreement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Payment Method_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (statementAmount !==0)",
                  "    {",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(statementAmount=10);",
                  "    }",
                  "    ",
                  "    else if (statementAmount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(statementAmount!=10);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cef3143e-7acc-421a-ad68-d5ab9c107d2a",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Payment Method_id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"totalAmount\",jsonData.totalAmount);",
                  "var totalAmount = postman.getEnvironmentVariable(\"totalAmount\");",
                  "postman.setEnvironmentVariable(\"statementId\",jsonData.statementId);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (totalAmount !==0)",
                  "    {",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(totalAmount=10);",
                  "    }",
                  "    ",
                  "    else if (totalAmount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(totalAmount!=10);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4995f847-a3aa-43fe-acbc-86bbc8618e62",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n\t\"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (amount !==0)",
                  "    {",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(amount=10);",
                  "    }",
                  "    ",
                  "    else if (amount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(amount!=10);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8e64f95e-183c-43eb-8024-fbefc5646513",
                "exec": [
                  "setTimeout(function(){}, [200000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"amount\",jsonData.amount);",
                  "var amount = postman.getEnvironmentVariable(\"amount\");",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    if (amount !==0)",
                  "    {",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(amount=10);",
                  "    }",
                  "    ",
                  "    else if (amount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(amount!=10);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "987936fc-53b1-41f4-9627-70c2559ce3e7",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Down Payment - Invoice Payer Account - Payment Method Id",
      "item": [
        {
          "name": "Invoice payor Account_Payment method_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7cc4b0be-b603-4b22-9f6a-18d684445c59",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "     postman.setEnvironmentVariable(\"invId\",jsonData.id);",
                  "     postman.setEnvironmentVariable(\"invamt\",jsonData.totalAmount);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct totalNetPrice\"] = responseBody.has(\"totalNetPrice\");",
                  "   tests[\"Response Body has totalDiscountAmount\"] = responseBody.has(\"totalDiscountAmount\");",
                  "       tests[\"Response Body has discountCode\"] = responseBody.has(\"discountCode\");",
                  "   ",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has  salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has  price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "    tests[\"Response Body has invoiceType\"] = responseBody.has(\"invoiceType\");",
                  "    tests[\"Response Body has invoiceNumber\"] = responseBody.has(\"invoiceNumber\");",
                  "    tests[\"Response Body has itemCategoryId\"] = responseBody.has(\"itemCategoryId\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n   \"locationId\":\"{{locationId}}\",\r\n   \"memberId\": \"{{memberId11}}\",\r\n  \"accountId\": \"{{accountIdpayor11}}\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c74\",\r\n\"totalTax\": 0,\r\n\"totalAmount\": 400,\r\n\"totalDiscountAmount\": 0,\r\n\"totalNetPrice\": 0,\r\n\"items\": [\r\n\r\n{ \"itemName\": \"{{randName}}\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 200, \"discountCode\": 1234, \"discountAmount\": 10, \"amountRemaining\": 200, \"taxAmount\": 20, \"type\": \"PRODUCT\", \"quantity\": \"1\", \"itemCategoryId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c12\" }\r\n]\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor/invoice",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor",
                "invoice"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"{{invamt}}\" \r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{accountIdpayor}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{accountIdpayor}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementAmount\",jsonData.statementAmount);",
                  "var statementAmount = postman.getEnvironmentVariable(\"statementAmount\");",
                  "var invamt=postman.getEnvironmentVariable(\"invamt\");",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    ",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    if (statementAmount !=0 )",
                  "    {",
                  "       tests[\"Response Body has Wrong Statement Amount\"] = responseBody.has(statementAmount!=0);",
                  "    }",
                  "    ",
                  "    else if (statementAmount ==0)",
                  "    {",
                  "        ",
                  "       tests[\"Response Body has Correct Statement Amount\"] = responseBody.has(statementAmount=0);",
                  "    ",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  " ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Apply Payment",
      "item": [
        {
          "name": "Apply payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"4000\" \r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{accountIdpayor}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{accountIdpayor}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply payment Client",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"400\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Settlement - After Applying Fee",
      "item": [
        {
          "name": "Create Fee",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"feeId\", jsonData.feeId);",
                  "tests[\"Response Body has feeId\"] = responseBody.has(\"feeId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has feeMode\"] = responseBody.has(\"feeMode\");",
                  "    tests[\"Response Body has feeType\"] = responseBody.has(\"feeType\");",
                  "    tests[\"Response Body has feeTransactionType\"] = responseBody.has(\"feeTransactionType\");",
                  "    tests[\"Response Body has feeValueType\"] = responseBody.has(\"feeValueType\");",
                  "    tests[\"Response Body has feeValue\"] = responseBody.has(\"feeValue\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"accountId\" : \"{{accountIdClient}}\",\r\n\"feeMode\" : \"TRANSACTION\",\r\n\"feeType\" : \"ABC_TRANSACTION_FEE\",\r\n\"feeTransactionType\" : \"DISCOVER\",\r\n\"feeValueType\" : \"PERCENTAGE\",\r\n\"feeValue\" : \"50\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/configure-fee",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "configure-fee"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Fee",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has feeId\"] = responseBody.has(\"feeId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has feeMode\"] = responseBody.has(\"feeMode\");",
                  "    tests[\"Response Body has feeType\"] = responseBody.has(\"feeType\");",
                  "    tests[\"Response Body has feeTransactionType\"] = responseBody.has(\"feeTransactionType\");",
                  "    tests[\"Response Body has feeValueType\"] = responseBody.has(\"feeValueType\");",
                  "    tests[\"Response Body has feeValue\"] = responseBody.has(\"feeValue\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/fee/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "fee",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Basic CreateSubscription Current_date",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "     postman.setEnvironmentVariable(\"subIdopen\",jsonData.subId);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"{{paymentMethodIdP}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"false\",\n\"openEnded\": false,\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 400, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Payment Method Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"statementId\", jsonData.statementId);",
                  "",
                  "tests[\"Response Body has statementAmount\"] = responseBody.has(\"statementAmount\");",
                  " ",
                  "   ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "7238506e-afc4-4f40-9339-aa5758491df9",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Payment Method Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementId\", jsonData.statementId);",
                  "",
                  "if ( responseCode.code!=200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"statementIdA\", jsonData.statementId);",
                  "",
                  "tests[\"Response Body has correct locationId id\"] = responseBody.has(\"locationId\");",
                  "tests[\"Response Body has correct Statement id\"] = responseBody.has(\"\\\"statementId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"statementId\")+\"\\\"\");",
                  "tests[\"Response Body has correct accountId id\"] = responseBody.has(\"accountId\");",
                  "tests[\"Response Body has correct totalAmount\"] = responseBody.has(\"totalAmount\");",
                  "",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{     \"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementId\", jsonData.statementId);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "    tests[\"Response Body has locationId\"] = responseBody.has(\"locationId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has amount\"] = responseBody.has(\"amount\");",
                  "    ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a3ffbcea-e4a0-4378-9971-5f7fb41f60b6",
                "exec": [
                  "setTimeout(function(){}, [200000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementId\", jsonData.statementId);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has settlementId\"] = responseBody.has(\"settlementId\");",
                  "    tests[\"Response Body has locationId\"] = responseBody.has(\"locationId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has amount\"] = responseBody.has(\"amount\");",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Update and Get Client/Payer Details",
      "item": [
        {
          "name": "Update Account Payor",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "653f2710-6fee-4d1a-801f-9533d654472e",
                "exec": [
                  "",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fe96e46d-4d1a-48b2-973f-80ab779f4185",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "   ",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\r\n  \"account\" : {\r\n    \"name\" : \"{{randName}}\",\r\n    \"phone\" : \"8009578015\",\r\n    \"sevaluation\" : \"{{seval}}\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/{{accountIdpayor}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "{{accountIdpayor}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Account Details Payor",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f147ecdc-33e1-4141-9a78-6d89f9ba7e30",
                "exec": [
                  "",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3f5edbed-063f-4434-b3ca-b60a05f5d809",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "   ",
                  "    tests[\"Response Body has Billing Date\"] = responseBody.has(\"billingDate\");",
                  "postman.setEnvironmentVariable(\"payorname\", jsonData.account.name);",
                  "",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\t{\r\n\t\"account\" :\r\n\t\r\n\t{ \"name\" : \"{{UniqueClient}}\",\r\n\t\"email\" : \"{{randName}}@qa4life.com\", \r\n\t\"phone\" : \"8009578010\",\r\n\t\t\"sevaluation\" : \"SEMIANNUALLY\"\r\n\t}\r\n\t}"
            },
            "url": {
              "raw": "{{URL}}/account-details/account/{{accountIdpayor}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account-details",
                "account",
                "{{accountIdpayor}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Payment method payor",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "757ab54d-2c1c-44ac-b894-0be5ea9ce0a4",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has Payor Payment Method Id\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payor Payment Method Type\"] = responseBody.has(\"type\");",
                  "",
                  "",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n     \"type\" : \"BANK_ACCOUNT\",\r\n     \"tokenId\":\"{{payment_method_id}}\"\r\n\r\n   }"
            },
            "url": {
              "raw": "{{URL}}/paymentMethod/{{paymentMethodIdP}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "paymentMethod",
                "{{paymentMethodIdP}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Account Client",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "653f2710-6fee-4d1a-801f-9533d654472e",
                "exec": [
                  "",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fe96e46d-4d1a-48b2-973f-80ab779f4185",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "   tests[\"Response Body has Client Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Client Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Client Email\"] = responseBody.has(\"email\");",
                  "    tests[\"Response Body has Client Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Client Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "        tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\r\n  \"account\" : {\r\n    \"name\" : \"{{randName}}\",\r\n    \"phone\" : \"8009578015\",\r\n    \"sevaluation\" : \"{{seval}}\",\r\n    \"paymentMethod\" : { \"type\":\"BANK_ACCOUNT\" }\r\n  }\r\n}\r\n\r\n"
            },
            "url": {
              "raw": "{{URL}}/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Account Details Client",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "653f2710-6fee-4d1a-801f-9533d654472e",
                "exec": [
                  "",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fe96e46d-4d1a-48b2-973f-80ab779f4185",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"clientname\", jsonData.account.name);",
                  " tests[\"Response Body has Client Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Client Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Client Email\"] = responseBody.has(\"email\");",
                  "    tests[\"Response Body has Client Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Client Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\r\n  \"account\" : {\r\n    \"name\" : \"{{randName}}\",\r\n    \"phone\" : \"8009578015\",\r\n    \"sevaluation\" : \"DAILY\",\r\n  \r\n    \"paymentMethod\" : { \"type\":\"BANK_ACCOUNT\" }\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account-details/account/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account-details",
                "account",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Payment method Client",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "757ab54d-2c1c-44ac-b894-0be5ea9ce0a4",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{    \"type\" : \"BANK_ACCOUNT\",\n     \"tokenId\":\"{{payment_method_id_client}}\"\n   }"
            },
            "url": {
              "raw": "{{URL}}/paymentMethod/{{paymentMethodIdC}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "paymentMethod",
                "{{paymentMethodIdC}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ReviewPayorAccount",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbc233f8-6c37-461c-b607-18945dda70be",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/account/payor/{{accountIdpayor}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor",
                "{{accountIdpayor}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ReviewPayorAccounts",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4abfbb71-ada5-403b-be54-0e6b7a05573d",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/account/payor?name={{payorname}}&page=0&size=2",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{payorname}}"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "ReviewClientAccount",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbc233f8-6c37-461c-b607-18945dda70be",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  " ",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/account/client/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "client",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ReviewClientAccounts",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4abfbb71-ada5-403b-be54-0e6b7a05573d",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/account/client?name={{clientname}}&page=0&size=2",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "client"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{clientname}}"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Location tax Rate",
      "item": [
        {
          "name": "Update Location Tax Rate",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  " tests[\"Response Body has Correct locationId\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct empId\"] = responseBody.has(\"empId\");",
                  "   tests[\"Response Body has taxRate\"] = responseBody.has(\"taxRate\");",
                  "   tests[\"Response Body has  taxCode\"] = responseBody.has(\"taxCode\");",
                  "    tests[\"Response Body has  isOverriden\"] = responseBody.has(\"isOverriden\");",
                  "    tests[\"Response Body has suggestedTaxRate\"] = responseBody.has(\"suggestedTaxRate\");",
                  "    tests[\"Response Body has  version\"] = responseBody.has(\"version\");",
                  "   ",
                  "   ",
                  "",
                  "",
                  "    ",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"empId\" : \"b79cac77-5c00-4169-a88e-2937de561528\",\r\n  \"taxRate\" : 20.25745,\r\n  \"isOverriden\" : true,\r\n  \"suggestedTaxRate\" : 10\r\n}"
            },
            "url": {
              "raw": "{{URL}}/tax-rate/{{locationId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "tax-rate",
                "{{locationId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Location Tax Rate",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  " tests[\"Response Body has Correct locTaxRateId\"] = responseBody.has(\"locTaxRateId\");",
                  "   tests[\"Response Body has Correct empId\"] = responseBody.has(\"empId\");",
                  "   tests[\"Response Body has  taxCode\"] = responseBody.has(\"taxCode\");",
                  "    tests[\"Response Body has  isOverriden\"] = responseBody.has(\"isOverriden\");",
                  "    tests[\"Response Body has suggestedTaxRate\"] = responseBody.has(\"suggestedTaxRate\");",
                  "    tests[\"Response Body has  version\"] = responseBody.has(\"version\");",
                  "   ",
                  "     ",
                  "",
                  "",
                  "    ",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/tax-rate/{{locationId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "tax-rate",
                "{{locationId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Location Tax Rate",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  " ",
                  "   tests[\"Response Body has Correct empId\"] = responseBody.has(\"empId\");",
                  "   tests[\"Response Body has  taxCode\"] = responseBody.has(\"taxCode\");",
                  "    tests[\"Response Body has  isOverriden\"] = responseBody.has(\"isOverriden\");",
                  "    tests[\"Response Body has suggestedTaxRate\"] = responseBody.has(\"suggestedTaxRate\");",
                  "    tests[\"Response Body has  version\"] = responseBody.has(\"version\");",
                  "   ",
                  "     ",
                  "",
                  "",
                  "    ",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/tax-rate/{{locationId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "tax-rate",
                "{{locationId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Get Statement /Subscription",
      "item": [
        {
          "name": "Get Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subIdaccount}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subIdaccount}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Review Statement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "babdc9dc-2db1-4af5-a2b3-7401bc24905b",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has statementId\"] = responseBody.has(\"statementId\");",
                  "    tests[\"Response Body has locationId\"] = responseBody.has(\"locationId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has statementAmount\"] = responseBody.has(\"statementAmount\");",
                  "    tests[\"Response Body has statementCreated\"] = responseBody.has(\"statementCreated\");",
                  "    tests[\"Response Body has statementModified\"] = responseBody.has(\"statementModified\");",
                  "    tests[\"Response Body has statementDate\"] = responseBody.has(\"statementDate\");",
                  "    ",
                  "",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/account/statement/{{statementIdA}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "statement",
                "{{statementIdA}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Review Available Statement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83a7b373-c8ed-4460-b52d-2992ab6c92f9",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has statementId\"] = responseBody.has(\"statementId\");",
                  "    tests[\"Response Body has locationId\"] = responseBody.has(\"locationId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has statementAmount\"] = responseBody.has(\"statementAmount\");",
                  "    tests[\"Response Body has statementCreated\"] = responseBody.has(\"statementCreated\");",
                  "    tests[\"Response Body has statementModified\"] = responseBody.has(\"statementModified\");",
                  "    tests[\"Response Body has statementDate\"] = responseBody.has(\"statementDate\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/account/statement/account/{{accountIdpayor}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "statement",
                "account",
                "{{accountIdpayor}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetMemberSuscriptionList",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95a1a71a-9c36-45f9-b427-d64d04fd9bda",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   ",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  " ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "   ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has price\"] = responseBody.has(\"price\");",
                  "  ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/subscription/member/{{memberId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "member",
                "{{memberId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Cancel / Expire / Freeze Subscription",
      "item": [
        {
          "name": "Cancel Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "34baa38f-7126-466d-8e04-641f8f6a3e0c",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "66940dd5-2a64-47e3-9cc6-de2d11046fc3",
                "exec": [
                  "var CfutureDate = new Date();",
                  "var dd = CfutureDate.getDate();",
                  "var mm = CfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = CfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+4;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "CfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"CfutureDate\", CfutureDate);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t \"subCancellationDate\": \"{{CfutureDate}}\",\n\t  \"subCancelReasonCode\" : \"200\",\n  \"subCancelrequestedBy\" : \"member\",\n  \"subCancelEmpId\" : \"{{$guid}}\"\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subIdaccount}}/cancel",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subIdaccount}}",
                "cancel"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Cancel Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "34baa38f-7126-466d-8e04-641f8f6a3e0c",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "       tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "66940dd5-2a64-47e3-9cc6-de2d11046fc3",
                "exec": [
                  "var UCfutureDate = new Date();",
                  "var dd = UCfutureDate.getDate();",
                  "var mm = UCfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = UCfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+2;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "UCfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"UCfutureDate\", UCfutureDate);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t \"subCancellationDate\": \"{{today}}\",\n\t  \"subCancelEmpId\" : \"{{$guid}}\"\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subIdaccount}}/cancel",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subIdaccount}}",
                "cancel"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Cancel Subscription_past",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "34baa38f-7126-466d-8e04-641f8f6a3e0c",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "66940dd5-2a64-47e3-9cc6-de2d11046fc3",
                "exec": [
                  "var CfutureDate = new Date();",
                  "var dd = CfutureDate.getDate();",
                  "var mm = CfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = CfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+4;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "CfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"CfutureDate\", CfutureDate);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t \"subCancellationDate\": \"{{CfutureDate}}\",\n\"subCancelReasonCode\" : \"200\",\n  \"subCancelrequestedBy\" : \"member\",\n  \"subCancelEmpId\" : \"{{$guid}}\"}"
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subIdaccountcancel}}/cancel",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subIdaccountcancel}}",
                "cancel"
              ]
            }
          },
          "response": []
        },
        {
          "name": "RemoveCancel",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "618e69c6-a82e-4ae5-8c98-b3a77a0dda1f",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  " ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has price\"] = responseBody.has(\"price\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "59b6e4f2-b58c-45fc-9d56-445f493b1a15",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"subCancelEmpId\" : \"d1e73a46-bf18-45e4-ae48-498b1f46b2cf\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subIdaccountcancel}}/removeCancel",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subIdaccountcancel}}",
                "removeCancel"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Expire Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "618e69c6-a82e-4ae5-8c98-b3a77a0dda1f",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "    tests[\"Response Body has  expirationDate\"] = responseBody.has(\"expirationDate\");",
                  "   ",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "59b6e4f2-b58c-45fc-9d56-445f493b1a15",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \r\n  \"expirationDate\" : \"{{today}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subIdopen}}/expire",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subIdopen}}",
                "expire"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateFreezeSubscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8c3912b-343d-4393-9106-0b8d398182e4",
                "exec": [
                  "var jsonData= JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"freezeid\",jsonData.id);",
                  "",
                  " tests[\"Response Body has Freeze id\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has freezeStartDate\"] = responseBody.has(\"freezeStartDate\");",
                  "    tests[\"Response Body has freezeEndDate\"] = responseBody.has(\"freezeEndDate\");",
                  "    tests[\"Response Body has freezeAmount\"] = responseBody.has(\"freezeAmount\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1aa1e45d-5249-4944-b807-f1cf7eac1f7c",
                "exec": [
                  "var FfutureDate = new Date();",
                  "var dd = FfutureDate.getDate();",
                  "var mm = FfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = FfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+7;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "FfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"FfutureDate\", FfutureDate);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"freezeStartDate\" : \"{{today}}\",\r\n  \"freezeEndDate\" : \"{{FfutureDate}}\",\r\n  \"subExpirationDate\" : \"04-27-2020\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/freeze/{{subIdFreeze}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "freeze",
                "{{subIdFreeze}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "UpdateFreezeSubscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6325c4e-02ac-41fd-9680-c156def33613",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "    tests[\"Response Body has freezeEndDate\"] = responseBody.has(\"freezeEndDate\");",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3ea91fe9-3566-4aba-ac03-b74fe4633fed",
                "exec": [
                  "var FFfutureDate = new Date();",
                  "var dd = FFfutureDate.getDate();",
                  "var mm = FFfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = FFfutureDate.getFullYear()+1;",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+8;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "FFfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"FFfutureDate\", FFfutureDate);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"freezeEndDate\" : \"{{FFfutureDate}}\",\r\n   \"subExpirationDate\" : \"04-27-2020\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/freeze/{{freezeid}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "freeze",
                "{{freezeid}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "RemoveFreezeSubscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fbff2f66-46c5-4af8-ab4f-18d3b5db0883",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Freeze id\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has freezeStartDate\"] = responseBody.has(\"freezeStartDate\");",
                  "    tests[\"Response Body has freezeEndDate\"] = responseBody.has(\"freezeEndDate\");",
                  "    tests[\"Response Body has freezeAmount\"] = responseBody.has(\"freezeAmount\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"subExpirationDate\" : \"04-27-2020\" \n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/unfreeze/{{freezeid}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "unfreeze",
                "{{freezeid}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Add/Remove Member",
      "item": [
        {
          "name": "Add member subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "484d837e-6a4f-46aa-a14a-79f56bdd78ca",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"subWithMultipleMembers\",jsonData.subId);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t \"memberId\" : \"{{memberId2}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/{{addMemberforSub}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{addMemberforSub}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Remove Member Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3ac00e9-bc2d-457a-b0b8-c703bda326bb",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "  ",
                  "  tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "",
                "value": "",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subWithMultipleMembers}}/member/{{memberId2}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subWithMultipleMembers}}",
                "member",
                "{{memberId2}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Subscription_Negative Scenarios",
      "item": [
        {
          "name": "Removing Cancellation date for Expired Subscription ",
          "item": [
            {
              "name": "Basic CreateSubscription Current_date",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                    "exec": [
                      "var futureDate = new Date();",
                      "var dd = futureDate.getDate();",
                      "var mm = futureDate.getMonth()+1; //January is 0!",
                      "var yyyy = futureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+5;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "futureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                      "",
                      "",
                      "",
                      "//",
                      "",
                      "var RfutureDate = new Date();",
                      "var dd = RfutureDate.getDate();",
                      "var mm = RfutureDate.getMonth()+1; //January is 0!",
                      "var yyyy = RfutureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+9;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                      "",
                      "",
                      "",
                      "",
                      "//",
                      "",
                      "var URfutureDate = new Date();",
                      "var dd = URfutureDate.getDate();",
                      "var mm = URfutureDate.getMonth()+1; //January is 0!",
                      "var yyyy = URfutureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+10;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    postman.setEnvironmentVariable(\"subIdFreeze2\",jsonData.subId);",
                      "postman.setEnvironmentVariable(\"priceP\",jsonData.items[0].price);",
                      " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                      "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                      "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                      "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                      "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                      "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                      "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                      "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                      "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                      "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                      "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                      "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                      "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                      "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                      "   ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"{{paymentMethodIdP}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"false\",\n\"openEnded\": false,\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
                },
                "url": {
                  "raw": "{{URL}}/subscription/",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "subscription",
                    ""
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Expire Subscription",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "618e69c6-a82e-4ae5-8c98-b3a77a0dda1f",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "",
                      "    tests[\"Response Body has  expirationDate\"] = responseBody.has(\"expirationDate\");",
                      "   ",
                      "   ",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "59b6e4f2-b58c-45fc-9d56-445f493b1a15",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n \r\n  \"expirationDate\" : \"{{today}}\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/subscription/{{subIdFreeze2}}/expire",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "subscription",
                    "{{subIdFreeze2}}",
                    "expire"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "RemoveCancel",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "618e69c6-a82e-4ae5-8c98-b3a77a0dda1f",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 400)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 400)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "   ",
                      "   ",
                      "}",
                      "  tests[\"Response code should be 400\"] = responseCode.code === 400;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "59b6e4f2-b58c-45fc-9d56-445f493b1a15",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/subscription/{{subIdFreeze2}}/removeCancel",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "subscription",
                    "{{subIdFreeze2}}",
                    "removeCancel"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Cancel Subn whose Cancel Date is Passed",
          "item": [
            {
              "name": "Basic CreateSubscription Current_date",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                    "exec": [
                      "var futureDate = new Date();",
                      "var dd = futureDate.getDate();",
                      "var mm = futureDate.getMonth()+1; //January is 0!",
                      "var yyyy = futureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+5;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "futureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                      "",
                      "",
                      "",
                      "//",
                      "",
                      "var RfutureDate = new Date();",
                      "var dd = RfutureDate.getDate();",
                      "var mm = RfutureDate.getMonth()+1; //January is 0!",
                      "var yyyy = RfutureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+9;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                      "",
                      "",
                      "",
                      "",
                      "//",
                      "",
                      "var URfutureDate = new Date();",
                      "var dd = URfutureDate.getDate();",
                      "var mm = URfutureDate.getMonth()+1; //January is 0!",
                      "var yyyy = URfutureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+10;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    postman.setEnvironmentVariable(\"subIdFreeze3\",jsonData.subId);",
                      "",
                      " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                      "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                      "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                      "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                      "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                      "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                      "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                      "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                      "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                      "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                      "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                      "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                      "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                      "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                      "   ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"{{paymentMethodIdP}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"false\",\n\"openEnded\": false,\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
                },
                "url": {
                  "raw": "{{URL}}/subscription/",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "subscription",
                    ""
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Subscription",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "34baa38f-7126-466d-8e04-641f8f6a3e0c",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                      "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                      "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                      "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                      "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                      "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                      "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                      "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                      "    tests[\"Response Body has salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                      "    tests[\"Response Body has price\"] = responseBody.has(\"price\");",
                      "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "66940dd5-2a64-47e3-9cc6-de2d11046fc3",
                    "exec": [
                      "var CfutureDate = new Date();",
                      "var dd = CfutureDate.getDate();",
                      "var mm = CfutureDate.getMonth()+1; //January is 0!",
                      "var yyyy = CfutureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+4;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "CfutureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"CfutureDate\", CfutureDate);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t \"subCancellationDate\": \"{{today}}\",\n\t \"subCancelReasonCode\" : \"200\",\n  \"subCancelrequestedBy\" : \"member\",\n  \"subCancelEmpId\" : \"{{$guid}}\"\n}"
                },
                "url": {
                  "raw": "{{URL}}/subscription/{{subIdFreeze3}}/cancel",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "subscription",
                    "{{subIdFreeze3}}",
                    "cancel"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel Subscription",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "34baa38f-7126-466d-8e04-641f8f6a3e0c",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 400)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 400)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "   ",
                      "   ",
                      "}",
                      "  tests[\"Response code should be 400\"] = responseCode.code === 400;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "66940dd5-2a64-47e3-9cc6-de2d11046fc3",
                    "exec": [
                      "var CfutureDate = new Date();",
                      "var dd = CfutureDate.getDate();",
                      "var mm = CfutureDate.getMonth()+1; //January is 0!",
                      "var yyyy = CfutureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+4;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "CfutureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"CfutureDate\", CfutureDate);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t \"subCancellationDate\": \"{{today}}\",\n\t \"subCancelReasonCode\" : \"200\",\n  \"subCancelrequestedBy\" : \"member\",\n  \"subCancelEmpId\" : \"{{$guid}}\"\n}"
                },
                "url": {
                  "raw": "{{URL}}/subscription/{{subIdFreeze3}}/cancel",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "subscription",
                    "{{subIdFreeze3}}",
                    "cancel"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Basic CreateSubscription_Invoicedate before Start Date",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 400)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 400)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 400\"] = responseCode.code === 400;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"{{paymentMethodIdP}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"03-24-2019\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"false\",\n\"openEnded\": false,\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 400, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Basic CreateSubscription_Invalid Frequency",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 400)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 400)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 400\"] = responseCode.code === 400;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"{{paymentMethodIdP}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"ABC\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"false\",\n\"openEnded\": false,\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 400, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Basic CreateSubscription_Invalid payer Account Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 400)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 400)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 400\"] = responseCode.code === 400;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"ad8ebc9e-5fab-140f-879f-9e930cc#5c79\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"DAILY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"false\",\n\"openEnded\": false,\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 400, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateSubscription_AUto Renew True without Renew Amount",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 400)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 400)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 400\"] = responseCode.code === 400;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"{{paymentMethodIdP}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"{{RfutureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\",  \"renewInvoiceDate\" : \"{{RfutureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateSubscription_AUto Renew :False and Renewal Options",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 400)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 400)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 400\"] = responseCode.code === 400;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"{{paymentMethodIdP}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"false\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"{{RfutureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\",  \"renewInvoiceDate\" : \"{{RfutureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Basic CreateSubscription Renew date Before Start_date",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 400)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 400)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 400\"] = responseCode.code === 400;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId2}}\"],\n\"accountId\": \"{{paymentMethodIdP2}}\",\n\"planVersion\": 11,\n\"start\": \"03-04-2019\",\n\"invoiceDate\": \"03-04-2019\",\n\"expirationDate\": \"{{BFfutureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"03-02-2019\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"03-04-2019\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Basic CreateSubscription Invoice date Invalid",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "120b505b-4af9-4b9e-97ee-1cae44b50b84",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 400)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 400)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 400\"] = responseCode.code === 400;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "329d008b-e84c-4531-afc5-303e42577fdc",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId2}}\"],\n\"accountId\": \"{{paymentMethodIdP2}}\",\n\"planVersion\": 11,\n\"start\": \"03-04-2019\",\n\"invoiceDate\": \"03-00-2019\",\n\"expirationDate\": \"{{BFfutureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"03-04-2019\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"03-04-2019\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Basic CreateSubscription Start date Invalid",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 400)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 400)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 400\"] = responseCode.code === 400;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId2}}\"],\n\"accountId\": \"{{paymentMethodIdP2}}\",\n\"planVersion\": 11,\n\"start\": \"03-00-2019\",\n\"invoiceDate\": \"03-04-2019\",\n\"expirationDate\": \"{{BFfutureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"03-04-2019\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"03-04-2019\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Basic CreateSubscription Start date  before 90 days",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 400)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 400)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 400\"] = responseCode.code === 400;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId2}}\"],\n\"accountId\": \"{{paymentMethodIdP2}}\",\n\"planVersion\": 11,\n\"start\": \"03-12-2018\",\n\"invoiceDate\": \"03-04-2019\",\n\"expirationDate\": \"{{BFfutureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"03-04-2019\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"03-04-2019\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Basic CreateSubscription Invoice date  before 60 days",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 400)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 400)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 400\"] = responseCode.code === 400;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId2}}\"],\n\"accountId\": \"{{paymentMethodIdP2}}\",\n\"planVersion\": 11,\n\"start\": \"03-04-2019\",\n\"invoiceDate\": \"03-01-2019\",\n\"expirationDate\": \"{{BFfutureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"03-04-2019\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"03-04-2019\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Basic Open CreateSubscription with Renewable object",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 400)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 400)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 400\"] = responseCode.code === 400;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId2}}\"],\n\"accountId\": \"{{paymentMethodIdP2}}\",\n\"planVersion\": 11,\n\"start\": \"03-04-2019\",\n\"invoiceDate\": \"03-04-2019\",\n\"frequency\": \"WEEKLY\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"03-02-2019\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"03-04-2019\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": true,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Get Remaining Agreement Value",
      "item": [
        {
          "name": "CreateLocationTaxRate",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e8b2e784-73c8-4d3e-a7a2-1b7e69cf587a",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1f895b06-b44c-4457-80c7-721c46cb9ac2",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"locationTaxRate\", jsonData.id);",
                  "postman.setEnvironmentVariable(\"locationId\", jsonData.locationId);",
                  "postman.setEnvironmentVariable(\"LocitemCategoryId\", jsonData.itemCategoryId);",
                  "postman.setEnvironmentVariable(\"LocTaxEmpId\", jsonData.empId);",
                  "",
                  "",
                  "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct taxRate\"] = responseBody.has(\"taxRate\");",
                  "  ",
                  "   tests[\"Response Body has suggested Tax Rate\"] = responseBody.has(\"suggestedTaxRate\");",
                  "   ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"empId\" : \"{{$guid}}\",\r\n  \"taxRate\" : 20,\r\n  \"taxCode\" : \"rtr\",\r\n  \"isOverriden\" : true,\r\n  \"suggestedTaxRate\" : 80\r\n\r\n\r\n}"
            },
            "url": {
              "raw": "{{URL}}/tax-rate",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "tax-rate"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateAgreement",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "867dba04-5044-4a8d-823e-807bd4e79759",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  "  text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var argNumber= stringGen(15)",
                  "postman.setEnvironmentVariable(\"argNumb\",argNumber);",
                  "",
                  "",
                  "var today = new Date();",
                  "var dd = today.getDate();",
                  "var mm = today.getMonth()+1; //January is 0!",
                  "var yyyy = today.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "today = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"today\", today);",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9230f43d-6aa6-46e8-be74-e11af730e16b",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    postman.setEnvironmentVariable(\"argId\", jsonData.agreementId);",
                  "     ",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"locationId\":\"{{locationId}}\",\n\"documentIdList\" : [ \"eaca4410-3686-4eda-87c3-1320d15e4b94\" ],\n\"memberIdList\" : [ {  \"memberId\" :\"{{memberId}}\" ,\n\"primary\" : true} ],\n \"agreementNumber\" : \"{{argNumb}}\",\n  \"campaign\" : \"Invoice Campaign\",\n \n  \"subscriptionList\" : [ {\n  \t\"primary\" : true,\n    \"planId\":\"fd8ebc9e-5fab-440f-879f-9e930cc35c76\",\n     \"locationId\":\"{{locationId}}\",\n     \"memberIdList\": [\"{{memberId}}\"],\n     \"accountId\": \"{{paymentMethodIdP}}\",\n        \n\t\t\t   \n\"salesEmployeeId\":\"ad8ebc9e-5fab-140f-879f-9e930cc16032\",\n\"planVersion\":11,\n\n\"frequency\":\"MONTHLY\",\n\"openEnded\":false,\n\"start\":\"04-02-2019\",\n\"invoiceDate\":\"04-03-2019\",\n\"expirationDate\" : \"09-03-2019\",\n\n\"duration\" : \"31\",\n\"autoRenew\" : true,\n\"renewType\" : \"OPEN\",\n\"renewalOptions\" :\n\n{ \"renewDate\" : \"04-28-2020\", \"renewFrequency\" : \"DAILY\", \"renewType\" : \"TERM\", \"renewInvoiceDate\" : \"04-28-2020\", \"renewAmount\" : 100, \"renewDuration\" : \"10\", \"renewExpireDate\" : \"04-28-2020\" },\n\n\n\"name\":\"Create_sub\",\n\n\"items\":[\n{ \"itemName\":\"feb26\", \n    \"itemId\":\"101ebc5e-1fab-120f-879f-4e930cc25c10\", \n    \"version\":1, \n    \"price\":\"10\", \n    \"quantity\":1, \n    \"expirationStart\":\"\", \n    \"type\":\"FEE\", \n    \"unlimited\":\"false\",\n    \"itemCategoryId\" : \"fd1ebc5e-1fab-120f-879f-4e930cc25c01\"\n    },\n    \n    { \n    \t\"itemName\":\"feb26\",  \n    \t\"itemId\":\"101ebc5e-1fab-120f-879f-4e930cc25c10\", \n    \t\"version\":1, \n    \t\"price\":\"20\",\n    \t\"quantity\":2, \n    \t\"expirationStart\":\"\", \n    \t\"type\":\"FEE\", \n    \t\"unlimited\":\"false\"\n    \t}]\n},\n{\n  \t\"primary\" : false,\n\"planId\":\"fd8ebc9e-5fab-440f-879f-9e930cc35c76\",\n    \n    \"locationId\":\"{{locationId}}\",\n    \"memberIdList\": [\"{{memberId}}\"],\n\n        \"accountId\": \"{{paymentMethodIdP}}\",\n        \n\t\t\t   \n\"salesEmployeeId\":\"ad8ebc9e-5fab-140f-879f-9e930cc16032\",\n\"planVersion\":11,\n\n\"frequency\":\"MONTHLY\",\n\"openEnded\":false,\n\"start\":\"04-04-2019\",\n\"invoiceDate\":\"04-04-2019\",\n\"expirationDate\" : \"08-05-2019\",\n\n\"duration\" : \"1\",\n\"autoRenew\" : true,\n\"renewType\" : \"OPEN\",\n\"renewalOptions\" :\n\n\n\n{ \"renewDate\" : \"04-28-2020\", \"renewFrequency\" : \"DAILY\", \"renewType\" : \"TERM\", \"renewInvoiceDate\" : \"04-28-2020\", \"renewAmount\" : 100, \"renewDuration\" : \"10\", \"renewExpireDate\" : \"04-28-2020\" },\n\n\n\"name\":\"Create_sub\",\n\n\"items\":[\n{ \"itemName\":\"feb27\", \n    \"itemId\":\"101ebc5e-1fab-120f-879f-4e930cc25c10\", \n    \"version\":1, \n    \"price\":\"10\", \n    \"quantity\":1, \n    \"expirationStart\":\"\", \n    \"type\":\"FEE\", \n    \"unlimited\":\"false\",\n    \"itemCategoryId\" : \"fd1ebc5e-1fab-120f-879f-4e930cc25c01\"\n    },\n    \n    { \n    \t\"itemName\":\"feb27\",  \n    \t\"itemId\":\"101ebc5e-1fab-120f-879f-4e930cc25c10\", \n    \t\"version\":1, \n    \t\"price\":\"20\",\n    \t\"quantity\":2, \n    \t\"expirationStart\":\"\", \n    \t\"type\":\"FEE\", \n    \t\"unlimited\":\"false\"\n    \t}]\n},\n{\n  \t\"primary\" : false,\n\"planId\":\"fd8ebc9e-5fab-440f-879f-9e930cc35c76\",\n    \n    \"locationId\":\"{{locationId}}\",\n    \"memberIdList\": [\"{{memberId}}\"],\n\n        \"accountId\": \"{{paymentMethodIdP}}\",\n        \n\t\t\t   \n\"salesEmployeeId\":\"ad8ebc9e-5fab-140f-879f-9e930cc16032\",\n\"planVersion\":11,\n\n\"frequency\":\"DAILY\",\n\"openEnded\":true,\n\"start\":\"04-03-2019\",\n\"invoiceDate\":\"04-04-2019\",\n\n\"autoRenew\" : false,\n\"renewType\" : \"OPEN\",\n\n\"name\":\"Create_sub\",\n\n\"items\":[\n{ \"itemName\":\"feb27\", \n    \"itemId\":\"101ebc5e-1fab-120f-879f-4e930cc25c10\", \n    \"version\":1, \n    \"price\":\"10\", \n    \"quantity\":1, \n    \"expirationStart\":\"\", \n    \"type\":\"FEE\", \n    \"unlimited\":\"false\",\n    \"itemCategoryId\" : \"fd1ebc5e-1fab-120f-879f-4e930cc25c01\"\n    },\n    \n    { \n    \t\"itemName\":\"feb27\",  \n    \t\"itemId\":\"101ebc5e-1fab-120f-879f-4e930cc25c10\", \n    \t\"version\":1, \n    \t\"price\":\"20\",\n    \t\"quantity\":2, \n    \t\"expirationStart\":\"\", \n    \t\"type\":\"FEE\", \n    \t\"unlimited\":\"false\"\n    \t}]\n},\n\n{\n  \t\"primary\" : false,\n\"planId\":\"fd8ebc9e-5fab-440f-879f-9e930cc35c76\",\n    \n    \"locationId\":\"{{locationId}}\",\n    \"memberIdList\": [\"{{memberId}}\"],\n\n        \"accountId\": \"{{paymentMethodIdP}}\",\n        \n\t\t\t   \n\"salesEmployeeId\":\"ad8ebc9e-5fab-140f-879f-9e930cc16032\",\n\"planVersion\":11,\n\n\"frequency\":\"DAILY\",\n\"openEnded\":false,\n\"start\":\"{{today}}\",\n\"invoiceDate\":\"{{today}}\",\n\"expirationDate\" : \"{{futureDate}}\",\n\n\n\"duration\" : \"1\",\n\"autoRenew\" : true,\n\"renewType\" : \"OPEN\",\n\"renewalOptions\" :\n\n{ \"renewDate\" : \"04-28-2020\", \"renewFrequency\" : \"DAILY\", \"renewType\" : \"TERM\", \"renewInvoiceDate\" : \"04-28-2020\", \"renewAmount\" : 100, \"renewDuration\" : \"10\", \"renewExpireDate\" : \"04-28-2020\" },\n\n\"name\":\"Create_sub\",\n\n\"items\":[\n{ \"itemName\":\"feb28\", \n    \"itemId\":\"101ebc5e-1fab-120f-879f-4e930cc25c10\", \n    \"version\":1, \n    \"price\":\"10\", \n    \"quantity\":1, \n    \"expirationStart\":\"\", \n    \"type\":\"FEE\", \n    \"unlimited\":\"false\",\n    \"itemCategoryId\" : \"fd1ebc5e-1fab-120f-879f-4e930cc25c01\"\n    },\n    \n    { \n    \t\"itemName\":\"feb28\",  \n    \t\"itemId\":\"101ebc5e-1fab-120f-879f-4e930cc25c10\", \n    \t\"version\":1, \n    \t\"price\":\"20\",\n    \t\"quantity\":2, \n    \t\"expirationStart\":\"\", \n    \t\"type\":\"FEE\", \n    \t\"unlimited\":\"false\"\n    \t}]\n}\n\n\n]}\n"
            },
            "url": {
              "raw": "{{URL}}/agreement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetRemaining_Agree_Due",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Response Body has invoiceCountDue\"] = responseBody.has(\"invoiceCountDue\");",
                  "tests[\"Response Body has invoiceAmountDue\"] = responseBody.has(\"invoiceAmountDue\");",
                  "",
                  " ",
                  "   ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{authId}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/agreement/remaining-agreement-value/{{argNumb}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement",
                "remaining-agreement-value",
                "{{argNumb}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Cancel Agreement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "34baa38f-7126-466d-8e04-641f8f6a3e0c",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  " ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "66940dd5-2a64-47e3-9cc6-de2d11046fc3",
                "exec": [
                  "var CfutureDate = new Date();",
                  "var dd = CfutureDate.getDate()+3;",
                  "var mm = CfutureDate.getMonth(); //January is 0!",
                  "var yyyy = CfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+1;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "CfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"CfutureDate\", CfutureDate);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t \"subCancellationDate\": \"06-04-2019\",\n\t \"subCancelReasonCode\" : \"200\",\n  \"subCancelrequestedBy\" : \"member\",\n  \"subCancelEmpId\" : \"{{$guid}}\"\n}"
            },
            "url": {
              "raw": "{{URL}}/cancel-agreement/{{argNumb}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "cancel-agreement",
                "{{argNumb}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Remove Cancel Agreement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "34baa38f-7126-466d-8e04-641f8f6a3e0c",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "66940dd5-2a64-47e3-9cc6-de2d11046fc3",
                "exec": [
                  "var CfutureDate = new Date();",
                  "var dd = CfutureDate.getDate()+3;",
                  "var mm = CfutureDate.getMonth(); //January is 0!",
                  "var yyyy = CfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+1;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "CfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"CfutureDate\", CfutureDate);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"subCancelEmpId\" : \"d1e73a46-bf18-45e4-ae48-498b1f46b2cf\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/agreement/remove-cancel-agreement/{{argNumb}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement",
                "remove-cancel-agreement",
                "{{argNumb}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetRemaining_Agree_Due",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Response Body has invoiceCountDue\"] = responseBody.has(\"invoiceCountDue\");",
                  "tests[\"Response Body has invoiceAmountDue\"] = responseBody.has(\"invoiceAmountDue\");",
                  "",
                  " ",
                  "   ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{authId}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/agreement/remaining-agreement-value/{{argNumb}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement",
                "remaining-agreement-value",
                "{{argNumb}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "DeleteTaxRate",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5ad94f18-b5c4-4c03-97b7-c29e0951f8f1",
                "exec": [
                  "if ( responseCode.code!=200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Response Body has taxRate\"] = responseBody.has(\"taxRate\");",
                  "tests[\"Response Body has taxCode\"] = responseBody.has(\"taxCode\");",
                  "tests[\"Response Body has isOverriden\"] = responseBody.has(\"isOverriden\");",
                  "tests[\"Response Body has suggestedTaxRate\"] = responseBody.has(\"suggestedTaxRate\");",
                  "tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/tax-rate/{{locationId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "tax-rate",
                "{{locationId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetRemaining_Agree_Due",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Response Body has invoiceCountDue\"] = responseBody.has(\"invoiceCountDue\");",
                  "tests[\"Response Body has invoiceAmountDue\"] = responseBody.has(\"invoiceAmountDue\");",
                  "",
                  " ",
                  "   ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{authId}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/agreement/remaining-agreement-value/{{argNumb}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement",
                "remaining-agreement-value",
                "{{argNumb}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Avalara Create Additional Location",
      "item": [
        {
          "name": "Create Location",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0c80ab94-889b-4d27-9ec3-04c17a489ca3",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"locationId\", jsonData.id);",
                  " tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  extension\"] = responseBody.has(\"extension\");",
                  "    tests[\"Response Body has cardAuthorizationDocId\"] = responseBody.has(\"cardAuthorizationDocId\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has locale\"] = responseBody.has(\"locale\");",
                  "    tests[\"Response Body has emailIdentityVerified\"] = responseBody.has(\"emailIdentityVerified\");",
                  "    tests[\"Response Body has organizationId\"] = responseBody.has(\"organizationId\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "    ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"ABC Location\",\r\n  \"email\" : \"noreply@qa4life.com\",\r\n  \"phone\" : {\r\n    \"number\" : \"1234567\",\r\n    \"extension\" : \"38\"\r\n  },\r\n  \"timezone\" : \"US/Alaska\",\r\n  \"cardAuthorizationDocId\" : \"4c3cae02-de89-4fd8-943b-77fe3ee8903b\",\r\n  \"waiverDocId\" : \"b4f09941-3d46-4954-8e54-408785723188\",\r\n  \"termsDocId\" : \"e2726d52-58a4-4cdd-8a6a-220feae90410\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"zipCode\" : \"72120\",\r\n    \"country\" : \"USA\",\r\n    \"state\" : \"AR\"\r\n  },\r\n  \"locale\" : {\r\n    \"language\" : \"UA\",\r\n    \"region\" : \"US\",\r\n    \"variant\" : \"MAC\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/location",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "location"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Client_Acount Avalara",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "48c2eeee-79a5-446a-99f0-975331dddbd7",
                "exec": [
                  "var today = new Date();",
                  "var dd = today.getDate();",
                  "var mm = today.getMonth()+1; //January is 0!",
                  "var yyyy = today.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "    dd = '0'+dd",
                  "} ",
                  "",
                  "if(mm<10) {",
                  "    mm = '0'+mm",
                  "} ",
                  "",
                  "today = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"today\", today);",
                  "",
                  "",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randClientId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randClientId\", randClientId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "",
                  "",
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "",
                  "",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName+stringGen(5));",
                  "",
                  "var uniqueClient= stringGen(10)",
                  "postman.setEnvironmentVariable(\"UniqueClient\", \"Client \"+uniqueClient);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fdc6e94-07d5-4816-b0d7-e0b60dd8c413",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"accountIdClient\", jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"locationId\", jsonData.locationId);",
                  "postman.setEnvironmentVariable(\"clientId\", jsonData.clientId);",
                  "postman.setEnvironmentVariable(\"paymentMethodIdC\", jsonData.account.paymentMethod.id);",
                  " postman.setEnvironmentVariable(\"username1\", jsonData.onboardingAccountResponse.accountId);",
                  "   postman.setEnvironmentVariable(\"password1\", jsonData.onboardingAccountResponse.licenseKey);",
                  "    postman.setEnvironmentVariable(\"companyIdava\", jsonData.onboardingAccountResponse.companyId);",
                  "    ",
                  "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Client Id\"] = responseBody.has(\"clientId\");",
                  "   tests[\"Response Body has MerchantId\"] = responseBody.has(\"merchantId\");",
                  "   tests[\"Response Body has Client Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Client Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Client Email\"] = responseBody.has(\"email\");",
                  "    tests[\"Response Body has Client Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Client Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Client Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"locationId\" : \"{{locationId}}\",\n \"clientId\" : \"{{$guid}}\",\n \"account\" : {\n   \"name\" : \"{{UniqueClient}}\",\n   \"email\" : \"{{randName}}@example.org\",\n   \"phone\" : \"1234567890\",\n   \"sevaluation\" : \"{{seval}}\",\n   \"billingDate\" : \"{{today}}\",\n   \"paymentMethod\" : {    \"type\" : \"BANK_ACCOUNT\",\n     \"tokenId\":\"{{payment_method_id_client}}\"\n   }\n },\n  \"avalaraAccount\" : {\n    \"organizationId\" : \"fd1ebc1e-0fab-440f-879f-9e930cc97298\",\n    \"accountName\" : \"{{UniqueClient}}\",\n    \"website\" : \"bhavnacorp.com\",\n    \"lastName\" : \"sharma\",\n    \"welcomeEmail\" : \"Normal\",\n    \"avaCompanyCode\" : \"BHAVNACOMPONE4\",\n    \"companyAddress\" : {\n      \"line\" : \"655 Boston Post Rd\",\n      \"region\" : \"CT\",\n      \"city\" : \"Old Saybrook\",\n      \"country\" : \"US\",\n      \"postalCode\" : \"6475\"\n    },\n    \"acceptAvalaraTermsAndConditions\" : true,\n    \"haveReadAvalaraTermsAndConditions\" : true\n  }\n}"
            },
            "url": {
              "raw": "{{URL}}/account/client",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "client"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateAvalaraLocation",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "26d0c924-d9df-438a-a3d1-e440306dc72a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "username",
                "value": "{{username1}}",
                "type": "text"
              },
              {
                "key": "password",
                "value": "{{password1}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[ {\r\n  \"line1\" : \"450 Highland\",\r\n  \"city\" : \"Salem\",\r\n  \"region\" : \"MA\",\r\n  \"country\" : \"US\",\r\n  \"postalCode\" : \"1970\",\r\n  \"locationCode\" : \"R454545sdfssdsdewr4\",\r\n  \"addressTypeId\" : \"Salesperson\",\r\n  \"addressCategoryId\" : \"Salesperson\"\r\n} ]"
            },
            "url": {
              "raw": "{{URL}}/create-location/{{companyIdava}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "create-location",
                "{{companyIdava}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Client With Client Id Optional",
      "item": [
        {
          "name": "Create Location 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"locationId1\", jsonData.id);",
                  " tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  extension\"] = responseBody.has(\"extension\");",
                  "    tests[\"Response Body has cardAuthorizationDocId\"] = responseBody.has(\"cardAuthorizationDocId\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "   ",
                  "    tests[\"Response Body has locale\"] = responseBody.has(\"locale\");",
                  "    tests[\"Response Body has emailIdentityVerified\"] = responseBody.has(\"emailIdentityVerified\");",
                  "    tests[\"Response Body has organizationId\"] = responseBody.has(\"organizationId\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "    ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"ABC Location\",\r\n  \"email\" : \"noreply@qa4life.com\",\r\n  \"phone\" : {\r\n    \"number\" : \"1234567\",\r\n    \"extension\" : \"38\"\r\n  },\r\n  \"timezone\" : \"US/Alaska\",\r\n  \"cardAuthorizationDocId\" : \"4c3cae02-de89-4fd8-943b-77fe3ee8903b\",\r\n  \"waiverDocId\" : \"b4f09941-3d46-4954-8e54-408785723188\",\r\n  \"termsDocId\" : \"e2726d52-58a4-4cdd-8a6a-220feae90410\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"zipCode\" : \"72120\",\r\n    \"country\" : \"USA\",\r\n    \"state\" : \"AR\"\r\n  },\r\n  \"locale\" : {\r\n    \"language\" : \"UA\",\r\n    \"region\" : \"US\",\r\n    \"variant\" : \"MAC\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/location",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "location"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Location 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"locationId2\", jsonData.id);",
                  " tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  extension\"] = responseBody.has(\"extension\");",
                  "    tests[\"Response Body has cardAuthorizationDocId\"] = responseBody.has(\"cardAuthorizationDocId\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "",
                  "    tests[\"Response Body has locale\"] = responseBody.has(\"locale\");",
                  "    tests[\"Response Body has emailIdentityVerified\"] = responseBody.has(\"emailIdentityVerified\");",
                  "    tests[\"Response Body has organizationId\"] = responseBody.has(\"organizationId\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "    ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"ABC Location\",\r\n  \"email\" : \"noreply@qa4life.com\",\r\n  \"phone\" : {\r\n    \"number\" : \"1234567\",\r\n    \"extension\" : \"38\"\r\n  },\r\n  \"timezone\" : \"US/Alaska\",\r\n  \"cardAuthorizationDocId\" : \"4c3cae02-de89-4fd8-943b-77fe3ee8903b\",\r\n  \"waiverDocId\" : \"b4f09941-3d46-4954-8e54-408785723188\",\r\n  \"termsDocId\" : \"e2726d52-58a4-4cdd-8a6a-220feae90410\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"zipCode\" : \"72120\",\r\n    \"country\" : \"USA\",\r\n    \"state\" : \"AR\"\r\n  },\r\n  \"locale\" : {\r\n    \"language\" : \"UA\",\r\n    \"region\" : \"US\",\r\n    \"variant\" : \"MAC\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/location",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "location"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Payment_Method_Client",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"payment_method_id_client\", jsonData.id);",
                  "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                  "",
                  "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                  "   tests[\"Response Body has  accountHolderName\"] = responseBody.has(\"accountHolderName\");",
                  "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                  "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                  "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                  "",
                  "  ",
                  "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                  "}",
                  "   ",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"Praveen Kumar\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": [
            {
              "name": "Response_200",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                },
                "url": {
                  "raw": "{{payment_gateway_server}}/accountinfotoken",
                  "host": [
                    "{{payment_gateway_server}}"
                  ],
                  "path": [
                    "accountinfotoken"
                  ]
                }
              },
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "CreateClientAccount_WithClientId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e8b2e784-73c8-4d3e-a7a2-1b7e69cf587a",
                "exec": [
                  "var today = new Date();",
                  "var dd = today.getDate();",
                  "var mm = today.getMonth()+1; //January is 0!",
                  "var yyyy = today.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "    dd = '0'+dd",
                  "} ",
                  "",
                  "if(mm<10) {",
                  "    mm = '0'+mm",
                  "} ",
                  "",
                  "today = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"today\", today);",
                  "",
                  "",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randClientId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randClientId\", randClientId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var uniqueClient= stringGen(10)",
                  "postman.setEnvironmentVariable(\"UniqueClient\", \"Client \"+uniqueClient);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1f895b06-b44c-4457-80c7-721c46cb9ac2",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"accountIdClientFee\", jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"locationId\", jsonData.locationId);",
                  "postman.setEnvironmentVariable(\"clientId\", jsonData.clientId);",
                  "postman.setEnvironmentVariable(\"paymentMethodIdC\", jsonData.account.paymentMethod.id);",
                  "",
                  "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Client Id\"] = responseBody.has(\"clientId\");",
                  "   tests[\"Response Body has MerchantId\"] = responseBody.has(\"merchantId\");",
                  "   tests[\"Response Body has Client Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Client Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Client Email\"] = responseBody.has(\"email\");",
                  "    tests[\"Response Body has Client Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Client Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Client Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"locationId\" : \"{{locationId1}}\",\n \"clientId\" : \"{{$guid}}\",\n \"account\" : {\n   \"name\" : \"{{UniqueClient}}\",\n   \"email\" : \"{{randName}}@qa4life.com\",\n   \"phone\" : \"1234567890\",\n   \"sevaluation\" : \"DAILY\",\n   \"billingDate\" : \"{{today}}\",\n   \"paymentMethod\" : {    \"type\" : \"BANK_ACCOUNT\",\n     \"tokenId\":\"{{payment_method_id_client}}\",\n      \"sevaluation\" : \"MONTHLY\",\n   \"billingDate\" : \"04-30-2019\"\n   }\n }\n}"
            },
            "url": {
              "raw": "{{URL}}/account/client",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "client"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ReviewClientAccount_with Client Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbc233f8-6c37-461c-b607-18945dda70be",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  " ",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/account/client/{{accountIdClientFee}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "client",
                "{{accountIdClientFee}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateClientAccount_WithoutClientId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e8b2e784-73c8-4d3e-a7a2-1b7e69cf587a",
                "exec": [
                  "var today = new Date();",
                  "var dd = today.getDate();",
                  "var mm = today.getMonth()+1; //January is 0!",
                  "var yyyy = today.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "    dd = '0'+dd",
                  "} ",
                  "",
                  "if(mm<10) {",
                  "    mm = '0'+mm",
                  "} ",
                  "",
                  "today = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"today\", today);",
                  "",
                  "",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randClientId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randClientId\", randClientId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var uniqueClient= stringGen(10)",
                  "postman.setEnvironmentVariable(\"UniqueClient\", \"Client \"+uniqueClient);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1f895b06-b44c-4457-80c7-721c46cb9ac2",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"accountIdClientFee\", jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"locationId\", jsonData.locationId);",
                  "",
                  "postman.setEnvironmentVariable(\"paymentMethodIdC\", jsonData.account.paymentMethod.id);",
                  "",
                  "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "",
                  "   tests[\"Response Body has MerchantId\"] = responseBody.has(\"merchantId\");",
                  "   tests[\"Response Body has Client Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Client Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Client Email\"] = responseBody.has(\"email\");",
                  "    tests[\"Response Body has Client Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Client Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Client Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"locationId\" : \"{{locationId2}}\",\n \"account\" : {\n   \"name\" : \"{{UniqueClient}}\",\n   \"email\" : \"{{randName}}@qa4life.com\",\n   \"phone\" : \"1234567890\",\n   \"sevaluation\" : \"DAILY\",\n   \"billingDate\" : \"{{today}}\",\n   \"paymentMethod\" : {    \"type\" : \"BANK_ACCOUNT\",\n     \"tokenId\":\"{{payment_method_id_client}}\",\n      \"sevaluation\" : \"MONTHLY\",\n   \"billingDate\" : \"04-30-2019\"\n   }\n }\n}"
            },
            "url": {
              "raw": "{{URL}}/account/client",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "client"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ReviewClientAccount_Without Client Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbc233f8-6c37-461c-b607-18945dda70be",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  " ",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/account/client/{{accountIdClient}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "client",
                "{{accountIdClient}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Allow Subscription Enrollment with Credit Card",
      "item": [
        {
          "name": "CreatePayorAccount 1",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "   ",
                  "postman.setEnvironmentVariable(\"accountIdpayor\", jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"payorId\", jsonData.payorId);",
                  "",
                  "postman.setEnvironmentVariable(\"paymentMethodIdP\", jsonData.account.paymentMethod.id);",
                  "",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberId\": \"{{memberId}}\",\r\n\"payorId\" : \"{{$guid}}\",\r\n\"account\":\r\n{\r\n\"name\":\"Test\",\r\n\"email\":\"test@gmail.com\",\r\n\"phone\":\"19075526443\",\r\n\"sevaluation\": \"DAILY\",\r\n\"billingDate\": \"{{today}}\",\r\n\"paymentMethod\":\r\n\r\n{ \"type\":\"CREDIT_CARD\", \"brand\":\"VISA\", \"token\":\"454454454454\", \"expiry_month\":\"1\", \"expiry_year\":\"20\" }\r\n}\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateSubscription_Renew_Type_Term",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bd4904f6-c412-464a-9331-3ce629c54341",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "16dacbcc-2206-490d-ace9-5dbb53b7f58d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"subIdaccount\",jsonData.subId);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "   ",
                  "    ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"922e9e85-dfc2-4f22-914f-428060eeec78\",\n\n\"start\": \"04-11-2019\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"07-12-2019\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"25\",\n\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"04-13-2019\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateSubscription_OpenEnded",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bd4904f6-c412-464a-9331-3ce629c54341",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "16dacbcc-2206-490d-ace9-5dbb53b7f58d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"subIdaccount\",jsonData.subId);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "  ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "  ",
                  "",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  " ",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{authId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"2dac3229-242d-44a1-943a-cf757dfabe3d\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\n\"frequency\": \"WEEKLY\",\n\n\"autoRenew\": false,\n\n\"openEnded\": \"true\",\n\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 400, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateAgreement ",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b55f433-2bf3-4fec-82f1-e007eb587086",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "  ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "pm.environment.set(\"agreementNumber\", jsonData.agreementNumber);",
                  "pm.environment.set(\"agreementId\", jsonData.agreementId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9942f3b2-866e-47a4-9628-6282a646a626",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGIJrstuvwxyz123456789\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var uniqueClient= stringGen(15)",
                  "postman.setEnvironmentVariable(\"agreementNum\", uniqueClient);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{authId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"locationId\": \"{{locationId}}\",\r\n\"documentIdList\" : [ \"eaca4410-3686-4eda-87c3-1320d15e4b94\" ],\r\n\"memberIdList\" : [ {\r\n    \"memberId\" : \"{{memberId}}\",\r\n    \"primary\" : true\r\n  } ],\r\n \"agreementNumber\" : \"{{agreementNum}}\",\r\n \"campaign\" : \" ABC Financial\" , \r\n\"subscriptionList\" : [ {\r\n\"primary\" : true,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"922e9e85-dfc2-4f22-914f-428060eeec78\",\r\n\r\n\"start\": \"04-08-2019\",\r\n\"invoiceDate\": \"04-08-2019\",\r\n\"expirationDate\": \"04-10-2019\",\r\n\"frequency\": \"DAILY\",\r\n\"duration\": \"4\",\r\n\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"04-13-2019\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"04-13-2019\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 255005, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n},\r\n{\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"2dac3229-242d-44a1-943a-cf757dfabe3d\",\r\n\r\n\"start\": \"04-08-2019\",\r\n\"invoiceDate\": \"04-08-2019\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"4\",\r\n\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"{{futureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 3, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n}\r\n\r\n]\r\n\r\n}"
            },
            "url": {
              "raw": "{{URL}}/agreement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "View Agreement",
      "item": [
        {
          "name": "View Agreement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b400a849-0377-4536-8048-29c25d6c2387",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"memberIdList\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authId}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/agreement/{{agreementNum}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement",
                "{{agreementNum}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Agreement Number to be less than 15 AlphaNumeric",
      "item": [
        {
          "name": "CreateAgreement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b55f433-2bf3-4fec-82f1-e007eb587086",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "  ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "pm.environment.set(\"agreementNumber\", jsonData.agreementNumber);",
                  "pm.environment.set(\"agreementId\", jsonData.agreementId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9942f3b2-866e-47a4-9628-6282a646a626",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGIJrstuvwxyz123456789\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var uniqueClient= stringGen(15)",
                  "postman.setEnvironmentVariable(\"agreementNum\", uniqueClient);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{authId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"locationId\": \"{{locationId}}\",\r\n\"documentIdList\" : [ \"eaca4410-3686-4eda-87c3-1320d15e4b94\" ],\r\n\"memberIdList\" : [ {\r\n    \"memberId\" : \"{{memberId}}\",\r\n    \"primary\" : true\r\n  } ],\r\n \"agreementNumber\" : \"{{agreementNum}}\",\r\n \"campaign\" : \" ABC Financial\" , \r\n\"subscriptionList\" : [ {\r\n\"primary\" : true,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"922e9e85-dfc2-4f22-914f-428060eeec78\",\r\n\r\n\"start\": \"04-08-2019\",\r\n\"invoiceDate\": \"04-08-2019\",\r\n\"expirationDate\": \"04-10-2019\",\r\n\"frequency\": \"DAILY\",\r\n\"duration\": \"4\",\r\n\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"04-13-2019\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"04-13-2019\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 255005, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n},\r\n{\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"2dac3229-242d-44a1-943a-cf757dfabe3d\",\r\n\r\n\"start\": \"04-08-2019\",\r\n\"invoiceDate\": \"04-08-2019\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"4\",\r\n\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"{{futureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 3, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n}\r\n\r\n]\r\n\r\n}"
            },
            "url": {
              "raw": "{{URL}}/agreement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Review payor Account Payment Methods",
      "item": [
        {
          "name": "Create Location",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"locationId\", jsonData.id);",
                  " tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  extension\"] = responseBody.has(\"extension\");",
                  "    tests[\"Response Body has cardAuthorizationDocId\"] = responseBody.has(\"cardAuthorizationDocId\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "  ",
                  "    tests[\"Response Body has locale\"] = responseBody.has(\"locale\");",
                  "    tests[\"Response Body has emailIdentityVerified\"] = responseBody.has(\"emailIdentityVerified\");",
                  "    tests[\"Response Body has organizationId\"] = responseBody.has(\"organizationId\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "    ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"ABC Location\",\r\n  \"email\" : \"noreply@qa4life.com\",\r\n  \"phone\" : {\r\n    \"number\" : \"1234567\",\r\n    \"extension\" : \"38\"\r\n  },\r\n  \"timezone\" : \"US/Alaska\",\r\n  \"cardAuthorizationDocId\" : \"4c3cae02-de89-4fd8-943b-77fe3ee8903b\",\r\n  \"waiverDocId\" : \"b4f09941-3d46-4954-8e54-408785723188\",\r\n  \"termsDocId\" : \"e2726d52-58a4-4cdd-8a6a-220feae90410\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"zipCode\" : \"72120\",\r\n    \"country\" : \"USA\",\r\n    \"state\" : \"AR\"\r\n  },\r\n  \"locale\" : {\r\n    \"language\" : \"UA\",\r\n    \"region\" : \"US\",\r\n    \"variant\" : \"MAC\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/location",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "location"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Member",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                  "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "72edf1d5-e2be-4dd3-85ca-0326897cc421",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var member= stringGen(8)",
                  "postman.setEnvironmentVariable(\"member\", \"member\"+member);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{member}}\",\r\n  \"lastName\" : \"{{member}}\",\r\n  \"middleName\" : \"{{member}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n  \"email\" : \"{{member}}.doe@qa4life.com\",\r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Payment_Method_Client",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"payment_method_id_client\", jsonData.id);",
                  "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                  "",
                  "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                  "   tests[\"Response Body has  accountHolderName\"] = responseBody.has(\"accountHolderName\");",
                  "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                  "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                  "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                  "",
                  "  ",
                  "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                  "}",
                  "   ",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"Praveen Kumar\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": [
            {
              "name": "Response_200",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                },
                "url": {
                  "raw": "{{payment_gateway_server}}/accountinfotoken",
                  "host": [
                    "{{payment_gateway_server}}"
                  ],
                  "path": [
                    "accountinfotoken"
                  ]
                }
              },
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create_Payment_Method_Payor",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"payment_method_id_payer\", jsonData.id);",
                  "",
                  " ",
                  "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                  "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                  "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                  "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                  "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                  "}",
                  "   ",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"Praveen Kumar\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": [
            {
              "name": "Response_200",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                },
                "url": {
                  "raw": "{{payment_gateway_server}}/accountinfotoken",
                  "host": [
                    "{{payment_gateway_server}}"
                  ],
                  "path": [
                    "accountinfotoken"
                  ]
                }
              },
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "CreateClientAccount",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e8b2e784-73c8-4d3e-a7a2-1b7e69cf587a",
                "exec": [
                  "var today = new Date();",
                  "var dd = today.getDate();",
                  "var mm = today.getMonth()+1; //January is 0!",
                  "var yyyy = today.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "    dd = '0'+dd",
                  "} ",
                  "",
                  "if(mm<10) {",
                  "    mm = '0'+mm",
                  "} ",
                  "",
                  "today = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"today\", today);",
                  "",
                  "",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randClientId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randClientId\", randClientId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var uniqueClient= stringGen(10)",
                  "postman.setEnvironmentVariable(\"UniqueClient\", \"Client \"+uniqueClient);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1f895b06-b44c-4457-80c7-721c46cb9ac2",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"accountIdClient\", jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"locationId\", jsonData.locationId);",
                  "postman.setEnvironmentVariable(\"clientId\", jsonData.clientId);",
                  "postman.setEnvironmentVariable(\"paymentMethodIdC\", jsonData.account.paymentMethod.id);",
                  "",
                  "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Client Id\"] = responseBody.has(\"clientId\");",
                  "   tests[\"Response Body has MerchantId\"] = responseBody.has(\"merchantId\");",
                  "   tests[\"Response Body has Client Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Client Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Client Email\"] = responseBody.has(\"email\");",
                  "    tests[\"Response Body has Client Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Client Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Client Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"locationId\" : \"{{locationId}}\",\n \"clientId\" : \"{{$guid}}\",\n\n \"account\" : {\n   \"name\" : \"Praveen Kumar\",\n   \"email\" : \"{{randName}}@qa4life.com\",\n   \"phone\" : \"1234567890\",\n   \"sevaluation\" : \"MONTHLY\",\n   \"billingDate\" : \"{{today}}\",\n   \"paymentMethod\" : {    \"type\" : \"BANK_ACCOUNT\",\n     \"tokenId\":\"{{payment_method_id_client}}\"\n     \n \n   }\n }\n}"
            },
            "url": {
              "raw": "{{URL}}/account/client",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "client"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreatePayorAccount",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "   ",
                  "postman.setEnvironmentVariable(\"account_IdPayor_Fee\",jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"payorId\",jsonData.payorId);",
                  "postman.setEnvironmentVariable(\"paymentMethodIdP\",jsonData.account.paymentMethod.id);",
                  "",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \r\n   \"locationId\":\"{{locationId}}\",\r\n   \"payorId\":\"{{$guid}}\",\r\n   \"memberId\": \"{{memberId}}\",\r\n   \"account\":{  \r\n      \"name\":\"124656788\",\r\n      \"phone\":\"8009578010\",\r\n      \"sevaluation\":\"WEEKLY\",\r\n     \"billingDate\" : \"{{today}}\",\r\n\"paymentMethod\" :\r\n\r\n{ \"type\" : \"BANK_ACCOUNT\", \"tokenId\":\"{{payment_method_id_payer}}\" }\r\n   }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ReviewPayerPaymentMethod_REL1_7330",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbc233f8-6c37-461c-b607-18945dda70be",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  " ",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/paymentMethod/{{paymentMethodIdP}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "paymentMethod",
                "{{paymentMethodIdP}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddPaymentMethod_BANK",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "   ",
                  "postman.setEnvironmentVariable(\"accountIdpayorFee\", jsonData.accountId);",
                  "postman.setEnvironmentVariable(\"payorId\", jsonData.payorId);",
                  "",
                  "postman.setEnvironmentVariable(\"payerBank\", jsonData.id);",
                  "",
                  "",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "  ",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "  ",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \t\"accountId\": \"{{account_IdPayor_Fee}}\",\r\n \t\"type\": \"BANK_ACCOUNT\",\r\n \t\"bankAccountType\": \"SAVING\",\r\n\t\"accountHolderName\": \"df7rY7e5F3\",\r\n\t\"routingNumber\": \"101000967\",\r\n\t\"display\" : \"1610\",\r\n \t\"alias\": \"testalias6\",\r\n \t\"sevaluation\" : \"MONTHLY\",\r\n   \"billingDate\" : \"{{today}}\",\r\n \t\"tokenId\": \"f0745bdf-2c9d-4f01-a9d5-e4bb25d26524\"\r\n }"
            },
            "url": {
              "raw": "{{URL}}/paymentMethod",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "paymentMethod"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ReviewPayerPaymentMethod_Bank_REL1_7330",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbc233f8-6c37-461c-b607-18945dda70be",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "   ",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/paymentMethod/{{payerBank}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "paymentMethod",
                "{{payerBank}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddPaymentMethod_CreditCard",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "   ",
                  "postman.setEnvironmentVariable(\"accountIdpayorFee\", jsonData.accountId);",
                  "",
                  "postman.setEnvironmentVariable(\"payerCard\", jsonData.id);",
                  "",
                  "",
                  "",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \t\"accountId\": \"{{account_IdPayor_Fee}}\",\r\n \t\"type\": \"CREDIT_CARD\",\r\n  \t\"accountHolderName\": \"df7rY7e5F3\",\r\n  \t\"expiryYear\": \"2020\",\r\n\t\"expiryMonth\": \"05\",\r\n \t\"brand\": \"MASTERCARD\",\r\n\t\"display\": \"4512\",\r\n \t\"alias\": \"testalias6\",\r\n \t\"sevaluation\" : \"ANNUALLY\",\r\n   \"billingDate\" : \"{{today}}\",\r\n \t\"tokenId\": \"f0745bdf-2c9d-4f01-a9d5-e4bb25d26524\"\r\n }"
            },
            "url": {
              "raw": "{{URL}}/paymentMethod",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "paymentMethod"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ReviewPayerPaymentMethod_Card_REL1_7330",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbc233f8-6c37-461c-b607-18945dda70be",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "   ",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/paymentMethod/{{payerCard}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "paymentMethod",
                "{{payerCard}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ReviewPayerAccPaymentMethods_REL1_973",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbc233f8-6c37-461c-b607-18945dda70be",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "  ",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/payor/account/{{account_IdPayor_Fee}}?page=0&size=2",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payor",
                "account",
                "{{account_IdPayor_Fee}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Payer Without Payment Method",
      "item": [
        {
          "name": "Create Member",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                  "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "72edf1d5-e2be-4dd3-85ca-0326897cc421",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var member= stringGen(8)",
                  "postman.setEnvironmentVariable(\"member\", \"member\"+member);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{member}}\",\r\n  \"lastName\" : \"{{member}}\",\r\n  \"middleName\" : \"{{member}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n  \"email\" : \"{{member}}.doe@qa4life.com\",\r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreatePayorAccount",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "   ",
                  "postman.setEnvironmentVariable(\"account_IdPayor_Without_Payment_Method\",jsonData.account.accountId);",
                  "postman.setEnvironmentVariable(\"payorId\",jsonData.payorId);",
                  "",
                  "",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "   ",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \r\n   \"locationId\":\"{{locationId}}\",\r\n   \"payorId\":\"{{$guid}}\",\r\n   \"memberId\": \"{{memberId}}\",\r\n   \"account\":{  \r\n      \"name\":\"124656788\",\r\n      \"phone\":\"8009578010\",\r\n      \"sevaluation\":\"WEEKLY\",\r\n     \"billingDate\" : \"{{today}}\"\r\n\r\n   }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Basic CreateSubscription Current_date On Main Account",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"subIdFreeze\",jsonData.subId);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"{{account_IdPayor_Without_Payment_Method}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"DAILY\",\n\"duration\": \"2\",\n\"name\": \"ankit\",\n\"autoRenew\": \"false\",\n\"openEnded\": false,\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 300, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Main_Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementId\", jsonData.statementId);",
                  "",
                  "if ( responseCode.code!=200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"statementIdA\", jsonData.statementId);",
                  "postman.setEnvironmentVariable(\"totalAmount\", jsonData.totalAmount);",
                  "",
                  "tests[\"Response Body has correct locationId id\"] = responseBody.has(\"locationId\");",
                  "tests[\"Response Body has correct Statement id\"] = responseBody.has(\"\\\"statementId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"statementId\")+\"\\\"\");",
                  "tests[\"Response Body has correct accountId id\"] = responseBody.has(\"accountId\");",
                  "tests[\"Response Body has correct totalAmount\"] = responseBody.has(\"totalAmount\");",
                  "",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2c5c2783-b150-4aa6-8679-70adae967a65",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\r\n\r\n\r\n\r\n{  \r\n\t\"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{account_IdPayor_Without_Payment_Method}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Apply payment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8699b436-f69c-4969-b713-d6995a8069cd",
                "exec": [
                  "setTimeout(function(){}, [5000]);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bd4a87d9-bc02-4ee4-a722-789c7a35aa96",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has payStatus\"] = responseBody.has(\"payStatus\");",
                  "    tests[\"Response Body has message\"] = responseBody.has(\"message\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"payAmount\" : \"{{totalAmount}}\" \r\n}"
            },
            "url": {
              "raw": "{{URL}}/apply-payment/account/{{account_IdPayor_Fee}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "apply-payment",
                "account",
                "{{account_IdPayor_Fee}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddPaymentMethod_BANK",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "   ",
                  "",
                  "",
                  "",
                  "",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \t\"accountId\": \"{{account_IdPayor_Without_Payment_Method}}\",\r\n \t\"type\": \"BANK_ACCOUNT\",\r\n \t\"bankAccountType\": \"SAVING\",\r\n\t\"accountHolderName\": \"df7rY7e5F3\",\r\n\t\"routingNumber\": \"101000967\",\r\n\t\"display\" : \"1610\",\r\n \t\"alias\": \"testalias6\",\r\n \t\"sevaluation\" : \"MONTHLY\",\r\n   \"billingDate\" : \"{{today}}\",\r\n \t\"tokenId\": \"f0745bdf-2c9d-4f01-a9d5-e4bb25d26524\"\r\n }"
            },
            "url": {
              "raw": "{{URL}}/paymentMethod",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "paymentMethod"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ReviewPayerAccPaymentMethods",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbc233f8-6c37-461c-b607-18945dda70be",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "  ",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/payor/account/{{account_IdPayor_Without_Payment_Method}}?page=0&size=0",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payor",
                "account",
                "{{account_IdPayor_Without_Payment_Method}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "0"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Subscription/Evaluate Statement/Generate Statement",
      "item": [
        {
          "name": "Basic CreateSubscription Current_date Payment Method",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"subIdFreeze\",jsonData.subId);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"{{paymentMethodIdP}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"DAILY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": false,\n\"openEnded\": false,\n\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 100, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Evaluate Statement_Payment Method_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "tests[\"Response Body has statementAmount\"] = responseBody.has(\"statementAmount\");",
                  " ",
                  "   ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "32ead9cd-ef99-4a46-820a-c6d634be46d0",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-statement",
                "account",
                "{{paymentMethodIdP}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Payment Method_id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementId\", jsonData.statementId);",
                  "",
                  "if ( responseCode.code!=200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"statementIdA\", jsonData.statementId);",
                  "",
                  "tests[\"Response Body has correct locationId id\"] = responseBody.has(\"locationId\");",
                  "tests[\"Response Body has correct Statement id\"] = responseBody.has(\"\\\"statementId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"statementId\")+\"\\\"\");",
                  "tests[\"Response Body has correct accountId id\"] = responseBody.has(\"accountId\");",
                  "tests[\"Response Body has correct totalAmount\"] = responseBody.has(\"totalAmount\");",
                  "",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2c5c2783-b150-4aa6-8679-70adae967a65",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\r\n\r\n\r\n\r\n{  \r\n\t\"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Invoice payor Account_account_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7cc4b0be-b603-4b22-9f6a-18d684445c59",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "     postman.setEnvironmentVariable(\"invId\",jsonData.id);",
                  "     postman.setEnvironmentVariable(\"invamt\",jsonData.totalAmount);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct totalNetPrice\"] = responseBody.has(\"totalNetPrice\");",
                  "   tests[\"Response Body has totalDiscountAmount\"] = responseBody.has(\"totalDiscountAmount\");",
                  "       tests[\"Response Body has discountCode\"] = responseBody.has(\"discountCode\");",
                  "   ",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has  salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has  price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "    tests[\"Response Body has invoiceType\"] = responseBody.has(\"invoiceType\");",
                  "    tests[\"Response Body has invoiceNumber\"] = responseBody.has(\"invoiceNumber\");",
                  "    tests[\"Response Body has itemCategoryId\"] = responseBody.has(\"itemCategoryId\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n   \"locationId\":\"{{locationId}}\",\r\n   \"memberId\": \"{{memberId11}}\",\r\n  \"accountId\": \"{{account_IdPayor_Fee}}\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c74\",\r\n\"totalTax\": 0,\r\n\"totalAmount\": 500,\r\n\"totalDiscountAmount\": 0,\r\n\"totalNetPrice\": 0,\r\n\"items\": [\r\n\r\n{ \"itemName\": \"{{randName}}\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 300, \"discountCode\": 1234, \"discountAmount\": 10, \"amountRemaining\": 200, \"taxAmount\": 20, \"type\": \"PRODUCT\", \"quantity\": \"1\", \"itemCategoryId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c12\" }\r\n]\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor/invoice",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor",
                "invoice"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Statement_Main_Account",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"statementId\", jsonData.statementId);",
                  "",
                  "if ( responseCode.code!=200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"statementIdA\", jsonData.statementId);",
                  "postman.setEnvironmentVariable(\"totalAmount\", jsonData.totalAmount);",
                  "",
                  "tests[\"Response Body has correct locationId id\"] = responseBody.has(\"locationId\");",
                  "tests[\"Response Body has correct Statement id\"] = responseBody.has(\"\\\"statementId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"statementId\")+\"\\\"\");",
                  "tests[\"Response Body has correct accountId id\"] = responseBody.has(\"accountId\");",
                  "tests[\"Response Body has correct totalAmount\"] = responseBody.has(\"totalAmount\");",
                  "",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2c5c2783-b150-4aa6-8679-70adae967a65",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\r\n\r\n\r\n\r\n{  \r\n\t\"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{account_IdPayor_Fee}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/statement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "statement"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Evaluate Settlement And Generate Settlement",
      "item": [
        {
          "name": "Evaluate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "    tests[\"Response Body has locationId\"] = responseBody.has(\"locationId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has amount\"] = responseBody.has(\"amount\");",
                  "    ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d10819aa-77dd-49dd-9277-1d5b4195f60b",
                "exec": [
                  "setTimeout(function(){}, [25000]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClientFee}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "evaluate-settlement",
                "account",
                "{{accountIdClientFee}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Generate Settlement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                "exec": [
                  "",
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"settlementId\", jsonData.settlementId);",
                  "",
                  "tests[\"Response Body has correct amount\"] = responseBody.has(\"amount\");",
                  "tests[\"Response Body has correct accountId\"] = responseBody.has(\"accountId\");",
                  "",
                  "",
                  "}",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/settlement/account/{{accountIdClientFee}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "settlement",
                "account",
                "{{accountIdClientFee}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Freeze Existing Issue Verification",
      "item": [
        {
          "name": "Prerequisite",
          "item": [
            {
              "name": "Create Location",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c80ab94-889b-4d27-9ec3-04c17a489ca3",
                    "exec": [
                      "",
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"locationId\", jsonData.id);",
                      " tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                      "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                      "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                      "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                      "    tests[\"Response Body has  extension\"] = responseBody.has(\"extension\");",
                      "    tests[\"Response Body has cardAuthorizationDocId\"] = responseBody.has(\"cardAuthorizationDocId\");",
                      "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                      "    tests[\"Response Body has locale\"] = responseBody.has(\"locale\");",
                      "    tests[\"Response Body has emailIdentityVerified\"] = responseBody.has(\"emailIdentityVerified\");",
                      "    tests[\"Response Body has organizationId\"] = responseBody.has(\"organizationId\");",
                      "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                      "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                      "   ",
                      "",
                      "",
                      "    ",
                      "}",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\" : \"ABC Location\",\r\n  \"email\" : \"noreply@qa4life.com\",\r\n  \"phone\" : {\r\n    \"number\" : \"1234567\",\r\n    \"extension\" : \"38\"\r\n  },\r\n  \"timezone\" : \"US/Alaska\",\r\n  \"cardAuthorizationDocId\" : \"4c3cae02-de89-4fd8-943b-77fe3ee8903b\",\r\n  \"waiverDocId\" : \"b4f09941-3d46-4954-8e54-408785723188\",\r\n  \"termsDocId\" : \"e2726d52-58a4-4cdd-8a6a-220feae90410\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"zipCode\" : \"72120\",\r\n    \"country\" : \"USA\",\r\n    \"state\" : \"AR\"\r\n  },\r\n  \"locale\" : {\r\n    \"language\" : \"UA\",\r\n    \"region\" : \"US\",\r\n    \"variant\" : \"MAC\"\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/location",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "location"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create member1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0fc0d9f-f6aa-4237-b7e0-7a8b1565df3b",
                    "exec": [
                      "",
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                      "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                      "   ",
                      "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                      "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                      "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                      "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                      "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                      "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                      "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                      "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                      "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                      "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                      "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                      "   ",
                      "",
                      "",
                      "",
                      "",
                      "}",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"firstName\" : \"{{UniqueClient}}\",\r\n  \"lastName\" : \"{{UniqueClient}}\",\r\n  \"middleName\" : \"{{UniqueClient}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n \r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/member",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "member"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create_Payment_Method_Client",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b532f0de-2ada-4eac-91b6-83e71b6d3c10",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "   postman.setEnvironmentVariable(\"payment_method_id_client\", jsonData.id);",
                      "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                      "",
                      "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                      "   tests[\"Response Body has  accountHolderName\"] = responseBody.has(\"accountHolderName\");",
                      "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                      "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                      "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                      "",
                      "  ",
                      "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                      "}",
                      "   ",
                      "tests[\"Response code should be 200\"] = responseCode.code === 201;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"Manish Kumar\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
                },
                "url": {
                  "raw": "{{URL}}/payment-method",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-method"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create_Client_Acount",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "48c2eeee-79a5-446a-99f0-975331dddbd7",
                    "exec": [
                      "var today = new Date();",
                      "var dd = today.getDate();",
                      "var mm = today.getMonth()+1; //January is 0!",
                      "var yyyy = today.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "    dd = '0'+dd",
                      "} ",
                      "",
                      "if(mm<10) {",
                      "    mm = '0'+mm",
                      "} ",
                      "",
                      "today = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"today\", today);",
                      "",
                      "",
                      "",
                      "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                      "",
                      "var randClientId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randClientId\", randClientId);",
                      "",
                      "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                      "",
                      "",
                      "",
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "",
                      "",
                      "",
                      "var randName = names[Math.floor(Math.random() * names.length)];",
                      "postman.setEnvironmentVariable(\"randName\", randName+stringGen(5));",
                      "",
                      "var uniqueClient= stringGen(10)",
                      "postman.setEnvironmentVariable(\"UniqueClient\", \"Client \"+uniqueClient);",
                      "",
                      "",
                      "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                      "",
                      "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                      "postman.setEnvironmentVariable(\"seval\", seval);",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5fdc6e94-07d5-4816-b0d7-e0b60dd8c413",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"locationId\", jsonData.locationId);",
                      "postman.setEnvironmentVariable(\"clientId\", jsonData.clientId);",
                      "postman.setEnvironmentVariable(\"paymentMethodIdC\", jsonData.account.paymentMethod.id);",
                      " ",
                      "    ",
                      "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct Client Id\"] = responseBody.has(\"clientId\");",
                      "   tests[\"Response Body has MerchantId\"] = responseBody.has(\"merchantId\");",
                      "",
                      "    tests[\"Response Body has Client Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has Client Email\"] = responseBody.has(\"email\");",
                      "    tests[\"Response Body has Client Phone\"] = responseBody.has(\"phone\");",
                      "    tests[\"Response Body has Client Sevaluation\"] = responseBody.has(\"sevaluation\");",
                      "    tests[\"Response Body has Client Billing Date\"] = responseBody.has(\"billingDate\");",
                      "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                      "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                      "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                      "    ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n \"locationId\" : \"{{locationId}}\",\n \"clientId\" : \"{{$guid}}\",\n \"account\" : {\n   \"name\" : \"{{UniqueClient}}\",\n   \"email\" : \"{{randName}}@example.org\",\n   \"phone\" : \"1234567890\",\n   \"sevaluation\" : \"{{seval}}\",\n   \"billingDate\" : \"{{today}}\",\n   \"paymentMethod\" : {    \"type\" : \"BANK_ACCOUNT\",\n     \"tokenId\":\"{{payment_method_id_client}}\"\n   }\n }\n}"
                },
                "url": {
                  "raw": "{{URL}}/account/client",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "account",
                    "client"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create_Payment_Method_Payor_1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cb1b0d87-aedd-4610-9261-caa6f7a09ab1",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "   postman.setEnvironmentVariable(\"payment_method_id\", jsonData.id);",
                      "",
                      "   tests[\"Response Body has Payment Method  Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"payment_method_id\")+\"\\\"\");",
                      "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                      "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                      "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                      "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                      "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                      "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                      "}",
                      "   ",
                      "tests[\"Response code should be 200\"] = responseCode.code === 201;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"Manish Kumar\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
                },
                "url": {
                  "raw": "{{URL}}/payment-method",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-method"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "CreatePayorAccount1",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7e004e8e-d559-49f6-af7a-c2c4cf4677db",
                    "exec": [
                      "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                      "",
                      "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                      "",
                      "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                      "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                      "",
                      "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                      "",
                      "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                      "",
                      "var randName = names[Math.floor(Math.random() * names.length)];",
                      "postman.setEnvironmentVariable(\"randName\", randName);",
                      "",
                      "",
                      "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                      "",
                      "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                      "postman.setEnvironmentVariable(\"seval\", seval);",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "af03f942-9cb3-46d6-acf7-2b545732842a",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    ",
                      "   ",
                      "postman.setEnvironmentVariable(\"payoraccountId\", jsonData.account.accountId);",
                      "",
                      "postman.setEnvironmentVariable(\"payorId\", jsonData.payorId);",
                      "",
                      "postman.setEnvironmentVariable(\"paymentMethodIdP\", jsonData.account.paymentMethod.id);",
                      "",
                      "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      " ",
                      "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                      "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                      "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                      "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                      "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                      "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                      "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                      "   ",
                      "        ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \r\n   \"locationId\":\"{{locationId}}\",\r\n   \"payorId\":\"{{$guid}}\",\r\n  \r\n   \"account\":{  \r\n      \"name\":\"{{UniqueClient}}\",\r\n      \"phone\":\"8009578010\",\r\n      \"sevaluation\":\"WEEKLY\",\r\n     \"billingDate\" : \"{{today}}\",\r\n      \"paymentMethod\":{\r\n    \"type\" : \"BANK_ACCOUNT\",\r\n     \"tokenId\" : \"{{payment_method_id}}\"\r\n\r\n   }\r\n   }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/account/payor",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "account",
                    "payor"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5e2fb36-e0c4-4cfe-afd8-33719c11735d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3a5da1b5-4225-4314-bb14-1560794553ce",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Freeze Existing Issue Verification",
          "item": [
            {
              "name": "CreateLocationTaxRate",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e8b2e784-73c8-4d3e-a7a2-1b7e69cf587a",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1f895b06-b44c-4457-80c7-721c46cb9ac2",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"locationTaxRate\", jsonData.id);",
                      "postman.setEnvironmentVariable(\"locationId\", jsonData.locationId);",
                      "postman.setEnvironmentVariable(\"LocitemCategoryId\", jsonData.itemCategoryId);",
                      "postman.setEnvironmentVariable(\"LocTaxEmpId\", jsonData.empId);",
                      "",
                      "",
                      "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct taxRate\"] = responseBody.has(\"taxRate\");",
                      "  ",
                      "   tests[\"Response Body has suggested Tax Rate\"] = responseBody.has(\"suggestedTaxRate\");",
                      "   ",
                      "    ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"empId\" : \"{{$guid}}\",\r\n  \"taxRate\" : 20,\r\n  \"taxCode\" : \"rtr\",\r\n  \"isOverriden\" : true,\r\n  \"suggestedTaxRate\" : 80\r\n\r\n\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/tax-rate",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "tax-rate"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "CreateSubscription_Payment_Method_Id",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                    "exec": [
                      "var futureDate = new Date();",
                      "var dd = futureDate.getDate();",
                      "var mm = futureDate.getMonth()+1; //January is 0!",
                      "var yyyy = futureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+1;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "futureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                      "",
                      "",
                      "",
                      "//",
                      "",
                      "var RfutureDate = new Date();",
                      "var dd = RfutureDate.getDate();",
                      "var mm = RfutureDate.getMonth()+8; //January is 0!",
                      "var yyyy = RfutureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+9;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                      "",
                      "",
                      "",
                      "",
                      "//",
                      "",
                      "var URfutureDate = new Date();",
                      "var dd = URfutureDate.getDate();",
                      "var mm = URfutureDate.getMonth()+5; //January is 0!",
                      "var yyyy = URfutureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+10;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    postman.setEnvironmentVariable(\"subId1\",jsonData.subId);",
                      "",
                      " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                      "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                      "",
                      "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                      "",
                      "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                      "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                      "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                      "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                      "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                      "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                      "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                      "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                      "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                      "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                      "   ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberId\": \"{{memberId}}\",\n\"accountId\": \"{{paymentMethodIdP}}\",\n\"frequency\":\"MONTHLY\",\n\"openEnded\":false,\n\"start\":\"04-21-2019\",\n\"invoiceDate\":\"04-21-2019\",\n\"expirationDate\" : \"05-20-2019\",\n\"duration\" : \"50\",\n\"autoRenew\" : true,\n\"renewType\" : \"TERM\",\n\"renewalOptions\" :\n\n{ \"renewDate\" : \"05-23-2019\", \"renewFrequency\" : \"MONTHLY\", \"renewType\" : \"TERM\", \"renewInvoiceDate\" : \"05-24-2019\", \"renewAmount\" : 100, \"renewDuration\" : \"10\", \"renewExpireDate\" : \"09-21-2021\" },\n\"items\":[\n{ \"itemName\":\"APRILs1\",\n   \"itemId\":\"101ebc5e-1fab-120f-879f-4e930cc25c11\",\n   \"version\":1,\n   \"price\":\"108\",\n   \"quantity\":1,\n   \"expirationStart\":\"\",\n   \"type\":\"FEE\",\n   \"unlimited\":\"false\",\n   \"itemCategoryId\": \"1a24e529-6527-4901-bb15-4d7f747f0d27\"\n},\n{\n \"itemName\":\"april2\",\n   \"itemId\":\"101ebc5e-1fab-120f-879f-4e930cc25c11\",\n   \"version\":1,\n   \"price\":\"108\",\n   \"quantity\":1,\n   \"expirationStart\":\"\",\n   \"type\":\"FEE\",\n   \"unlimited\":\"false\"\n\n}\n]\n}"
                },
                "url": {
                  "raw": "{{URL}}/subscription/",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "subscription",
                    ""
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Freeze",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                    "exec": [
                      "var backDate = new Date();",
                      "var dd = backDate.getDate();",
                      "var mm = backDate.getMonth()+5; //January is 0!",
                      "var yyyy = backDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+1;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "backDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"backDate\", backDate);",
                      "",
                      "",
                      "",
                      "//",
                      "",
                      "var RfutureDate = new Date();",
                      "var dd = RfutureDate.getDate();",
                      "var mm = RfutureDate.getMonth()+3; //January is 0!",
                      "var yyyy = RfutureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+1;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                      "",
                      "",
                      "",
                      "",
                      "//",
                      "",
                      "var URfutureDate = new Date();",
                      "var dd = URfutureDate.getDate();",
                      "var mm = URfutureDate.getMonth()+5; //January is 0!",
                      "var yyyy = URfutureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+10;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    postman.setEnvironmentVariable(\"subFreezeId\",jsonData.id);",
                      "   ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n \"freezeStartDate\" : \"{{today}}\",\n \"freezeEndDate\" : \"{{URfutureDate}}\",\n \"subExpirationDate\" : \"{{RfutureDate}}\",\n  \"freezeAmount\": 200,\n \"renewStartDate\": \"{{backDate}}\",\n \"renewInvoiceDate\" : \"{{backDate}}\",\n  \"renewExpirationDate\": \"{{backDate}}\"\n}"
                },
                "url": {
                  "raw": "{{URL}}/subscription/freeze/{{subId1}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "subscription",
                    "freeze",
                    "{{subId1}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Freeze",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "",
                      "   ",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\n \"freezeEndDate\" : \"{{URfutureDate}}\",\n \"subExpirationDate\" : \"{{RfutureDate}}\",\n  \"freezeAmount\": 200,\n \"renewStartDate\": \"{{backDate}}\",\n \"renewInvoiceDate\" : \"{{backDate}}\",\n  \"renewExpirationDate\": \"{{backDate}}\"\n}"
                },
                "url": {
                  "raw": "{{URL}}/subscription/freeze/{{subFreezeId}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "subscription",
                    "freeze",
                    "{{subFreezeId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Remove Freeze",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "  ",
                      "   ",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\n \"subExpirationDate\" : \"{{RfutureDate}}\"\n\t\n}"
                },
                "url": {
                  "raw": "{{URL}}/subscription/unfreeze/{{subFreezeId}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "subscription",
                    "unfreeze",
                    "{{subFreezeId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "DeleteTaxRate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5ad94f18-b5c4-4c03-97b7-c29e0951f8f1",
                    "exec": [
                      "if ( responseCode.code!=200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "tests[\"Response Body has taxRate\"] = responseBody.has(\"taxRate\");",
                      "tests[\"Response Body has taxCode\"] = responseBody.has(\"taxCode\");",
                      "tests[\"Response Body has isOverriden\"] = responseBody.has(\"isOverriden\");",
                      "tests[\"Response Body has suggestedTaxRate\"] = responseBody.has(\"suggestedTaxRate\");",
                      "tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                      "",
                      "",
                      "}",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/tax-rate/{{locationId}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "tax-rate",
                    "{{locationId}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "name": "Open_Ended Freeze",
      "item": [
        {
          "name": "Create Location",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0c80ab94-889b-4d27-9ec3-04c17a489ca3",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"locationId\", jsonData.id);",
                  " tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  extension\"] = responseBody.has(\"extension\");",
                  "    tests[\"Response Body has cardAuthorizationDocId\"] = responseBody.has(\"cardAuthorizationDocId\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has locale\"] = responseBody.has(\"locale\");",
                  "    tests[\"Response Body has emailIdentityVerified\"] = responseBody.has(\"emailIdentityVerified\");",
                  "    tests[\"Response Body has organizationId\"] = responseBody.has(\"organizationId\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "    ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"ABC Location\",\r\n  \"email\" : \"noreply@qa4life.com\",\r\n  \"phone\" : {\r\n    \"number\" : \"1234567\",\r\n    \"extension\" : \"38\"\r\n  },\r\n  \"timezone\" : \"US/Alaska\",\r\n  \"cardAuthorizationDocId\" : \"4c3cae02-de89-4fd8-943b-77fe3ee8903b\",\r\n  \"waiverDocId\" : \"b4f09941-3d46-4954-8e54-408785723188\",\r\n  \"termsDocId\" : \"e2726d52-58a4-4cdd-8a6a-220feae90410\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"zipCode\" : \"72120\",\r\n    \"country\" : \"USA\",\r\n    \"state\" : \"AR\"\r\n  },\r\n  \"locale\" : {\r\n    \"language\" : \"UA\",\r\n    \"region\" : \"US\",\r\n    \"variant\" : \"MAC\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/location",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "location"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create member1",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0fc0d9f-f6aa-4237-b7e0-7a8b1565df3b",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                  "   ",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                  "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                  "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                  "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                  "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                  "   ",
                  "",
                  "",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{UniqueClient}}\",\r\n  \"lastName\" : \"{{UniqueClient}}\",\r\n  \"middleName\" : \"{{UniqueClient}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n \r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/member",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Payment_Method_Client",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b532f0de-2ada-4eac-91b6-83e71b6d3c10",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"payment_method_id_client\", jsonData.id);",
                  "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                  "",
                  "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                  "   tests[\"Response Body has  accountHolderName\"] = responseBody.has(\"accountHolderName\");",
                  "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                  "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                  "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                  "",
                  "  ",
                  "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                  "}",
                  "   ",
                  "tests[\"Response code should be 200\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"Manish Kumar\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Client_Acount",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "48c2eeee-79a5-446a-99f0-975331dddbd7",
                "exec": [
                  "var today = new Date();",
                  "var dd = today.getDate();",
                  "var mm = today.getMonth()+1; //January is 0!",
                  "var yyyy = today.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "    dd = '0'+dd",
                  "} ",
                  "",
                  "if(mm<10) {",
                  "    mm = '0'+mm",
                  "} ",
                  "",
                  "today = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"today\", today);",
                  "",
                  "",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randClientId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randClientId\", randClientId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "",
                  "",
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "",
                  "",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName+stringGen(5));",
                  "",
                  "var uniqueClient= stringGen(10)",
                  "postman.setEnvironmentVariable(\"UniqueClient\", \"Client \"+uniqueClient);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fdc6e94-07d5-4816-b0d7-e0b60dd8c413",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"locationId\", jsonData.locationId);",
                  "postman.setEnvironmentVariable(\"clientId\", jsonData.clientId);",
                  "postman.setEnvironmentVariable(\"paymentMethodIdC\", jsonData.account.paymentMethod.id);",
                  "    ",
                  "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Client Id\"] = responseBody.has(\"clientId\");",
                  "   tests[\"Response Body has MerchantId\"] = responseBody.has(\"merchantId\");",
                  "   tests[\"Response Body has Client Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Client Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Client Email\"] = responseBody.has(\"email\");",
                  "    tests[\"Response Body has Client Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Client Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Client Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"locationId\" : \"{{locationId}}\",\n \"clientId\" : \"{{$guid}}\",\n \"account\" : {\n   \"name\" : \"{{UniqueClient}}\",\n   \"email\" : \"{{randName}}@example.org\",\n   \"phone\" : \"1234567890\",\n   \"sevaluation\" : \"{{seval}}\",\n   \"billingDate\" : \"{{today}}\",\n   \"paymentMethod\" : {    \"type\" : \"BANK_ACCOUNT\",\n     \"tokenId\":\"{{payment_method_id_client}}\"\n   }\n }\n}"
            },
            "url": {
              "raw": "{{URL}}/account/client",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "client"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Payment_Method_Payor_1",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cb1b0d87-aedd-4610-9261-caa6f7a09ab1",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "   postman.setEnvironmentVariable(\"payment_method_id\", jsonData.id);",
                  "",
                  "   tests[\"Response Body has Payment Method  Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"payment_method_id\")+\"\\\"\");",
                  "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                  "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                  "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                  "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                  "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                  "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                  "}",
                  "   ",
                  "tests[\"Response code should be 200\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"Manish Kumar\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreatePayorAccount1",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7e004e8e-d559-49f6-af7a-c2c4cf4677db",
                "exec": [
                  "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                  "",
                  "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                  "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                  "",
                  "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName);",
                  "",
                  "",
                  "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                  "",
                  "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                  "postman.setEnvironmentVariable(\"seval\", seval);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "af03f942-9cb3-46d6-acf7-2b545732842a",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "   ",
                  "postman.setEnvironmentVariable(\"payoraccountId\", jsonData.account.accountId);",
                  "",
                  "postman.setEnvironmentVariable(\"payorId\", jsonData.payorId);",
                  "",
                  "postman.setEnvironmentVariable(\"paymentMethodIdP\", jsonData.account.paymentMethod.id);",
                  "",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  " ",
                  "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \r\n   \"locationId\":\"{{locationId}}\",\r\n   \"payorId\":\"{{$guid}}\",\r\n  \r\n   \"account\":{  \r\n      \"name\":\"{{UniqueClient}}\",\r\n      \"phone\":\"8009578010\",\r\n      \"sevaluation\":\"WEEKLY\",\r\n     \"billingDate\" : \"{{today}}\",\r\n      \"paymentMethod\":{\r\n    \"type\" : \"BANK_ACCOUNT\",\r\n     \"tokenId\" : \"{{payment_method_id}}\"\r\n\r\n   }\r\n   }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/payor",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "account",
                "payor"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateLocationTaxRate",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e8b2e784-73c8-4d3e-a7a2-1b7e69cf587a",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1f895b06-b44c-4457-80c7-721c46cb9ac2",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"locationTaxRate\", jsonData.id);",
                  "postman.setEnvironmentVariable(\"locationId\", jsonData.locationId);",
                  "postman.setEnvironmentVariable(\"LocitemCategoryId\", jsonData.itemCategoryId);",
                  "postman.setEnvironmentVariable(\"LocTaxEmpId\", jsonData.empId);",
                  "",
                  "",
                  "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct taxRate\"] = responseBody.has(\"taxRate\");",
                  "  ",
                  "   tests[\"Response Body has suggested Tax Rate\"] = responseBody.has(\"suggestedTaxRate\");",
                  "   ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"empId\" : \"{{$guid}}\",\r\n  \"taxRate\" : 20,\r\n  \"taxCode\" : \"rtr\",\r\n  \"isOverriden\" : true,\r\n  \"suggestedTaxRate\" : 80\r\n\r\n\r\n}"
            },
            "url": {
              "raw": "{{URL}}/tax-rate",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "tax-rate"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateSubscription_Payment_Method_Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b822f01a-1ceb-4367-b693-735e4dc73d93",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+1;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+8; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+5; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "var today = new Date();",
                  "var dd = today.getDate();",
                  "var mm = today.getMonth()+1; //January is 0!",
                  "var yyyy = today.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "today = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"today\", today);",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4fad0713-4e7f-48d4-8285-614d6673a5a6",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"subId1\",jsonData.subId);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "   ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberId\": \"{{memberId}}\",\n\"accountId\": \"{{paymentMethodIdP}}\",\n\"frequency\":\"MONTHLY\",\n\"openEnded\":false,\n\"start\":\"{{today}}\",\n\"invoiceDate\":\"{{today}}\",\n\"expirationDate\" : \"{{futureDate}}\",\n\"duration\" : \"50\",\n\"autoRenew\" : true,\n\"renewType\" : \"TERM\",\n\"renewalOptions\" :\n\n{ \"renewDate\" : \"07-23-2019\", \"renewFrequency\" : \"MONTHLY\", \"renewType\" : \"TERM\", \"renewInvoiceDate\" : \"07-24-2019\", \"renewAmount\" : 100, \"renewDuration\" : \"10\", \"renewExpireDate\" : \"09-21-2021\" },\n\"items\":[\n{ \"itemName\":\"APRILs1\",\n   \"itemId\":\"101ebc5e-1fab-120f-879f-4e930cc25c11\",\n   \"version\":1,\n   \"price\":\"108\",\n   \"quantity\":1,\n   \"expirationStart\":\"\",\n   \"type\":\"FEE\",\n   \"unlimited\":\"false\",\n   \"itemCategoryId\": \"1a24e529-6527-4901-bb15-4d7f747f0d27\"\n},\n{\n \"itemName\":\"april2\",\n   \"itemId\":\"101ebc5e-1fab-120f-879f-4e930cc25c11\",\n   \"version\":1,\n   \"price\":\"108\",\n   \"quantity\":1,\n   \"expirationStart\":\"\",\n   \"type\":\"FEE\",\n   \"unlimited\":\"false\"\n\n}\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetSubscriptionById",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "   ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "    tests[\"Response Body has Correct SubType\"] = responseBody.has(\"subType\");",
                  "     tests[\"Response Body has Correct renew Date\"] = responseBody.has(\"renewDate\");",
                  "    tests[\"Response Body has  Correct renew Expire Date\"] = responseBody.has(\"renewExpireDate\");",
                  "    tests[\"Response Body has  Correct renew Frequency\"] = responseBody.has(\"renewFrequency\");",
                  "    tests[\"Response Body has Correct renew SubId\"] = responseBody.has(\"renewSubId\");",
                  "    tests[\"Response Body has Correct renew amount\"] = responseBody.has(\"renewAmount\");",
                  "    ",
                  " ",
                  "   ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subId1}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subId1}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Freeze",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var backDate = new Date();",
                  "var dd = backDate.getDate();",
                  "var mm = backDate.getMonth()+5; //January is 0!",
                  "var yyyy = backDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+1;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "backDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"backDate\", backDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+3; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+1;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+5; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"subFreezeId\",jsonData.id);",
                  "     tests[\"Response Body has Correct freeze Id\"] = responseBody.has(\"id\");",
                  "     tests[\"Response Body has Correct renewSubId\"] = responseBody.has(\"renewSubId\");",
                  "   tests[\"Response Body has Correct freeze Start Date\"] = responseBody.has(\"freezeStartDate\");",
                  "   tests[\"Response Body has Correct freeze Amount\"] = responseBody.has(\"freezeAmount\");",
                  "   ",
                  "    tests[\"Response Body has renew Start Date\"] = responseBody.has(\"renewStartDate\");",
                  "    tests[\"Response Body has renew Expiration Date\"] = responseBody.has(\"renewExpirationDate\");",
                  "    tests[\"Response Body has renew Invoice Date\"] = responseBody.has(\"renewInvoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"freezeStartDate\" : \"{{today}}\",\n\n  \"freezeAmount\": 200\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/freeze/{{subId1}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "freeze",
                "{{subId1}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Remove Freeze",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct freeze Id\"] = responseBody.has(\"id\");",
                  "     tests[\"Response Body has Correct renewSubId\"] = responseBody.has(\"renewSubId\");",
                  "   tests[\"Response Body has Correct freeze Start Date\"] = responseBody.has(\"freezeStartDate\");",
                  "    tests[\"Response Body has Correct freeze End Date\"] = responseBody.has(\"freezeEndDate\");",
                  "   tests[\"Response Body has Correct freeze Amount\"] = responseBody.has(\"freezeAmount\");",
                  "   ",
                  "    tests[\"Response Body has renew Start Date\"] = responseBody.has(\"renewStartDate\");",
                  "    tests[\"Response Body has renew Expiration Date\"] = responseBody.has(\"renewExpirationDate\");",
                  "    tests[\"Response Body has renew Invoice Date\"] = responseBody.has(\"renewInvoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\n \n\t\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/unfreeze/{{subFreezeId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "unfreeze",
                "{{subFreezeId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Add Item to Subscription",
      "item": [
        {
          "name": "CreateSubscription_Renew_Type_Term Copy Copy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bd4904f6-c412-464a-9331-3ce629c54341",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "16dacbcc-2206-490d-ace9-5dbb53b7f58d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"subIdaccount\",jsonData.subId);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "   ",
                  "    ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"dfe6a4ff-48c2-4477-b6a4-73ea34831179\",\n\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"25\",\n\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"{{futureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"Amit\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 100, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add_item_To_Subs",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c8c260f7-a77e-4a04-a9f5-c765d265e28c",
                "exec": [
                  "if ( responseCode.code!=200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"id\", jsonData.id);",
                  "",
                  "tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"items\" : [ {\r\n    \"itemName\" : \"Fitness Equipment\",\r\n    \"itemId\" : \"f509be1d-261d-42de-9b30-00c18abad003\",\r\n    \"version\" : 1,\r\n    \"price\" : 200,\r\n    \"quantity\" : \"1\",\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"type\" : \"FEE\",\r\n    \"unlimited\" : \"false\",\r\n    \"itemCategoryId\": \"{{LocitemCategoryId}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/add-item/{{subIdaccount}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "add-item",
                "{{subIdaccount}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get_subs_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "235ba792-b8c6-41c4-bfe1-4cb5c59d2db9",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "  ",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "   ",
                  "    ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/subscription/05e49f80-43bb-4895-96c3-672f729de7f3",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "05e49f80-43bb-4895-96c3-672f729de7f3"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Document List Optional",
      "item": [
        {
          "name": "CreateAgreement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b55f433-2bf3-4fec-82f1-e007eb587086",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "  ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "pm.environment.set(\"agreementNumber\", jsonData.agreementNumber);",
                  "pm.environment.set(\"agreementId\", jsonData.agreementId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9942f3b2-866e-47a4-9628-6282a646a626",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGIJrstuvwxyz123456789\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var uniqueClient= stringGen(15)",
                  "postman.setEnvironmentVariable(\"agreementNum\", uniqueClient);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"locationId\": \"{{locationId}}\",\r\n\"documentIdList\" : [ \"eaca4410-3686-4eda-87c3-1320d15e4b94\" ],\r\n\"memberIdList\" : [ {\r\n    \"memberId\" : \"{{memberId}}\",\r\n    \"primary\" : true\r\n  },{\r\n    \"memberId\" : \"{{memberId3}}\",\r\n    \"primary\" : false\r\n  } ,{\r\n    \"memberId\" : \"{{memberId5}}\",\r\n    \"primary\" : false\r\n  },{\r\n    \"memberId\" : \"11e96bea-d9c2-eaea-962d-0b4eb303e78c\",\r\n    \"primary\" : false\r\n  }],\r\n\r\n \"agreementNumber\" : \"{{agreementNum}}\",\r\n \"campaign\" : \" ABC Financial\" , \r\n\"subscriptionList\" : [ {\r\n\"primary\" : true,\r\n\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"DAILY\",\r\n\"duration\": \"4\",\r\n\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"{{futureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 255, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n},\r\n{\"primary\" : false,\r\n\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\r\n\"start\": \"04-08-2019\",\r\n\"invoiceDate\": \"04-08-2019\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"4\",\r\n\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"{{futureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 3, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n}\r\n\r\n]\r\n\r\n}"
            },
            "url": {
              "raw": "{{URL}}/agreement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "View Agreement Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "90734bc1-b912-4b48-b80b-8daaf2e0aa45",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "  ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/agreement/{{agreementNum}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement",
                "{{agreementNum}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "View Agreement Status Copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "90734bc1-b912-4b48-b80b-8daaf2e0aa45",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "  ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/agreement/{{agreementNum}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement",
                "{{agreementNum}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Cancel/Update Subscription same EndPoint",
      "item": [
        {
          "name": "update cancel subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5bbaa65-22bf-4e4e-91ff-548e0a0f1007",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   ",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has subCancelReasonCode\"] = responseBody.has(\"subCancelReasonCode\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  subCancelrequestedBy\"] = responseBody.has(\"subCancelrequestedBy\");",
                  "    tests[\"Response Body has subCancelEmpId\"] = responseBody.has(\"subCancelEmpId\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has price\"] = responseBody.has(\"price\");",
                  "  ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n  \"subCancellationDate\" : \"05-29-2019\",\r\n  \"subCancelReasonCode\" : \"ab2\",\r\n  \"subCancelrequestedBy\" : \"club\",\r\n  \"subCancelEmpId\" : \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n  \"subAuthorizedCancelBy\":\"ad8ebc9e-5fab-140f-879f-9e930cc35c79\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subIdaccount}}/cancel",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subIdaccount}}",
                "cancel"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update cancel Agreement",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n  \"subCancellationDate\" : \"05-29-2019\",\r\n  \"subCancelReasonCode\" : \"52l\",\r\n  \"subCancelrequestedBy\" : \"member\",\r\n  \"subCancelEmpId\" : \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n  \"subAuthorizedCancelBy\":\"ad8ebc9e-5fab-140f-879f-9e930cc35c79\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/cancel-agreement/{{agreementNum}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "cancel-agreement",
                "{{agreementNum}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Sub Doc to be Subset of Agreement Doc",
      "item": [
        {
          "name": "CreateAgreement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b55f433-2bf3-4fec-82f1-e007eb587086",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "  ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "pm.environment.set(\"agreementNumber\", jsonData.agreementNumber);",
                  "pm.environment.set(\"agreementId\", jsonData.agreementId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9942f3b2-866e-47a4-9628-6282a646a626",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGIJrstuvwxyz123456789\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var uniqueClient= stringGen(15)",
                  "postman.setEnvironmentVariable(\"agreementNum\", uniqueClient);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"locationId\":  \"{{locationId}}\",\r\n\"documentIdList\" : [ \"eaca4410-3686-4eda-87c3-1320d15e4b94\",\"eaca4410-3686-4eda-87c3-1320d15e4b95\"  ],\r\n\"memberIdList\" : [ {\r\n    \"memberId\" : \"{{memberId}}\",\r\n    \"primary\" : true\r\n  },{\r\n    \"memberId\" : \"{{memberId3}}\",\r\n    \"primary\" : false\r\n  } ,{\r\n    \"memberId\" : \"{{memberId5}}\",\r\n    \"primary\" : false\r\n  },{\r\n    \"memberId\" : \"11e96bea-d9c2-eaea-962d-0b4eb303e78c\",\r\n    \"primary\" : false\r\n  }\r\n  ],\r\n   \r\n  \r\n \"agreementNumber\" : \"{{agreementNum}}\",\r\n \"campaign\" : \" ABC Financial\" , \r\n\"subscriptionList\" : [ {\r\n\"primary\" : true,\r\n\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"639b15cf-387f-4280-9ff2-4f84ac88616d\",\r\n\r\n\"start\": \"04-21-2019\",\r\n\"invoiceDate\": \"05-10-2019\",\r\n\"expirationDate\": \"07-13-2019\",\r\n\"frequency\": \"DAILY\",\r\n\"duration\": \"4\",\r\n\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"{{futureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 255, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n},\r\n{\"primary\" : false,\r\n\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\":  \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n \"subDocsIdList\" : [ \"eaca4410-3686-4eda-87c3-1320d15e4b94\" ],\r\n\"accountId\": \"639b15cf-387f-4280-9ff2-4f84ac88616d\",\r\n\r\n\"start\": \"04-13-2019\",\r\n\"invoiceDate\":  \"04-21-2019\",\r\n\"expirationDate\": \"08-19-2019\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"4\",\r\n\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"{{futureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 3, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n}\r\n\r\n]\r\n\r\n}"
            },
            "url": {
              "raw": "{{URL}}/agreement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "View Agreement Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "90734bc1-b912-4b48-b80b-8daaf2e0aa45",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "  ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authId}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/agreement/{{agreementNum}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement",
                "{{agreementNum}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get_Sub_By_id",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subIdaccount}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subIdaccount}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Cancelation Reason Code",
      "item": [
        {
          "name": "CreateSubscription_Renew_Type_Term",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bd4904f6-c412-464a-9331-3ce629c54341",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "16dacbcc-2206-490d-ace9-5dbb53b7f58d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"subIdaccount\",jsonData.subId);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "   ",
                  "    ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"946de180-8459-4301-bb1e-29d31b2e129c\",\n\n\"start\": \"05-14-2019\",\n\"invoiceDate\": \"05-14-2019\",\n\"expirationDate\": \"08-13-2019\",\n\"frequency\": \"DAILY\",\n\"duration\": \"25\",\n\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"08-14-2019\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"10\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"08-14-2019\" , \"renewExpireDate\": \"09-21-2021\"}\n,\n\"openEnded\": false,\n\"renewType\": \"OPEN\",\n\"items\": [\n\n\n{ \"itemName\": \"Amit\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 100, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateAgreement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b55f433-2bf3-4fec-82f1-e007eb587086",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "  ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "pm.environment.set(\"agreementNumber\", jsonData.agreementNumber);",
                  "pm.environment.set(\"agreementId\", jsonData.agreementId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9942f3b2-866e-47a4-9628-6282a646a626",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGIJrstuvwxyz123456789\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var uniqueClient= stringGen(15)",
                  "postman.setEnvironmentVariable(\"agreementNum\", uniqueClient);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"locationId\":  \"{{locationId}}\",\r\n\r\n\"memberIdList\" : [ {\r\n    \"memberId\" : \"{{memberId}}\",\r\n    \"primary\" : true\r\n  },{\r\n    \"memberId\" : \"{{memberId3}}\",\r\n    \"primary\" : false\r\n  } ,{\r\n    \"memberId\" : \"{{memberId5}}\",\r\n    \"primary\" : false\r\n  }\r\n  ],\r\n   \r\n  \r\n \"agreementNumber\" : \"{{agreementNum}}\",\r\n \"campaign\" : \" ABC Financial\" , \r\n\"subscriptionList\" : [ {\r\n\"primary\" : true,\r\n\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"639b15cf-387f-4280-9ff2-4f84ac88616d\",\r\n\r\n\"start\": \"05-16-2019\",\r\n\"invoiceDate\": \"05-16-2019\",\r\n\"expirationDate\": \"08-02-2019\",\r\n\"frequency\": \"DAILY\",\r\n\"duration\": \"4\",\r\n\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"{{futureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 255, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n},\r\n{\"primary\" : false,\r\n\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\":  \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"639b15cf-387f-4280-9ff2-4f84ac88616d\",\r\n\r\n\"start\": \"05-21-2019\",\r\n\"invoiceDate\":  \"05-21-2019\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"4\",\r\n\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"{{futureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 3, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n}\r\n\r\n]\r\n\r\n}"
            },
            "url": {
              "raw": "{{URL}}/agreement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Cancel_Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3558af53-e5be-4e95-b060-8f6fc5c9abf2",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   ",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has subCancelReasonCode\"] = responseBody.has(\"subCancelReasonCode\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  subCancelrequestedBy\"] = responseBody.has(\"subCancelrequestedBy\");",
                  "    tests[\"Response Body has subCancelEmpId\"] = responseBody.has(\"subCancelEmpId\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has price\"] = responseBody.has(\"price\");",
                  "  ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n  \"subCancellationDate\" : \"07-21-2019\",\r\n  \"subCancelReasonCode\" : \"240\",\r\n  \"subCancelrequestedBy\" : \"member\",\r\n \"subCancelEmpId\" : \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subIdaccount}}/cancel",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subIdaccount}}",
                "cancel"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Cancel_Agreement",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"subCancellationDate\" : \"05-19-2019\",\r\n  \"subCancelReasonCode\" : \"52l\",\r\n  \"subCancelrequestedBy\" : \"member\",\r\n  \"subCancelEmpId\" : \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n  \"subAuthorizedCancelBy\":\"ad8ebc9e-5fab-140f-879f-9e930cc35c79\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/cancel-agreement/{{agreementNum}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "cancel-agreement",
                "{{agreementNum}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get_subs_Id Copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be250187-0889-448a-b18a-3910013f529b",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "  ",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "   ",
                  "    ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/subscription/{{subIdaccount}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "{{subIdaccount}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "View Agreement Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "90734bc1-b912-4b48-b80b-8daaf2e0aa45",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "  ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/agreement/{{agreementNum}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement",
                "{{agreementNum}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Add Sub to Agreement",
      "item": [
        {
          "name": "CreateAgreement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b55f433-2bf3-4fec-82f1-e007eb587086",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "  ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "pm.environment.set(\"agreementNumber\", jsonData.agreementNumber);",
                  "pm.environment.set(\"agreementId\", jsonData.agreementId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9942f3b2-866e-47a4-9628-6282a646a626",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGIJrstuvwxyz123456789\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var uniqueClient= stringGen(15)",
                  "postman.setEnvironmentVariable(\"agreementNum\", uniqueClient);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"locationId\":  \"{{locationId}}\",\r\n\r\n\"memberIdList\" : [ {\r\n    \"memberId\" : \"{{memberId}}\",\r\n    \"primary\" : true\r\n  },{\r\n    \"memberId\" : \"{{memberId3}}\",\r\n    \"primary\" : false\r\n  } ,{\r\n    \"memberId\" : \"{{memberId5}}\",\r\n    \"primary\" : false\r\n  }\r\n  ],\r\n  \r\n  \r\n \"agreementNumber\" : \"{{agreementNum}}\",\r\n \"campaign\" : \" ABC Financial\" , \r\n\"subscriptionList\" : [ {\r\n\"primary\" : true,\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"639b15cf-387f-4280-9ff2-4f84ac88616d\",\r\n\r\n\"start\": \"05-04-2019\",\r\n\"invoiceDate\": \"05-08-2019\",\r\n\"expirationDate\": \"07-08-2019\",\r\n\"frequency\": \"MONTHLY\",\r\n\"duration\": \"2\",\r\n\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"{{futureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 255, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n},\r\n{\"primary\" : false,\r\n\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\":  \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"639b15cf-387f-4280-9ff2-4f84ac88616d\",\r\n\r\n\"start\": \"05-09-2019\",\r\n\"invoiceDate\":  \"05-09-2019\",\r\n\"expirationDate\":\"07-09-2019\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"4\",\r\n\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"{{futureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 3, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n}\r\n\r\n]\r\n}"
            },
            "url": {
              "raw": "{{URL}}/agreement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add_Subs_Agreement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3101a1da-cda0-4e21-8480-140979ffebe1",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "  ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "pm.environment.set(\"agreementNumber\", jsonData.agreementNumber);",
                  "pm.environment.set(\"agreementId\", jsonData.agreementId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"subscriptionList\" : [ {\r\n\"primary\" : false,\r\n\"locationId\" :  \"{{locationId}}\",\r\n\"salesEmployeeId\" : \"c8ad0145-f401-49e6-bc30-ffcbd20416a9\",\r\n\"accountId\" : \"639b15cf-387f-4280-9ff2-4f84ac88616d\",\r\n\"memberIdList\" : [ \"{{memberId}}\" ],\r\n\"start\" : \"05-22-2019\",\r\n\"invoiceDate\" : \"05-22-2019\",\r\n\"expirationDate\" : \"07-27-2019\",\r\n\"frequency\" : \"DAILY\",\r\n\"duration\" : \"4\",\r\n\"items\" : [\r\n\r\n{ \"itemName\" : \"adcds\", \"itemId\" : \"84dc930d-c4e8-4b39-a3c7-a4bc16d2f1be\", \"version\" : 1, \"price\" : 2117, \"quantity\" : \"1\", \"expirationStart\" : \"PURCHASE\", \"type\" : \"PRODUCT\", \"unlimited\" : \"false\" },\r\n{ \"itemName\" : \"adcds\", \"itemId\" : \"84dc930d-c4e8-4b39-a3c7-a4bc16d2f1be\", \"version\" : 1, \"price\" : 2117, \"quantity\" : \"1\", \"expirationStart\" : \"PURCHASE\", \"type\" : \"PRODUCT\", \"unlimited\" : \"false\" }\r\n]\r\n,\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"06-28-2019\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n}\r\n]\r\n\r\n\r\n}"
            },
            "url": {
              "raw": "{{URL}}/agreement/{{agreementNum}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement",
                "{{agreementNum}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateSubscription_Renew_Type_Term Copy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bd4904f6-c412-464a-9331-3ce629c54341",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "16dacbcc-2206-490d-ace9-5dbb53b7f58d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"subIdaccount\",jsonData.subId);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "   ",
                  "    ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authId}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"dfe6a4ff-48c2-4477-b6a4-73ea34831179\",\n\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"25\",\n\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"{{futureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"Amit\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 100, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "View Agreement Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "90734bc1-b912-4b48-b80b-8daaf2e0aa45",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "  ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/agreement/{{agreementNum}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement",
                "{{agreementNum}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Remove Sub from Agreement",
      "item": [
        {
          "name": "CreateSubscription_Renew_Type_Term Copy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bd4904f6-c412-464a-9331-3ce629c54341",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "16dacbcc-2206-490d-ace9-5dbb53b7f58d",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"subIdaccount\",jsonData.subId);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   ",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "   ",
                  "    ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authId}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"dfe6a4ff-48c2-4477-b6a4-73ea34831179\",\n\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"25\",\n\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"{{futureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"Amit\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 100, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateAgreement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b55f433-2bf3-4fec-82f1-e007eb587086",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "  ",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "pm.environment.set(\"agreementNumber\", jsonData.agreementNumber);",
                  "pm.environment.set(\"subId\", jsonData.subscriptionList[1].subId);",
                  "pm.environment.set(\"agreementId\", jsonData.agreementId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9942f3b2-866e-47a4-9628-6282a646a626",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGIJrstuvwxyz123456789\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var uniqueClient= stringGen(15)",
                  "postman.setEnvironmentVariable(\"agreementNum\", uniqueClient);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"locationId\":  \"{{locationId}}\",\r\n\"documentIdList\" : [ \"eaca4410-3686-4eda-87c3-1320d15e4b94\",\"eaca4410-3686-4eda-87c3-1320d15e4b95\"  ],\r\n\"memberIdList\" : [ {\r\n    \"memberId\" : \"{{memberId}}\",\r\n    \"primary\" : true\r\n  },{\r\n    \"memberId\" : \"{{memberId3}}\",\r\n    \"primary\" : false\r\n  } ,{\r\n    \"memberId\" : \"{{memberId5}}\",\r\n    \"primary\" : false\r\n  }\r\n  ],\r\n   \r\n  \r\n \"agreementNumber\" : \"{{agreementNum}}\",\r\n \"campaign\" : \" ABC Financial\" , \r\n\"subscriptionList\" : [ {\r\n\"primary\" : true,\r\n\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"639b15cf-387f-4280-9ff2-4f84ac88616d\",\r\n\r\n\"start\": \"04-21-2019\",\r\n\"invoiceDate\": \"05-10-2019\",\r\n\"expirationDate\": \"07-13-2019\",\r\n\"frequency\": \"DAILY\",\r\n\"duration\": \"4\",\r\n\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"{{futureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 255, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n},\r\n{\"primary\" : false,\r\n\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\":  \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n \"subDocsIdList\" : [ \"eaca4410-3686-4eda-87c3-1320d15e4b94\" ],\r\n\"accountId\": \"639b15cf-387f-4280-9ff2-4f84ac88616d\",\r\n\r\n\"start\": \"04-13-2019\",\r\n\"invoiceDate\":  \"04-21-2019\",\r\n\"expirationDate\": \"08-19-2019\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"4\",\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"08-20-2019\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"08-20-2019\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 3, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n}\r\n\r\n]\r\n\r\n}"
            },
            "url": {
              "raw": "{{URL}}/agreement",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add_Subs_Agreement",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"subscriptionList\" : [ {\r\n\"primary\" : false,\r\n\"locationId\" :  \"{{locationId}}\",\r\n\"salesEmployeeId\" : \"c8ad0145-f401-49e6-bc30-ffcbd20416a9\",\r\n\"accountId\" : \"639b15cf-387f-4280-9ff2-4f84ac88616d\",\r\n\"memberIdList\" : [ \"11e96743-ebe7-d6a0-bdb9-35c1ce233bda\" ],\r\n\"start\" : \"05-22-2019\",\r\n\"invoiceDate\" : \"05-22-2019\",\r\n\"expirationDate\" : \"07-27-2019\",\r\n\"frequency\" : \"DAILY\",\r\n\"duration\" : \"4\",\r\n\"items\" : [\r\n\r\n{ \"itemName\" : \"Palm\", \"itemId\" : \"84dc930d-c4e8-4b39-a3c7-a4bc16d2f1be\", \"version\" : 1, \"price\" : 2117, \"quantity\" : \"1\", \"expirationStart\" : \"PURCHASE\", \"type\" : \"PRODUCT\", \"unlimited\" : \"false\" }\r\n]\r\n,\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"06-28-2019\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{futureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n}\r\n],  \r\n  \r\n  \"subscriptionIdList\" : [\r\n\r\n\"68c9401e-32c5-412d-b71d-e8dbf9db7190\" \r\n]\r\n\r\n\r\n}"
            },
            "url": {
              "raw": "{{URL}}/agreement/{{agreementNum}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement",
                "{{agreementNum}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Del_Sub_Agrm",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"subscriptionIdList\" : [\"{{subId}}\"],\r\n  \"subCancelEmpId\" : \"d1e73a46-bf18-45e4-ae48-498b1f46b2cf\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/agreement/remove-subscription/{{agreementNum}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "agreement",
                "remove-subscription",
                "{{agreementNum}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Retrive Sub List with Payor Account",
      "item": [
        {
          "name": "Get Sub By account Id",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/subscription/account/cb183355-70a5-4b0d-9bb0-8173e0ba0aee",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "account",
                "cb183355-70a5-4b0d-9bb0-8173e0ba0aee"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Configure Late Fee",
      "item": [
        {
          "name": "Prerequisites",
          "item": [
            {
              "name": "Create Location",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                    "exec": [
                      "",
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"locationId\", jsonData.id);",
                      " tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                      "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                      "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                      "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                      "    tests[\"Response Body has  extension\"] = responseBody.has(\"extension\");",
                      "    tests[\"Response Body has cardAuthorizationDocId\"] = responseBody.has(\"cardAuthorizationDocId\");",
                      "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                      "  ",
                      "    tests[\"Response Body has locale\"] = responseBody.has(\"locale\");",
                      "    tests[\"Response Body has emailIdentityVerified\"] = responseBody.has(\"emailIdentityVerified\");",
                      "    tests[\"Response Body has organizationId\"] = responseBody.has(\"organizationId\");",
                      "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                      "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                      "   ",
                      "",
                      "",
                      "    ",
                      "}",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\" : \"ABC Location\",\r\n  \"email\" : \"noreply@qa4life.com\",\r\n  \"phone\" : {\r\n    \"number\" : \"1234567\",\r\n    \"extension\" : \"38\"\r\n  },\r\n  \"timezone\" : \"US/Alaska\",\r\n  \"cardAuthorizationDocId\" : \"4c3cae02-de89-4fd8-943b-77fe3ee8903b\",\r\n  \"waiverDocId\" : \"b4f09941-3d46-4954-8e54-408785723188\",\r\n  \"termsDocId\" : \"e2726d52-58a4-4cdd-8a6a-220feae90410\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"zipCode\" : \"72120\",\r\n    \"country\" : \"USA\",\r\n    \"state\" : \"AR\"\r\n  },\r\n  \"locale\" : {\r\n    \"language\" : \"UA\",\r\n    \"region\" : \"US\",\r\n    \"variant\" : \"MAC\"\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/location",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "location"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Member",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                    "exec": [
                      "",
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                      "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                      "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                      "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                      "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                      "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                      "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                      "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                      "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                      "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                      "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                      "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                      "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                      "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                      "   ",
                      "",
                      "",
                      "",
                      "",
                      "}",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "72edf1d5-e2be-4dd3-85ca-0326897cc421",
                    "exec": [
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var member= stringGen(8)",
                      "postman.setEnvironmentVariable(\"member\", \"member\"+member);",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"firstName\" : \"{{member}}\",\r\n  \"lastName\" : \"{{member}}\",\r\n  \"middleName\" : \"{{member}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n  \"email\" : \"{{member}}.doe@qa4life.com\",\r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/member",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "member"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create_Payment_Method_Client",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "   postman.setEnvironmentVariable(\"payment_method_id_client\", jsonData.id);",
                      "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                      "",
                      "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                      "   tests[\"Response Body has  accountHolderName\"] = responseBody.has(\"accountHolderName\");",
                      "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                      "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                      "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                      "",
                      "  ",
                      "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                      "}",
                      "   ",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"Praveen Kumar\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
                },
                "url": {
                  "raw": "{{URL}}/payment-method",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-method"
                  ]
                }
              },
              "response": [
                {
                  "name": "Response_200",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                    },
                    "url": {
                      "raw": "{{payment_gateway_server}}/accountinfotoken",
                      "host": [
                        "{{payment_gateway_server}}"
                      ],
                      "path": [
                        "accountinfotoken"
                      ]
                    }
                  },
                  "code": 200,
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Create_Payment_Method_Payor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "   postman.setEnvironmentVariable(\"payment_method_id_payer\", jsonData.id);",
                      "",
                      " ",
                      "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                      "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                      "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                      "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                      "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                      "}",
                      "   ",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"Praveen Kumar\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
                },
                "url": {
                  "raw": "{{URL}}/payment-method",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-method"
                  ]
                }
              },
              "response": [
                {
                  "name": "Response_200",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                    },
                    "url": {
                      "raw": "{{payment_gateway_server}}/accountinfotoken",
                      "host": [
                        "{{payment_gateway_server}}"
                      ],
                      "path": [
                        "accountinfotoken"
                      ]
                    }
                  },
                  "code": 200,
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "CreateClientAccount",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e8b2e784-73c8-4d3e-a7a2-1b7e69cf587a",
                    "exec": [
                      "var today = new Date();",
                      "var dd = today.getDate();",
                      "var mm = today.getMonth()+1; //January is 0!",
                      "var yyyy = today.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "    dd = '0'+dd",
                      "} ",
                      "",
                      "if(mm<10) {",
                      "    mm = '0'+mm",
                      "} ",
                      "",
                      "today = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"today\", today);",
                      "",
                      "",
                      "",
                      "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                      "",
                      "var randClientId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randClientId\", randClientId);",
                      "",
                      "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                      "",
                      "var randName = names[Math.floor(Math.random() * names.length)];",
                      "postman.setEnvironmentVariable(\"randName\", randName);",
                      "",
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var uniqueClient= stringGen(10)",
                      "postman.setEnvironmentVariable(\"UniqueClient\", \"Client \"+uniqueClient);",
                      "",
                      "",
                      "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                      "",
                      "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                      "postman.setEnvironmentVariable(\"seval\", seval);",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1f895b06-b44c-4457-80c7-721c46cb9ac2",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"accountIdClient\", jsonData.account.accountId);",
                      "postman.setEnvironmentVariable(\"locationId\", jsonData.locationId);",
                      "postman.setEnvironmentVariable(\"clientId\", jsonData.clientId);",
                      "postman.setEnvironmentVariable(\"paymentMethodIdC\", jsonData.account.paymentMethod.id);",
                      "",
                      "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct Client Id\"] = responseBody.has(\"clientId\");",
                      "   tests[\"Response Body has MerchantId\"] = responseBody.has(\"merchantId\");",
                      "   tests[\"Response Body has Client Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has Client Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has Client Email\"] = responseBody.has(\"email\");",
                      "    tests[\"Response Body has Client Phone\"] = responseBody.has(\"phone\");",
                      "    tests[\"Response Body has Client Sevaluation\"] = responseBody.has(\"sevaluation\");",
                      "    tests[\"Response Body has Client Billing Date\"] = responseBody.has(\"billingDate\");",
                      "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                      "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                      "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                      "    ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n \"locationId\" : \"{{locationId}}\",\n \"clientId\" : \"{{$guid}}\",\n\n \"account\" : {\n   \"name\" : \"Praveen Kumar\",\n   \"email\" : \"{{randName}}@qa4life.com\",\n   \"phone\" : \"1234567890\",\n   \"sevaluation\" : \"DAILY\",\n   \"billingDate\" : \"{{today}}\",\n   \"paymentMethod\" : {    \"type\" : \"BANK_ACCOUNT\",\n     \"tokenId\":\"{{payment_method_id_client}}\"\n     \n \n   }\n }\n}"
                },
                "url": {
                  "raw": "{{URL}}/account/client",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "account",
                    "client"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "CreatePayorAccount",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                    "exec": [
                      "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                      "",
                      "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                      "",
                      "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                      "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                      "",
                      "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                      "",
                      "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                      "",
                      "var randName = names[Math.floor(Math.random() * names.length)];",
                      "postman.setEnvironmentVariable(\"randName\", randName);",
                      "",
                      "",
                      "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                      "",
                      "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                      "postman.setEnvironmentVariable(\"seval\", seval);",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    ",
                      "   ",
                      "postman.setEnvironmentVariable(\"accountIdPayor\",jsonData.account.accountId);",
                      "postman.setEnvironmentVariable(\"payorId\",jsonData.payorId);",
                      "postman.setEnvironmentVariable(\"paymentMethodIdP\",jsonData.account.paymentMethod.id);",
                      "postman.setEnvironmentVariable(\"tokenId\",jsonData.account.paymentMethod.tokenId);",
                      "",
                      "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                      "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                      "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                      "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                      "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                      "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                      "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                      "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                      "   ",
                      "        ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \r\n   \"locationId\":\"{{locationId}}\",\r\n   \"payorId\":\"{{$guid}}\",\r\n   \"memberId\": \"{{memberId}}\",\r\n   \"account\":{  \r\n      \"name\":\"124656788\",\r\n      \"phone\":\"8009578010\",\r\n      \"sevaluation\":\"DAILY\",\r\n        \"billingDate\" : \"{{today}}\",\r\n\"paymentMethod\" :\r\n\r\n{ \"type\" : \"BANK_ACCOUNT\", \"tokenId\":\"{{payment_method_id_payer}}\" ,\r\n\t\"sevaluation\" : \"DAILY\",\r\n   \"billingDate\" : \"{{today}}\",\"display\":\"4900\"\r\n}\r\n   }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/account/payor",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "account",
                    "payor"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "ReviewClientAccount_with Client Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbc233f8-6c37-461c-b607-18945dda70be",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      " ",
                      "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                      "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                      "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                      "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                      "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                      "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/account/client/{{accountIdClient}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "account",
                    "client",
                    "{{accountIdClient}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Configure Late Fee",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"feeId\", jsonData.feeId);",
                  "tests[\"Response Body has feeId\"] = responseBody.has(\"feeId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has feeMode\"] = responseBody.has(\"feeMode\");",
                  "",
                  "    tests[\"Response Body has sharedValueType\"] = responseBody.has(\"sharedValueType\");",
                  "     tests[\"Response Body has abcSharedValue\"] = responseBody.has(\"abcSharedValue\");",
                  "     tests[\"Response Body has clientSharedValue\"] = responseBody.has(\"clientSharedValue\");",
                  "    tests[\"Response Body has feeValueType\"] = responseBody.has(\"feeValueType\");",
                  "    tests[\"Response Body has feeValue\"] = responseBody.has(\"feeValue\");",
                  "      tests[\"Response Body has feeStartDate\"] = responseBody.has(\"feeStartDate\");",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"accountId\" : \"{{accountIdClient}}\",\r\n  \"feeMode\" : \"LATE_FEE\",\r\n  \"feeValueType\" : \"FLAT\",\r\n  \"feeValue\" : \"100\",\r\n  \"sharedValueType\" : \"PERCENTAGE\",\r\n  \"abcSharedValue\" : \"40\",\r\n  \"clientSharedValue\" : \"60\",\r\n  \"feeStartDate\" : \"{{today}}\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/late-fee",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "late-fee"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Late Fee",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"feeIdP1\", jsonData.content[0].feeId);",
                  "tests[\"Response Body has feeId\"] = responseBody.has(\"feeId\");",
                  "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has feeMode\"] = responseBody.has(\"feeMode\");",
                  "",
                  "    tests[\"Response Body has sharedValueType\"] = responseBody.has(\"sharedValueType\");",
                  "     tests[\"Response Body has abcSharedValue\"] = responseBody.has(\"abcSharedValue\");",
                  "     tests[\"Response Body has clientSharedValue\"] = responseBody.has(\"clientSharedValue\");",
                  "    tests[\"Response Body has feeValueType\"] = responseBody.has(\"feeValueType\");",
                  "    tests[\"Response Body has feeValue\"] = responseBody.has(\"feeValue\");",
                  "      tests[\"Response Body has feeStartDate\"] = responseBody.has(\"feeStartDate\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/late-fee/account/{{accountIdClient}}?page=0&size=0",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "late-fee",
                "account",
                "{{accountIdClient}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "0"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Suspend Payment Method",
      "item": [
        {
          "name": "AddPaymentMethod_BANK",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "   ",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"payerBank\", jsonData.id);",
                  "",
                  "",
                  "",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \t\"accountId\": \"{{accountIdPayor}}\",\r\n \t\"type\": \"BANK_ACCOUNT\",\r\n \t\"bankAccountType\": \"SAVING\",\r\n\t\"accountHolderName\": \"df7rY7e5F3\",\r\n\t\"routingNumber\": \"101000967\",\r\n\t\"display\" : \"1610\",\r\n \t\"alias\": \"testalias6\",\r\n \t\"sevaluation\" : \"MONTHLY\",\r\n   \"billingDate\" : \"{{today}}\",\r\n \t\"tokenId\": \"f0745bdf-2c9d-4f01-a9d5-e4bb25d26524\"\r\n }"
            },
            "url": {
              "raw": "{{URL}}/paymentMethod",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "paymentMethod"
              ]
            }
          },
          "response": []
        },
        {
          "name": "AddPaymentMethod_CreditCard",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "   ",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"payerCard\", jsonData.id);",
                  "",
                  "",
                  "",
                  "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "   ",
                  "        ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \t\"accountId\": \"{{accountIdPayor}}\",\r\n \t\"type\": \"CREDIT_CARD\",\r\n  \t\"accountHolderName\": \"df7rY7e5F3\",\r\n  \t\"expiryYear\": \"2020\",\r\n\t\"expiryMonth\": \"05\",\r\n \t\"brand\": \"MASTERCARD\",\r\n\t\"display\": \"4512\",\r\n \t\"alias\": \"testalias6\",\r\n \t\"sevaluation\" : \"DAILY\",\r\n   \"billingDate\" : \"{{today}}\",\r\n \t\"tokenId\": \"f0745bdf-2c9d-4f01-a9d5-e4bb25d26524\"\r\n }"
            },
            "url": {
              "raw": "{{URL}}/paymentMethod",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "paymentMethod"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ReviewPayerAccPaymentMethods",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbc233f8-6c37-461c-b607-18945dda70be",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "",
                  "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                  "  ",
                  "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/payor/account/{{accountIdPayor}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payor",
                "account",
                "{{accountIdPayor}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Payer Subscription By Payment Method Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/subscription/account/{{paymentMethodIdP}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                "account",
                "{{paymentMethodIdP}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Basic CreateSubscription Current_date Payment Method",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                "exec": [
                  "var futureDate = new Date();",
                  "var dd = futureDate.getDate();",
                  "var mm = futureDate.getMonth()+1; //January is 0!",
                  "var yyyy = futureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+5;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "futureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var RfutureDate = new Date();",
                  "var dd = RfutureDate.getDate();",
                  "var mm = RfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = RfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+9;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                  "",
                  "",
                  "",
                  "",
                  "//",
                  "",
                  "var URfutureDate = new Date();",
                  "var dd = URfutureDate.getDate();",
                  "var mm = URfutureDate.getMonth()+1; //January is 0!",
                  "var yyyy = URfutureDate.getFullYear();",
                  "",
                  "if(dd<10) {",
                  "  dd = '0'+dd;",
                  "}",
                  "",
                  "mm=mm+10;",
                  "if(mm>12)",
                  "{",
                  "   mm=mm-12;",
                  "}",
                  "",
                  "if(mm<10) {",
                  "  mm = '0'+mm;",
                  "",
                  "",
                  "}",
                  "",
                  "console.log(\"dd  \" + dd);",
                  "console.log(\"mm  \"+ mm);",
                  "console.log(\"yyyy  \"+yyyy);",
                  "",
                  "",
                  "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"subIdFreeze\",jsonData.subId);",
                  "",
                  " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                  "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                  "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                  "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                  "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                  "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                  "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                  "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                  "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                  "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                  "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                  "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                  "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                  "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                  "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                  "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                  "   ",
                  "}",
                  "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"{{paymentMethodIdP}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"DAILY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": false,\n\"openEnded\": false,\n\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 222, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/subscription/",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "subscription",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Suspend Payment Method Used In Active Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d783aa0f-133a-4f73-8e38-30997be9c8d8",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  "",
                  "     tests[\"Response code should be 400\"] = responseCode.code === 400;",
                  "}",
                  " ",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/paymentMethod/{{paymentMethodIdP}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "paymentMethod",
                "{{paymentMethodIdP}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Suspend Payment Method Not Used In any Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d783aa0f-133a-4f73-8e38-30997be9c8d8",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  "tests[\"Response Body has Id\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                  "   ",
                  "    tests[\"Response Body has display\"] = responseBody.has(\"display\");",
                  "    ",
                  "    tests[\"Response Body has accountHolderName\"] = responseBody.has(\"accountHolderName\");",
                  "    tests[\"Response Body has active\"] = responseBody.has(\"active\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/paymentMethod/{{payerBank}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "paymentMethod",
                "{{payerBank}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Suspend Payment Method Not Used In any Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d783aa0f-133a-4f73-8e38-30997be9c8d8",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "   ",
                  "tests[\"Response Body has Id\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                  "   ",
                  "    tests[\"Response Body has display\"] = responseBody.has(\"display\");",
                  "    ",
                  "    tests[\"Response Body has accountHolderName\"] = responseBody.has(\"accountHolderName\");",
                  "    tests[\"Response Body has active\"] = responseBody.has(\"active\");",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/paymentMethod/{{payerCard}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "paymentMethod",
                "{{payerCard}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Update Payer Account Payment Method",
      "item": [
        {
          "name": "Update Payer Account Payment Method",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f0f54dbc-13ca-455c-b280-17bc90093624",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "   ",
                  "    tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                  "    ",
                  "      tests[\"Response Body has routingNumber\"] = responseBody.has(\"routingNumber\");",
                  "    tests[\"Response Body has display\"] = responseBody.has(\"display\");",
                  "        tests[\"Response Body has billingDate\"] = responseBody.has(\"billingDate\");",
                  "    tests[\"Response Body has sevaluation\"] = responseBody.has(\"sevaluation\");",
                  "    ",
                  "    ",
                  "    ",
                  "}",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"bankRouting\": \"082000976\",\r\n  \"display\": \"4900\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/payor/paymentMethod/{{paymentMethodIdP}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payor",
                "paymentMethod",
                "{{paymentMethodIdP}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Payment-method (PG)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                "exec": [
                  "",
                  "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/payment-method/{{tokenId}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method",
                "{{tokenId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "UpdateSalesEmpid",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "9cd5f017-3bd6-4b2e-b282-39dcb794e6eb",
            "exec": [
              "if (responseCode.code != 200)",
              "{",
              "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
              "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
              "}",
              "",
              "else if (responseCode.code === 200)",
              "{",
              "    var jsonData = JSON.parse(responseBody);",
              " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
              "   ",
              "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
              "     tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
              "       tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
              "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
              "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
              "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
              "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
              "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
              "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
              "    tests[\"Response Body has salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
              "    tests[\"Response Body has price\"] = responseBody.has(\"price\");",
              "  ",
              "}",
              "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{access_token}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"salesEmployeeId\" : \"ddb4e6e8-6ae9-46a6-8b72-f5cae9259cc2\"\r\n}"
        },
        "url": {
          "raw": "{{URL}}/subscription/{{subIdFreeze}}",
          "host": [
            "{{URL}}"
          ],
          "path": [
            "subscription",
            "{{subIdFreeze}}"
          ]
        }
      },
      "response": []
    }
  ]
}