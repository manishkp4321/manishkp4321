{
  "info": {
    "_postman_id": "5a1f9efc-f6e9-4c3a-9adb-a644929dca89",
    "name": "SP8_Demo",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Prerequisite",
      "item": [
        {
          "name": "Authorization",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2b49fb61-2244-4ebe-8877-c12942d44c9b",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"authId\", jsonData.access_token);",
                  "   ",
                  "    tests[\"Response Body has Correct Token Type\"] = responseBody.has(\"\\\"token_type\\\":\\\"bearer\\\"\");",
                  "    tests[\"Response Body has Access Token\"] = responseBody.has(\"\\\"access_token\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"authId\")+\"\\\"\");",
                  "    tests[\"Response Body has Expiration Field\"] = responseBody.has(\"expires_in\");",
                  "    tests[\"Response Body has Correct Scope\"] = responseBody.has(\"\\\"scope\\\":\"+\"\\\"\"+jsonData.scope+\"\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Basic QVVUT01BVEVEX1RFU1RJTkc6dDNzdEBsbHRoM3RoMW5ncw=="
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "ABCFS-ORGANIZATION-ID",
                "value": "ee05d5fe-07fb-4ee7-91db-756263f95be9"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/token?client_id=AUTOMATED_TESTING&grant_type=client_credentials",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "token"
              ],
              "query": [
                {
                  "key": "client_id",
                  "value": "AUTOMATED_TESTING"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"orgId\", jsonData.id);",
                  " tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                  "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                  "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                  "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                  "    tests[\"Response Body has  extension\"] = responseBody.has(\"extension\");",
                  "    tests[\"Response Body has signInLink\"] = responseBody.has(\"signInLink\");",
                  "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                  "    tests[\"Response Body has  websiteUrl\"] = responseBody.has(\"websiteUrl\");",
                  "    tests[\"Response Body has timezone\"] = responseBody.has(\"timezone\");",
                  "    tests[\"Response Body has language\"] = responseBody.has(\"language\");",
                  "    tests[\"Response Body has region\"] = responseBody.has(\"region\");",
                  "    tests[\"Response Body has variant\"] = responseBody.has(\"variant\");",
                  "    tests[\"Response Body has branding\"] = responseBody.has(\"branding\");",
                  "   ",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  "  text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var name= stringGen(5)",
                  "postman.setEnvironmentVariable(\"name\", \"Singh\"+name);",
                  "",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName1 = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName1);",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authId}}"
              },
              {
                "key": "",
                "value": "",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"    ABC {{name}}    \",\r\n  \"email\" : \"{{name}}@qa4life.com\",\r\n  \"phone\" : {\r\n    \"number\" : \"1234567\",\r\n    \"extension\" : \"38\"\r\n  },\r\n  \"signInLink\" : \"https://test.url.qa4life.com\",\r\n  \"websiteUrl\" : \"www.planet-fitness.com\",\r\n  \"timezone\" : \"US/Alaska\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"branding\" : {\r\n    \"colorScheme\" : {\r\n      \"primary\" : \"#666666\",\r\n      \"primaryHover\" : \"#666666\"\r\n    }\r\n  },\r\n  \"locale\" : {\r\n    \"language\" : \"UA\",\r\n    \"region\" : \"US\",\r\n    \"variant\" : \"MAC\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{URL}}/organization",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "organization"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                "exec": [
                  "",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                  "   tests[\"Response Body has Correct description\"] = responseBody.has(\"description\");",
                  "   tests[\"Response Body has permissions\"] = responseBody.has(\"permissions\");",
                  "   tests[\"Response Body has  key\"] = responseBody.has(\"key\");",
                  "   ",
                  "   ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authId}}"
              },
              {
                "key": "ABCFS-ORGANIZATION-ID",
                "value": "{{orgId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"name\" : \"Admin/Owner\",\n\"description\" : \"Owner\",\n\"permissions\" : [\n        {\"key\" : \"role:write\"},\n    {\"key\" : \"role:read\"},\n    {\"key\" : \"user:write\"},\n    {\"key\" : \"user:read\"},\n    {\"key\" : \"user:protected\"},\n    {\"key\" : \"catalog-item:read\"},\n    {\"key\" : \"catalog-item:write\"},\n    {\"key\" : \"subscription-plan:read\"},\n    {\"key\" : \"subscription-plan:write\"},\n    {\"key\" : \"application:write\"},\n    {\"key\" : \"application:read\"},\n    {\"key\" : \"developer:write\"},\n    {\"key\" : \"developer:read\"},\n    {\"key\" : \"organization:read\"},\n    {\"key\" : \"organization:write\"},\n    {\"key\" : \"employee:read\"},\n    {\"key\" : \"employee:write\"},\n    {\"key\" : \"location:read\"},\n    {\"key\" : \"location:write\"},\n    {\"key\" : \"member:read\"},\n    {\"key\" : \"member:write\"},\n    {\"key\" : \"checkin:read\"},\n    {\"key\" : \"checkin:write\"},\n    {\"key\" : \"webhook:read\"},\n    {\"key\" : \"webhook:write\"},\n    {\"key\" : \"email-template:write\"},\n    {\"key\" : \"account:write\"},\n    {\"key\" : \"subscription:write\"},\n    {\"key\" : \"subscription:read\"},\n    {\"key\" : \"role:protected\"},\n    {\"key\" : \"catalog-item:protected\"},\n    {\"key\" : \"subscription-plan:protected\"},\n    {\"key\" : \"application:protected\"},\n    {\"key\" : \"developer:protected\"},\n    {\"key\" : \"employee:protected\"},\n    {\"key\" : \"location:protected\"},\n    {\"key\" : \"member:protected\"},\n    {\"key\" : \"checkin:protected\"},\n    {\"key\" : \"webhook:protected\"},\n    {\"key\" : \"organization-search:read\"},\n\n\n\n{\"key\":\"payment-company:write\"},\n{\"key\":\"payment-company:update\"},\n{\"key\":\"payment-company:read\"},\n{\"key\":\"payment-company:protected\"},\n{\"key\":\"payment-processor:write\"},\n{\"key\":\"payment-processor:update\"},\n{\"key\":\"payment-processor:read\"},\n{\"key\":\"payment-processor:protected\"},\n{\"key\":\"payment-originator:write\"},\n{\"key\":\"payment-originator:update\"},\n{\"key\":\"payment-originator:read\"},\n{\"key\":\"payment-originator:protected\"},\n{\"key\":\"payment-destination:write\"},\n{\"key\":\"payment-destination:update\"},\n{\"key\":\"payment-destination:read\"},\n{\"key\":\"payment-destination:protected\"},\n{\"key\":\"payment-merchant:write\"},\n{\"key\":\"payment-merchant:update\"},\n{\"key\":\"payment-merchant:read\"},\n{\"key\":\"payment-merchant:protected\"},\n{\"key\":\"payment-merchant-activate:write\"},\n{\"key\":\"payment-audit:read\"},\n{\"key\":\"payment-command:update\"},\n{\"key\":\"payment-command:read\"},\n{\"key\":\"payment-command:protected\"},\n{\"key\":\"payment-batch:protected\"},\n{\"key\":\"payment-remittance:read\"}\n\n]\n}"
            },
            "url": {
              "raw": "{{URL}}/role",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "role"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    ",
                  "    postman.setEnvironmentVariable(\"username\", jsonData.identity);",
                  "     tests[\"Response Body has Correct id\"] = responseBody.has(\"id\");",
                  "   tests[\"Response Body has Correct provider\"] = responseBody.has(\"provider\");",
                  "   tests[\"Response Body has identity\"] = responseBody.has(\"identity\");",
                  "   tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has lastName\"] = responseBody.has(\"lastName\");",
                  "   tests[\"Response Body has roleName\"] = responseBody.has(\"roleName\");",
                  "   tests[\"Response Body has disabled\"] = responseBody.has(\"disabled\");",
                  "   tests[\"Response Body has  hasPassword\"] = responseBody.has(\"hasPassword\");",
                  "   ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var uniqueClient= stringGen(8)",
                  "postman.setEnvironmentVariable(\"UniqueClient\", \"Client\"+uniqueClient);",
                  "",
                  "",
                  "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randName1 = names[Math.floor(Math.random() * names.length)];",
                  "postman.setEnvironmentVariable(\"randName\", randName1);",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authId}}"
              },
              {
                "key": "ABCFS-ORGANIZATION-ID",
                "value": "{{orgId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"identity\" : \"{{UniqueClient}}@hello.com\",\r\n  \"firstName\" : \"JohnD\",\r\n  \"lastName\" : \"Doe\",\r\n  \"roleName\" : \"Admin/Owner\",\r\n  \"password\" : \"Password123\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/user",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Authorization_User",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "24ec140a-d8be-4a2f-badd-47552560a90b",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
                  "    tests[\"Response Body has Correct token_type\"] = responseBody.has(\"token_type\");",
                  "   tests[\"Response Body has Correct scope\"] = responseBody.has(\"scope\");",
                  "   tests[\"Response Body has role\"] = responseBody.has(\"role\");",
                  "   tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                  "    tests[\"Response Body has lastName\"] = responseBody.has(\"lastName\");",
                  "   tests[\"Response Body has user_id\"] = responseBody.has(\"user_id\");",
                  "   tests[\"Response Body has organization_id\"] = responseBody.has(\"organization_id\");",
                  "   tests[\"Response Body has  profiles\"] = responseBody.has(\"profiles\");",
                  "   ",
                  "   ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Basic QVVUT01BVEVEX1RFU1RJTkc6dDNzdEBsbHRoM3RoMW5ncw=="
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "ABCFS-ORGANIZATION-ID",
                "value": "{{orgId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/token?client_id=AUTOMATED_TESTING&grant_type=password&username={{username}}&password=Password123",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "token"
              ],
              "query": [
                {
                  "key": "client_id",
                  "value": "AUTOMATED_TESTING"
                },
                {
                  "key": "grant_type",
                  "value": "password"
                },
                {
                  "key": "username",
                  "value": "{{username}}"
                },
                {
                  "key": "password",
                  "value": "Password123"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Bravo-Stories",
      "item": [
        {
          "name": "BravoPrerequisite",
          "item": [
            {
              "name": "Create Location",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c80ab94-889b-4d27-9ec3-04c17a489ca3",
                    "exec": [
                      "",
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"locationId\", jsonData.id);",
                      " tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                      "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                      "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                      "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                      "    tests[\"Response Body has  extension\"] = responseBody.has(\"extension\");",
                      "    tests[\"Response Body has cardAuthorizationDocId\"] = responseBody.has(\"cardAuthorizationDocId\");",
                      "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                      "    tests[\"Response Body has  waiverDocId\"] = responseBody.has(\"waiverDocId\");",
                      "    tests[\"Response Body has locale\"] = responseBody.has(\"locale\");",
                      "    tests[\"Response Body has emailIdentityVerified\"] = responseBody.has(\"emailIdentityVerified\");",
                      "    tests[\"Response Body has organizationId\"] = responseBody.has(\"organizationId\");",
                      "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                      "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                      "   ",
                      "",
                      "",
                      "    ",
                      "}",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\" : \"ABC Location\",\r\n  \"email\" : \"noreply@qa4life.com\",\r\n  \"phone\" : {\r\n    \"number\" : \"1234567\",\r\n    \"extension\" : \"38\"\r\n  },\r\n  \"timezone\" : \"US/Alaska\",\r\n  \"cardAuthorizationDocId\" : \"4c3cae02-de89-4fd8-943b-77fe3ee8903b\",\r\n  \"waiverDocId\" : \"b4f09941-3d46-4954-8e54-408785723188\",\r\n  \"termsDocId\" : \"e2726d52-58a4-4cdd-8a6a-220feae90410\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"zipCode\" : \"72120\",\r\n    \"country\" : \"USA\",\r\n    \"state\" : \"AR\"\r\n  },\r\n  \"locale\" : {\r\n    \"language\" : \"UA\",\r\n    \"region\" : \"US\",\r\n    \"variant\" : \"MAC\"\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/location",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "location"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create member1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0fc0d9f-f6aa-4237-b7e0-7a8b1565df3b",
                    "exec": [
                      "",
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                      "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                      "   ",
                      "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                      "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                      "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                      "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                      "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                      "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                      "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                      "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                      "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                      "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                      "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                      "   ",
                      "",
                      "",
                      "",
                      "",
                      "}",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"firstName\" : \"{{UniqueClient}}\",\r\n  \"lastName\" : \"{{UniqueClient}}\",\r\n  \"middleName\" : \"{{UniqueClient}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n \r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/member",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "member"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create member 2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5c37caea-65ed-4343-a52a-8d259e76710c",
                    "exec": [
                      "",
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"memberId2\", jsonData.id);",
                      "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                      "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                      "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                      "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                      "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                      "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                      "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                      "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                      "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                      "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                      "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                      "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                      "   ",
                      "",
                      "",
                      "",
                      "",
                      "}",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"firstName\" : \"{{UniqueClient}}\",\r\n  \"lastName\" : \"{{UniqueClient}}\",\r\n  \"middleName\" : \"{{UniqueClient}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/member",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "member"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create_Payment_Method_Client",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b532f0de-2ada-4eac-91b6-83e71b6d3c10",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "   postman.setEnvironmentVariable(\"payment_method_id_client\", jsonData.id);",
                      "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                      "",
                      "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                      "   tests[\"Response Body has  accountHolderName\"] = responseBody.has(\"accountHolderName\");",
                      "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                      "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                      "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                      "",
                      "  ",
                      "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                      "}",
                      "   ",
                      "tests[\"Response code should be 200\"] = responseCode.code === 201;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"Amit Sharma\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
                },
                "url": {
                  "raw": "{{URL}}/payment-method",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-method"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create_Client_Acount",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "48c2eeee-79a5-446a-99f0-975331dddbd7",
                    "exec": [
                      "var today = new Date();",
                      "var dd = today.getDate();",
                      "var mm = today.getMonth()+1; //January is 0!",
                      "var yyyy = today.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "    dd = '0'+dd",
                      "} ",
                      "",
                      "if(mm<10) {",
                      "    mm = '0'+mm",
                      "} ",
                      "",
                      "today = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"today\", today);",
                      "",
                      "",
                      "",
                      "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                      "",
                      "var randClientId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randClientId\", randClientId);",
                      "",
                      "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                      "",
                      "var randName = names[Math.floor(Math.random() * names.length)];",
                      "postman.setEnvironmentVariable(\"randName\", randName);",
                      "",
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var uniqueClient= stringGen(10)",
                      "postman.setEnvironmentVariable(\"UniqueClient\", \"Client \"+uniqueClient);",
                      "",
                      "",
                      "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                      "",
                      "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                      "postman.setEnvironmentVariable(\"seval\", seval);",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5fdc6e94-07d5-4816-b0d7-e0b60dd8c413",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"accountIdClient\", jsonData.account.accountId);",
                      "postman.setEnvironmentVariable(\"locationId\", jsonData.locationId);",
                      "postman.setEnvironmentVariable(\"clientId\", jsonData.clientId);",
                      "postman.setEnvironmentVariable(\"paymentMethodIdC\", jsonData.account.paymentMethod.id);",
                      "",
                      "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct Client Id\"] = responseBody.has(\"clientId\");",
                      "   tests[\"Response Body has MerchantId\"] = responseBody.has(\"merchantId\");",
                      "   tests[\"Response Body has Client Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has Client Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has Client Email\"] = responseBody.has(\"email\");",
                      "    tests[\"Response Body has Client Phone\"] = responseBody.has(\"phone\");",
                      "    tests[\"Response Body has Client Sevaluation\"] = responseBody.has(\"sevaluation\");",
                      "    tests[\"Response Body has Client Billing Date\"] = responseBody.has(\"billingDate\");",
                      "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                      "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                      "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                      "    ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n \"locationId\" : \"{{locationId}}\",\n \"clientId\" : \"{{$guid}}\",\n \"account\" : {\n   \"name\" : \"{{UniqueClient}}\",\n   \"email\" : \"{{randName}}@qa4life.com\",\n   \"phone\" : \"1234567890\",\n   \"sevaluation\" : \"{{seval}}\",\n   \"billingDate\" : \"{{today}}\",\n   \"paymentMethod\" : {    \"type\" : \"BANK_ACCOUNT\",\n     \"tokenId\":\"{{payment_method_id_client}}\"\n   }\n }\n}"
                },
                "url": {
                  "raw": "{{URL}}/account/client",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "account",
                    "client"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create_Payment_Method_Payor_1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cb1b0d87-aedd-4610-9261-caa6f7a09ab1",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "   postman.setEnvironmentVariable(\"payment_method_id\", jsonData.id);",
                      "",
                      "   tests[\"Response Body has Payment Method  Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"payment_method_id\")+\"\\\"\");",
                      "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                      "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                      "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                      "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                      "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                      "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                      "}",
                      "   ",
                      "tests[\"Response code should be 200\"] = responseCode.code === 201;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authId}}",
                    "type": "text"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"Amit Sharma\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
                },
                "url": {
                  "raw": "{{URL}}/payment-method",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-method"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create_Payment_Method_Payor_2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2810581b-d837-44c4-be31-361c54c23e25",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "   postman.setEnvironmentVariable(\"payment_method_id\", jsonData.id);",
                      "",
                      "   tests[\"Response Body has Payment Method  Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"payment_method_id\")+\"\\\"\");",
                      "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                      "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                      "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                      "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                      "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                      "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                      "}",
                      "   ",
                      "tests[\"Response code should be 200\"] = responseCode.code === 201;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authId}}",
                    "type": "text"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"Amit Sharma\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
                },
                "url": {
                  "raw": "{{URL}}/payment-method",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-method"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "CreatePayorAccount1",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7e004e8e-d559-49f6-af7a-c2c4cf4677db",
                    "exec": [
                      "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                      "",
                      "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                      "",
                      "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                      "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                      "",
                      "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                      "",
                      "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                      "",
                      "var randName = names[Math.floor(Math.random() * names.length)];",
                      "postman.setEnvironmentVariable(\"randName\", randName);",
                      "",
                      "",
                      "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                      "",
                      "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                      "postman.setEnvironmentVariable(\"seval\", seval);",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "af03f942-9cb3-46d6-acf7-2b545732842a",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    ",
                      "   ",
                      "postman.setEnvironmentVariable(\"accountIdpayor\", jsonData.account.accountId);",
                      "postman.setEnvironmentVariable(\"payorId\", jsonData.payorId);",
                      "",
                      "postman.setEnvironmentVariable(\"paymentMethodIdP\", jsonData.account.paymentMethod.id);",
                      "",
                      "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                      "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                      "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                      "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                      "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                      "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                      "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                      "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                      "   ",
                      "        ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authId}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \r\n   \"locationId\":\"{{locationId}}\",\r\n   \"payorId\":\"{{$guid}}\",\r\n   \"memberId\": \"{{memberId}}\",\r\n   \"account\":{  \r\n      \"name\":\"{{UniqueClient}}\",\r\n      \"phone\":\"8009578010\",\r\n      \"sevaluation\":\"WEEKLY\",\r\n     \"billingDate\" : \"{{today}}\",\r\n      \"paymentMethod\":{\r\n     \"type\" : \"BANK_ACCOUNT\",\r\n     \"tokenId\":\"8ba58763-68b9-4f66-ba82-3be956476ba2\"\r\n\r\n   }\r\n   }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/account/payor",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "account",
                    "payor"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "CreatePayorAccount2",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "14e91780-e649-4e2c-87e5-48eb232650db",
                    "exec": [
                      "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                      "",
                      "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                      "",
                      "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                      "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                      "",
                      "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                      "",
                      "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                      "",
                      "var randName = names[Math.floor(Math.random() * names.length)];",
                      "postman.setEnvironmentVariable(\"randName\", randName);",
                      "",
                      "",
                      "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                      "",
                      "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                      "postman.setEnvironmentVariable(\"seval\", seval);",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "76c02245-0586-4f2b-a67e-6e1902839bd0",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    ",
                      "   ",
                      "postman.setEnvironmentVariable(\"accountIdpayor\", jsonData.account.accountId);",
                      "postman.setEnvironmentVariable(\"payorId\", jsonData.payorId);",
                      "",
                      "postman.setEnvironmentVariable(\"paymentMethodIdP\", jsonData.account.paymentMethod.id);",
                      "",
                      "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                      "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                      "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                      "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                      "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                      "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                      "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                      "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                      "   ",
                      "        ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authId}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \r\n   \"locationId\":\"{{locationId}}\",\r\n   \"payorId\":\"{{$guid}}\",\r\n   \"memberId\": \"{{memberId}}\",\r\n   \"account\":{  \r\n      \"name\":\"{{UniqueClient}}\",\r\n      \"phone\":\"8009578010\",\r\n      \"sevaluation\":\"WEEKLY\",\r\n     \"billingDate\" : \"{{today}}\",\r\n      \"paymentMethod\":{\r\n     \"type\" : \"BANK_ACCOUNT\",\r\n     \"tokenId\":\"8ba58763-68b9-4f66-ba82-3be956476ba2\"\r\n\r\n   }\r\n   }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/account/payor",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "account",
                    "payor"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "CreateSubscription_Renew_Type_Term",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "bd4904f6-c412-464a-9331-3ce629c54341",
                    "exec": [
                      "var futureDate = new Date();",
                      "var dd = futureDate.getDate();",
                      "var mm = futureDate.getMonth()+1; //January is 0!",
                      "var yyyy = futureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+5;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "futureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                      "",
                      "",
                      "",
                      "//",
                      "",
                      "var RfutureDate = new Date();",
                      "var dd = RfutureDate.getDate();",
                      "var mm = RfutureDate.getMonth()+1; //January is 0!",
                      "var yyyy = RfutureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+9;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                      "",
                      "",
                      "",
                      "",
                      "//",
                      "",
                      "var URfutureDate = new Date();",
                      "var dd = URfutureDate.getDate();",
                      "var mm = URfutureDate.getMonth()+1; //January is 0!",
                      "var yyyy = URfutureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+10;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "16dacbcc-2206-490d-ace9-5dbb53b7f58d",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    postman.setEnvironmentVariable(\"subIdaccount\",jsonData.subId);",
                      "",
                      " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                      "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                      "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                      "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                      "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                      "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                      "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                      "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                      "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                      "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                      "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                      "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                      "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                      "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                      "   ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authId}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"{{accountIdpayor}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"true\",\n\"renewalOptions\":\n\n{ \"renewDate\": \"{{RfutureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{RfutureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\n,\n\"openEnded\": false,\n\"renewType\": \"TERM\",\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 4000, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
                },
                "url": {
                  "raw": "{{URL}}/subscription/",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "subscription",
                    ""
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5e2fb36-e0c4-4cfe-afd8-33719c11735d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3a5da1b5-4225-4314-bb14-1560794553ce",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "SP8_Agreement_Flow",
          "item": [
            {
              "name": "Create Agreement",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f0a8fb50-ee2c-45dc-9c4c-92ae53f9c08a",
                    "exec": [
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"ABCDEFGIJrstuvwxyz123456789\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var uniqueClient= stringGen(15)",
                      "postman.setEnvironmentVariable(\"agreementNum\", uniqueClient);",
                      "",
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"ABCDEFGIJrstuvwxyz123456789\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var compaign= stringGen(100)",
                      "postman.setEnvironmentVariable(\"compaign\", compaign);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "45484e47-3da8-4f25-ae8d-79f4403e482b",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "   postman.setEnvironmentVariable(\"agreementId\" ,jsonData.agreementId);",
                      "   postman.setEnvironmentVariable(\"agreementNumber\" , jsonData.agreementNumber)",
                      "   tests[\"Response Body has Correct agreement Id\"] = responseBody.has(\"agreementId\");",
                      "   tests[\"Response Body has Correct agreement Number\"] = responseBody.has(\"agreementNumber\");",
                      "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct document Id\"] = responseBody.has(\"documentIdList\");",
                      "   tests[\"Response Body has memberId List\"] = responseBody.has(\"memberIdList\");",
                      "   tests[\"Response Body has subscription List\"] = responseBody.has(\"subscriptionList\");",
                      "   tests[\"Response Body has campaign\"] = responseBody.has(\"campaign\");",
                      "   ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{authId}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"locationId\": \"{{locationId}}\",\r\n\"documentIdList\" : [ \"eaca4410-3686-4eda-87c3-1320d15e4b94\" ],\r\n\"memberIdList\" : [ \"{{memberId}}\"],\r\n \"agreementNumber\" : \"{{agreementNum}}\",\r\n\"campaign\" : \"BhavnaCampaign\",\r\n \"subscriptionIdList\" : [ {\r\n    \"subId\" : \"{{subIdaccount}}\",\r\n    \"primary\" : false\r\n  } ],\r\n\"subscriptionList\" : [ {\r\n\t\r\n\"primary\" : true,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"03-28-2019\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"4\",\r\n\"name\": \"Manish\",\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"{{RfutureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{RfutureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 2554555, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n},\r\n{\"primary\" : false,\r\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\r\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\r\n\"locationId\": \"{{locationId}}\",\r\n\"memberIdList\": [\"{{memberId}}\"],\r\n\"accountId\": \"{{paymentMethodIdP}}\",\r\n\"planVersion\": 11,\r\n\"start\": \"{{today}}\",\r\n\"invoiceDate\": \"{{today}}\",\r\n\"expirationDate\": \"{{futureDate}}\",\r\n\"frequency\": \"WEEKLY\",\r\n\"duration\": \"4\",\r\n\"name\": \"Manish\",\r\n\"autoRenew\": \"true\",\r\n\"renewalOptions\":\r\n\r\n{ \"renewDate\": \"{{RfutureDate}}\", \"renewFrequency\": \"DAILY\", \"renewDuration\": \"4\", \"renewType\": \"TERM\", \"renewAmount\": 100, \"renewInvoiceDate\" : \"{{RfutureDate}}\" , \"renewExpireDate\": \"01-01-2020\"}\r\n,\r\n\"openEnded\": false,\r\n\"renewType\": \"TERM\",\r\n\"items\": [\r\n\r\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 3, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\r\n]\r\n\r\n}\r\n\r\n]\r\n\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/agreement",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "agreement"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GetMemberSuscriptionList",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95a1a71a-9c36-45f9-b427-d64d04fd9bda",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    postman.setEnvironmentVariable(\"subIdaccount\",jsonData.subId);",
                      "",
                      " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                      "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                      "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                      "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                      "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                      "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                      "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                      "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                      "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                      "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                      "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                      "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                      "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                      "   ",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authId}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/subscription/member/{{memberId}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "subscription",
                    "member",
                    "{{memberId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "View Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "27698631-2227-412b-87a7-44107412f87f",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "   postman.setEnvironmentVariable(\"agreementId\" ,jsonData.agreementId);",
                      "   postman.setEnvironmentVariable(\"agreementNumber\" , jsonData.agreementNumber)",
                      "   tests[\"Response Body has Correct agreement Id\"] = responseBody.has(\"agreementId\");",
                      "   tests[\"Response Body has Correct agreement Number\"] = responseBody.has(\"agreementNumber\");",
                      "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct document Id\"] = responseBody.has(\"documentIdList\");",
                      "   tests[\"Response Body has memberId List\"] = responseBody.has(\"memberIdList\");",
                      "   tests[\"Response Body has subscription List\"] = responseBody.has(\"subscriptionList\");",
                      "   ",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{authId}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/agreement/{{agreementId}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "agreement",
                    "{{agreementId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "CancelAgreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b5175e34-f3b6-4f14-8558-d6710d89d063",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      " tests[\"Response Body has Correct agreement Id\"] = responseBody.has(\"agreementId\");",
                      "   tests[\"Response Body has Correct location ID\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has agreement Number\"] = responseBody.has(\"agreementNumber\");",
                      "   tests[\"Response Body has subscription List\"] = responseBody.has(\"subscriptionIdList\");",
                      "    tests[\"Response Body has agreement cancellation date\"] ",
                      "    = responseBody.has(\"agrmCancellationDate\");",
                      "   ",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{authId}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"agrmCancellationDate\" : \"{{today}}\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/cancel-agreement/{{agreementNumber}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "cancel-agreement",
                    "{{agreementNumber}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "c3f03912-3254-47f1-88a1-5b8b66cac480",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "d9a3394f-53d3-4888-bbab-c5a27952f075",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Charlie-Stories",
      "item": [
        {
          "name": "CharliePrerequisite",
          "item": [
            {
              "name": "Create Location",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                    "exec": [
                      "",
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"locationId\", jsonData.id);",
                      " tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                      "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                      "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                      "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                      "    tests[\"Response Body has  extension\"] = responseBody.has(\"extension\");",
                      "    tests[\"Response Body has cardAuthorizationDocId\"] = responseBody.has(\"cardAuthorizationDocId\");",
                      "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                      "    tests[\"Response Body has  waiverDocId\"] = responseBody.has(\"waiverDocId\");",
                      "    tests[\"Response Body has locale\"] = responseBody.has(\"locale\");",
                      "    tests[\"Response Body has emailIdentityVerified\"] = responseBody.has(\"emailIdentityVerified\");",
                      "    tests[\"Response Body has organizationId\"] = responseBody.has(\"organizationId\");",
                      "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                      "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                      "   ",
                      "",
                      "",
                      "    ",
                      "}",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\" : \"ABC Location\",\r\n  \"email\" : \"noreply@qa4life.com\",\r\n  \"phone\" : {\r\n    \"number\" : \"1234567\",\r\n    \"extension\" : \"38\"\r\n  },\r\n  \"timezone\" : \"US/Alaska\",\r\n  \"cardAuthorizationDocId\" : \"4c3cae02-de89-4fd8-943b-77fe3ee8903b\",\r\n  \"waiverDocId\" : \"b4f09941-3d46-4954-8e54-408785723188\",\r\n  \"termsDocId\" : \"e2726d52-58a4-4cdd-8a6a-220feae90410\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"zipCode\" : \"72120\",\r\n    \"country\" : \"USA\",\r\n    \"state\" : \"AR\"\r\n  },\r\n  \"locale\" : {\r\n    \"language\" : \"UA\",\r\n    \"region\" : \"US\",\r\n    \"variant\" : \"MAC\"\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/location",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "location"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Member",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "893c0963-fb90-4d5c-b2fa-195e40c388bf",
                    "exec": [
                      "",
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                      "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                      "   tests[\"Response Body has Correct email\"] = responseBody.has(\"email\");",
                      "   tests[\"Response Body has phone\"] = responseBody.has(\"phone\");",
                      "   tests[\"Response Body has  number\"] = responseBody.has(\"number\");",
                      "    tests[\"Response Body has  firstName\"] = responseBody.has(\"firstName\");",
                      "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                      "    tests[\"Response Body has  address\"] = responseBody.has(\"address\");",
                      "    tests[\"Response Body has  waiverDocumentId\"] = responseBody.has(\"waiverDocumentId\");",
                      "    tests[\"Response Body has hasPhoto\"] = responseBody.has(\"hasPhoto\");",
                      "    tests[\"Response Body has digitalSignatureId\"] = responseBody.has(\"digitalSignatureId\");",
                      "    tests[\"Response Body has employmentData\"] = responseBody.has(\"employmentData\");",
                      "    tests[\"Response Body has city\"] = responseBody.has(\"city\");",
                      "    tests[\"Response Body has state\"] = responseBody.has(\"state\");",
                      "   ",
                      "",
                      "",
                      "",
                      "",
                      "}",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "72edf1d5-e2be-4dd3-85ca-0326897cc421",
                    "exec": [
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var member= stringGen(8)",
                      "postman.setEnvironmentVariable(\"member\", \"member\"+member);",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"firstName\" : \"{{member}}\",\r\n  \"lastName\" : \"{{member}}\",\r\n  \"middleName\" : \"{{member}}\",\r\n  \"birthDate\" : \"1977-07-07\",\r\n  \"email\" : \"{{member}}.doe@qa4life.com\",\r\n  \"phones\" : [ {\r\n    \"number\" : \"1123456\",\r\n    \"phoneType\" : \"PRIMARY\"\r\n  } ],\r\n  \"waiverDocumentId\" : \"ab2a6fad-10d3-4f3c-8cdf-b8f30696bf97\",\r\n  \"termsDocumentId\" : \"7078c552-15df-43e4-882e-6d70ed1bb55c\",\r\n  \"digitalSignatureId\" : \"4ccb3d0e-48dc-48ce-8e1f-f9827026ffd5\",\r\n  \"healthNote\" : \"High BP\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"employmentData\" : {\r\n    \"employer\" : \"Exadel\",\r\n    \"occupation\" : \"programmer\"\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/member",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "member"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create_Payment_Method_Client",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "   postman.setEnvironmentVariable(\"payment_method_id_client\", jsonData.id);",
                      "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                      "",
                      "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                      "   tests[\"Response Body has  accountHolderName\"] = responseBody.has(\"accountHolderName\");",
                      "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                      "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                      "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                      "",
                      "  ",
                      "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                      "}",
                      "   ",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"Praveen Kumar\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
                },
                "url": {
                  "raw": "{{URL}}/payment-method",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-method"
                  ]
                }
              },
              "response": [
                {
                  "name": "Response_200",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                    },
                    "url": {
                      "raw": "{{payment_gateway_server}}/accountinfotoken",
                      "host": [
                        "{{payment_gateway_server}}"
                      ],
                      "path": [
                        "accountinfotoken"
                      ]
                    }
                  },
                  "code": 200,
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Create_Payment_Method_Payor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc3c36c0-1227-4e1e-ac0f-ebf2fc92be8b",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "   postman.setEnvironmentVariable(\"payment_method_id\", jsonData.id);",
                      "",
                      "   tests[\"Response Body has Payment Method  Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"payment_method_id\")+\"\\\"\");",
                      "   tests[\"Response Body has accountHolderName\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+jsonData.accountHolderName+\"\\\"\");",
                      "   tests[\"Response Body has Correct companyId\"] = responseBody.has(\"companyId\");",
                      "   tests[\"Response Body has type\"] = responseBody.has(\"type\");",
                      "    tests[\"Response Body has  bankRouting\"] = responseBody.has(\"bankRouting\");",
                      "    tests[\"Response Body has lastFour\"] = responseBody.has(\"lastFour\");",
                      "    tests[\"Response Body has  status\"] = responseBody.has(\"status\");",
                      "}",
                      "   ",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\"companyId\": \"{{companyId}}\",\n\"type\" : \"CHECKING_ACH\",\n\"accountHolderName\" : \"Praveen Kumar\",\n\"bankRouting\" : \"082000073\",\n\"accountNumber\" : \"852937164973\"\n}"
                },
                "url": {
                  "raw": "{{URL}}/payment-method",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-method"
                  ]
                }
              },
              "response": [
                {
                  "name": "Response_200",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"merchantId\": \"{{merchant_id}}\",\r\n  \"type\": \"SAVING\",\r\n  \"accountHolderName\": \"Patrick\",\r\n  \"routing\": \"172899966\",\r\n  \"number\": \"519844\",\r\n  \"acinIsactive\": \"true\"\r\n}"
                    },
                    "url": {
                      "raw": "{{payment_gateway_server}}/accountinfotoken",
                      "host": [
                        "{{payment_gateway_server}}"
                      ],
                      "path": [
                        "accountinfotoken"
                      ]
                    }
                  },
                  "code": 200,
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Get_Client_And_Update_Account_Details_REL1-7027",
          "item": [
            {
              "name": "CreateClientAccount",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e8b2e784-73c8-4d3e-a7a2-1b7e69cf587a",
                    "exec": [
                      "var today = new Date();",
                      "var dd = today.getDate();",
                      "var mm = today.getMonth()+1; //January is 0!",
                      "var yyyy = today.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "    dd = '0'+dd",
                      "} ",
                      "",
                      "if(mm<10) {",
                      "    mm = '0'+mm",
                      "} ",
                      "",
                      "today = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"today\", today);",
                      "",
                      "",
                      "",
                      "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                      "",
                      "var randClientId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randClientId\", randClientId);",
                      "",
                      "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                      "",
                      "var randName = names[Math.floor(Math.random() * names.length)];",
                      "postman.setEnvironmentVariable(\"randName\", randName);",
                      "",
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"abcdefghijklmnopqrstuvwxyz\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var uniqueClient= stringGen(10)",
                      "postman.setEnvironmentVariable(\"UniqueClient\", \"Client \"+uniqueClient);",
                      "",
                      "",
                      "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                      "",
                      "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                      "postman.setEnvironmentVariable(\"seval\", seval);",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1f895b06-b44c-4457-80c7-721c46cb9ac2",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"accountIdClient\", jsonData.account.accountId);",
                      "postman.setEnvironmentVariable(\"locationId\", jsonData.locationId);",
                      "postman.setEnvironmentVariable(\"clientId\", jsonData.clientId);",
                      "postman.setEnvironmentVariable(\"paymentMethodIdC\", jsonData.account.paymentMethod.id);",
                      "",
                      "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct Client Id\"] = responseBody.has(\"clientId\");",
                      "   tests[\"Response Body has MerchantId\"] = responseBody.has(\"merchantId\");",
                      "   tests[\"Response Body has Client Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has Client Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has Client Email\"] = responseBody.has(\"email\");",
                      "    tests[\"Response Body has Client Phone\"] = responseBody.has(\"phone\");",
                      "    tests[\"Response Body has Client Sevaluation\"] = responseBody.has(\"sevaluation\");",
                      "    tests[\"Response Body has Client Billing Date\"] = responseBody.has(\"billingDate\");",
                      "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                      "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                      "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                      "    ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n \"locationId\" : \"{{locationId}}\",\n \"clientId\" : \"{{$guid}}\",\n \"account\" : {\n   \"name\" : \"{{UniqueClient}}\",\n   \"email\" : \"{{randName}}@qa4life.com\",\n   \"phone\" : \"1234567890\",\n   \"sevaluation\" : \"{{seval}}\",\n   \"billingDate\" : \"{{today}}\",\n   \"paymentMethod\" : {    \"type\" : \"BANK_ACCOUNT\",\n     \"tokenId\":\"{{payment_method_id_client}}\"\n   }\n }\n}"
                },
                "url": {
                  "raw": "{{URL}}/account/client",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "account",
                    "client"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get ClientAccount By Location Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ea7a02ff-8b4a-49c1-b13f-8578a2d28a7f",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"accountIdClient\", jsonData.account.accountId);",
                      "postman.setEnvironmentVariable(\"locationId\", jsonData.locationId);",
                      "postman.setEnvironmentVariable(\"clientId\", jsonData.clientId);",
                      "postman.setEnvironmentVariable(\"paymentMethodIdC\", jsonData.account.paymentMethod.id);",
                      "",
                      "   tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct Client Id\"] = responseBody.has(\"clientId\");",
                      "   tests[\"Response Body has MerchantId\"] = responseBody.has(\"merchantId\");",
                      "   tests[\"Response Body has Client Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has Client Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has Client Email\"] = responseBody.has(\"email\");",
                      "    tests[\"Response Body has Client Phone\"] = responseBody.has(\"phone\");",
                      "    tests[\"Response Body has Client Sevaluation\"] = responseBody.has(\"sevaluation\");",
                      "    tests[\"Response Body has Client Billing Date\"] = responseBody.has(\"billingDate\");",
                      "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                      "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                      "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                      "    ",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "https://qa.30preprod.com/api/account/location/{{locationId}}",
                  "protocol": "https",
                  "host": [
                    "qa",
                    "30preprod",
                    "com"
                  ],
                  "path": [
                    "api",
                    "account",
                    "location",
                    "{{locationId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "UpdateClientAccount_Details",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8d8c99e1-220c-4b54-abc5-53071c99f83f",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "",
                      "   ",
                      "   tests[\"Response Body has Client Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has Client Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has Client Email\"] = responseBody.has(\"email\");",
                      "    tests[\"Response Body has Client Phone\"] = responseBody.has(\"phone\");",
                      "    tests[\"Response Body has Client Sevaluation\"] = responseBody.has(\"sevaluation\");",
                      "    tests[\"Response Body has Client Billing Date\"] = responseBody.has(\"billingDate\");",
                      "    ",
                      "    ",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\r\n  \"account\" : {\r\n     \"phone\" : \"8009578015\",\r\n     \"sevaluation\" : \"SEMIANNUALLY\",\r\n     \"billingDate\": \"03-30-2020\"\r\n     \r\n  }\r\n}"
                },
                "url": {
                  "raw": "https://qa.30preprod.com/api/account-details/account/{{accountIdClient}}",
                  "protocol": "https",
                  "host": [
                    "qa",
                    "30preprod",
                    "com"
                  ],
                  "path": [
                    "api",
                    "account-details",
                    "account",
                    "{{accountIdClient}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "CreatePayorAccount",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3d1c35df-b9fd-4995-9cfa-69a3de58b6bb",
                    "exec": [
                      "var randMemberId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randMemberId\", randMemberId);",
                      "",
                      "var randlocId = Math.floor(Math.random() * 90000) + 10000;",
                      "postman.setEnvironmentVariable(\"randlocId\", randlocId);",
                      "",
                      "var randPayorId = Math.floor(Math.random() * 9000) + 1000;",
                      "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                      "",
                      "postman.setEnvironmentVariable(\"randPayorId\", randPayorId);",
                      "",
                      "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                      "",
                      "var randName = names[Math.floor(Math.random() * names.length)];",
                      "postman.setEnvironmentVariable(\"randName\", randName);",
                      "",
                      "",
                      "var sevaluation = [ 'DAILY', 'WEEKLY',' EVERY_OTHER_WEEK',' MONTHLY', 'EVERY_OTHER_MONTH', 'ANNUALLY', 'QUARTERLY','SEMIANNUALLY'];",
                      "",
                      "var seval = sevaluation[Math.floor(Math.random() * sevaluation.length)];",
                      "postman.setEnvironmentVariable(\"seval\", seval);",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "52d10cd3-2057-4747-b332-ba5ec2ed1924",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    ",
                      "   ",
                      "postman.setEnvironmentVariable(\"accountIdpayor\", jsonData.account.accountId);",
                      "postman.setEnvironmentVariable(\"payorId\", jsonData.payorId);",
                      "",
                      "postman.setEnvironmentVariable(\"paymentMethodIdP\", jsonData.account.paymentMethod.id);",
                      "",
                      "tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct memberId\"] = responseBody.has(\"memberId\");",
                      "   tests[\"Response Body has payorId\"] = responseBody.has(\"payorId\");",
                      "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                      "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                      "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                      "    tests[\"Response Body has Payment Method\"] = responseBody.has(\"paymentMethod\");",
                      "    tests[\"Response Body has Payment Method ID\"] = responseBody.has(\"id\");",
                      "    tests[\"Response Body has Payment Method type\"] = responseBody.has(\"type\");",
                      "   ",
                      "        ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \r\n   \"locationId\":\"{{locationId}}\",\r\n   \"payorId\":\"{{$guid}}\",\r\n   \"memberId\": \"{{memberId}}\",\r\n   \"account\":{  \r\n      \"name\":\"{{UniqueClient}}\",\r\n      \"phone\":\"8009578010\",\r\n      \"sevaluation\":\"WEEKLY\",\r\n     \"billingDate\" : \"12-31-2022\",\r\n      \"paymentMethod\":{\r\n     \"type\" : \"BANK_ACCOUNT\",\r\n     \"tokenId\":\"{{payment_method_id}}\"\r\n\r\n   }\r\n   }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/account/payor",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "account",
                    "payor"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "UpdatePayorAccount_Details",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf50692b-df84-43eb-8f8e-aa142d79baa7",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "",
                      "   ",
                      "   tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has Payor Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has Payor Email\"] = responseBody.has(\"email\");",
                      "    tests[\"Response Body has Payor Phone\"] = responseBody.has(\"phone\");",
                      "    tests[\"Response Body has Payor Sevaluation\"] = responseBody.has(\"sevaluation\");",
                      "    tests[\"Response Body has Payor Billing Date\"] = responseBody.has(\"billingDate\");",
                      "    ",
                      "    ",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\r\n  \"account\" : {\r\n\r\n        \"name\": \"Praveen Kumar\",\r\n        \"email\": \"PK@qa4life.com\",\r\n        \"phone\": \"1234567890\",\r\n        \"sevaluation\": \"MONTHLY\",\r\n        \"billingDate\": \"12-01-2022\"\r\n     \r\n       \r\n\r\n   \r\n     \r\n  }\r\n}"
                },
                "url": {
                  "raw": "https://qa.30preprod.com/api/account-details/account/{{accountIdpayor}}",
                  "protocol": "https",
                  "host": [
                    "qa",
                    "30preprod",
                    "com"
                  ],
                  "path": [
                    "api",
                    "account-details",
                    "account",
                    "{{accountIdpayor}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Configure_Crerate_And_Deactivate_ABC_Transaction_Fee_REL1-6485",
          "item": [
            {
              "name": "Create Fee Flat",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    postman.setEnvironmentVariable(\"feeId\", jsonData.feeId);",
                      "tests[\"Response Body has feeId\"] = responseBody.has(\"feeId\");",
                      "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has feeMode\"] = responseBody.has(\"feeMode\");",
                      "    tests[\"Response Body has feeType\"] = responseBody.has(\"feeType\");",
                      "    tests[\"Response Body has feeTransactionType\"] = responseBody.has(\"feeTransactionType\");",
                      "    tests[\"Response Body has feeValueType\"] = responseBody.has(\"feeValueType\");",
                      "    tests[\"Response Body has feeValue\"] = responseBody.has(\"feeValue\");",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"accountId\" : \"{{accountIdClient}}\",\r\n\"feeMode\" : \"TRANSACTION\",\r\n\"feeType\" : \"ABC_TRANSACTION_FEE\",\r\n\"feeTransactionType\" : \"VISA\",\r\n\"feeValueType\" : \"FLAT\",\r\n\"feeValue\" : \"100\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/configure-fee",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "configure-fee"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Fee Flat",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "tests[\"Response Body has feeId\"] = responseBody.has(\"feeId\");",
                      "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has feeMode\"] = responseBody.has(\"feeMode\");",
                      "    tests[\"Response Body has feeType\"] = responseBody.has(\"feeType\");",
                      "    tests[\"Response Body has feeTransactionType\"] = responseBody.has(\"feeTransactionType\");",
                      "    tests[\"Response Body has feeValueType\"] = responseBody.has(\"feeValueType\");",
                      "    tests[\"Response Body has feeValue\"] = responseBody.has(\"feeValue\");",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/fee/{{feeId}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "fee",
                    "{{feeId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Fee PERCENTAGE",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    postman.setEnvironmentVariable(\"feeIdP\", jsonData.feeId);",
                      "tests[\"Response Body has feeId\"] = responseBody.has(\"feeId\");",
                      "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has feeMode\"] = responseBody.has(\"feeMode\");",
                      "    tests[\"Response Body has feeType\"] = responseBody.has(\"feeType\");",
                      "    tests[\"Response Body has feeTransactionType\"] = responseBody.has(\"feeTransactionType\");",
                      "    tests[\"Response Body has feeValueType\"] = responseBody.has(\"feeValueType\");",
                      "    tests[\"Response Body has feeValue\"] = responseBody.has(\"feeValue\");",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"accountId\" : \"{{accountIdClient}}\",\r\n\"feeMode\" : \"TRANSACTION\",\r\n\"feeType\" : \"ABC_TRANSACTION_FEE\",\r\n\"feeTransactionType\" : \"VISA\",\r\n\"feeValueType\" : \"PERCENTAGE\",\r\n\"feeValue\" : \"10\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/configure-fee",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "configure-fee"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Fee Percenatge",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "tests[\"Response Body has feeId\"] = responseBody.has(\"feeId\");",
                      "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has feeMode\"] = responseBody.has(\"feeMode\");",
                      "    tests[\"Response Body has feeType\"] = responseBody.has(\"feeType\");",
                      "    tests[\"Response Body has feeTransactionType\"] = responseBody.has(\"feeTransactionType\");",
                      "    tests[\"Response Body has feeValueType\"] = responseBody.has(\"feeValueType\");",
                      "    tests[\"Response Body has feeValue\"] = responseBody.has(\"feeValue\");",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/fee/{{feeIdP}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "fee",
                    "{{feeIdP}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "UpdateFeeNegative",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f7df7e55-291b-49d1-9562-b800ca481f93",
                    "exec": [
                      "",
                      "",
                      "  tests[\"Response code should be 400\"] = responseCode.code === 400;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n   \"feeMode\" : \"TRANSACTION\",\n\"feeType\" : \"ABC_TRANSACTION_FEE\",\n\"feeTransactionType\" : \"VISA\",\n\"feeValueType\" : \"FLAT\",\n\"feeValue\" : \"100\"\n}"
                },
                "url": {
                  "raw": "{{URL}}/configure-fee/{{feeIdP}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "configure-fee",
                    "{{feeIdP}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "UpdateFeePositive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f7df7e55-291b-49d1-9562-b800ca481f93",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "",
                      "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has feeMode\"] = responseBody.has(\"feeMode\");",
                      "    tests[\"Response Body has feeType\"] = responseBody.has(\"feeType\");",
                      "    tests[\"Response Body has feeTransactionType\"] = responseBody.has(\"feeTransactionType\");",
                      "    tests[\"Response Body has feeValueType\"] = responseBody.has(\"feeValueType\");",
                      "    tests[\"Response Body has feeValue\"] = responseBody.has(\"feeValue\");",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \n    \"feeType\": \"ABC_TRANSACTION_FEE\",\n    \"feeTransactionType\": \"DISCOVER\",\n    \"feeValue\": \"20\"\n}"
                },
                "url": {
                  "raw": "{{URL}}/configure-fee/{{feeId}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "configure-fee",
                    "{{feeId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Fee",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d783aa0f-133a-4f73-8e38-30997be9c8d8",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "   ",
                      "tests[\"Response Body has feeId\"] = responseBody.has(\"feeId\");",
                      "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has feeMode\"] = responseBody.has(\"feeMode\");",
                      "    tests[\"Response Body has feeType\"] = responseBody.has(\"feeType\");",
                      "    tests[\"Response Body has feeTransactionType\"] = responseBody.has(\"feeTransactionType\");",
                      "    tests[\"Response Body has feeValueType\"] = responseBody.has(\"feeValueType\");",
                      "    tests[\"Response Body has feeValue\"] = responseBody.has(\"feeValue\");",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/fee/{{feeIdP}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "fee",
                    "{{feeIdP}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Configure_Crerate_And_Deactivate_Pass_Through_Fees_REL1-6486",
          "item": [
            {
              "name": "Create Fee Flat",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    postman.setEnvironmentVariable(\"PassfeeId\", jsonData.feeId);",
                      "tests[\"Response Body has feeId\"] = responseBody.has(\"feeId\");",
                      "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has feeMode\"] = responseBody.has(\"feeMode\");",
                      "    tests[\"Response Body has feeType\"] = responseBody.has(\"feeType\");",
                      "    tests[\"Response Body has feeTransactionType\"] = responseBody.has(\"feeTransactionType\");",
                      "    tests[\"Response Body has feeValueType\"] = responseBody.has(\"feeValueType\");",
                      "    tests[\"Response Body has feeValue\"] = responseBody.has(\"feeValue\");",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"accountId\" : \"{{accountIdClient}}\",\r\n\"feeMode\" : \"TRANSACTION\",\r\n\"feeType\" : \"PASS_THROUGH_FEE\",\r\n\"feeTransactionType\" : \"DISCOVER\",\r\n\"feeValueType\" : \"FLAT\",\r\n\"feeValue\" : \"10\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/configure-fee",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "configure-fee"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Fee Flat",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "tests[\"Response Body has feeId\"] = responseBody.has(\"feeId\");",
                      "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has feeMode\"] = responseBody.has(\"feeMode\");",
                      "    tests[\"Response Body has feeType\"] = responseBody.has(\"feeType\");",
                      "    tests[\"Response Body has feeTransactionType\"] = responseBody.has(\"feeTransactionType\");",
                      "    tests[\"Response Body has feeValueType\"] = responseBody.has(\"feeValueType\");",
                      "    tests[\"Response Body has feeValue\"] = responseBody.has(\"feeValue\");",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/fee/{{PassfeeId}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "fee",
                    "{{PassfeeId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Fee PERCENTAGE",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    postman.setEnvironmentVariable(\"PassfeeId2\", jsonData.feeId);",
                      "tests[\"Response Body has feeId\"] = responseBody.has(\"feeId\");",
                      "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has feeMode\"] = responseBody.has(\"feeMode\");",
                      "    tests[\"Response Body has feeType\"] = responseBody.has(\"feeType\");",
                      "    tests[\"Response Body has feeTransactionType\"] = responseBody.has(\"feeTransactionType\");",
                      "    tests[\"Response Body has feeValueType\"] = responseBody.has(\"feeValueType\");",
                      "    tests[\"Response Body has feeValue\"] = responseBody.has(\"feeValue\");",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"accountId\" : \"{{accountIdClient}}\",\r\n\"feeMode\" : \"TRANSACTION\",\r\n\"feeType\" : \"PASS_THROUGH_FEE\",\r\n\"feeTransactionType\" : \"DISCOVER\",\r\n\"feeValueType\" : \"PERCENTAGE\",\r\n\"feeValue\" : \"10\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/configure-fee",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "configure-fee"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Fee Percenatge",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "819b2428-b198-4930-9ab0-de9d0c14c716",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "tests[\"Response Body has feeId\"] = responseBody.has(\"feeId\");",
                      "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has feeMode\"] = responseBody.has(\"feeMode\");",
                      "    tests[\"Response Body has feeType\"] = responseBody.has(\"feeType\");",
                      "    tests[\"Response Body has feeTransactionType\"] = responseBody.has(\"feeTransactionType\");",
                      "    tests[\"Response Body has feeValueType\"] = responseBody.has(\"feeValueType\");",
                      "    tests[\"Response Body has feeValue\"] = responseBody.has(\"feeValue\");",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/fee/{{PassfeeId2}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "fee",
                    "{{PassfeeId2}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "UpdateFeeNegative",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c16cbdd3-f6ff-4142-a76e-f0aaf1e043ff",
                    "exec": [
                      " tests[\"Response code should be 400\"] = responseCode.code === 400;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"feeMode\" : \"TRANSACTION\",\r\n\"feeType\" : \"PASS_THROUGH_FEE\",\r\n\"feeTransactionType\" : \"DISCOVER\",\r\n\"feeValueType\" : \"FLAT\",\r\n\"feeValue\" : \"10\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/configure-fee/{{PassfeeId2}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "configure-fee",
                    "{{PassfeeId2}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "UpdateFeePositive",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f7df7e55-291b-49d1-9562-b800ca481f93",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "",
                      "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has feeMode\"] = responseBody.has(\"feeMode\");",
                      "    tests[\"Response Body has feeType\"] = responseBody.has(\"feeType\");",
                      "    tests[\"Response Body has feeTransactionType\"] = responseBody.has(\"feeTransactionType\");",
                      "    tests[\"Response Body has feeValueType\"] = responseBody.has(\"feeValueType\");",
                      "    tests[\"Response Body has feeValue\"] = responseBody.has(\"feeValue\");",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \n   \n    \"feeTransactionType\": \"VISA\",\n    \"feeValue\": \"20\"\n}"
                },
                "url": {
                  "raw": "{{URL}}/configure-fee/{{PassfeeId}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "configure-fee",
                    "{{PassfeeId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Fee",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f849767c-d90d-43bf-9c7e-1a5de3b7d43d",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   ",
                      "tests[\"Response Body has feeId\"] = responseBody.has(\"feeId\");",
                      "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has feeMode\"] = responseBody.has(\"feeMode\");",
                      "    tests[\"Response Body has feeType\"] = responseBody.has(\"feeType\");",
                      "    tests[\"Response Body has feeTransactionType\"] = responseBody.has(\"feeTransactionType\");",
                      "    tests[\"Response Body has feeValueType\"] = responseBody.has(\"feeValueType\");",
                      "    tests[\"Response Body has feeValue\"] = responseBody.has(\"feeValue\");",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/fee/{{PassfeeId2}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "fee",
                    "{{PassfeeId2}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Payment_Status_Charge_REL1-6988",
          "item": [
            {
              "name": "Basic CreateSubscription Current_date",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7a5c849f-1892-432f-9b72-a07da50776b0",
                    "exec": [
                      "var futureDate = new Date();",
                      "var dd = futureDate.getDate();",
                      "var mm = futureDate.getMonth()+1; //January is 0!",
                      "var yyyy = futureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+5;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "futureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"futureDate\", futureDate);",
                      "",
                      "",
                      "",
                      "//",
                      "",
                      "var RfutureDate = new Date();",
                      "var dd = RfutureDate.getDate();",
                      "var mm = RfutureDate.getMonth()+1; //January is 0!",
                      "var yyyy = RfutureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+9;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "RfutureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"RfutureDate\", RfutureDate);",
                      "",
                      "",
                      "",
                      "",
                      "//",
                      "",
                      "var URfutureDate = new Date();",
                      "var dd = URfutureDate.getDate();",
                      "var mm = URfutureDate.getMonth()+1; //January is 0!",
                      "var yyyy = URfutureDate.getFullYear();",
                      "",
                      "if(dd<10) {",
                      "  dd = '0'+dd;",
                      "}",
                      "",
                      "mm=mm+10;",
                      "if(mm>12)",
                      "{",
                      "   mm=mm-12;",
                      "}",
                      "",
                      "if(mm<10) {",
                      "  mm = '0'+mm;",
                      "",
                      "",
                      "}",
                      "",
                      "console.log(\"dd  \" + dd);",
                      "console.log(\"mm  \"+ mm);",
                      "console.log(\"yyyy  \"+yyyy);",
                      "",
                      "",
                      "URfutureDate = mm + '-' + dd + '-' + yyyy;",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"URfutureDate\", URfutureDate);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f6605cb7-22f4-41aa-9904-3cf8fb89b2ed",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    postman.setEnvironmentVariable(\"subIdFreeze\",jsonData.subId);",
                      "",
                      " tests[\"Response Body has Correct Location Id\"] = responseBody.has(\"locationId\");",
                      "   tests[\"Response Body has Correct Member Id\"] = responseBody.has(\"memberId\");",
                      "   tests[\"Response Body has Subscription Id\"] = responseBody.has(\"subId\");",
                      "   tests[\"Response Body has Plan Id\"] = responseBody.has(\"planId\");",
                      "    tests[\"Response Body has Payor Account Id\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has  Name\"] = responseBody.has(\"name\");",
                      "    tests[\"Response Body has planVersion\"] = responseBody.has(\"planVersion\");",
                      "    tests[\"Response Body has start Date\"] = responseBody.has(\"start\");",
                      "    tests[\"Response Body has ExpirationDate\"] = responseBody.has(\"expirationDate\");",
                      "    tests[\"Response Body has Frequency\"] = responseBody.has(\"frequency\");",
                      "    tests[\"Response Body has duration\"] = responseBody.has(\"duration\");",
                      "    tests[\"Response Body has itemId\"] = responseBody.has(\"itemId\");",
                      "    tests[\"Response Body has version\"] = responseBody.has(\"version\");",
                      "    tests[\"Response Body has itemName\"] = responseBody.has(\"itemName\");",
                      "    tests[\"Response Body has Payment Method salesEmployeeId\"] = responseBody.has(\"salesEmployeeId\");",
                      "    tests[\"Response Body has Payment Method price\"] = responseBody.has(\"price\");",
                      "    tests[\"Response Body has Payment Method invoiceDate\"] = responseBody.has(\"invoiceDate\");",
                      "   ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\"planId\": \"fd8ebc9e-5fab-440f-879f-9e930cc35c87\",\n\"salesEmployeeId\": \"ad8ebc9e-5fab-140f-879f-9e930cc35c79\",\n\"locationId\": \"{{locationId}}\",\n\"memberIdList\": [\"{{memberId}}\"],\n\"accountId\": \"{{paymentMethodIdP}}\",\n\"planVersion\": 11,\n\"start\": \"{{today}}\",\n\"invoiceDate\": \"{{today}}\",\n\"expirationDate\": \"{{futureDate}}\",\n\"frequency\": \"WEEKLY\",\n\"duration\": \"4\",\n\"name\": \"ankit\",\n\"autoRenew\": \"false\",\n\"openEnded\": false,\n\"items\": [\n\n\n{ \"itemName\": \"adcds\", \"itemId\": \"fd1ebc5e-1fab-120f-879f-4e930cc25c11\", \"version\": 1, \"price\": 600, \"quantity\": \"1\", \"expirationStart\": \"PURCHASE\", \"type\": \"PRODUCT\", \"unlimited\": \"false\" }\n]\n}"
                },
                "url": {
                  "raw": "{{URL}}/subscription/",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "subscription",
                    ""
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Evaluate Statement_Payment Method_Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "",
                      "",
                      "tests[\"Response Body has statementAmount\"] = responseBody.has(\"statementAmount\");",
                      " ",
                      "   ",
                      "    ",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "32ead9cd-ef99-4a46-820a-c6d634be46d0",
                    "exec": [
                      "setTimeout(function(){}, [25000]);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/evaluate-statement/account/{{paymentMethodIdP}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "evaluate-statement",
                    "account",
                    "{{paymentMethodIdP}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Generate Statement_Payment Method_id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"statementId\", jsonData.statementId);",
                      "",
                      "if ( responseCode.code!=200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"statementIdA\", jsonData.statementId);",
                      "",
                      "tests[\"Response Body has correct locationId id\"] = responseBody.has(\"locationId\");",
                      "tests[\"Response Body has correct Statement id\"] = responseBody.has(\"\\\"statementId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"statementId\")+\"\\\"\");",
                      "tests[\"Response Body has correct accountId id\"] = responseBody.has(\"accountId\");",
                      "tests[\"Response Body has correct totalAmount\"] = responseBody.has(\"totalAmount\");",
                      "",
                      "}",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2c5c2783-b150-4aa6-8679-70adae967a65",
                    "exec": [
                      "setTimeout(function(){}, [25000]);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "\r\n\r\n\r\n\r\n{  \r\n\t\"locationId\":\"{{locationId}}\",\r\n  \"accountId\": \"{{paymentMethodIdP}}\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/statement",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "statement"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Payment_Status_Charge",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                    "exec": [
                      "",
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"statementId\", jsonData.statementId);",
                      "",
                      "tests[\"Response Body has correct transactionType\"] = responseBody.has(\"transactionType\");",
                      "tests[\"Response Body has correct referencedId\"] = responseBody.has(\"referencedId\");",
                      "",
                      "",
                      "}",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1e320ca3-0788-4116-aad6-8d39e975f449",
                    "exec": [
                      "setTimeout(function(){}, [25000]);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"companyId\": \"3280a71d-853b-4800-bbfe-76263e2950e8\",\r\n\t\"eventTime\": \"03-08-2019 09:00:01\",\r\n\t\"eventId\": \"f0745bdf-2c9d-4f01-a9d5-e4bb25d26524\",\r\n\t\"payloadList\": [{\r\n\t\t\"status\": \"SUCCESS\",\r\n\t\t\"message\": \"payment has been successed\",\r\n\t\t\"messageCode\": \"200\",\r\n\t\t\"transactionType\": \"DEBIT\",\r\n\t\t\"transactionId\": \"\",\r\n\t\t\"referencedId\": \"{{statementIdA}}\",\r\n\t\t\"requested\": null,\r\n\t\t\"source\": \"BILLING\",\r\n\t\t\"merchantId\": \"96d18cd8-eb6d-4393-a04f-628d15795657\"\r\n\t}]\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/payment-status",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-status"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Payment_Status_Deposit_REL1-5560",
          "item": [
            {
              "name": "Evaluate Settlement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "",
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "",
                      "    tests[\"Response Body has locationId\"] = responseBody.has(\"locationId\");",
                      "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has amount\"] = responseBody.has(\"amount\");",
                      "    ",
                      "    ",
                      "}",
                      "  tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d10819aa-77dd-49dd-9277-1d5b4195f60b",
                    "exec": [
                      "setTimeout(function(){}, [25000]);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/evaluate-settlement/account/{{accountIdClient}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "evaluate-settlement",
                    "account",
                    "{{accountIdClient}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Generate Settlement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed4b5185-448d-4850-b0d9-3e1f13c4240d",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"settlementId\", jsonData.settlementId);",
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      " tests[\"Response Body has settlementId\"] = responseBody.has(\"settlementId\");",
                      "    tests[\"Response Body has locationId\"] = responseBody.has(\"locationId\");",
                      "    tests[\"Response Body has accountId\"] = responseBody.has(\"accountId\");",
                      "    tests[\"Response Body has amount\"] = responseBody.has(\"amount\");",
                      "    ",
                      "}",
                      "  tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "299f6963-a510-4285-8855-b9a69ddf94e1",
                    "exec": [
                      "setTimeout(function(){}, [25000]);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/settlement/account/{{accountIdClient}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "settlement",
                    "account",
                    "{{accountIdClient}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Payment_Status_Deposit",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a6fae571-bcf6-4939-9d48-8baf53615a6a",
                    "exec": [
                      "",
                      "",
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"settlementId\", jsonData.statementId);",
                      "",
                      "tests[\"Response Body has correct transactionType\"] = responseBody.has(\"transactionType\");",
                      "tests[\"Response Body has correct referencedId\"] = responseBody.has(\"referencedId\");",
                      "",
                      "",
                      "}",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "29e3e220-4e15-46a3-aa30-271d04d289c6",
                    "exec": [
                      "setTimeout(function(){}, [25000]);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"companyId\": \"3280a71d-853b-4800-bbfe-76263e2950e8\",\r\n\t\"eventTime\": \"03-08-2019 09:00:01\",\r\n\t\"eventId\": \"f0745bdf-2c9d-4f01-a9d5-e4bb25d26524\",\r\n\t\"payloadList\": [{\r\n\t\t\"status\": \"SUCCESS\",\r\n\t\t\"message\": \"payment has been successed\",\r\n\t\t\"messageCode\": \"200\",\r\n\t\t\"transactionType\": \"DEPOSIT\",\r\n\t\t\"transactionId\": \"\",\r\n\t\t\"referencedId\": \"{{settlementId}}\",\r\n\t\t\"requested\": null,\r\n\t\t\"source\": \"BILLING\",\r\n\t\t\"merchantId\": \"96d18cd8-eb6d-4393-a04f-628d15795657\"\r\n\t}]\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/payment-status",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-status"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "8dae2af1-6ef5-46d8-8871-a6e967fc575c",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "42509db3-de11-440a-bbc3-418208e1611e",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}