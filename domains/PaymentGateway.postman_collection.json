{
  "info": {
    "_postman_id": "2634d3c6-570c-482a-9c9f-747d334a0f5b",
    "name": "Payment Gateway",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Gateway_Admin",
      "item": [
        {
          "name": "Gateway_Admin_Permission",
          "item": [
            {
              "name": "Authorization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24ec140a-d8be-4a2f-badd-47552560a90b",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    postman.setEnvironmentVariable(\"authId\", jsonData.access_token);",
                      "   ",
                      "    tests[\"Response Body has Correct Token Type\"] = responseBody.has(\"\\\"token_type\\\":\\\"bearer\\\"\");",
                      "    tests[\"Response Body has Access Token\"] = responseBody.has(\"\\\"access_token\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"authId\")+\"\\\"\");",
                      "    tests[\"Response Body has Expiration Field\"] = responseBody.has(\"expires_in\");",
                      "    tests[\"Response Body has Correct Scope\"] = responseBody.has(\"\\\"scope\\\":\"+\"\\\"\"+jsonData.scope+\"\\\"\");",
                      "}",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Basic QVVUT01BVEVEX1RFU1RJTkc6dDNzdEBsbHRoM3RoMW5ncw=="
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "",
                    "value": "",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/token?client_id=AUTOMATED_TESTING&grant_type=client_credentials",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "token"
                  ],
                  "query": [
                    {
                      "key": "client_id",
                      "value": "AUTOMATED_TESTING"
                    },
                    {
                      "key": "grant_type",
                      "value": "client_credentials"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create_Organization_With_Location Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                    "exec": [
                      "",
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"orgId\", jsonData.id);",
                      "postman.setEnvironmentVariable(\"addressId\", jsonData.address.id);",
                      " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randName\")+\"\\\"\");",
                      " tests[\"Response Body has Correct Organization ID\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"orgId\")+\"\\\"\");",
                      " tests[\"Response Body has Correct Address Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"addressId\")+\"\\\"\");",
                      " ",
                      "  tests[\"Response Body has Correct email\"] =responseBody.has(\"email\");",
                      "  tests[\"Response Body has phone number\"] = responseBody.has(\"1310629874\");",
                      "    tests[\"Response Body has signInLink\"] = responseBody.has(\"signInLink\");",
                      "    tests[\"Response Body has address\"] = responseBody.has(\"address\");",
                      "    tests[\"Response Body has websiteUrl\"] = responseBody.has(\"www.planet-fitness.com\");",
                      "    tests[\"Response Body has timezone\"] = responseBody.has(\"US/Alaska\");",
                      "    tests[\"Response Body has language\"] = responseBody.has(\"UA\");",
                      "",
                      "",
                      "",
                      "}",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                    "exec": [
                      "",
                      "",
                      "",
                      "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks1', 'Bottin', 'Jones1', 'Arthursons', 'Hardena', 'Grays', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Savillee','Selveys','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karls','Kuehne','Speerss','Cambrons','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landretsh','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux','Stark111'];",
                      "",
                      "var randName1 = names[Math.floor(Math.random() * names.length)];",
                      "postman.setEnvironmentVariable(\"randName\", randName1);",
                      "",
                      "var email = randName1+\"@qa4life.com\";",
                      "postman.setEnvironmentVariable(\"email\", email);",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authId}}"
                  },
                  {
                    "key": "",
                    "value": "",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\" : \"{{randName}}\",\r\n  \"email\" : \"{{randName}}@qa4life.com\",\r\n  \"phone\" : \"1310629874\", \r\n  \"signInLink\" : \"https://test.url.qa4{{randName}}.com\",\r\n  \"websiteUrl\" : \"www.planet-fitness.com\",\r\n  \"timezone\" :\"US/Alaska\",\r\n \"address\" : {\r\n    \"address1\" : \"AR-107\",\r\n    \"address2\" : \"Sherwood\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"AR\",\r\n    \"country\" : \"USA\",\r\n    \"zipCode\" : \"72120\"\r\n  },\r\n  \"branding\" : {\r\n    \"colorScheme\" : {\r\n      \"primary\" : \"#666666\",\r\n      \"primaryHover\" : \"#666666\"\r\n    }\r\n  },\r\n  \"locale\" : {\r\n    \"language\" : \"UA\",\r\n    \"region\" : \"US\",\r\n    \"variant\" : \"MAC\"\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/organization",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "organization"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Role Gateway_Admin",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                    "exec": [
                      "",
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 201)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "  postman.setEnvironmentVariable(\"roleId\", jsonData.id);",
                      "   tests[\"Response Body has correct role id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"roleId\")+\"\\\"\");",
                      "   tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"roleName\")+\"\\\"\");",
                      "    tests[\"Response Body has correct description\"] = responseBody.has(\"Payment Gateway Admin\");",
                      "    tests[\"Response Body has correct permissions write key\"] = responseBody.has(\"payment-company:write\");",
                      "    tests[\"Response Body has correct permissions update key\"] = responseBody.has(\"payment-company:update\");",
                      "    tests[\"Response Body has correct permissions read key\"] = responseBody.has(\"payment-company:read\");",
                      "    ",
                      "   ",
                      "}",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                    "exec": [
                      "var roleName = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                      "",
                      "var randName1 = roleName[Math.floor(Math.random() * roleName.length)];",
                      "postman.setEnvironmentVariable(\"roleName\", randName1);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authId}}"
                  },
                  {
                    "key": "ABCFS-ORGANIZATION-ID",
                    "value": "{{orgId}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\"                  : \"{{roleName}}\",\r\n  \"description\"           : \"Payment Gateway Admin\",\r\n  \"permissions\"           : [{\"key\":\"payment-company:write\"},\r\n{\"key\":\"payment-company:update\"},\r\n{\"key\":\"payment-company:read\"},\r\n{\"key\":\"payment-company:protected\"},\r\n{\"key\":\"payment-processor:write\"},\r\n{\"key\":\"payment-processor:update\"},\r\n{\"key\":\"payment-processor:read\"},\r\n{\"key\":\"payment-processor:protected\"},\r\n{\"key\":\"payment-originator:write\"},\r\n{\"key\":\"payment-originator:update\"},\r\n{\"key\":\"payment-originator:read\"},\r\n{\"key\":\"payment-originator:protected\"},\r\n{\"key\":\"payment-destination:write\"},\r\n{\"key\":\"payment-destination:update\"},\r\n{\"key\":\"payment-destination:read\"},\r\n{\"key\":\"payment-destination:protected\"},\r\n{\"key\":\"payment-merchant:write\"},\r\n{\"key\":\"payment-merchant:update\"},\r\n{\"key\":\"payment-merchant:read\"},\r\n{\"key\":\"payment-merchant:protected\"},\r\n{\"key\":\"payment-merchant-activate:write\"},\r\n{\"key\":\"payment-audit:read\"},\r\n{\"key\":\"payment-command:update\"},\r\n{\"key\":\"payment-command:read\"},\r\n{\"key\":\"payment-command:protected\"},\r\n{\"key\":\"payment-batch:protected\"},\r\n{\"key\":\"payment-remittance:read\"}],\r\n  \"applicationPermissions\": [\r\n                       \"payment-company:write\",\r\n\"payment-company:update\",\r\n\"payment-company:read\",\r\n\"payment-company:protected\",\r\n\"payment-processor:write\",\r\n\"payment-processor:update\",\r\n\"payment-processor:read\",\r\n\"payment-processor:protected\",\r\n\"payment-originator:write\",\r\n\"payment-originator:update\",\r\n\"payment-originator:read\",\r\n\"payment-originator:protected\",\r\n\"payment-destination:write\",\r\n\"payment-destination:update\",\r\n\"payment-destination:read\",\r\n\"payment-destination:protected\",\r\n\"payment-merchant:write\",\r\n\"payment-merchant:update\",\r\n\"payment-merchant:read\",\r\n\"payment-merchant:protected\",\r\n\"payment-merchant-activate:write\",\r\n\"payment-audit:read\",\r\n\"payment-command:update\",\r\n\"payment-command:read\",\r\n\"payment-command:protected\",\r\n\"payment-batch:protected\",\r\n\"payment-remittance:read\"\r\n                ]}"
                },
                "url": {
                  "raw": "{{URL}}/role",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "role"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Gateway_Admin_User",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2305057c-9e3e-437e-bc07-9fe8c8713c58",
                    "exec": [
                      "",
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 201)",
                      "{",
                      "      var jsonData = JSON.parse(responseBody);",
                      "  postman.setEnvironmentVariable(\"gateway_user_Id\", jsonData.id);",
                      "tests[\"Response Body has correct user id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"gateway_user_Id\")+\"\\\"\");",
                      "  ",
                      "tests[\"Response Body has correct role name\"] = responseBody.has(\"\\\"roleName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"roleName\")+\"\\\"\");",
                      "    ",
                      "tests[\"Response Body has correct identity\"] = responseBody.has(\"\\\"identity\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"email\")+\"\\\"\");",
                      " tests[\"Response Body has correct hasPassword\"] = responseBody.has(\"true\");",
                      " tests[\"Response Body has correct first Name\"] = responseBody.has(\"Gateway\");",
                      " tests[\"Response Body has correct last Name\"] = responseBody.has(\"Admin\");",
                      " ",
                      "    ",
                      "    ",
                      "    ",
                      "    ",
                      "    ",
                      "    ",
                      "}",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "182d5be1-33d8-4062-acd7-78ed3e8a9a4b",
                    "exec": [
                      "",
                      "",
                      "",
                      "var names = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                      "",
                      "var randName1 = names[Math.floor(Math.random() * names.length)];",
                      "var email= randName1+\"@qa4life.com\";",
                      "postman.setEnvironmentVariable(\"randName\", randName1);",
                      "postman.setEnvironmentVariable(\"email\", email);",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authId}}"
                  },
                  {
                    "key": "ABCFS-ORGANIZATION-ID",
                    "value": "{{orgId}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"identity\" : \"{{email}}\",\r\n  \"password\" : \"gateway@ASD12$%\",\r\n  \"firstName\" : \"Gateway\",\r\n  \"lastName\" : \"Admin\",\r\n  \"roleName\" : \"{{roleName}}\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/user",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "user"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Authorization_Gateway_Admin",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24ec140a-d8be-4a2f-badd-47552560a90b",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    postman.setEnvironmentVariable(\"access_token_super_user\", jsonData.access_token);",
                      "    ",
                      "tests[\"Response Body has correct access token\"] = responseBody.has(\"\\\"access_token\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"access_token_super_user\")+\"\\\"\");",
                      "  tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"role\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"roleName\")+\"\\\"\");",
                      "  tests[\"Response Body has correct user id\"] = responseBody.has(\"\\\"user_id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"gateway_user_Id\")+\"\\\"\");",
                      "   tests[\"Response Body has Correct Organization ID\"] = responseBody.has(\"\\\"organization_id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"orgId\")+\"\\\"\");",
                      " tests[\"Response Body has correct token_type\"] = responseBody.has(\"bearer\");",
                      " tests[\"Response Body has correct first Name\"] = responseBody.has(\"Gateway\");",
                      " tests[\"Response Body has correct last Name\"] = responseBody.has(\"Admin\");",
                      " ",
                      "   ",
                      "   ",
                      "}",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Basic QVVUT01BVEVEX1RFU1RJTkc6dDNzdEBsbHRoM3RoMW5ncw=="
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "ABCFS-ORGANIZATION-ID",
                    "value": "{{orgId}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/token?client_id=AUTOMATED_TESTING&grant_type=password&username={{email}}&password=gateway@ASD12$%",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "token"
                  ],
                  "query": [
                    {
                      "key": "client_id",
                      "value": "AUTOMATED_TESTING"
                    },
                    {
                      "key": "grant_type",
                      "value": "password"
                    },
                    {
                      "key": "username",
                      "value": "{{email}}"
                    },
                    {
                      "key": "password",
                      "value": "gateway@ASD12$%"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Processor",
          "item": [
            {
              "name": "CreateProcessor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0ee46a4e-c41f-4d80-b7a9-fd17bb6cb48a",
                    "exec": [
                      "",
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"processorId\", jsonData.id);",
                      "postman.setEnvironmentVariable(\"processorForId\", jsonData.processorFormatDetail.id);",
                      " tests[\"Response Body has Correct processor id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"processorId\")+\"\\\"\");",
                      " tests[\"Response Body has Correct processor format id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"processorForId\")+\"\\\"\");",
                      "",
                      "  tests[\"Response Body has Correct country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"countryName\")+\"\\\"\");",
                      "   tests[\"Response Body has correct payment method\"] = responseBody.has(\"EFT\");",
                      "   tests[\"Response Body has correct File Type\"] = responseBody.has(\"NACHA\");",
                      "   tests[\"Response Body has correct File Format\"] = responseBody.has(\"nacha\");",
                      "   tests[\"Response Body has correct File Extention\"] = responseBody.has(\"ach\");",
                      "   tests[\"Response Body has correct batch count\"] = responseBody.has(\"20\");",
                      "   tests[\"Response Body has correct transaction count\"] = responseBody.has(\"50\");",
                      "   ",
                      "}",
                      "",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3c089b6e-d0e5-4758-86c8-763cacb44b8c",
                    "exec": [
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZfhfghfghfhfhfhfhdfhfhsfgdfhfcherasaewxwadfshgfdhnvdfhgjgdhjkgghdughdfjkmhnfmggheuirhewijhkwnerjmsnfmdbgjrnjjerfejbnfjsnfmsdgjkdfjgdfhgbjdfhjghedsehfjksdhgjkdfhgguiehsfsdgdhdfhdh\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var countryName= stringGen(3)",
                      "postman.setEnvironmentVariable(\"countryName\", countryName);",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\" : \"Reginonal Bank\",\r\n  \"paymentMethod\" : \"EFT\",\r\n  \"country\" : \"{{countryName}}\",\r\n  \"active\" : \"true\",\r\n  \"processorFormatDetail\" : {\r\n    \"fileType\" : \"NACHA\",\r\n    \"fileFormat\" : \"nacha\",\r\n    \"batchCount\" : 20,\r\n    \"fileExtention\" : \"ach\",\r\n    \"transactionCount\" : 50\r\n  },\r\n  \r\n  \"generalDetails\" : {\r\n    \"nacha.destination.fileIdModifier\" : \"R\",\r\n    \"nacha.destination.formatCode\" : \"1\",\r\n    \"nacha.destination.blockingFactor\" : \"10\",\r\n    \"nacha.destination.priorityCode\" : \"01\",\r\n    \"nacha.destination.immediateDestination\" : \"062000019\",\r\n    \"nacha.destination.destinationBankName\" : \"HSBC BANK\",\r\n    \"nacha.destination.referenceCode\" : \"XXXXXXXX\",\r\n    \"nacha.originator.immediateOriginBankAssignedId\" : \"1710602737\",\r\n    \"nacha.originator.immediateOriginName\" : \"ABC FINANCIAL SVCSXXXXX\",\r\n    \"nacha.originator.originatorDfiIdentifier\" : \"06200019\",\r\n    \"nacha.originator.originatorStatusCode\" : \"1\"\r\n  }\r\n\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/processor",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "processor"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get_List_Of_Processor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e182e2b3-6709-4ed5-9fc4-6065da269639",
                    "exec": [
                      "",
                      "if ( responseCode.code!=200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "   tests[\"Response Body has correct payment method\"] = responseBody.has(\"EFT\");",
                      "   tests[\"Response Body has correct File Type\"] = responseBody.has(\"NACHA\");",
                      "   tests[\"Response Body has correct File Format\"] = responseBody.has(\"nacha\");",
                      "   tests[\"Response Body has correct File Extention\"] = responseBody.has(\"ach\");",
                      "   tests[\"Response Body has correct batch count\"] = responseBody.has(\"20\");",
                      "   tests[\"Response Body has correct transaction count\"] = responseBody.has(\"50\");",
                      "   ",
                      "}",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/processor",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "processor"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update_Processor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f7cb8e5c-5800-4fd4-a381-7b77752e167b",
                    "exec": [
                      "",
                      "if ( responseCode.code!=200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      " tests[\"Response Body has Correct processor id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"processorId\")+\"\\\"\");",
                      " tests[\"Response Body has Correct processor format id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"processorForId\")+\"\\\"\");",
                      "   tests[\"Response Body has correct payment method\"] = responseBody.has(\"EFT\");",
                      "   tests[\"Response Body has correct File Type\"] = responseBody.has(\"NACHA\");",
                      "   tests[\"Response Body has correct File Format\"] = responseBody.has(\"nacha\");",
                      "   tests[\"Response Body has correct File Extention\"] = responseBody.has(\"ach\");",
                      "   tests[\"Response Body has correct batch count\"] = responseBody.has(\"20\");",
                      "",
                      "}",
                      "postman.setNextRequest(\"CreateProcessor_Vantiv\");",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\" : \"Regions Bank\",\r\n  \"country\": \"US\",\r\n    \"paymentMethod\": \"EFT\",\r\n  \"processorFormatDetail\" : {\r\n    \"fileType\" : \"NACHA\",\r\n    \"fileFormat\" : \"NACHA\",\r\n    \"batchCount\" : 10,\r\n    \"fileExtention\" : \"ach\",\r\n    \"transactionCount\" : 1000\r\n  }\r\n  ,\r\n  \"generalDetails\" : {\r\n    \"nacha.destination.fileIdModifier\" : \"R\",\r\n    \"nacha.destination.formatCode\" : \"1\",\r\n    \"nacha.destination.blockingFactor\" : \"10\",\r\n    \"nacha.destination.priorityCode\" : \"01\",\r\n    \"nacha.destination.immediateDestination\" : \"062000019\",\r\n    \"nacha.destination.destinationBankName\" : \"HSBC BANK\",\r\n    \"nacha.destination.referenceCode\" : \"XXXXXXXX\",\r\n    \"nacha.originator.immediateOriginBankAssignedId\" : \"1710602737\",\r\n    \"nacha.originator.immediateOriginName\" : \"ABC FINANCIAL SVCSXXXXX\",\r\n    \"nacha.originator.originatorDfiIdentifier\" : \"06200019\",\r\n    \"nacha.originator.originatorStatusCode\" : \"1\"\r\n  }\r\n\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/processor/{{processorId}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "processor",
                    "{{processorId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GetProcessor_By_Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f7cb8e5c-5800-4fd4-a381-7b77752e167b",
                    "exec": [
                      "",
                      "if ( responseCode.code!=200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      " tests[\"Response Body has Correct processor id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"processorId\")+\"\\\"\");",
                      " tests[\"Response Body has Correct processor format id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"processorForId\")+\"\\\"\");",
                      "",
                      "  tests[\"Response Body has Correct country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"countryName\")+\"\\\"\");",
                      "   tests[\"Response Body has correct payment method\"] = responseBody.has(\"EFT\");",
                      "   tests[\"Response Body has correct File Type\"] = responseBody.has(\"NACHA\");",
                      "   tests[\"Response Body has correct File Format\"] = responseBody.has(\"nacha\");",
                      "   tests[\"Response Body has correct File Extention\"] = responseBody.has(\"ach\");",
                      "   tests[\"Response Body has correct batch count\"] = responseBody.has(\"20\");",
                      "   tests[\"Response Body has correct transaction count\"] = responseBody.has(\"50\");",
                      "   ",
                      "}",
                      "postman.setNextRequest(\"CreateProcessor_Vantiv\");",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\" : \"Regions Bank\",\r\n  \"country\": \"US\",\r\n    \"paymentMethod\": \"EFT\",\r\n  \"processorFormatDetail\" : {\r\n    \"fileType\" : \"NACHA\",\r\n    \"fileFormat\" : \"NACHA\",\r\n    \"batchCount\" : 10,\r\n    \"fileExtention\" : \"ach\",\r\n    \"transactionCount\" : 1000\r\n  }\r\n  ,\r\n  \"generalDetails\" : {\r\n    \"nacha.destination.fileIdModifier\" : \"R\",\r\n    \"nacha.destination.formatCode\" : \"1\",\r\n    \"nacha.destination.blockingFactor\" : \"10\",\r\n    \"nacha.destination.priorityCode\" : \"01\",\r\n    \"nacha.destination.immediateDestination\" : \"062000019\",\r\n    \"nacha.destination.destinationBankName\" : \"HSBC BANK\",\r\n    \"nacha.destination.referenceCode\" : \"XXXXXXXX\",\r\n    \"nacha.originator.immediateOriginBankAssignedId\" : \"1710602737\",\r\n    \"nacha.originator.immediateOriginName\" : \"ABC FINANCIAL SVCSXXXXX\",\r\n    \"nacha.originator.originatorDfiIdentifier\" : \"06200019\",\r\n    \"nacha.originator.originatorStatusCode\" : \"1\"\r\n  }\r\n}\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/processor/{{processorId}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "processor",
                    "{{processorId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete_Processor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f7cb8e5c-5800-4fd4-a381-7b77752e167b",
                    "exec": [
                      "",
                      "if ( responseCode.code!=200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      " tests[\"Response Body has Correct processor id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"processorId\")+\"\\\"\");",
                      " tests[\"Response Body has Correct processor format id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"processorForId\")+\"\\\"\");",
                      "",
                      "  tests[\"Response Body has Correct country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"countryName\")+\"\\\"\");",
                      "   tests[\"Response Body has correct payment method\"] = responseBody.has(\"EFT\");",
                      "   tests[\"Response Body has correct File Type\"] = responseBody.has(\"NACHA\");",
                      "   tests[\"Response Body has correct File Format\"] = responseBody.has(\"nacha\");",
                      "   tests[\"Response Body has correct File Extention\"] = responseBody.has(\"ach\");",
                      "   tests[\"Response Body has correct batch count\"] = responseBody.has(\"5\");",
                      "   tests[\"Response Body has correct transaction count\"] = responseBody.has(\"20\");",
                      "   ",
                      "}",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/processor/{{processorId}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "processor",
                    "{{processorId}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6d64b7a6-5583-44cf-9fbf-7cf12fde0b65",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bcbbe5c1-b5cb-4fff-ab6a-ec0a74cf1aeb",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Processor_Vantiv",
          "item": [
            {
              "name": "CreateProcessor_Vantiv",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0ee46a4e-c41f-4d80-b7a9-fd17bb6cb48a",
                    "exec": [
                      "",
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"VantivId\", jsonData.id);",
                      "postman.setEnvironmentVariable(\"VantiFormatDetails\", jsonData.processorFormatDetail.id);",
                      " tests[\"Response Body has Correct VantivId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"VantivId\")+\"\\\"\");",
                      " tests[\"Response Body has Correct Vantiv format id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"VantivId\")+\"\\\"\");",
                      "   tests[\"Response Body has correct payment method\"] = responseBody.has(\"VANTIV\");",
                      "   tests[\"Response Body has correct File Type\"] = responseBody.has(\"XML\");",
                      "   tests[\"Response Body has correct File Format\"] = responseBody.has(\"xml\");",
                      "   tests[\"Response Body has correct File Extention\"] = responseBody.has(\"xml\");",
                      "   tests[\"Response Body has correct batch count\"] = responseBody.has(\"20\");",
                      "   tests[\"Response Body has correct transaction count\"] = responseBody.has(\"50\");",
                      "   ",
                      "}",
                      "postman.setNextRequest(\"GetProcessorById_Vantiv\");",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3c089b6e-d0e5-4758-86c8-763cacb44b8c",
                    "exec": [
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var countryName= stringGen(3)",
                      "postman.setEnvironmentVariable(\"countryName\", countryName);",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\" : \"Reginonal Bank\",\r\n  \"paymentMethod\" : \"VANTIV\",\r\n  \"country\" : \"{{countryName}}\",\r\n  \"active\" : \"true\",\r\n  \"processorFormatDetail\" : {\r\n    \"fileType\" : \"XML\",\r\n    \"fileFormat\" : \"xml\",\r\n    \"batchCount\" : 20,\r\n    \"fileExtention\" : \"xml\",\r\n    \"transactionCount\" : 50\r\n  },\r\n  \r\n  \"generalDetails\" : {\r\n    \"vantiv.destination.fileIdModifier\" : \"R\",\r\n    \"vantiv.destination.formatCode\" : \"1\",\r\n    \"vantiv.destination.blockingFactor\" : \"10\",\r\n    \"vantiv.destination.priorityCode\" : \"01\",\r\n    \"vantiv.destination.immediateDestination\" : \"062000019\",\r\n    \"vantiv.destination.destinationBankName\" : \"HSBC BANK\",\r\n    \"vantiv.destination.referenceCode\" : \"XXXXXXXX\",\r\n    \"vantiv.originator.immediateOriginBankAssignedId\" : \"1710602737\",\r\n    \"vantiv.originator.immediateOriginName\" : \"ABC FINANCIAL SVCSXXXXX\",\r\n    \"vantiv.originator.originatorDfiIdentifier\" : \"06200019\",\r\n    \"vantiv.originator.originatorStatusCode\" : \"1\"\r\n  }\r\n\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/processor",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "processor"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get_List_Of_Processor_Vantiv",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e182e2b3-6709-4ed5-9fc4-6065da269639",
                    "exec": [
                      "",
                      "if ( responseCode.code!=200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      " tests[\"Response Body has Correct Vantiv ID\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"VantivId\")+\"\\\"\");",
                      "  tests[\"Response Body has Correct country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"countryName\")+\"\\\"\");",
                      "   tests[\"Response Body has correct payment method\"] = responseBody.has(\"VANTIV\");",
                      "   tests[\"Response Body has correct File Type\"] = responseBody.has(\"NACHA\");",
                      "   tests[\"Response Body has correct File Format\"] = responseBody.has(\"nacha\");",
                      "   tests[\"Response Body has correct File Extention\"] = responseBody.has(\"xml\");",
                      "   tests[\"Response Body has correct batch count\"] = responseBody.has(\"20\");",
                      "   tests[\"Response Body has correct transaction count\"] = responseBody.has(\"100\");",
                      "   ",
                      "}",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/processor",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "processor"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GetProcessorById_Vantiv",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f7cb8e5c-5800-4fd4-a381-7b77752e167b",
                    "exec": [
                      "",
                      "if ( responseCode.code!=200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      " tests[\"Response Body has Correct Vantiv id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"VantivId\")+\"\\\"\");",
                      "",
                      "",
                      "  tests[\"Response Body has Correct country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"countryName\")+\"\\\"\");",
                      "   tests[\"Response Body has correct payment method\"] = responseBody.has(\"VANTIV\");",
                      "   tests[\"Response Body has correct File Type\"] = responseBody.has(\"XML\");",
                      "   tests[\"Response Body has correct File Format\"] = responseBody.has(\"xml\");",
                      "   tests[\"Response Body has correct File Extention\"] = responseBody.has(\"xml\");",
                      "   tests[\"Response Body has correct batch count\"] = responseBody.has(\"20\");",
                      "   tests[\"Response Body has correct transaction count\"] = responseBody.has(\"50\");",
                      "   ",
                      "}",
                      "postman.setNextRequest(\"CreateCompany\");",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/processor/{{VantivId}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "processor",
                    "{{VantivId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete_Processor_Vantiv",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f7cb8e5c-5800-4fd4-a381-7b77752e167b",
                    "exec": [
                      "",
                      "if ( responseCode.code!=200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      " tests[\"Response Body has Correct vantiv id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"VantivId\")+\"\\\"\");",
                      "  tests[\"Response Body has Correct country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"countryName\")+\"\\\"\");",
                      "   tests[\"Response Body has correct payment method\"] = responseBody.has(\"VANTIV\");",
                      "   tests[\"Response Body has correct File Type\"] = responseBody.has(\"NACHA\");",
                      "   tests[\"Response Body has correct File Format\"] = responseBody.has(\"nacha\");",
                      "   tests[\"Response Body has correct File Extention\"] = responseBody.has(\"xml\");",
                      "   tests[\"Response Body has correct batch count\"] = responseBody.has(\"20\");",
                      "   tests[\"Response Body has correct transaction count\"] = responseBody.has(\"100\");",
                      "   ",
                      "}",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/processor/{{VantivId}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "processor",
                    "{{VantivId}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6d64b7a6-5583-44cf-9fbf-7cf12fde0b65",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bcbbe5c1-b5cb-4fff-ab6a-ec0a74cf1aeb",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Company",
          "item": [
            {
              "name": "CreateCompany",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e773ca9-6ac1-4c15-89b7-d73b11ed1a99",
                    "exec": [
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 201)",
                      "{",
                      "",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    postman.setEnvironmentVariable(\"company_ID\", jsonData.id);",
                      "    ",
                      "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                      "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                      "   ",
                      "   ",
                      "}",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4b9e0e5d-2919-447e-b47d-96eaedc1be5a",
                    "exec": [
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var companyName= stringGen(10)",
                      "postman.setEnvironmentVariable(\"companyName\", companyName);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\" : \"{{companyName}}\",\r\n  \"accountNumber\" : \"3665863\",\r\n  \"accountHolderName\" : \"Mr Test Account\",\r\n  \"routing\" : \"087654321\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/company",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "company"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "List_Of_Comapny",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e773ca9-6ac1-4c15-89b7-d73b11ed1a99",
                    "exec": [
                      "if ( responseCode.code!=200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 200)",
                      "{",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "  tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                      "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                      "   ",
                      "   ",
                      "}",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\"    : \"AT India Pvt\",\r\n  \"accountNumber\"    :  \"12345556\",\r\n  \"accountHolderName\": \"Mr Jivesh\",\r\n  \"routing\"          : \"012345678\",\r\n  \"businessContact\"  : \r\n  {\r\n  \t\r\n  \"name\"     : \"company\",\r\n  \"phone\"    :  \"444444444\",\r\n   \"email\"    : \"testing@kd.com\"\r\n   },\r\n\r\n  \"technicalContact\" : {\r\n        \"name\"     : \"comp\",\r\n        \"phone\"    : 435975869,\r\n        \"email\"    : \"testing@tc.com\"\r\n    \r\n                }\r\n  }  "
                },
                "url": {
                  "raw": "{{URL}}/companies",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "companies"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get_Company_By_Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a28d5c9a-1b20-4ea6-8c02-70acd77a73e8",
                    "exec": [
                      "if ( responseCode.code!=200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 200)",
                      "{",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "  tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                      "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                      "   ",
                      "   ",
                      "}",
                      "postman.setNextRequest(\"CreateMerchant1\");",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/company/{{company_ID}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "company",
                    "{{company_ID}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete_Company",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a28d5c9a-1b20-4ea6-8c02-70acd77a73e8",
                    "exec": [
                      "if ( responseCode.code!=200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 200)",
                      "{",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "  tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                      "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                      "   ",
                      "   ",
                      "}",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/company/{{company_ID}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "company",
                    "{{company_ID}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Merchant",
          "item": [
            {
              "name": "CreateMerchant1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                    "exec": [
                      "if ( responseCode.code!=201)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 201)",
                      "{",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                      "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                      "",
                      "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                      " ",
                      "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                      "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                      "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                      "   ",
                      "   ",
                      "}",
                      "",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                    "exec": [
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var merchant= stringGen(10)",
                      "postman.setEnvironmentVariable(\"merchant\", merchant);",
                      "",
                      "",
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var merchant= stringGen(10)",
                      "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                      "",
                      "function generateMID(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"0123456789\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var mid= generateMID(8)",
                      "postman.setEnvironmentVariable(\"MID\", mid);",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n  \"name\" : \"{{merchant}}\",\r\n  \"merchantDetails\" : {\r\n    \"companyName\" : \"TESTCOMPANY\",\r\n    \"processors\" : [\"45977ad9-ac1b-476a-b2f4-cf2604ddd6ee\"]\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/merchant",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "merchant"
                  ]
                },
                "description": "Create Merchant"
              },
              "response": []
            },
            {
              "name": "ActivateMerchant",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                    "exec": [
                      "if ( responseCode.code!=200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 200)",
                      "{",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                      " ",
                      "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                      "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                      "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                      " ",
                      "   ",
                      "   ",
                      "}",
                      "postman.setNextRequest(\"GetMerchant_By_ID\");",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "merchants",
                    "activate",
                    "{{merchant_ID}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "UpdateMerchant",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5ec04dc9-ad2a-4ca1-973d-5b420ee51c67",
                    "exec": [
                      "// function stringGen(len) {",
                      "// var text = \"\";",
                      "",
                      "// var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                      "",
                      "// for (var i = 0; i < len; i++)",
                      "//  text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "// return text;",
                      "// }",
                      "// var merchant= stringGen(10)",
                      "// postman.setEnvironmentVariable(\"merchant1\", merchant);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab544a1-a6d9-4456-8cb1-c963f4c64380",
                    "exec": [
                      "if ( responseCode.code!=200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 200)",
                      "{",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"merchant_IDNew\", jsonData.id);",
                      "",
                      "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_IDNew\")+\"\\\"\");",
                      " ",
                      "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                      "    tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                      "",
                      " ",
                      "   ",
                      "   ",
                      "}",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processorId}}\"]\n }\n}\n\n"
                },
                "url": {
                  "raw": "{{URL}}/merchants/{{merchant_ID}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "merchants",
                    "{{merchant_ID}}"
                  ]
                },
                "description": "Get Merchant By Id"
              },
              "response": []
            },
            {
              "name": "Get_List_Of_Merchant",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7fe2e5d5-bb18-4b60-ba91-37a2dc3d9803",
                    "exec": [
                      "if ( responseCode.code!=200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 200)",
                      "{",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                      " ",
                      "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                      "  ",
                      "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                      "",
                      " ",
                      "   ",
                      "   ",
                      "}",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "merchants"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GetMerchant_By_ID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43516beb-2493-46a1-9d28-ba40be22184f",
                    "exec": [
                      "if ( responseCode.code!=200)",
                      "{",
                      "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "else if (responseCode.code === 200)",
                      "{",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                      " ",
                      "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                      "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                      "",
                      " ",
                      "   ",
                      "   ",
                      "}",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n       \"name\": \"Deepak\",\n       \"active\": true,\n       \"accountHolderName\" : \"Test AccountHolder new\",\n       \"accountNumber\" : \"254641115\",\n       \"merchantAccounttoken\":\"4d02cf70-1b2f-4e93-84f5-12c5d33cf26c\",\n       \"routing\" : \"012345678\",\n       \"company\":\n      {\n   \"id\": \"1ecf1c0a-c2f4-434f-bd04-28bca4a82707\",\n   \"name\": \"Shri & Company Pvt Ltd\",\n   \"accountToken\": \"6a13ca8e-b138-4586-9dae-ca9d564f05dc\",\n   \"businessContact\": {\n       \"id\": \"0dd8f8e2-cad4-4982-9dc0-560ff1886d68\",\n       \"name\": \"company\",\n       \"phone\": \"435685869\",\n       \"email\": \"testing@kd\",\n       \"extention\": \"481\",\n       \"created\": \"2019-01-10T14:24:52.049\",\n       \"modified\": \"2019-01-10T14:24:52.049\",\n       \"active\": true\n   },\n   \"technicalContact\": {\n       \"id\": \"7774ed77-5522-4edf-be46-adbe3d05b8d9\",\n       \"name\": \"company\",\n       \"phone\": \"435975869\",\n       \"email\": \"testing@tc.com\",\n       \"extention\": \"481\",\n       \"created\": \"2019-01-10T14:24:52.057\",\n       \"modified\": \"2019-01-10T14:24:52.057\",\n       \"active\": true\n   },\n   \"active\": true\n},\n        \"merchantDetails\" : {\n        \"companyName\":\"Testing Nacha\",\n        \"companyDiscretionInfo\":\"Test companydisInfo\",\n        \"serviceClassCode\":698,\n        \"standardEntryClassCode\":\"TEC\",\n        \"companyEntryDescription\":\"TCED\",\n        \"processors\" : [\n        {\"id\":\"f2ddce4b-4faf-4298-b4ff-9d0f25a49a3e\"}\n        ]\n        \n    }\n\n}"
                },
                "url": {
                  "raw": "{{URL}}/merchants/{{merchant_ID}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "merchants",
                    "{{merchant_ID}}"
                  ]
                },
                "description": "Update Merchant By Id"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Remittance",
          "item": [
            {
              "name": "Rule",
              "item": [
                {
                  "name": "Create Rule",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "129d5a26-7c16-42bb-b01e-8f60cc769a56",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var rule= stringGen(10)",
                          "postman.setEnvironmentVariable(\"rule1\", rule);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "9275a914-6e98-47c0-90cd-24bf35b54e3a",
                        "exec": [
                          "",
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"rule_id\",jsonData.id);",
                          "  postman.setEnvironmentVariable(\"rule_id\",jsonData.id);",
                          "    tests[\"Response Body has Correct rule id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"rule_id\")+\"\\\"\");",
                          "",
                          " tests[\"Response Body has Correct rule name\"] = responseBody.has(\"\\\"name\\\":\");",
                          "  tests[\"Response Body has correct Rule Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{rule1}}\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/rule",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "rule"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get_ALL_Rule",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "d4bdd6af-9afb-490b-a3fe-c589447aac51",
                        "exec": [
                          "",
                          "if (responseCode.code != 200)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 200)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "    tests[\"Response Body has Correct rule id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"rule_id\")+\"\\\"\");",
                          "  tests[\"Response Body has Correct rule name\"] = responseBody.has(\"\\\"name\\\":\");",
                          "  tests[\"Response Body has correct Rule Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/rule",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "rule"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get_Rule_By_Id",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "ab0addce-7dc0-47d5-b0e5-dd28590fbb90",
                        "exec": [
                          "",
                          "if (responseCode.code != 200)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 200)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "  tests[\"Response Body has Correct rule id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"rule_id\")+\"\\\"\");",
                          "  tests[\"Response Body has Correct rule name\"] = responseBody.has(\"\\\"name\\\":\");",
                          "  tests[\"Response Body has correct Rule Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/rule/{{rule_id}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "rule",
                        "{{rule_id}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Rule-Action",
              "item": [
                {
                  "name": "Create_Action_Rule",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "91f9f8ca-33e9-4c1d-b6af-183eb4eeaf0a",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "8f9c0b8d-5e2b-45ac-a8f6-a3eccc254246",
                        "exec": [
                          "",
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"action_rule_id\",jsonData.id);",
                          "    tests[\"Response Body has Correct rule id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"action_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct rule name\"] = responseBody.has(\"\\\"name\\\":\");",
                          "  tests[\"Response Body has correct Rule Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "  ",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{rule1}}\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/rule-action",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "rule-action"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get_All_Action_Rule",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "41066da4-33e5-4c86-9842-8f13b60a02c7",
                        "exec": [
                          "",
                          "if (responseCode.code != 200)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 200)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "  tests[\"Response Body has Correct action rule id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"action_rule_id\")+\"\\\"\");",
                          "  tests[\"Response Body has Correct rule name\"] = responseBody.has(\"\\\"name\\\":\");",
                          "  tests[\"Response Body has correct Rule Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"SAMPLE RULE\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/rule-action",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "rule-action"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get_Action_Rule_By_Id",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "e9fb1a4c-83b7-4403-b273-f2146be7fe15",
                        "exec": [
                          "",
                          "if (responseCode.code != 200)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 200)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "  tests[\"Response Body has Correct action rule id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"action_rule_id\")+\"\\\"\");",
                          "  tests[\"Response Body has Correct rule name\"] = responseBody.has(\"\\\"name\\\":\");",
                          "  tests[\"Response Body has correct Rule Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"SAMPLE RULE\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/rule-action/{{action_rule_id}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "rule-action",
                        "{{action_rule_id}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Merchant_Rule",
              "item": [
                {
                  "name": "Create_Merchant_Rule",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "129d5a26-7c16-42bb-b01e-8f60cc769a56",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var rule= stringGen(10)",
                          "postman.setEnvironmentVariable(\"rule\", rule);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "9275a914-6e98-47c0-90cd-24bf35b54e3a",
                        "exec": [
                          "",
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"merchant_rule_id\", jsonData.id);",
                          "    tests[\"Response Body has Correct merchant rule id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct rule id\"] = responseBody.has(\"\\\"ruleId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct action id\"] = responseBody.has(\"\\\"actionId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"action_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct config value\"] = responseBody.has(\"1\");",
                          " ",
                          " ",
                          "  tests[\"Response Body has correct merchant rule Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"merchantId\" : \"{{merchant_ID}}\",\n \"rules\" : [\n {\n   \"ruleId\" : \"{{rule_id}}\",\n   \"configValue\" : \"1\",\n   \"actionId\" : \"{{action_rule_id}}\"\n }]\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant-rule",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant-rule"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Card",
          "item": [
            {
              "name": "Create_Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4fd064ad-55d2-482a-8b21-83e5d9ba96cf",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"cardPaymentMethod_ID\", jsonData.id);",
                      "",
                      "tests[\"Response Body has Correct card payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"cardPaymentMethod_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                      " tests[\"Response Body has Correct type\"] =responseBody.has(\"VISA\");",
                      " ",
                      "   tests[\"Response Body has correct card active Status\"] = responseBody.has(\"true\");",
                      "   ",
                      "",
                      "   ",
                      "}",
                      "",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"companyId\":\"{{company_ID}}\",\r\n\"type\":\"VISA\",\r\n\"accountHolderName\":\"{{paymentMethod}}\",\r\n\"expiration\":\"2020-03\",\r\n\"accountNumber\":\"4716175187624512\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/payment-method",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-method"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update_Payment_Method",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"UpdatecardPaymentMethod_ID\", jsonData.id);",
                      "",
                      "tests[\"Response Body has Correct card payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"UpdatecardPaymentMethod_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct type\"] =responseBody.has(\"VISA\");",
                      " ",
                      "   tests[\"Response Body has correct card active Status\"] = responseBody.has(\"true\");",
                      "   ",
                      "",
                      "   ",
                      "}",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8e034930-9912-4fdf-939f-fec4e1f7b27d",
                    "exec": [
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var paymentMmethod= stringGen(10)",
                      "postman.setEnvironmentVariable(\"paymentMmethod1\", paymentMmethod);",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"accountHolderName\":\"{{paymentMethod1}}\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/payment-method/{{cardPaymentMethod_ID}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-method",
                    "{{cardPaymentMethod_ID}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get_Payment_Method",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2724a7f9-c930-43af-97c4-44d0849a720d",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "tests[\"Response Body has Correct card payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"UpdatecardPaymentMethod_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct type\"] =responseBody.has(\"VISA\");",
                      " ",
                      "",
                      "",
                      "   ",
                      "}",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c46a262d-b5cc-4e8c-ad83-ea66ead090be",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/payment-method/{{cardPaymentMethod_ID}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-method",
                    "{{cardPaymentMethod_ID}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Payment_Method",
          "item": [
            {
              "name": "Payment_Method",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"paymentMethod_ID\", jsonData.id);",
                      "",
                      "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                      " tests[\"Response Body has Correct bank routing\"] =responseBody.has(\"082000072\");",
                      "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                      " ",
                      "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                      "   ",
                      "",
                      "   ",
                      "}",
                      "",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "77681eda-e215-4596-9ec8-aca70aaa60fa",
                    "exec": [
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var paymentMethod= stringGen(10)",
                      "postman.setEnvironmentVariable(\"paymentMethod\", paymentMethod);",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n \"type\" : \"CHECKING_ACH\",\r\n  \"accountHolderName\" : \"{{paymentMethod}}\",\r\n  \"bankRouting\" : \"082000072\",\r\n  \"accountNumber\" : \"852937164973\"\r\n}\r\n"
                },
                "url": {
                  "raw": "{{URL}}/payment-method",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-method"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get_Payment_Method_By_ID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                      " tests[\"Response Body has Correct bank routing\"] =responseBody.has(\"082000072\");",
                      "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                      " ",
                      "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                      "   ",
                      "",
                      "   ",
                      "}",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"companyId\" : \"f2322522-b2cf-46d4-b2c0-39f3cd0b639a\",\r\n  \"type\" : \"CHECKING_ACH\",\r\n  \"accountHolderName\" : \"Bobby Boucher\",\r\n  \"bankRouting\" : \"082000073\",\r\n  \"accountNumber\" : \"852937164973\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/payment-method/{{paymentMethod_ID}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-method",
                    "{{paymentMethod_ID}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update_Payment_Method",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct bank routing\"] =responseBody.has(\"082000072\");",
                      "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                      " ",
                      "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                      "   ",
                      "",
                      "   ",
                      "}",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n \"type\" : \"CHECKING_ACH\",\r\n  \"accountHolderName\" : \"Test new\",\r\n  \"bankRouting\" : \"082000072\",\r\n  \"accountNumber\" : \"852937164973\"\r\n}\r\n"
                },
                "url": {
                  "raw": "{{URL}}/payment-method/{{paymentMethod_ID}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-method",
                    "{{paymentMethod_ID}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get_Accounts_By Company_Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "",
                      "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct bank routing\"] =responseBody.has(\"082000072\");",
                      "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                      " ",
                      "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                      "   ",
                      "",
                      "   ",
                      "}",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/payment-method/company/{{company_ID}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-method",
                    "company",
                    "{{company_ID}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Charge",
          "item": [
            {
              "name": "Create_Charge ",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "937cb1e8-0f96-4604-8756-6b844d8d8b2d",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"charge_ID\", jsonData.id);",
                      "postman.setEnvironmentVariable(\"client_ID\", jsonData.metadata.clientId);",
                      "postman.setEnvironmentVariable(\"payor_ID\", jsonData.metadata.payorId);",
                      "postman.setEnvironmentVariable(\"reference_ID\", jsonData.referenceId);",
                      "",
                      "",
                      "tests[\"Response Body has Correct charge id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"charge_ID\")+\"\\\"\");",
                      "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                      " ",
                      " tests[\"Response Body has Correct client id\"] = responseBody.has(\"\\\"clientId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"client_ID\")+\"\\\"\");",
                      "  tests[\"Response Body has Correct payor id\"] = responseBody.has(\"\\\"payorId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"payor_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct reference id\"] = responseBody.has(\"\\\"referenceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"reference_ID\")+\"\\\"\");",
                      "  ",
                      " tests[\"Response Body has Correct charge amount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"amount\")+\"\\\"\");",
                      "   tests[\"Response Body has correct charge Status\"] = responseBody.has(\"NEW\");",
                      "   ",
                      "",
                      "   ",
                      "}",
                      "",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "046ad53e-7f48-445e-a8e5-167eb575fe79",
                    "exec": [
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var source= stringGen(10)",
                      "postman.setEnvironmentVariable(\"source\", source);",
                      "",
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"0123456789\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var amount= stringGen(3)",
                      "postman.setEnvironmentVariable(\"amount\", amount);",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{paymentMethod_ID}}\",\r\n   \"amount\": \"{{amount}}\",\r\n   \"source\": \"Billing\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/charge",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "charge"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get_Charge",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e6d7cca-e318-4263-9e2e-cd657c4fa493",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "tests[\"Response Body has Correct charge id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"charge_ID\")+\"\\\"\");",
                      "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                      " ",
                      " tests[\"Response Body has Correct client id\"] = responseBody.has(\"\\\"clientId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"client_ID\")+\"\\\"\");",
                      "  tests[\"Response Body has Correct payor id\"] = responseBody.has(\"\\\"payorId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"payor_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct reference id\"] = responseBody.has(\"\\\"referenceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"reference_ID\")+\"\\\"\");",
                      "  ",
                      "  tests[\"Response Body has correct charge amount\"] = responseBody.has(\"1\");",
                      "}",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/charge/{{charge_ID}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "charge",
                    "{{charge_ID}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Refund",
          "item": [
            {
              "name": "Create_Refund",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c202d6f2-945e-41cf-ade1-58982d3ac493",
                    "exec": [
                      "if (responseCode.code != 201)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "postman.setEnvironmentVariable(\"refund_ID\", jsonData.id);",
                      "postman.setEnvironmentVariable(\"client_ID\", jsonData.metadata.clientId);",
                      "postman.setEnvironmentVariable(\"payor_ID\", jsonData.metadata.payorId);",
                      "postman.setEnvironmentVariable(\"reference_ID\", jsonData.referenceId);",
                      "",
                      "",
                      "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                      " ",
                      " tests[\"Response Body has Correct client id\"] = responseBody.has(\"\\\"clientId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"client_ID\")+\"\\\"\");",
                      "  tests[\"Response Body has Correct payor id\"] = responseBody.has(\"\\\"payorId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"payor_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct reference id\"] = responseBody.has(\"\\\"referenceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"reference_ID\")+\"\\\"\");",
                      "  ",
                      "",
                      "",
                      "   ",
                      "}",
                      "",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "41368ab5-6668-40e9-a271-d0780782e299",
                    "exec": [
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var source= stringGen(10)",
                      "postman.setEnvironmentVariable(\"source\", source);",
                      "",
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"0123456789\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var amount= stringGen(3)",
                      "postman.setEnvironmentVariable(\"amount\", amount);",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{paymentMethod_ID}}\",\r\n   \"amount\": \"{{amount}}\",\r\n   \"source\": \"Billing\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/refund",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "refund"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get_Refund_By_ID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7b03b8b-7f53-499d-bc8e-6371ad088600",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                      " ",
                      " tests[\"Response Body has Correct client id\"] = responseBody.has(\"\\\"clientId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"client_ID\")+\"\\\"\");",
                      "  tests[\"Response Body has Correct payor id\"] = responseBody.has(\"\\\"payorId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"payor_ID\")+\"\\\"\");",
                      " tests[\"Response Body has Correct reference id\"] = responseBody.has(\"\\\"referenceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"reference_ID\")+\"\\\"\");",
                      "  ",
                      "  tests[\"Response Body has correct charge amount\"] = responseBody.has(\"1\");",
                      "}",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"merchantId\" : \"{{merchant_ID}}\",\r\n  \"amount\" : 10,\r\n  \"source\" : \"Billing\",\r\n  \"referenceId\" : \"154e5006-2c9c-425b-b1cc-1a8b4a009476\",\r\n  \"paymentMethodId\" : \"{{paymentMethod_ID}}\",\r\n  \"metadata\" : {\r\n    \"clientId\" : \"3771e2e2-ccea-4ee5-92bb-486698407d5a\",\r\n    \"payorId\" : \"7deb62ee-764d-41f2-87de-1699d1f30582\"\r\n  }\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/refund/{{refund_ID}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "refund",
                    "{{refund_ID}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Deposit",
          "item": [
            {
              "name": "REL1-2999_MAX_AMOUNT_ Fields",
              "item": [
                {
                  "name": "Create Company",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    postman.setEnvironmentVariable(\"company_ID\", jsonData.id);",
                          "    ",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                          "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "27fe164b-0432-49b8-99b3-8e7708984a69",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var companyName= stringGen(10)",
                          "postman.setEnvironmentVariable(\"companyName\", companyName);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{companyName}}\",\r\n  \"accountNumber\" : \"3665863\",\r\n  \"accountHolderName\" : \"Mr Test Account Holder\",\r\n  \"routing\" : \"087654321\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/company",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "company"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create Merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant\", merchant);",
                          "",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant"
                      ]
                    },
                    "description": "Create Merchant"
                  },
                  "response": []
                },
                {
                  "name": "Activate Merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "activate",
                        "{{merchant_ID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payment_Method",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"paymentMethod_ID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                          " tests[\"Response Body has Correct bank routing\"] =responseBody.has(\"082000072\");",
                          "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                          " ",
                          "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "77681eda-e215-4596-9ec8-aca70aaa60fa",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var paymentMethod= stringGen(10)",
                          "postman.setEnvironmentVariable(\"paymentMethod\", paymentMethod);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n \"type\" : \"CHECKING_ACH\",\r\n  \"accountHolderName\" : \"{{paymentMethod}}\",\r\n  \"bankRouting\" : \"082000072\",\r\n  \"accountNumber\" : \"85293716497312158\"\r\n}\r\n"
                    },
                    "url": {
                      "raw": "{{URL}}/payment-method",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "payment-method"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Merchant_Rule_MAX AMOUNT",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "129d5a26-7c16-42bb-b01e-8f60cc769a56",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var rule= stringGen(10)",
                          "postman.setEnvironmentVariable(\"rule\", rule);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "9275a914-6e98-47c0-90cd-24bf35b54e3a",
                        "exec": [
                          "",
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"merchant_rule_id\", jsonData.id);",
                          "    tests[\"Response Body has Correct merchant rule id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          "// tests[\"Response Body has Correct rule id\"] = responseBody.has(\"\\\"ruleId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"rule_id\")+\"\\\"\");",
                          " //tests[\"Response Body has Correct action id\"] = responseBody.has(\"\\\"actionId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"action_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct config value\"] = responseBody.has(\"1\");",
                          " ",
                          " ",
                          "  tests[\"Response Body has correct merchant rule Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"merchantId\" : \"{{merchant_ID}}\",\n \"rules\" : [\n {\n   \"ruleId\" : \"c1accb94-e83c-4b4c-a726-4b22b845a2f3\",\n   \"configValue\" : \"100\",\n   \"actionId\" : \"7d8fd7d1-1ae1-4e78-8dc5-54d4ea639748\"\n }]\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant-rule",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant-rule"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Deposit",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"depositID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct deposit id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"depositID\")+\"\\\"\");",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"BILLING\");",
                          "",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount1\", amount);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{paymentMethod_ID}}\",\r\n   \"amount\": \"105\",\r\n   \"source\": \"BILLING\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        ""
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Update Deposit Status_Status Field",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "",
                          "",
                          "if (responseCode.code != 400)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 400)",
                          "{",
                          "   ",
                          "   var jsonData = JSON.parse(responseBody);",
                          "  ",
                          "",
                          "  ",
                          "}",
                          "",
                          "tests[\"Response code should be 400\"] = responseCode.code === 400;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"status\" : \"APPROVED\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/update-deposit-status/{{depositID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        "update-deposit-status",
                        "{{depositID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Update Deposit Status_Status Field -incorrect",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "",
                          "",
                          "if (responseCode.code != 400)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 400)",
                          "{",
                          "   ",
                          "   var jsonData = JSON.parse(responseBody);",
                          "  ",
                          "",
                          "  ",
                          "}",
                          "",
                          "tests[\"Response code should be 400\"] = responseCode.code === 400;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"status\" : \"monika\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/update-deposit-status/{{depositID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        "update-deposit-status",
                        "{{depositID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Update Deposit Status_Reason_Field",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "",
                          "",
                          "if (responseCode.code != 400)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 400)",
                          "{",
                          "   ",
                          "   var jsonData = JSON.parse(responseBody);",
                          "  ",
                          "",
                          "  ",
                          "}",
                          "",
                          "tests[\"Response code should be 400\"] = responseCode.code === 400;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \r\n  \"reason\" : \"Any ACCEPTABLE Reason\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/update-deposit-status/{{depositID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        "update-deposit-status",
                        "{{depositID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Update Deposit Status_Empty payload",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "",
                          "",
                          "if (responseCode.code != 400)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 400)",
                          "{",
                          "   ",
                          "   var jsonData = JSON.parse(responseBody);",
                          "  ",
                          "",
                          "  ",
                          "}",
                          "",
                          "tests[\"Response code should be 400\"] = responseCode.code === 400;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/update-deposit-status/{{depositID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        "update-deposit-status",
                        "{{depositID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Update Deposit Status_Reason Length",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "",
                          "",
                          "if (responseCode.code != 400)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 400)",
                          "{",
                          "   ",
                          "   var jsonData = JSON.parse(responseBody);",
                          "  ",
                          "",
                          "  ",
                          "}",
                          "",
                          "tests[\"Response code should be 400\"] = responseCode.code === 400;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"status\" : \"APPROVED\",\r\n  \"reason\" : \"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVm\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/update-deposit-status/{{depositID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        "update-deposit-status",
                        "{{depositID}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "REL1-2999_MAX_AMOUNT APPROVED",
              "item": [
                {
                  "name": "Create Company",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    postman.setEnvironmentVariable(\"company_ID\", jsonData.id);",
                          "    ",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                          "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "27fe164b-0432-49b8-99b3-8e7708984a69",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var companyName= stringGen(10)",
                          "postman.setEnvironmentVariable(\"companyName\", companyName);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{companyName}}\",\r\n  \"accountNumber\" : \"3665863\",\r\n  \"accountHolderName\" : \"Mr Test Account Holder\",\r\n  \"routing\" : \"087654321\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/company",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "company"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create Merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant\", merchant);",
                          "",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant"
                      ]
                    },
                    "description": "Create Merchant"
                  },
                  "response": []
                },
                {
                  "name": "Activate Merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "activate",
                        "{{merchant_ID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payment_Method",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"paymentMethod_ID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                          " tests[\"Response Body has Correct bank routing\"] =responseBody.has(\"082000072\");",
                          "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                          " ",
                          "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "77681eda-e215-4596-9ec8-aca70aaa60fa",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var paymentMethod= stringGen(10)",
                          "postman.setEnvironmentVariable(\"paymentMethod\", paymentMethod);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n \"type\" : \"CHECKING_ACH\",\r\n  \"accountHolderName\" : \"{{paymentMethod}}\",\r\n  \"bankRouting\" : \"082000072\",\r\n  \"accountNumber\" : \"85293716497312158\"\r\n}\r\n"
                    },
                    "url": {
                      "raw": "{{URL}}/payment-method",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "payment-method"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Merchant_Rule_MAX AMOUNT",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "129d5a26-7c16-42bb-b01e-8f60cc769a56",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var rule= stringGen(10)",
                          "postman.setEnvironmentVariable(\"rule\", rule);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "9275a914-6e98-47c0-90cd-24bf35b54e3a",
                        "exec": [
                          "",
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"merchant_rule_id\", jsonData.id);",
                          "    tests[\"Response Body has Correct merchant rule id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          "// tests[\"Response Body has Correct rule id\"] = responseBody.has(\"\\\"ruleId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"rule_id\")+\"\\\"\");",
                          " //tests[\"Response Body has Correct action id\"] = responseBody.has(\"\\\"actionId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"action_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct config value\"] = responseBody.has(\"1\");",
                          " ",
                          " ",
                          "  tests[\"Response Body has correct merchant rule Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"merchantId\" : \"{{merchant_ID}}\",\n \"rules\" : [\n {\n   \"ruleId\" : \"c1accb94-e83c-4b4c-a726-4b22b845a2f3\",\n   \"configValue\" : \"100\",\n   \"actionId\" : \"7d8fd7d1-1ae1-4e78-8dc5-54d4ea639748\"\n }]\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant-rule",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant-rule"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Deposit",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"depositID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct deposit id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"depositID\")+\"\\\"\");",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"BILLING\");",
                          "",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount1\", amount);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{paymentMethod_ID}}\",\r\n   \"amount\": \"105\",\r\n   \"source\": \"BILLING\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        ""
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Update Deposit Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "",
                          "",
                          "if (responseCode.code != 200)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 200)",
                          "{",
                          "   ",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"status\",jsonData.status);",
                          "   tests[\"Response Body has correct Status\"] = responseBody.has(\"NEW\");",
                          "",
                          "  ",
                          "}",
                          "",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"status\" : \"APPROVED\",\r\n  \"reason\" : \"Any ACCEPTABLE Reason\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/update-deposit-status/{{depositID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        "update-deposit-status",
                        "{{depositID}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "REL1-2999_MAX_AMOUNT DISAPPROVED",
              "item": [
                {
                  "name": "Create Company",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    postman.setEnvironmentVariable(\"company_ID\", jsonData.id);",
                          "    ",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                          "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "27fe164b-0432-49b8-99b3-8e7708984a69",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var companyName= stringGen(10)",
                          "postman.setEnvironmentVariable(\"companyName\", companyName);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{companyName}}\",\r\n  \"accountNumber\" : \"3665863\",\r\n  \"accountHolderName\" : \"Mr Test Account Holder\",\r\n  \"routing\" : \"087654321\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/company",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "company"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create Merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant\", merchant);",
                          "",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant"
                      ]
                    },
                    "description": "Create Merchant"
                  },
                  "response": []
                },
                {
                  "name": "Activate Merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "activate",
                        "{{merchant_ID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payment_Method",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"paymentMethod_ID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                          " tests[\"Response Body has Correct bank routing\"] =responseBody.has(\"082000072\");",
                          "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                          " ",
                          "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "77681eda-e215-4596-9ec8-aca70aaa60fa",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var paymentMethod= stringGen(10)",
                          "postman.setEnvironmentVariable(\"paymentMethod\", paymentMethod);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n \"type\" : \"CHECKING_ACH\",\r\n  \"accountHolderName\" : \"{{paymentMethod}}\",\r\n  \"bankRouting\" : \"082000072\",\r\n  \"accountNumber\" : \"85293716497312158\"\r\n}\r\n"
                    },
                    "url": {
                      "raw": "{{URL}}/payment-method",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "payment-method"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Merchant_Rule_MAX AMOUNT",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "129d5a26-7c16-42bb-b01e-8f60cc769a56",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var rule= stringGen(10)",
                          "postman.setEnvironmentVariable(\"rule\", rule);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "9275a914-6e98-47c0-90cd-24bf35b54e3a",
                        "exec": [
                          "",
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"merchant_rule_id\", jsonData.id);",
                          "    tests[\"Response Body has Correct merchant rule id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          "// tests[\"Response Body has Correct rule id\"] = responseBody.has(\"\\\"ruleId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"rule_id\")+\"\\\"\");",
                          " //tests[\"Response Body has Correct action id\"] = responseBody.has(\"\\\"actionId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"action_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct config value\"] = responseBody.has(\"1\");",
                          " ",
                          " ",
                          "  tests[\"Response Body has correct merchant rule Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"merchantId\" : \"{{merchant_ID}}\",\n \"rules\" : [\n {\n   \"ruleId\" : \"c1accb94-e83c-4b4c-a726-4b22b845a2f3\",\n   \"configValue\" : \"100\",\n   \"actionId\" : \"7d8fd7d1-1ae1-4e78-8dc5-54d4ea639748\"\n }]\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant-rule",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant-rule"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Deposit",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"depositID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct deposit id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"depositID\")+\"\\\"\");",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"BILLING\");",
                          "",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount1\", amount);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{paymentMethod_ID}}\",\r\n   \"amount\": \"105\",\r\n   \"source\": \"BILLING\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        ""
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Update Deposit Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "",
                          "",
                          "if (responseCode.code != 200)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 200)",
                          "{",
                          "   ",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"status\",jsonData.status);",
                          "   tests[\"Response Body has correct Status\"] = responseBody.has(\"FAILED\");",
                          "",
                          "  ",
                          "}",
                          "",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"status\" : \"DISAPPROVED\",\r\n  \"reason\" : \"Any ACCEPTABLE Reason\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/update-deposit-status/{{depositID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        "update-deposit-status",
                        "{{depositID}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "REL1-2999_DEPOSIT_CYCLE APPROVED",
              "item": [
                {
                  "name": "Create Company",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    postman.setEnvironmentVariable(\"company_ID\", jsonData.id);",
                          "    ",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                          "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "27fe164b-0432-49b8-99b3-8e7708984a69",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var companyName= stringGen(10)",
                          "postman.setEnvironmentVariable(\"companyName\", companyName);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{companyName}}\",\r\n  \"accountNumber\" : \"3665863\",\r\n  \"accountHolderName\" : \"Mr Test Account Holder\",\r\n  \"routing\" : \"087654321\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/company",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "company"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create Merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant\", merchant);",
                          "",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant"
                      ]
                    },
                    "description": "Create Merchant"
                  },
                  "response": []
                },
                {
                  "name": "Activate Merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "activate",
                        "{{merchant_ID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payment_Method",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"paymentMethod_ID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                          " tests[\"Response Body has Correct bank routing\"] =responseBody.has(\"082000072\");",
                          "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                          " ",
                          "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "77681eda-e215-4596-9ec8-aca70aaa60fa",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var paymentMethod= stringGen(10)",
                          "postman.setEnvironmentVariable(\"paymentMethod\", paymentMethod);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n \"type\" : \"CHECKING_ACH\",\r\n  \"accountHolderName\" : \"{{paymentMethod}}\",\r\n  \"bankRouting\" : \"082000072\",\r\n  \"accountNumber\" : \"85293716497312158\"\r\n}\r\n"
                    },
                    "url": {
                      "raw": "{{URL}}/payment-method",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "payment-method"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Merchant_Rule_DEPOSIT_CYCLE",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "129d5a26-7c16-42bb-b01e-8f60cc769a56",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var rule= stringGen(10)",
                          "postman.setEnvironmentVariable(\"rule\", rule);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "9275a914-6e98-47c0-90cd-24bf35b54e3a",
                        "exec": [
                          "",
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"merchant_rule_id\", jsonData.id);",
                          "    tests[\"Response Body has Correct merchant rule id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          "// tests[\"Response Body has Correct rule id\"] = responseBody.has(\"\\\"ruleId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"rule_id\")+\"\\\"\");",
                          " //tests[\"Response Body has Correct action id\"] = responseBody.has(\"\\\"actionId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"action_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct config value\"] = responseBody.has(\"1\");",
                          " ",
                          " ",
                          "  tests[\"Response Body has correct merchant rule Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"merchantId\" : \"{{merchant_ID}}\",\n \"rules\" : [\n {\n   \"ruleId\" : \"1bc8ae99-9e0c-47cf-9972-08c79e736b9d\",\n   \"configValue\" : \"1\",\n   \"actionId\" : \"7d8fd7d1-1ae1-4e78-8dc5-54d4ea639748\"\n }]\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant-rule",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant-rule"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Deposit",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"depositID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct deposit id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"depositID\")+\"\\\"\");",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"BILLING\");",
                          "",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount1\", amount);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{paymentMethod_ID}}\",\r\n   \"amount\": \"5\",\r\n   \"source\": \"BILLING\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        ""
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Deposit",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"depositID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct deposit id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"depositID\")+\"\\\"\");",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"BILLING\");",
                          "",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount1\", amount);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{paymentMethod_ID}}\",\r\n   \"amount\": \"5\",\r\n   \"source\": \"BILLING\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        ""
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Update Deposit Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "",
                          "",
                          "if (responseCode.code != 200)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 200)",
                          "{",
                          "   ",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"status\",jsonData.status);",
                          "   tests[\"Response Body has correct Status\"] = responseBody.has(\"NEW\");",
                          "",
                          "  ",
                          "}",
                          "",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"status\" : \"APPROVED\",\r\n  \"reason\" : \"Any ACCEPTABLE Reason\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/update-deposit-status/{{depositID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        "update-deposit-status",
                        "{{depositID}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "REL1-2999_DEPOSIT_CYCLE DISAPPROVED",
              "item": [
                {
                  "name": "Create Company",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    postman.setEnvironmentVariable(\"company_ID\", jsonData.id);",
                          "    ",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                          "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "27fe164b-0432-49b8-99b3-8e7708984a69",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var companyName= stringGen(10)",
                          "postman.setEnvironmentVariable(\"companyName\", companyName);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{companyName}}\",\r\n  \"accountNumber\" : \"3665863\",\r\n  \"accountHolderName\" : \"Mr Test Account Holder\",\r\n  \"routing\" : \"087654321\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/company",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "company"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create Merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant\", merchant);",
                          "",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant"
                      ]
                    },
                    "description": "Create Merchant"
                  },
                  "response": []
                },
                {
                  "name": "Activate Merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "activate",
                        "{{merchant_ID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payment_Method",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"paymentMethod_ID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                          " tests[\"Response Body has Correct bank routing\"] =responseBody.has(\"082000072\");",
                          "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                          " ",
                          "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "77681eda-e215-4596-9ec8-aca70aaa60fa",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var paymentMethod= stringGen(10)",
                          "postman.setEnvironmentVariable(\"paymentMethod\", paymentMethod);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n \"type\" : \"CHECKING_ACH\",\r\n  \"accountHolderName\" : \"{{paymentMethod}}\",\r\n  \"bankRouting\" : \"082000072\",\r\n  \"accountNumber\" : \"85293716497312158\"\r\n}\r\n"
                    },
                    "url": {
                      "raw": "{{URL}}/payment-method",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "payment-method"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Merchant_Rule_DEPOSIT_CYCLE",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "129d5a26-7c16-42bb-b01e-8f60cc769a56",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var rule= stringGen(10)",
                          "postman.setEnvironmentVariable(\"rule\", rule);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "9275a914-6e98-47c0-90cd-24bf35b54e3a",
                        "exec": [
                          "",
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"merchant_rule_id\", jsonData.id);",
                          "    tests[\"Response Body has Correct merchant rule id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          "// tests[\"Response Body has Correct rule id\"] = responseBody.has(\"\\\"ruleId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"rule_id\")+\"\\\"\");",
                          " //tests[\"Response Body has Correct action id\"] = responseBody.has(\"\\\"actionId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"action_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct config value\"] = responseBody.has(\"1\");",
                          " ",
                          " ",
                          "  tests[\"Response Body has correct merchant rule Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"merchantId\" : \"{{merchant_ID}}\",\n \"rules\" : [\n {\n   \"ruleId\" : \"1bc8ae99-9e0c-47cf-9972-08c79e736b9d\",\n   \"configValue\" : \"1\",\n   \"actionId\" : \"7d8fd7d1-1ae1-4e78-8dc5-54d4ea639748\"\n }]\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant-rule",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant-rule"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Deposit",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"depositID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct deposit id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"depositID\")+\"\\\"\");",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"BILLING\");",
                          "",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount1\", amount);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{paymentMethod_ID}}\",\r\n   \"amount\": \"5\",\r\n   \"source\": \"BILLING\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        ""
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Deposit",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"depositID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct deposit id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"depositID\")+\"\\\"\");",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"BILLING\");",
                          "",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount1\", amount);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{paymentMethod_ID}}\",\r\n   \"amount\": \"5\",\r\n   \"source\": \"BILLING\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        ""
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Update Deposit Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "",
                          "",
                          "if (responseCode.code != 200)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 200)",
                          "{",
                          "   ",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"status\",jsonData.status);",
                          "   tests[\"Response Body has correct Status\"] = responseBody.has(\"FAILED\");",
                          "",
                          "  ",
                          "}",
                          "",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"status\" : \"DISAPPROVED\",\r\n  \"reason\" : \"Any ACCEPTABLE Reason\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/update-deposit-status/{{depositID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        "update-deposit-status",
                        "{{depositID}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "REL1-2999_RELATIVE_AMOUNT APPROVED",
              "item": [
                {
                  "name": "Create Company",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    postman.setEnvironmentVariable(\"company_ID\", jsonData.id);",
                          "    ",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                          "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "27fe164b-0432-49b8-99b3-8e7708984a69",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var companyName= stringGen(10)",
                          "postman.setEnvironmentVariable(\"companyName\", companyName);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{companyName}}\",\r\n  \"accountNumber\" : \"3665863\",\r\n  \"accountHolderName\" : \"Mr Test Account Holder\",\r\n  \"routing\" : \"087654321\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/company",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "company"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create Merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant\", merchant);",
                          "",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant"
                      ]
                    },
                    "description": "Create Merchant"
                  },
                  "response": []
                },
                {
                  "name": "Activate Merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "activate",
                        "{{merchant_ID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payment_Method",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"paymentMethod_ID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                          " tests[\"Response Body has Correct bank routing\"] =responseBody.has(\"082000072\");",
                          "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                          " ",
                          "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "77681eda-e215-4596-9ec8-aca70aaa60fa",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var paymentMethod= stringGen(10)",
                          "postman.setEnvironmentVariable(\"paymentMethod\", paymentMethod);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n \"type\" : \"CHECKING_ACH\",\r\n  \"accountHolderName\" : \"{{paymentMethod}}\",\r\n  \"bankRouting\" : \"082000072\",\r\n  \"accountNumber\" : \"85293716497312158\"\r\n}\r\n"
                    },
                    "url": {
                      "raw": "{{URL}}/payment-method",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "payment-method"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Deposit",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"depositID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct deposit id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"depositID\")+\"\\\"\");",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"BILLING\");",
                          "",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount1\", amount);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{paymentMethod_ID}}\",\r\n   \"amount\": \"100\",\r\n   \"source\": \"BILLING\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        ""
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Merchant_Rule_RELATIVE AMOUNT",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "129d5a26-7c16-42bb-b01e-8f60cc769a56",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var rule= stringGen(10)",
                          "postman.setEnvironmentVariable(\"rule\", rule);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "9275a914-6e98-47c0-90cd-24bf35b54e3a",
                        "exec": [
                          "",
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"merchant_rule_id\", jsonData.id);",
                          "    tests[\"Response Body has Correct merchant rule id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          "// tests[\"Response Body has Correct rule id\"] = responseBody.has(\"\\\"ruleId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"rule_id\")+\"\\\"\");",
                          " //tests[\"Response Body has Correct action id\"] = responseBody.has(\"\\\"actionId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"action_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct config value\"] = responseBody.has(\"1\");",
                          " ",
                          " ",
                          "  tests[\"Response Body has correct merchant rule Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"merchantId\" : \"{{merchant_ID}}\",\n \"rules\" : [\n {\n   \"ruleId\" : \"889952c1-44e7-4fa8-9379-b673a5f84923\",\n   \"configValue\" : \"0.25\",\n   \"actionId\" : \"7d8fd7d1-1ae1-4e78-8dc5-54d4ea639748\"\n }]\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant-rule",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant-rule"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Deposit",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"depositID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct deposit id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"depositID\")+\"\\\"\");",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"BILLING\");",
                          "",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount1\", amount);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{paymentMethod_ID}}\",\r\n   \"amount\": \"126\",\r\n   \"source\": \"BILLING\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        ""
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Update Deposit Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "",
                          "",
                          "if (responseCode.code != 200)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 200)",
                          "{",
                          "   ",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"status\",jsonData.status);",
                          "   tests[\"Response Body has correct Status\"] = responseBody.has(\"NEW\");",
                          "",
                          "  ",
                          "}",
                          "",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"status\" : \"APPROVED\",\r\n  \"reason\" : \"Any ACCEPTABLE Reason\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/update-deposit-status/{{depositID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        "update-deposit-status",
                        "{{depositID}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "REL1-2999_RELATIVE_AMOUNT DISAPPROVED",
              "item": [
                {
                  "name": "Create Company",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    postman.setEnvironmentVariable(\"company_ID\", jsonData.id);",
                          "    ",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                          "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "27fe164b-0432-49b8-99b3-8e7708984a69",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var companyName= stringGen(10)",
                          "postman.setEnvironmentVariable(\"companyName\", companyName);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{companyName}}\",\r\n  \"accountNumber\" : \"3665863\",\r\n  \"accountHolderName\" : \"Mr Test Account Holder\",\r\n  \"routing\" : \"087654321\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/company",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "company"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create Merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant\", merchant);",
                          "",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant"
                      ]
                    },
                    "description": "Create Merchant"
                  },
                  "response": []
                },
                {
                  "name": "Activate Merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "activate",
                        "{{merchant_ID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payment_Method",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"paymentMethod_ID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                          " tests[\"Response Body has Correct bank routing\"] =responseBody.has(\"082000072\");",
                          "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                          " ",
                          "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "77681eda-e215-4596-9ec8-aca70aaa60fa",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var paymentMethod= stringGen(10)",
                          "postman.setEnvironmentVariable(\"paymentMethod\", paymentMethod);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n \"type\" : \"CHECKING_ACH\",\r\n  \"accountHolderName\" : \"{{paymentMethod}}\",\r\n  \"bankRouting\" : \"082000072\",\r\n  \"accountNumber\" : \"85293716497312158\"\r\n}\r\n"
                    },
                    "url": {
                      "raw": "{{URL}}/payment-method",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "payment-method"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Deposit",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"depositID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct deposit id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"depositID\")+\"\\\"\");",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"BILLING\");",
                          "",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount1\", amount);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{paymentMethod_ID}}\",\r\n   \"amount\": \"100\",\r\n   \"source\": \"BILLING\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        ""
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Merchant_Rule_RELATIVE AMOUNT",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "129d5a26-7c16-42bb-b01e-8f60cc769a56",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var rule= stringGen(10)",
                          "postman.setEnvironmentVariable(\"rule\", rule);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "9275a914-6e98-47c0-90cd-24bf35b54e3a",
                        "exec": [
                          "",
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"merchant_rule_id\", jsonData.id);",
                          "    tests[\"Response Body has Correct merchant rule id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          "// tests[\"Response Body has Correct rule id\"] = responseBody.has(\"\\\"ruleId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"rule_id\")+\"\\\"\");",
                          " //tests[\"Response Body has Correct action id\"] = responseBody.has(\"\\\"actionId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"action_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct config value\"] = responseBody.has(\"1\");",
                          " ",
                          " ",
                          "  tests[\"Response Body has correct merchant rule Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"merchantId\" : \"{{merchant_ID}}\",\n \"rules\" : [\n {\n   \"ruleId\" : \"889952c1-44e7-4fa8-9379-b673a5f84923\",\n   \"configValue\" : \"0.25\",\n   \"actionId\" : \"7d8fd7d1-1ae1-4e78-8dc5-54d4ea639748\"\n }]\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant-rule",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant-rule"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Deposit",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"depositID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct deposit id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"depositID\")+\"\\\"\");",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"BILLING\");",
                          "",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount1\", amount);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{paymentMethod_ID}}\",\r\n   \"amount\": \"126\",\r\n   \"source\": \"BILLING\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        ""
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Update Deposit Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "",
                          "",
                          "if (responseCode.code != 200)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 200)",
                          "{",
                          "   ",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"status\",jsonData.status);",
                          "   tests[\"Response Body has correct Status\"] = responseBody.has(\"FAILED\");",
                          "",
                          "  ",
                          "}",
                          "",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"status\" : \"DISAPPROVED\",\r\n  \"reason\" : \"Any ACCEPTABLE Reason\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/update-deposit-status/{{depositID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        "update-deposit-status",
                        "{{depositID}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "REL1-2999_MAX_AMOUNT APPROVED WARN",
              "item": [
                {
                  "name": "Create Company",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    postman.setEnvironmentVariable(\"company_ID\", jsonData.id);",
                          "    ",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                          "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "27fe164b-0432-49b8-99b3-8e7708984a69",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var companyName= stringGen(10)",
                          "postman.setEnvironmentVariable(\"companyName\", companyName);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{companyName}}\",\r\n  \"accountNumber\" : \"3665863\",\r\n  \"accountHolderName\" : \"Mr Test Account Holder\",\r\n  \"routing\" : \"087654321\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/company",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "company"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create Merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant\", merchant);",
                          "",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant"
                      ]
                    },
                    "description": "Create Merchant"
                  },
                  "response": []
                },
                {
                  "name": "Activate Merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "activate",
                        "{{merchant_ID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payment_Method",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"paymentMethod_ID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                          " tests[\"Response Body has Correct bank routing\"] =responseBody.has(\"082000072\");",
                          "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                          " ",
                          "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "77681eda-e215-4596-9ec8-aca70aaa60fa",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var paymentMethod= stringGen(10)",
                          "postman.setEnvironmentVariable(\"paymentMethod\", paymentMethod);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n \"type\" : \"CHECKING_ACH\",\r\n  \"accountHolderName\" : \"{{paymentMethod}}\",\r\n  \"bankRouting\" : \"082000072\",\r\n  \"accountNumber\" : \"85293716497312158\"\r\n}\r\n"
                    },
                    "url": {
                      "raw": "{{URL}}/payment-method",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "payment-method"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Merchant_Rule_MAX AMOUNT",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "129d5a26-7c16-42bb-b01e-8f60cc769a56",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var rule= stringGen(10)",
                          "postman.setEnvironmentVariable(\"rule\", rule);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "9275a914-6e98-47c0-90cd-24bf35b54e3a",
                        "exec": [
                          "",
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"merchant_rule_id\", jsonData.id);",
                          "    tests[\"Response Body has Correct merchant rule id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          "// tests[\"Response Body has Correct rule id\"] = responseBody.has(\"\\\"ruleId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"rule_id\")+\"\\\"\");",
                          " //tests[\"Response Body has Correct action id\"] = responseBody.has(\"\\\"actionId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"action_rule_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct config value\"] = responseBody.has(\"1\");",
                          " ",
                          " ",
                          "  tests[\"Response Body has correct merchant rule Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"merchantId\" : \"{{merchant_ID}}\",\n \"rules\" : [\n {\n   \"ruleId\" : \"c1accb94-e83c-4b4c-a726-4b22b845a2f3\",\n   \"configValue\" : \"100\",\n   \"actionId\" : \"a5a8b4cb-72fc-48c9-8332-acfeb7bda12e\"\n }]\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant-rule",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant-rule"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Deposit",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"depositID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct deposit id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"depositID\")+\"\\\"\");",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"BILLING\");",
                          "",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount1\", amount);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{paymentMethod_ID}}\",\r\n   \"amount\": \"105\",\r\n   \"source\": \"BILLING\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        ""
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Update Deposit Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "",
                          "",
                          "if (responseCode.code != 400)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 400)",
                          "{",
                          "   ",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   ",
                          "",
                          "  ",
                          "}",
                          "",
                          "tests[\"Response code should be 400\"] = responseCode.code === 400;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"status\" : \"APPROVED\",\r\n  \"reason\" : \"Any ACCEPTABLE Reason\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/update-deposit-status/{{depositID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        "update-deposit-status",
                        "{{depositID}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Bank",
          "item": [
            {
              "name": "Create_Bank",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "648be794-8a24-4c4c-b745-d2078ae73ee8",
                    "exec": [
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "   postman.setEnvironmentVariable(\"new_bank_id\", jsonData.id);",
                      "   postman.setEnvironmentVariable(\"routings_id\", jsonData.routings[0].id);",
                      "    postman.setEnvironmentVariable(\"routing\", jsonData.routings[0].routing);",
                      "    ",
                      "    tests[\"Response Body has Correct bank id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"new_bank_id\")+\"\\\"\");",
                      "tests[\"Response Body has Correct routing id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"routings_id\")+\"\\\"\");",
                      " tests[\"Response Body has Correct rounting number\"] = responseBody.has(\"\\\"routing\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"routing\")+\"\\\"\");",
                      "   tests[\"Response Body has correct active Status\"] = responseBody.has(\"true\");",
                      " ",
                      "",
                      "",
                      "}",
                      "",
                      "",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b1ca7c3f-bcc0-417f-80d2-114310136215",
                    "exec": [
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var bankName= stringGen(10)",
                      "postman.setEnvironmentVariable(\"bankName\", bankName);",
                      "",
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"0123456789\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var routing= stringGen(7)",
                      "var routing_new = \"15\" + routing ",
                      "postman.setEnvironmentVariable(\"routing_number\", routing_new);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\" : \"{{bankName}}\",\r\n  \"routings\" : [ \"{{routing_number}}\"]\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/bank",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "bank"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Add_New_Routing",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "648be794-8a24-4c4c-b745-d2078ae73ee8",
                    "exec": [
                      "",
                      "if (responseCode.code != 201)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 201)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "    postman.setEnvironmentVariable(\"routing_new\", jsonData.routings[0].routing);",
                      "     postman.setEnvironmentVariable(\"routings_id_new\", jsonData.routings[0].id);",
                      "    ",
                      " tests[\"Response Body has Correct bank id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"new_bank_id\")+\"\\\"\");",
                      "tests[\"Response Body has Correct routing id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"routings_id_new\")+\"\\\"\");",
                      " tests[\"Response Body has Correct rounting number\"] = responseBody.has(\"\\\"routing\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"routing_new\")+\"\\\"\");",
                      " tests[\"Response Body has correct active Status\"] = responseBody.has(\"true\");",
                      " ",
                      "",
                      "",
                      "}",
                      "",
                      "",
                      "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "43d8bf65-5907-4a7f-84be-dbbca242dcac",
                    "exec": [
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"0123456789\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var routing= stringGen(7)",
                      "var routing_new = \"15\" + routing ",
                      "postman.setEnvironmentVariable(\"routing_number\", routing_new);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token_super_user}}"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"routings\" : [ \"{{routing_number}}\"]\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/bank/{{new_bank_id}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "bank",
                    "{{new_bank_id}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get_List_Of_Bank",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33c87ac2-7e23-4b50-b688-3130e438fcd4",
                    "exec": [
                      "",
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "    ",
                      " tests[\"Response Body has Correct bank id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"new_bank_id\")+\"\\\"\");",
                      "tests[\"Response Body has Correct routing id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"routings_id_new\")+\"\\\"\");",
                      " tests[\"Response Body has Correct rounting number\"] = responseBody.has(\"\\\"routing\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"routing_new\")+\"\\\"\");",
                      " tests[\"Response Body has correct active Status\"] = responseBody.has(\"true\");",
                      "",
                      "",
                      "}",
                      "",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \"name\" : \"State Bank Of India\", \"routingList\": [\"087654321\", \"087551321\", \"076752321\"] }"
                },
                "url": {
                  "raw": "{{URL}}/bank",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "bank"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get_Bank_By_Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7cc8e3f-1917-4cb5-ba21-dc919f324d0d",
                    "exec": [
                      "",
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "    ",
                      "",
                      "",
                      "}",
                      "",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token_super_user}}"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/bank/{{new_bank_id}}?routings={{routing}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "bank",
                    "{{new_bank_id}}"
                  ],
                  "query": [
                    {
                      "key": "routings",
                      "value": "{{routing}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update_Bank_By_Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "648be794-8a24-4c4c-b745-d2078ae73ee8",
                    "exec": [
                      "",
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "   ",
                      "    postman.setEnvironmentVariable(\"routings_id_updated\", jsonData.routings[0].id);",
                      "    postman.setEnvironmentVariable(\"routing_updated\", jsonData.routings[0].routing);",
                      "    ",
                      " tests[\"Response Body has Correct bank id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"new_bank_id\")+\"\\\"\");",
                      "tests[\"Response Body has Correct routing id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"routings_id_updated\")+\"\\\"\");",
                      " tests[\"Response Body has Correct rounting number\"] = responseBody.has(\"\\\"routing\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"routing_updated\")+\"\\\"\");",
                      " tests[\"Response Body has correct active Status\"] = responseBody.has(\"true\");",
                      "",
                      "",
                      "}",
                      "",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "43d8bf65-5907-4a7f-84be-dbbca242dcac",
                    "exec": [
                      "function stringGen(len) {",
                      "var text = \"\";",
                      "",
                      "var charset = \"0123456789\";",
                      "",
                      "for (var i = 0; i < len; i++)",
                      " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                      "",
                      "return text;",
                      "}",
                      "var routing= stringGen(7)",
                      "var routing_new = \"15\" + routing ",
                      "postman.setEnvironmentVariable(\"routing_number\", routing_new);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token_super_user}}"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"routings\": [\n        {\n            \"id\": \"{{routings_id}}\",\n            \"routing\": \"{{routing_number}}\"\n        }\n        \n    ]\n}"
                },
                "url": {
                  "raw": "{{URL}}/bank/{{new_bank_id}}?routings={{routing}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "bank",
                    "{{new_bank_id}}"
                  ],
                  "query": [
                    {
                      "key": "routings",
                      "value": "{{routing}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Deactivate_Bank",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c034cd8-21b7-4ed3-af58-a23c0234388a",
                    "exec": [
                      "",
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "    ",
                      " tests[\"Response Body has Correct bank id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"new_bank_id\")+\"\\\"\");",
                      "tests[\"Response Body has Correct routing id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"routings_id\")+\"\\\"\");",
                      " tests[\"Response Body has Correct rounting number\"] = responseBody.has(\"\\\"routing\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"routing_number\")+\"\\\"\");",
                      " tests[\"Response Body has correct active Status\"] = responseBody.has(\"false\");",
                      "",
                      "",
                      "}",
                      "",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token_super_user}}"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/bank/{{new_bank_id}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "bank",
                    "{{new_bank_id}}"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Batch-Info",
          "item": [
            {
              "name": "All_File_Info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0aa34b3c-4e19-45b8-8870-f9a68e537a4d",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "tests[\"Response Body has Correct File Name\"] = responseBody.has(\"\\\"fileName\\\":\");",
                      "tests[\"Response Body has Correct Status\"] = responseBody.has(\"\\\"status\\\":\");",
                      "tests[\"Response Body has Correct Created status\"] = responseBody.has(\"\\\"created\\\":\");",
                      " ",
                      " tests[\"Response Body has Correct Sent status\"] = responseBody.has(\"\\\"sent\\\":\");",
                      "  tests[\"Response Body has Correct Transaction Count\"] = responseBody.has(\"\\\"transactionCount\\\":\");",
                      " tests[\"Response Body has Correct Amount\"] = responseBody.has(\"\\\"totalAmount\\\":\");",
                      "  ",
                      "}",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/payment-file/information/?page=0",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-file",
                    "information",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get_List_Of_Valid_File_By_Processor_Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f19b731-a688-4c85-aa71-6031a6a2518f",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "",
                      "}",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/payment-file/information/?page=3&status=FAILED&processorId={{processorId}}",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-file",
                    "information",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "3"
                    },
                    {
                      "key": "status",
                      "value": "FAILED"
                    },
                    {
                      "key": "processorId",
                      "value": "{{processorId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "List_Valid_Batch_File",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b0a32c7-c356-4878-b11b-7acb5117ef54",
                    "exec": [
                      "",
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "    ",
                      "",
                      "",
                      "}",
                      "",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/payment-file/information/?status=SUCCESS",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "payment-file",
                    "information",
                    ""
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "SUCCESS"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Audit",
          "item": [
            {
              "name": "filter_result_by_query_parameter",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1798a49b-1db0-4350-a8cd-c6baeae2ee1f",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "tests[\"Response Body has Correct audit type\"] = responseBody.has(\"SEND\");",
                      " tests[\"Response Body has Correct audit status\"] = responseBody.has(\"SUCCESS\");",
                      " ",
                      " tests[\"Response Body has Correct status message\"] = responseBody.has(\"----\");",
                      "",
                      "}",
                      "postman.setNextRequest(\"All_File_Info\");",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/audit/list?status=SUCCESS&startDate=2019-02-19&endDate=2019-03-12\n",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "audit",
                    "list"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "SUCCESS"
                    },
                    {
                      "key": "startDate",
                      "value": "2019-02-19"
                    },
                    {
                      "key": "endDate",
                      "value": "2019-03-12\n"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Scheduler",
          "item": [
            {
              "name": "Start_Job",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "55d18104-8f97-4127-9dd2-b19c377d7e1d",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);",
                      "",
                      "",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"jobName\" : \"PaymentSchedulerTask\",\r\n  \"groupName\" : \"DEFAULT\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/schedulejob/start",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "schedulejob",
                    "start"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Pause_Job",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6e4d029f-99cf-4ae9-b566-609022400c25",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);}",
                      "",
                      "",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"jobName\" : \"PaymentSchedulerTask\",\r\n  \"groupName\" : \"DEFAULT\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/schedulejob/pause",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "schedulejob",
                    "pause"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Resume_Job",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e149d08-a08e-4906-9f0e-17376d6a0153",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);}",
                      "",
                      "",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"jobName\" : \"PaymentSchedulerTask\",\r\n  \"groupName\" : \"DEFAULT\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/schedulejob/resume",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "schedulejob",
                    "resume"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update_Job",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3f3069c8-bd21-4424-8dc1-17e022b39837",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);}",
                      "",
                      "",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token_super_user}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"jobName\" : \"PaymentSchedulerTask\",\r\n  \"groupName\" : \"DEFAULT\",\r\n  \"cronExpression\" : \"0 */1 * * * ?\",\r\n  \"listDate\" : [ \"07/04/2019\" ],\r\n  \"calenderName\" : \"moongacalender\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/schedulejob/update",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "schedulejob",
                    "update"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get_All_Scheduler_Jobs",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7c89547-784f-4657-a0bb-68058f2ae6de",
                    "exec": [
                      "if (responseCode.code != 200)",
                      "{",
                      "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                      "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                      "}",
                      "",
                      "else if (responseCode.code === 200)",
                      "{",
                      "   var jsonData = JSON.parse(responseBody);}",
                      "",
                      "",
                      "",
                      "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{access_token_super_user}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"jobName\" : \"PaymentSchedulerTask\",\r\n  \"groupName\" : \"DEFAULT\",\r\n  \"cronExpression\" : \"0 */1* * * ?\",\r\n  \"listDate\" : [ \"26/03/2019\" ],\r\n  \"calenderName\" : \"moonga_calender\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/schedulejob/list",
                  "host": [
                    "{{URL}}"
                  ],
                  "path": [
                    "schedulejob",
                    "list"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "name": "Batch-Info_REL1-1464",
      "item": [
        {
          "name": "All_File_Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0aa34b3c-4e19-45b8-8870-f9a68e537a4d",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Response Body has Correct File Name\"] = responseBody.has(\"\\\"fileName\\\":\");",
                  "tests[\"Response Body has Correct Status\"] = responseBody.has(\"\\\"status\\\":\");",
                  "tests[\"Response Body has Correct totalCredit\"] = responseBody.has(\"\\\"totalCredit\\\":\");",
                  "tests[\"Response Body has Correct totalDebit\"] = responseBody.has(\"\\\"totalDebit\\\":\");",
                  "tests[\"Response Body has Correct Created status\"] = responseBody.has(\"\\\"created\\\":\");",
                  "",
                  " tests[\"Response Body has Correct Sent status\"] = responseBody.has(\"\\\"sent\\\":\");",
                  "  tests[\"Response Body has Correct Transaction Count\"] = responseBody.has(\"\\\"transactionCount\\\":\");",
                  " tests[\"Response Body has Correct Amount\"] = responseBody.has(\"\\\"totalAmount\\\":\");",
                  "  ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token_super_user}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/payment-file/information/?page=0",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-file",
                "information",
                ""
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get_List_Of_File_By_Processor_Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f19b731-a688-4c85-aa71-6031a6a2518f",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Response Body has Correct File Name\"] = responseBody.has(\"\\\"fileName\\\":\");",
                  "tests[\"Response Body has Correct Status\"] = responseBody.has(\"\\\"status\\\":\");",
                  "tests[\"Response Body has Correct Created status\"] = responseBody.has(\"\\\"created\\\":\");",
                  "  tests[\"Response Body has Correct totalCredit\"] = responseBody.has(\"\\\"totalCredit\\\":\");",
                  "tests[\"Response Body has Correct totalDebit\"] = responseBody.has(\"\\\"totalDebit\\\":\");",
                  " tests[\"Response Body has Correct Sent status\"] = responseBody.has(\"\\\"sent\\\":\");",
                  "  tests[\"Response Body has Correct Transaction Count\"] = responseBody.has(\"\\\"transactionCount\\\":\");",
                  " tests[\"Response Body has Correct Amount\"] = responseBody.has(\"\\\"totalAmount\\\":\");",
                  "  ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token_super_user}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/payment-file/information/?page=3&processorId={{processor_id}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-file",
                "information",
                ""
              ],
              "query": [
                {
                  "key": "page",
                  "value": "3"
                },
                {
                  "key": "processorId",
                  "value": "{{processor_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "List_Valid_Batch_File",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3fa0cd1c-c217-4815-8c05-c590893a0d1a",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Response Body has Correct File Name\"] = responseBody.has(\"\\\"fileName\\\":\");",
                  "tests[\"Response Body has Correct Status\"] = responseBody.has(\"\\\"status\\\":\");",
                  "tests[\"Response Body has Correct Created status\"] = responseBody.has(\"\\\"created\\\":\");",
                  "  tests[\"Response Body has Correct totalCredit\"] = responseBody.has(\"\\\"totalCredit\\\":\");",
                  "tests[\"Response Body has Correct totalDebit\"] = responseBody.has(\"\\\"totalDebit\\\":\");",
                  " tests[\"Response Body has Correct Sent status\"] = responseBody.has(\"\\\"sent\\\":\");",
                  "  tests[\"Response Body has Correct Transaction Count\"] = responseBody.has(\"\\\"transactionCount\\\":\");",
                  " tests[\"Response Body has Correct Amount\"] = responseBody.has(\"\\\"totalAmount\\\":\");",
                  "  ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token_super_user}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/payment-file/information/?status=SUCCESS",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-file",
                "information",
                ""
              ],
              "query": [
                {
                  "key": "status",
                  "value": "SUCCESS"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "List_INValid_Batch_File",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3fa0cd1c-c217-4815-8c05-c590893a0d1a",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Response Body has Correct File Name\"] = responseBody.has(\"\\\"fileName\\\":\");",
                  "tests[\"Response Body has Correct Status\"] = responseBody.has(\"\\\"status\\\":\");",
                  "tests[\"Response Body has Correct Created status\"] = responseBody.has(\"\\\"created\\\":\");",
                  "  tests[\"Response Body has Correct totalCredit\"] = responseBody.has(\"\\\"totalCredit\\\":\");",
                  "tests[\"Response Body has Correct totalDebit\"] = responseBody.has(\"\\\"totalDebit\\\":\");",
                  " tests[\"Response Body has Correct Sent status\"] = responseBody.has(\"\\\"sent\\\":\");",
                  "  tests[\"Response Body has Correct Transaction Count\"] = responseBody.has(\"\\\"transactionCount\\\":\");",
                  " tests[\"Response Body has Correct Amount\"] = responseBody.has(\"\\\"totalAmount\\\":\");",
                  "  ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token_super_user}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/payment-file/information/?status=FAILED",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-file",
                "information",
                ""
              ],
              "query": [
                {
                  "key": "status",
                  "value": "FAILED"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "List_Valid_Batch_File_for_Specific_processor",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3fa0cd1c-c217-4815-8c05-c590893a0d1a",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Response Body has Correct File Name\"] = responseBody.has(\"\\\"fileName\\\":\");",
                  "tests[\"Response Body has Correct Status\"] = responseBody.has(\"\\\"status\\\":\");",
                  "tests[\"Response Body has Correct Created status\"] = responseBody.has(\"\\\"created\\\":\");",
                  "  tests[\"Response Body has Correct totalCredit\"] = responseBody.has(\"\\\"totalCredit\\\":\");",
                  "tests[\"Response Body has Correct totalDebit\"] = responseBody.has(\"\\\"totalDebit\\\":\");",
                  " tests[\"Response Body has Correct Sent status\"] = responseBody.has(\"\\\"sent\\\":\");",
                  "  tests[\"Response Body has Correct Transaction Count\"] = responseBody.has(\"\\\"transactionCount\\\":\");",
                  " tests[\"Response Body has Correct Amount\"] = responseBody.has(\"\\\"totalAmount\\\":\");",
                  "  ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token_super_user}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/payment-file/information/?processorId={{processor_id}}&status=SUCCESS",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-file",
                "information",
                ""
              ],
              "query": [
                {
                  "key": "processorId",
                  "value": "{{processor_id}}"
                },
                {
                  "key": "status",
                  "value": "SUCCESS"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "List_INValid_Batch_File_for_Specific_processor",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3fa0cd1c-c217-4815-8c05-c590893a0d1a",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Response Body has Correct File Name\"] = responseBody.has(\"\\\"fileName\\\":\");",
                  "tests[\"Response Body has Correct Status\"] = responseBody.has(\"\\\"status\\\":\");",
                  "tests[\"Response Body has Correct Created status\"] = responseBody.has(\"\\\"created\\\":\");",
                  "  tests[\"Response Body has Correct totalCredit\"] = responseBody.has(\"\\\"totalCredit\\\":\");",
                  "tests[\"Response Body has Correct totalDebit\"] = responseBody.has(\"\\\"totalDebit\\\":\");",
                  " tests[\"Response Body has Correct Sent status\"] = responseBody.has(\"\\\"sent\\\":\");",
                  "  tests[\"Response Body has Correct Transaction Count\"] = responseBody.has(\"\\\"transactionCount\\\":\");",
                  " tests[\"Response Body has Correct Amount\"] = responseBody.has(\"\\\"totalAmount\\\":\");",
                  "  ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token_super_user}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/payment-file/information/?processorId={{processor_id}}&status=FAILED",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-file",
                "information",
                ""
              ],
              "query": [
                {
                  "key": "processorId",
                  "value": "{{processor_id}}"
                },
                {
                  "key": "status",
                  "value": "FAILED"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Account Holder Name REL1-6438",
      "item": [
        {
          "name": "Payment_Method",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"paymentMethod_ID\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                  " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                  "",
                  " tests[\"Response Body has Correct bank routing\"] =responseBody.has(\"082000072\");",
                  "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                  " ",
                  "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                  "   ",
                  "",
                  "   ",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "77681eda-e215-4596-9ec8-aca70aaa60fa",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var paymentMethod= stringGen(10)",
                  "postman.setEnvironmentVariable(\"paymentMethod\", paymentMethod);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token_super_user}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n \"type\" : \"CHECKING_ACH\",\r\n  \"accountHolderName\" :\"Test\",\r\n  \"bankRouting\" : \"082000072\",\r\n  \"accountNumber\" : \"85293716497312156\"\r\n}\r\n"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update_Payment_Method",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"UpdatecardPaymentMethod_ID\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Correct card payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"UpdatecardPaymentMethod_ID\")+\"\\\"\");",
                  "",
                  "",
                  " ",
                  "   tests[\"Response Body has correct card active Status\"] = responseBody.has(\"true\");",
                  "   ",
                  "",
                  "   ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8e034930-9912-4fdf-939f-fec4e1f7b27d",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var paymentMmethod= stringGen(10)",
                  "postman.setEnvironmentVariable(\"paymentMmethod1\", paymentMmethod);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token_super_user}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n  \r\n  \"accountHolderName\" : \"UPD\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method/{{cardPaymentMethod_ID}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method",
                "{{cardPaymentMethod_ID}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create_Card",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4fd064ad-55d2-482a-8b21-83e5d9ba96cf",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"cardPaymentMethod_ID\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Correct card payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"cardPaymentMethod_ID\")+\"\\\"\");",
                  " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                  "",
                  " tests[\"Response Body has Correct type\"] =responseBody.has(\"VISA\");",
                  " ",
                  "   tests[\"Response Body has correct card active Status\"] = responseBody.has(\"true\");",
                  "   ",
                  "",
                  "   ",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token_super_user}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"companyId\":\"{{company_ID}}\",\r\n\"type\":\"VISA\",\r\n\"accountHolderName\":\"TEST\",\r\n\"expiration\":\"2019-04\",\r\n\"accountNumber\":\"4716175187624512\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update_Payment_Method",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"UpdatecardPaymentMethod_ID\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Correct card payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"UpdatecardPaymentMethod_ID\")+\"\\\"\");",
                  " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                  "",
                  " tests[\"Response Body has Correct type\"] =responseBody.has(\"VISA\");",
                  " ",
                  "   tests[\"Response Body has correct card active Status\"] = responseBody.has(\"true\");",
                  "   ",
                  "",
                  "   ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8e034930-9912-4fdf-939f-fec4e1f7b27d",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var paymentMmethod= stringGen(10)",
                  "postman.setEnvironmentVariable(\"paymentMmethod1\", paymentMmethod);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token_super_user}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n    \"accountHolderName\" : \"UPD\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method/{{cardPaymentMethod_ID}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method",
                "{{cardPaymentMethod_ID}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Payment Method Vantiv REL1-6068",
      "item": [
        {
          "name": "CreateMerchant_Vantiv",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                "exec": [
                  "if ( responseCode.code!=201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"Mid_V\", jsonData.mid);",
                  "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                  "",
                  "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                  " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                  "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                  "   ",
                  "   ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                "exec": [
                  "var randomnumber=Math.floor(10000000 + Math.random() * 90000000);",
                  "",
                  "postman.setEnvironmentVariable(\"MID\", randomnumber);",
                  "",
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var merchant= stringGen(10)",
                  "postman.setEnvironmentVariable(\"merchant\", merchant);",
                  "",
                  "",
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var merchant= stringGen(10)",
                  "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token_super_user}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"mid\" : \"{{MID}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{VantivId}}\"]\n }\n}\n\n"
            },
            "url": {
              "raw": "{{URL}}/merchant",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "merchant"
              ]
            },
            "description": "Create Merchant"
          },
          "response": []
        },
        {
          "name": "ActivateMerchant Vanitiv",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                "exec": [
                  "if ( responseCode.code!=200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200)",
                  "{",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  " ",
                  "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                  "",
                  " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                  "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                  " ",
                  "   ",
                  "   ",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token_super_user}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/merchants/activate/{{Mid_V}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "merchants",
                "activate",
                "{{Mid_V}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Payment_Method vantiv",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"paymentMethod_ID\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                  " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                  "",
                  "",
                  "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                  " ",
                  "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                  "   ",
                  "",
                  "   ",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "77681eda-e215-4596-9ec8-aca70aaa60fa",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var paymentMethod= stringGen(10)",
                  "postman.setEnvironmentVariable(\"paymentMethod\", paymentMethod);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token_super_user}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n \"type\" : \"VANTIV\",\r\n   \"mid\":\"{{Mid_V}}\",\r\n   \"zipCode\":\"25145-2548\",\r\n   \"description\":\"abcd\",\r\n   \"preAuthorizationKey\":\"hjjj\",\r\n   \"phoneNumber\":\"545-425-4887\" ,\r\n   \"chargedPartially\": false\r\n}\r\n"
            },
            "url": {
              "raw": "{{URL}}/payment-method",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update_Payment_Method vantiv",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"UpdatecardPaymentMethod_ID\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Correct card payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"UpdatecardPaymentMethod_ID\")+\"\\\"\");",
                  "",
                  "",
                  " tests[\"Response Body has Correct type\"] =responseBody.has(\"VANTIV\");",
                  " ",
                  "   tests[\"Response Body has correct card active Status\"] = responseBody.has(\"true\");",
                  "   ",
                  "",
                  "   ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8e034930-9912-4fdf-939f-fec4e1f7b27d",
                "exec": [
                  "function stringGen(len) {",
                  "var text = \"\";",
                  "",
                  "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                  "",
                  "for (var i = 0; i < len; i++)",
                  " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                  "",
                  "return text;",
                  "}",
                  "var paymentMmethod= stringGen(10)",
                  "postman.setEnvironmentVariable(\"paymentMmethod1\", paymentMmethod);",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer {{access_token_super_user}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\r\n{\r\n  \"type\" : \"VANTIV\",\r\n  \"mid\":\"{{Mid_V}}\",\r\n     \"zipCode\":\"25145 2547\",\r\n     \"preAuthorizationKey\":\"abjh\",\r\n \"phoneNumber\":\"545-425-8887\",\r\n  \"description\":\"mgfhfgh\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/payment-method/{{paymentMethod_ID}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "payment-method",
                "{{paymentMethod_ID}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Scenarios",
      "item": [
        {
          "name": "Happy Path",
          "item": [
            {
              "name": "E2E Flow for CHARGE",
              "item": [
                {
                  "name": "CreateComapny",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5e773ca9-6ac1-4c15-89b7-d73b11ed1a99",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    postman.setEnvironmentVariable(\"company_ID\", jsonData.id);",
                          "    ",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                          "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "4b9e0e5d-2919-447e-b47d-96eaedc1be5a",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var companyName= stringGen(10)",
                          "postman.setEnvironmentVariable(\"companyName\", companyName);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{companyName}}\",\r\n  \"accountNumber\" : \"3665863\",\r\n  \"accountHolderName\" : \"Mr Test Account Holder\",\r\n  \"routing\" : \"087654321\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/company",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "company"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "CreateMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant\", merchant);",
                          "",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant"
                      ]
                    },
                    "description": "Create Merchant"
                  },
                  "response": []
                },
                {
                  "name": "ActivateMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "activate",
                        "{{merchant_ID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payment_Method",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"paymentMethod_ID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                          " tests[\"Response Body has Correct bank routing\"] =responseBody.has(\"082000072\");",
                          "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                          " ",
                          "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "77681eda-e215-4596-9ec8-aca70aaa60fa",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var paymentMethod= stringGen(10)",
                          "postman.setEnvironmentVariable(\"paymentMethod\", paymentMethod);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n \"type\" : \"CHECKING_ACH\",\r\n  \"accountHolderName\" : \"{{paymentMethod}}\",\r\n  \"bankRouting\" : \"082000072\",\r\n  \"accountNumber\" : \"85293716497312158\"\r\n}\r\n"
                    },
                    "url": {
                      "raw": "{{URL}}/payment-method",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "payment-method"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Charge",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "937cb1e8-0f96-4604-8756-6b844d8d8b2d",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"charge_IDE\", jsonData.id);",
                          "",
                          "",
                          "tests[\"Response Body has Correct charge id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"charge_IDE\")+\"\\\"\");",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          "",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"BILLING\");",
                          "  ",
                          " ",
                          "   tests[\"Response Body has correct charge Status\"] = responseBody.has(\"NEW\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "046ad53e-7f48-445e-a8e5-167eb575fe79",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var source= stringGen(10)",
                          "postman.setEnvironmentVariable(\"source\", source);",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount\", amount);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{paymentMethod_ID}}\",\r\n   \"amount\": \"{{amount}}\",\r\n   \"source\": \"BILLING\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/charge",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "charge"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "E2E Flow for DEPOSIT",
              "item": [
                {
                  "name": "CreateComapny",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5e773ca9-6ac1-4c15-89b7-d73b11ed1a99",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    postman.setEnvironmentVariable(\"company_ID\", jsonData.id);",
                          "    ",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                          "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "4b9e0e5d-2919-447e-b47d-96eaedc1be5a",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var companyName= stringGen(10)",
                          "postman.setEnvironmentVariable(\"companyName\", companyName);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{companyName}}\",\r\n  \"accountNumber\" : \"3665863\",\r\n  \"accountHolderName\" : \"Mr Test Account Holder\",\r\n  \"routing\" : \"087654321\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/company",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "company"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "CreateMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant\", merchant);",
                          "",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant"
                      ]
                    },
                    "description": "Create Merchant"
                  },
                  "response": []
                },
                {
                  "name": "ActivateMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "activate",
                        "{{merchant_ID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payment_Method",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"paymentMethod_ID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                          " tests[\"Response Body has Correct bank routing\"] =responseBody.has(\"082000072\");",
                          "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                          " ",
                          "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "77681eda-e215-4596-9ec8-aca70aaa60fa",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var paymentMethod= stringGen(10)",
                          "postman.setEnvironmentVariable(\"paymentMethod\", paymentMethod);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n \"type\" : \"CHECKING_ACH\",\r\n  \"accountHolderName\" : \"{{paymentMethod}}\",\r\n  \"bankRouting\" : \"082000072\",\r\n  \"accountNumber\" : \"85293716497312158\"\r\n}\r\n"
                    },
                    "url": {
                      "raw": "{{URL}}/payment-method",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "payment-method"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Deposit",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"depositID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct deposit id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"depositID\")+\"\\\"\");",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          "",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"BILLING\");",
                          "  ",
                          " ",
                          "   tests[\"Response Body has correct charge Status\"] = responseBody.has(\"NEW\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount1\", amount);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{paymentMethod_ID}}\",\r\n   \"amount\": \"{{amount1}}\",\r\n   \"source\": \"BILLING\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        ""
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "E2E Flow for REFUND",
              "item": [
                {
                  "name": "CreateComapny",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5e773ca9-6ac1-4c15-89b7-d73b11ed1a99",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    postman.setEnvironmentVariable(\"company_ID\", jsonData.id);",
                          "    ",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                          "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "4b9e0e5d-2919-447e-b47d-96eaedc1be5a",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var companyName= stringGen(10)",
                          "postman.setEnvironmentVariable(\"companyName\", companyName);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{companyName}}\",\r\n  \"accountNumber\" : \"3665863\",\r\n  \"accountHolderName\" : \"Mr Test Account Holder\",\r\n  \"routing\" : \"087654321\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/company",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "company"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "CreateMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant\", merchant);",
                          "",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant"
                      ]
                    },
                    "description": "Create Merchant"
                  },
                  "response": []
                },
                {
                  "name": "ActivateMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "activate",
                        "{{merchant_ID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payment_Method",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"paymentMethod_ID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                          " tests[\"Response Body has Correct bank routing\"] =responseBody.has(\"082000072\");",
                          "  tests[\"Response Body has correct Payment method Status\"] = responseBody.has(\"NEW\");",
                          " ",
                          "   tests[\"Response Body has correct Payment method active Status\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "77681eda-e215-4596-9ec8-aca70aaa60fa",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var paymentMethod= stringGen(10)",
                          "postman.setEnvironmentVariable(\"paymentMethod\", paymentMethod);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n \"type\" : \"CHECKING_ACH\",\r\n  \"accountHolderName\" : \"{{paymentMethod}}\",\r\n  \"bankRouting\" : \"082000072\",\r\n  \"accountNumber\" : \"85293716497312158\"\r\n}\r\n"
                    },
                    "url": {
                      "raw": "{{URL}}/payment-method",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "payment-method"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Refund",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct payment method id\"] = responseBody.has(\"\\\"paymentMethodId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          "",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"BILLING\");",
                          "  ",
                          " ",
                          "   tests[\"Response Body has correct charge Status\"] = responseBody.has(\"NEW\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(2)",
                          "postman.setEnvironmentVariable(\"amount1\", amount);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"merchantId\" : \"{{merchant_ID}}\",\r\n \"amount\": \"{{amount1}}\",\r\n   \"source\": \"BILLING\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n  \"paymentMethodId\" : \"{{paymentMethod_ID}}\",\r\n  \"metadata\" : {\r\n    \"clientId\" : \"{{$guid}}\",\r\n    \"payorId\" : \"{{$guid}}\"\r\n  }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/refund",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "refund"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "E2E Flow for CHARGE with CARD",
              "item": [
                {
                  "name": "CreateComapny",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5e773ca9-6ac1-4c15-89b7-d73b11ed1a99",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    postman.setEnvironmentVariable(\"company_ID\", jsonData.id);",
                          "    ",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                          "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "4b9e0e5d-2919-447e-b47d-96eaedc1be5a",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var companyName= stringGen(10)",
                          "postman.setEnvironmentVariable(\"companyName\", companyName);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{companyName}}\",\r\n  \"accountNumber\" : \"3665863\",\r\n  \"accountHolderName\" : \"Mr Test Account Holder\",\r\n  \"routing\" : \"087654321\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/company",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "company"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "CreateMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant\", merchant);",
                          "",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant"
                      ]
                    },
                    "description": "Create Merchant"
                  },
                  "response": []
                },
                {
                  "name": "ActivateMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "activate",
                        "{{merchant_ID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Card",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4fd064ad-55d2-482a-8b21-83e5d9ba96cf",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"cardPaymentMethod_ID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct card payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"cardPaymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                          " tests[\"Response Body has Correct type\"] =responseBody.has(\"VISA\");",
                          " ",
                          "   tests[\"Response Body has correct card active Status\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"companyId\":\"{{company_ID}}\",\r\n\"type\":\"VISA\",\r\n\"accountHolderName\":\"{{paymentMethod}}\",\r\n\"expiration\":\"2019-06\",\r\n\"accountNumber\":\"4716175187624512\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/payment-method",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "payment-method"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Charge",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "937cb1e8-0f96-4604-8756-6b844d8d8b2d",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"charge_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"client_ID\", jsonData.metadata.clientId);",
                          "postman.setEnvironmentVariable(\"payor_ID\", jsonData.metadata.payorId);",
                          "postman.setEnvironmentVariable(\"reference_ID\", jsonData.referenceId);",
                          "",
                          "",
                          "tests[\"Response Body has Correct charge id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"charge_ID\")+\"\\\"\");",
                          "",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          " tests[\"Response Body has Correct client id\"] = responseBody.has(\"\\\"clientId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"client_ID\")+\"\\\"\");",
                          "  tests[\"Response Body has Correct payor id\"] = responseBody.has(\"\\\"payorId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"payor_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct reference id\"] = responseBody.has(\"\\\"referenceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"reference_ID\")+\"\\\"\");",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"\\\"source\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"source\")+\"\\\"\");",
                          "  ",
                          "",
                          "   tests[\"Response Body has correct charge Status\"] = responseBody.has(\"NEW\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "046ad53e-7f48-445e-a8e5-167eb575fe79",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var source= stringGen(10)",
                          "postman.setEnvironmentVariable(\"source\", source);",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount\", amount);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{cardPaymentMethod_ID}}\",\r\n   \"amount\": \"{{amount}}\",\r\n   \"source\": \"{{source}}\",\r\n   \"referenceId\": \"{{$guid}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{$guid}}\",\r\n       \"payorId\": \"{{$guid}}\"\r\n   }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/charge",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "charge"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "E2E Flow for REFUND  with CARD",
              "item": [
                {
                  "name": "CreateComapny",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5e773ca9-6ac1-4c15-89b7-d73b11ed1a99",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    postman.setEnvironmentVariable(\"company_ID\", jsonData.id);",
                          "    ",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                          "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "4b9e0e5d-2919-447e-b47d-96eaedc1be5a",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var companyName= stringGen(10)",
                          "postman.setEnvironmentVariable(\"companyName\", companyName);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{companyName}}\",\r\n  \"accountNumber\" : \"3665863\",\r\n  \"accountHolderName\" : \"Mr Test Account Holder\",\r\n  \"routing\" : \"087654321\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/company",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "company"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "CreateMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant\", merchant);",
                          "",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant"
                      ]
                    },
                    "description": "Create Merchant"
                  },
                  "response": []
                },
                {
                  "name": "ActivateMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "activate",
                        "{{merchant_ID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Card",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4fd064ad-55d2-482a-8b21-83e5d9ba96cf",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"cardPaymentMethod_ID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct card payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"cardPaymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                          " tests[\"Response Body has Correct type\"] =responseBody.has(\"VISA\");",
                          " ",
                          "   tests[\"Response Body has correct card active Status\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"companyId\":\"{{company_ID}}\",\r\n\"type\":\"VISA\",\r\n\"accountHolderName\":\"{{paymentMethod}}\",\r\n\"expiration\":\"2019-06\",\r\n\"accountNumber\":\"4716175187624512\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/payment-method",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "payment-method"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Refund",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"client_ID\", jsonData.metadata.clientId);",
                          "postman.setEnvironmentVariable(\"payor_ID\", jsonData.metadata.payorId);",
                          "",
                          "",
                          "",
                          " tests[\"Response Body has Correct merchant id\"] = responseBody.has(\"\\\"merchantId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          " tests[\"Response Body has Correct client id\"] = responseBody.has(\"\\\"clientId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"client_ID\")+\"\\\"\");",
                          "  tests[\"Response Body has Correct payor id\"] = responseBody.has(\"\\\"payorId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"payor_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct reference id\"] = responseBody.has(\"\\\"referenceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"reference_ID\")+\"\\\"\");",
                          "tests[\"Response Body has Correct charge source\"] = responseBody.has(\"\\\"source\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"source\")+\"\\\"\");",
                          "  ",
                          " ",
                          "   tests[\"Response Body has correct charge Status\"] = responseBody.has(\"NEW\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount1\", amount);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"merchantId\" : \"{{merchant_ID}}\",\r\n \"amount\": \"{{amount1}}\",\r\n   \"source\": \"{{source}}\",\r\n   \"referenceId\": \"{{reference_ID}}\",\r\n  \"paymentMethodId\" : \"{{cardPaymentMethod_ID}}\",\r\n  \"metadata\" : {\r\n    \"clientId\" : \"{{$guid}}\",\r\n    \"payorId\" : \"{{$guid}}\"\r\n  }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/refund",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "refund"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Negative Scenarios",
          "item": [
            {
              "name": "Create Payment Method Negative",
              "item": [
                {
                  "name": "CreateComapny",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5e773ca9-6ac1-4c15-89b7-d73b11ed1a99",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    postman.setEnvironmentVariable(\"company_ID\", jsonData.id);",
                          "    ",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                          "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "4b9e0e5d-2919-447e-b47d-96eaedc1be5a",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var companyName= stringGen(10)",
                          "postman.setEnvironmentVariable(\"companyName\", companyName);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{companyName}}\",\r\n  \"accountNumber\" : \"3665863\",\r\n  \"accountHolderName\" : \"Mr Test Account Holder\",\r\n  \"routing\" : \"087654321\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/company",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "company"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "CreateMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant\", merchant);",
                          "",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant"
                      ]
                    },
                    "description": "Create Merchant"
                  },
                  "response": []
                },
                {
                  "name": "ActivateMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "activate",
                        "{{merchant_ID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payment_Method",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "940d67a0-c2e7-4982-8eca-18b72e502572",
                        "exec": [
                          "if (responseCode.code != 400)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 400)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 400\"] = responseCode.code === 400;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "77681eda-e215-4596-9ec8-aca70aaa60fa",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var paymentMethod= stringGen(10)",
                          "postman.setEnvironmentVariable(\"paymentMethod\", paymentMethod);",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"companyId\" : \"{{company_ID}}\",\r\n \"type\" : \"CHECKING_ACH\",\r\n  \"accountHolderName\" : \"{{paymentMethod}}\",\r\n  \"bankRouting\" : \"082000072\",\r\n  \"accountNumber\" : \"852937164973121580\"\r\n}\r\n"
                    },
                    "url": {
                      "raw": "{{URL}}/payment-method",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "payment-method"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Create Deposit for CARD Negative",
              "item": [
                {
                  "name": "CreateComapny",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5e773ca9-6ac1-4c15-89b7-d73b11ed1a99",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    postman.setEnvironmentVariable(\"company_ID\", jsonData.id);",
                          "    ",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"companyName\")+\"\\\"\");",
                          "   tests[\"Response Body has correct Company Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "4b9e0e5d-2919-447e-b47d-96eaedc1be5a",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var companyName= stringGen(10)",
                          "postman.setEnvironmentVariable(\"companyName\", companyName);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{companyName}}\",\r\n  \"accountNumber\" : \"3665863\",\r\n  \"accountHolderName\" : \"Mr Test Account Holder\",\r\n  \"routing\" : \"087654321\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/company",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "company"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "CreateMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant\", merchant);",
                          "",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant"
                      ]
                    },
                    "description": "Create Merchant"
                  },
                  "response": []
                },
                {
                  "name": "ActivateMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "activate",
                        "{{merchant_ID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Card",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4fd064ad-55d2-482a-8b21-83e5d9ba96cf",
                        "exec": [
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "postman.setEnvironmentVariable(\"cardPaymentMethod_ID\", jsonData.id);",
                          "",
                          "tests[\"Response Body has Correct card payment method id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"cardPaymentMethod_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct account holder name\"] = responseBody.has(\"\\\"accountHolderName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"paymentMethod\")+\"\\\"\");",
                          " tests[\"Response Body has Correct type\"] =responseBody.has(\"VISA\");",
                          " ",
                          "   tests[\"Response Body has correct card active Status\"] = responseBody.has(\"true\");",
                          "   ",
                          "",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\"companyId\":\"{{company_ID}}\",\r\n\"type\":\"VISA\",\r\n\"accountHolderName\":\"{{paymentMethod}}\",\r\n\"expiration\":\"2019-05\",\r\n\"accountNumber\":\"4716175187624512\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/payment-method",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "payment-method"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create_Deposit",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4c611e58-5ede-441c-8963-2d90ebd84543",
                        "exec": [
                          "if (responseCode.code != 400)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 400)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "}",
                          "",
                          "tests[\"Response code should be 400\"] = responseCode.code === 400;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eb4eafc7-4e64-436b-89b1-6a443ffc89e7",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var amount= stringGen(3)",
                          "postman.setEnvironmentVariable(\"amount1\", amount);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"merchantId\": \"{{merchant_ID}}\",\r\n   \"paymentMethodId\": \"{{cardPaymentMethod_ID}}\",\r\n   \"amount\": \"{{amount1}}\",\r\n   \"source\": \"{{source}}\",\r\n   \"referenceId\": \"{{reference_ID}}\",\r\n   \"metadata\": {\r\n       \"clientId\": \"{{client_ID}}\",\r\n       \"payorId\": \"{{payor_ID}}\"\r\n   }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/deposit/",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "deposit",
                        ""
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Rule Duplicate Name",
              "item": [
                {
                  "name": "Create Rule1",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "129d5a26-7c16-42bb-b01e-8f60cc769a56",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var rule= stringGen(10)",
                          "postman.setEnvironmentVariable(\"rulefirst\", rule);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "9275a914-6e98-47c0-90cd-24bf35b54e3a",
                        "exec": [
                          "",
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "",
                          "  ",
                          "",
                          " tests[\"Response Body has Correct rule name\"] = responseBody.has(\"\\\"name\\\":\");",
                          "  tests[\"Response Body has correct Rule Status active\"] = responseBody.has(\"true\");",
                          "   ",
                          "}",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{rulefirst}}\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/rule",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "rule"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create Rule2",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "129d5a26-7c16-42bb-b01e-8f60cc769a56",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "9275a914-6e98-47c0-90cd-24bf35b54e3a",
                        "exec": [
                          "",
                          "if (responseCode.code != 409)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 409)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "  ",
                          "   ",
                          "",
                          "}",
                          "",
                          "tests[\"Response code should be 409\"] = responseCode.code === 409;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{rulefirst}}\"\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/rule",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "rule"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Update and Get Scenarios ",
          "item": [
            {
              "name": "Merchant",
              "item": [
                {
                  "name": "CreateMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4bf23d0d-d5b8-4c97-9ac1-6329f923fc45",
                        "exec": [
                          "if ( responseCode.code!=201)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 201)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"merchant_ID\", jsonData.id);",
                          "postman.setEnvironmentVariable(\"merchant_access_token\", jsonData.merchantAccountToken);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Originator Status active\"] = responseBody.has(\"false\");",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e2f2e303-ad09-4cdc-aee1-641940989adc",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant\", merchant);",
                          "",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var merchant= stringGen(10)",
                          "postman.setEnvironmentVariable(\"merchant_company\", merchant);",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchant",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchant"
                      ]
                    },
                    "description": "Create Merchant"
                  },
                  "response": []
                },
                {
                  "name": "ActivateMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "61d4aeb1-ff12-4c08-9eb3-62001b8646cc",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "  tests[\"Response Body has correct Merchant Status active\"] = responseBody.has(\"true\");",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/activate/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "activate",
                        "{{merchant_ID}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "UpdateMerchant BUG",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "5ec04dc9-ad2a-4ca1-973d-5b420ee51c67",
                        "exec": [
                          "// function stringGen(len) {",
                          "// var text = \"\";",
                          "",
                          "// var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "// for (var i = 0; i < len; i++)",
                          "//  text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "// return text;",
                          "// }",
                          "// var merchant= stringGen(10)",
                          "// postman.setEnvironmentVariable(\"merchant1\", merchant);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "6ab544a1-a6d9-4456-8cb1-c963f4c64380",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "postman.setEnvironmentVariable(\"activeF\", jsonData.merchantDetails.active);",
                          "var activeF=postman.getEnvironmentVariable(\"activeF\");",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " ",
                          "    if (activeF !== true)",
                          "    {",
                          "       tests[\"Response Body has Wrong Status\"] = responseBody.has",
                          "       (activeF!==true);",
                          "    }",
                          "    ",
                          "    else if (activeF === true)",
                          "    {",
                          "        ",
                          "       tests[\"Response Body has Correct Status\"] = responseBody.has(activeF);",
                          "    ",
                          "    }",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n \"companyId\": \"{{company_ID}}\",\n \"name\": \"{{merchant}}\",\n \"merchantDetails\": {\n   \"companyName\": \"{{merchant_company}}\",\n   \"processors\": [\"{{processor_id}}\"]\n }\n}\n\n"
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "{{merchant_ID}}"
                      ]
                    },
                    "description": "Get Merchant By Id"
                  },
                  "response": []
                },
                {
                  "name": "GetByIdMerchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "43516beb-2493-46a1-9d28-ba40be22184f",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "tests[\"Response Body has Correct merchant Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_ID\")+\"\\\"\");",
                          " ",
                          "  tests[\"Response Body has Correct merchant name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant\")+\"\\\"\");",
                          "   tests[\"Response Body has Correct company merchant name\"] = responseBody.has(\"\\\"companyName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_company\")+\"\\\"\");",
                          "     tests[\"Response Body has Correct company id\"] = responseBody.has(\"\\\"companyId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"company_ID\")+\"\\\"\");",
                          " tests[\"Response Body has Correct merchant access token\"] = responseBody.has(\"\\\"merchantAccountToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"merchant_access_token\")+\"\\\"\");",
                          "",
                          " ",
                          "   ",
                          "   ",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{access_token_super_user}}"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n       \"name\": \"Deepak\",\n       \"active\": true,\n       \"accountHolderName\" : \"Test AccountHolder new\",\n       \"accountNumber\" : \"254641115\",\n       \"merchantAccounttoken\":\"4d02cf70-1b2f-4e93-84f5-12c5d33cf26c\",\n       \"routing\" : \"012345678\",\n       \"company\":\n      {\n   \"id\": \"1ecf1c0a-c2f4-434f-bd04-28bca4a82707\",\n   \"name\": \"Shri & Company Pvt Ltd\",\n   \"accountToken\": \"6a13ca8e-b138-4586-9dae-ca9d564f05dc\",\n   \"businessContact\": {\n       \"id\": \"0dd8f8e2-cad4-4982-9dc0-560ff1886d68\",\n       \"name\": \"company\",\n       \"phone\": \"435685869\",\n       \"email\": \"testing@kd\",\n       \"extention\": \"481\",\n       \"created\": \"2019-01-10T14:24:52.049\",\n       \"modified\": \"2019-01-10T14:24:52.049\",\n       \"active\": true\n   },\n   \"technicalContact\": {\n       \"id\": \"7774ed77-5522-4edf-be46-adbe3d05b8d9\",\n       \"name\": \"company\",\n       \"phone\": \"435975869\",\n       \"email\": \"testing@tc.com\",\n       \"extention\": \"481\",\n       \"created\": \"2019-01-10T14:24:52.057\",\n       \"modified\": \"2019-01-10T14:24:52.057\",\n       \"active\": true\n   },\n   \"active\": true\n},\n        \"merchantDetails\" : {\n        \"companyName\":\"Testing Nacha\",\n        \"companyDiscretionInfo\":\"Test companydisInfo\",\n        \"serviceClassCode\":698,\n        \"standardEntryClassCode\":\"TEC\",\n        \"companyEntryDescription\":\"TCED\",\n        \"processors\" : [\n        {\"id\":\"f2ddce4b-4faf-4298-b4ff-9d0f25a49a3e\"}\n        ]\n        \n    }\n\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/merchants/{{merchant_ID}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "merchants",
                        "{{merchant_ID}}"
                      ]
                    },
                    "description": "Update Merchant By Id"
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "name": "Bank",
              "item": [
                {
                  "name": "Create_Bank",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "648be794-8a24-4c4c-b745-d2078ae73ee8",
                        "exec": [
                          "",
                          "if (responseCode.code != 201)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 201)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   postman.setEnvironmentVariable(\"new_bank_id\", jsonData.id);",
                          "   postman.setEnvironmentVariable(\"routings_id\", jsonData.routings[0].id);",
                          "    postman.setEnvironmentVariable(\"routing\", jsonData.routings[0].routing);",
                          "    ",
                          "    tests[\"Response Body has Correct bank id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"new_bank_id\")+\"\\\"\");",
                          "tests[\"Response Body has Correct routing id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"routings_id\")+\"\\\"\");",
                          " tests[\"Response Body has Correct rounting number\"] = responseBody.has(\"\\\"routing\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"routing\")+\"\\\"\");",
                          "   tests[\"Response Body has correct active Status\"] = responseBody.has(\"true\");",
                          " ",
                          "",
                          "",
                          "}",
                          "",
                          "",
                          "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "b1ca7c3f-bcc0-417f-80d2-114310136215",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var bankName= stringGen(10)",
                          "postman.setEnvironmentVariable(\"bankName\", bankName);",
                          "",
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var routing= stringGen(7)",
                          "var routing_new = \"15\" + routing ",
                          "postman.setEnvironmentVariable(\"routing_number\", routing_new);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"name\" : \"{{bankName}}\",\r\n  \"routings\" : [ \"{{routing_number}}\"]\r\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/bank",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "bank"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Update_Bank_By_Id",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "648be794-8a24-4c4c-b745-d2078ae73ee8",
                        "exec": [
                          "",
                          "if (responseCode.code != 200)",
                          "{",
                          "   tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "   tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "",
                          "else if (responseCode.code === 200)",
                          "{",
                          "   var jsonData = JSON.parse(responseBody);",
                          "   ",
                          "    postman.setEnvironmentVariable(\"routings_id_updated\", jsonData.routings[0].id);",
                          "    postman.setEnvironmentVariable(\"routing_updated\", jsonData.routings[0].routing);",
                          "    ",
                          " tests[\"Response Body has Correct bank id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"new_bank_id\")+\"\\\"\");",
                          "tests[\"Response Body has Correct routing id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"routings_id_updated\")+\"\\\"\");",
                          " tests[\"Response Body has Correct rounting number\"] = responseBody.has(\"\\\"routing\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"routing_updated\")+\"\\\"\");",
                          " tests[\"Response Body has correct active Status\"] = responseBody.has(\"true\");",
                          "",
                          "",
                          "}",
                          "",
                          "",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "43d8bf65-5907-4a7f-84be-dbbca242dcac",
                        "exec": [
                          "function stringGen(len) {",
                          "var text = \"\";",
                          "",
                          "var charset = \"0123456789\";",
                          "",
                          "for (var i = 0; i < len; i++)",
                          " text += charset.charAt(Math.floor(Math.random() * charset.length));",
                          "",
                          "return text;",
                          "}",
                          "var routing= stringGen(7)",
                          "var routing_new = \"15\" + routing ",
                          "postman.setEnvironmentVariable(\"routing_number\", routing_new);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"routings\": [\n        {\n            \"id\": \"{{routings_id}}\",\n            \"routing\": \"{{routing_number}}\"\n        }\n        \n    ]\n}"
                    },
                    "url": {
                      "raw": "{{URL}}/bank/{{new_bank_id}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "bank",
                        "{{new_bank_id}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get_Bank_By_Id",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "63bec117-530d-4ed4-90a7-6d53cff0857a",
                        "exec": [
                          "if ( responseCode.code!=200)",
                          "{",
                          "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                          "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                          "}",
                          "else if (responseCode.code === 200)",
                          "{",
                          "",
                          "var jsonData = JSON.parse(responseBody);",
                          "",
                          "",
                          "}",
                          "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "type": "text",
                        "value": "Bearer {{access_token_super_user}}"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{URL}}/bank/{{new_bank_id}}",
                      "host": [
                        "{{URL}}"
                      ],
                      "path": [
                        "bank",
                        "{{new_bank_id}}"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    }
  ]
}