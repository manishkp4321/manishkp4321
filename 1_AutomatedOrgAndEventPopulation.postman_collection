{
  "variables": [],
  "info": {
    "name": "1 Automated Org->Event Population",
    "_postman_id": "e3a8c710-fafe-ade2-2348-e26b158608e2",
    "description": "",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Create Org, Location and User",
      "description": "",
      "item": [
        {
          "name": "SaveEmployeePhoto",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"photoId_1\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "http://{{staypuft}}/userPhoto",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e8\",\n    \"name\": \"employee1\",\n    \"type\": \"ABC Employee\"\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createUserForOrg",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "var appURL = postman.getEnvironmentVariable(\"baseURL\") + jsonData.organizationId;",
                  "postman.setEnvironmentVariable(\"ownerId\", jsonData.userId);",
                  "postman.setEnvironmentVariable(\"organizationId\", jsonData.organizationId);",
                  "postman.setEnvironmentVariable(\"ownerEmail\", jsonData.email);",
                  "postman.setEnvironmentVariable(\"ownerPassword\", jsonData.password);",
                  "postman.setEnvironmentVariable(\"appURL\", appURL);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var phoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"phoneNumber\", phoneNumber);",
                  "",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kevin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "do {",
                  "    randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{registration}}/user",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"password\" : \"Password1\",\r\n  \"phone\" : {\r\n    \"number\" : \"{{phoneNumber}}\",\r\n    \"extension\" : \"\"\r\n  },\r\n  \"birthDate\" : \"1998-01-27\",\r\n  \"email\" : \"test{{phoneNumber}}@abc.com\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createOrgLocation",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"addressId\", jsonData.location.address.id);",
                  "postman.setEnvironmentVariable(\"locationId\", jsonData.location.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var orgNumber = Math.floor(Math.random() * 9000000) + 1000000;",
                  "",
                  "postman.setEnvironmentVariable(\"orgNumber\", orgNumber);",
                  "",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "postman.setEnvironmentVariable(\"randState\", randState);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{registration}}/{{organizationId}}/organization",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\" : \"University Sports and Fitness #{{orgNumber}}\",\n  \"ownerId\" : \"{{ownerId}}\",\n  \"location\" : {\n    \"name\" : \"University Fitness Center #{{orgNumber}}\",\n    \"address\" : {\n      \"address1\" : \"123 Fitness Lane\",\n      \"address2\" : \"PO Box {{$randomInt}}\",\n      \"city\" : \"Little Rock\",\n      \"state\" : \"{{randState}}\",\n      \"country\" : \"United States\",\n      \"zipCode\" : \"33935\"\n    },\n    \"phone\" : {\n      \"number\" : \"{{phoneNumber}}\",\n      \"extension\" : \"411\"\n    },\n    \"email\" : {\n      \"address\" : \"UniversityFitness{{orgNumber}}@ufit.com\"\n    }\n  }\n}"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Employee",
      "description": "",
      "item": [
        {
          "name": "SaveEmployeePhoto2",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"photoId_2\", jsonData.id);",
                  "postman.setEnvironmentVariable(\"photoId_failTest\", jsonData.id2);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "http://{{staypuft}}/userPhoto",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e7\",\n    \"name\": \"employee2\",\n    \"type\": \"ABC Employee\"\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "SaveEmployeePhoto3",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"photoId_3\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "http://{{staypuft}}/userPhoto",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e6\",\n    \"name\": \"employee3\",\n    \"type\": \"ABC Employee\"\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "SaveEmployeePhoto4",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"photoId_4\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "http://{{staypuft}}/userPhoto",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e5\",\n    \"name\": \"employee4\",\n    \"type\": \"ABC Employee\"\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "SaveEmployeePhoto5",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"photoId_5\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "http://{{staypuft}}/userPhoto",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e4\",\n    \"name\": \"employee5\",\n    \"type\": \"ABC Employee\"\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "SaveEmployeePhoto6",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"photoId_6\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "http://{{staypuft}}/userPhoto",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"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\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e3\",\n    \"name\": \"employee6\",\n    \"type\": \"ABC Employee\"\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "SaveEmployeePhoto7",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"photoId_7\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "http://{{staypuft}}/userPhoto",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAAA8AAD/4QMfaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzEzMiA3OS4xNTkyODQsIDIwMTYvMDQvMTktMTM6MTM6NDAgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjYwQzg2OTEzNDJDQjExRTZBNThDODMwN0ZERTU4MEY4IiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjYwQzg2OTEyNDJDQjExRTZBNThDODMwN0ZERTU4MEY4IiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE1LjUgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSIxNTUxQkZGNUI0M0I4NjRDN0ZEQzZBOEE4MDQwNDczNyIgc3RSZWY6ZG9jdW1lbnRJRD0iMTU1MUJGRjVCNDNCODY0QzdGREM2QThBODA0MDQ3MzciLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7/7gAOQWRvYmUAZMAAAAAB/9sAhAAGBAQEBQQGBQUGCQYFBgkLCAYGCAsMCgoLCgoMEAwMDAwMDBAMDg8QDw4MExMUFBMTHBsbGxwfHx8fHx8fHx8fAQcHBw0MDRgQEBgaFREVGh8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx//wAARCAGpAWgDAREAAhEBAxEB/8QAqAAAAgIDAQEAAAAAAAAAAAAAAgMBBAAFBgcIAQEBAQEBAQEAAAAAAAAAAAAAAQIDBAUGEAABAwMCAwUDCQYEBAQHAQABAAIDESEEMRJBUQVhcSITBoGRMqGxwUJSYiMUB9HhcoIVCPGSM0PwUyQ0wmN0FqKy0nOzNRc3EQEBAAICAgIBBAIABQUAAAAAARECIQMxEkEEUWFxIhOBMpGxQhQFocFigiP/2gAMAwEAAhEDEQA/AOj3k8V4I64SHWVVhcVFYHBUTvCiYSHqoIORBByINpsgIlBBQA8WQVpGoKkrPcgrll1Yo2MIRDQ2goquQvNkFWUn2KLFaQn9ylgU5xojRD7iqBDgjTKeK6hRFtVRs+n4521UrG1bCm2iYQwOtRWIZG3c4A6JBYELBxKIhxaEVAcEGO2kdqFgQ0VVyhjAAoGByKaCiDFeKDC4URQEjmrkA5oUCHhRYS5SgHGigU+ThVBaFlpWGQBMqAy3QT5vvTKI8y6sEiRMsmCRAbXohzCgYgmlUAuCBMgVFeWMnghSPKQGI6KplJaikyCiKpzaoqrLWqEJcb0RQUqo0wxE3pbio0B8DrkDwjii1jA8UJFWjXuUZvDZYs9BtOoRzqyZCXUTAfGrEWYheqqGl1lBXkkusqhsoVgIOqUDWipVBUIQYCgdGaqBvBVAPKKU8oI3kIIff2opD/lURXeVFhLimFwtF6BbpKJ5CzISVcjN5VEeYomRNkuiGiREWIjZBZYimAqoKiCCFQDgoFuaEWEliqUQaNOKCHAU1VWEyQuPKp0qQEXCu7CebucxjaXJN/cEX1pf9OiNA6SpIqwM4+9XK+pTsBuxz2XIF9/AqLhrm5M0TC2SBj3gkVbaorwBN0xwYEMyAkufGG1021BFNUwrGZOLI8CQmOpo0ijmEd/BPU5WPykTSS0k8jUbfkUuqZTA6ESxNs0nSoN+wKzVk5kkZf4j4uJ7a3VsTC9jtDmjdW+hCguMhdw+ZRGPZQEcVEUp2kKZUlpNbqB8ZKotROFEDHObRUILxVQPhcCED9woqAcaoFkIA23VVJFlDJL+KIrPCuGoQ9TCjMlAohReShlFaaqgHyIgRLeymUGxx4qQWIyrRdiKgssCQwc0KglRFEAuCAC1VCJpoYhV72jnUhFka49axy92xwIGlwjc0J/q+9ztosbCtDbuUy6TVjJoJmgh160dtNxy1WQ78w2GOr274xepI3AczzVGTNje/fFQsc0OBGtOIVCJJXRRnaaMcPEx3HtuoqjJBLI5shjD2GxZwFNAPnVycLB6cHva41LbbS7w07CUtSET9PkhYd9W61qLe2mvYprfyt5a+ITw74cZrnCQ1aSbnnbgOxdc5YxhGJkz/mDDPujEl9pvscBSrXC91PYw3Dmgxxyk1uWvfQg1+8ePepaYbvpmQI2gShsjRQBxsffp71rW/lLq3kZw5bBjo3U4Gy1ZK5cxXnxeLLj6FzsFKTEJuVmxSjhOrWimEJfEWJVAHuCgMPc5URtKCxBZUPJQRVBBRGbbqqgiygS9qKrvYbqitIKKqU56iQsvUAOkcUUtx/eiJaRVMIew6c0hhZiN1Kq7CoLbNAga0hUwKqqILgBUoYavM61DDWh3GtA1uvvUu0jeumXP5/VOq5bnMxA+hFCW3A7zoud7L8OuuknlSh9OdZmvlSANcataHGzhoacFP5NcC/8AbWVE4SukDiwjadxJFPnVlsMxP5TKxyZdpcxp+JpptrfS5T2q4h7c5u4GSxcLPdofamTC5BkRyh0b/EKcTUi3DmrnKYLYJYqhp8yAGjPqkdh7U9jC4wtlhMb3E/dINPlrRMrglhERLTua02qLj3cUlS6tljG1iHNcKkjQj28VuVgT2hw2trQXLASD7kWKbsTfIHRyF5b4nsdZwB5EU+VUtwrdS6U50vnMNJWi4vcdyUgull74TjyNeHV2hzrONPhcDYVUlLPw22MGvBhnu8CjJKUNuDufYr+7N/RchZk4xaS4Pi4gHxDmQrLYlkraxFsjC5pBb9r/AOoLpNsud1DLFe47nJYyVIwBtVMYFKWEVWLBVdBdQS1gCKJzUUINDRENDrIJBKAgglBBCBbmhVSZBayCnK25Co17nOqooe0qgXFQkDqqCFrqIawknVSi3FwWauF2I6KCyx6BgetAjJQXVRznV+vPdK7Ggo2KM/iTHieIC57bfDprooY58w7nHceFdTVTDo28ErY2iu2vLgFqVnC4zLY622teH0LWUwd+E6hqGt12DVVZaXNDG6oDaGntr7FLFjV9Q6TC5nidUHUWFD3LldW5s0sYycXI8ou8+EioJHiaplvC/DmDcaNqW8Rf5CrlPVbaYTtcJAHOu2p2i/I/QUREkbg4hzS19bl1gfaLJhYmJ7Y67zRpuL3qkqXXK9DLuAEh3tNw8UBHbb6FvLNhsmO2QDc4kj4JQaEd/P2rTLDiSFra/ihvwgajur8oRMlPxjvptDSfgedDT6rhzSxZVmGs0YbI4h4+sNQ4Jkv6LcTreU87j7ie0Kxmwxj/ACyHxHxD4q2NO1IlXsfMa8kUoSfEw6FdJWLqOWFpAc34eP7FqxhUliI4WWLBUkZZZwpG26KIi1VBXeaFENhNaVQWdraKZXAXEBVLQbkE1RGECiKTI3VXKqsrVRrnN+VFhRaaUQA5t+aKgIMpVDB0YvVZqYWozRYoc2WigeyXtVDWyhXIq9VzDFhyEHxGjQeQOpVtWOId1CTIfIxjatjO1t6V50K5zl2nC7HlxMeIhRrhbbW9eVVSRsI5YHO2ud+Idaae/glFzHmoRQEDQU1PtTJhfhe7iNtOVz2rUqGse2vxUFfiF3e9Zy3gwsjeKsjJdpucLqjTdUxpQ4OBAIuGj4ljaOmvKpHFIKOaAXa7hYn2c1lT/LadKNLtSalpPM8kQ0S5EApU00MZu091Vc4TDGZGPUlrdrwPFGTaquSwwHyW7scks18okWrrSv0FVKsY3Vcau0gsebGN/wBCs2TbStjDkY0ton7H8iFrMc7rYc5jnto4h1rubrXtK0yR5bdx3EVJuTzUayYxzSQ19HMGl7qS4KyQuZ4wdzR4a0uB2hbQt+S5tHxOBcefwuH8QTJ6r+H1QvJZONjzQ07OBt8Q7Qt67OW2qxK6rTs8VqgLWGFJxFSCQXa+xYsFfioqHOFFBXeQSinRUF1mhhksgW6VVANfUohocii3IBdoqqtI3VEUnssq0QWFFLcwoB20QTttpdRBtKzQW+ncs0ghIsrIMSq5DBMUyYaX1L1CJmP5NXCR1DUX14d6bVvVxp60yAiOOJpf3mocddOKkbwfhdailm8sQiJ1QKE72u+lpRcN4MuYNY6NjXE3LBbt42qnsSJi65M4nZUXoGEUd28ln2aw3HTcmR7ZAaGpANDW2qspcRbgy3Ak+XYa00Kkqti3IMrC4EBos4t+LuAC6SkhE+OzaKkilw1xvXtWa3FH8u4k7qPFakC4r9BWMNXhMLyKse3ur8VB28VUuppkZtDXtBYNH1pT6QqzhWyMEnxMfVpuCaGntCmGptgoyZUAFDUUrQihPbxarlcSsfm40zGjJZskb9drd7P8uo/lKZlX0s8K8kuTAHSRyfhAnbI0mSO33h4m+1ZuTEpkPqvIgc0ycbbmnc0jtpdWdljG3Tldx/VuHM/xO2brPY6nyLU7HO9VjcsycWQtcwhzSNdaUXTMc8WGeawkAUJJp8RFKc6plMF7IXVDB5TzYtPwlXKqjp3YsnlyMc6NniLPiaO1oHiHsUzgxldxepMIox2/js3eNvaOzvXSbMbamulY+jw6tDQO09/IrTngmR1O5ZqEOkqaLK4CDft5KBgkAFFFQZVWfIDIggSIhrZLKKY11lSCJBCKU691UVXMGq1Y0S4DgoZJdRFBQIIJCzQBfRZqBMo9iyuEefQqVWfmDX5wjWC8rNMIYakF5AaxtyTyCsMOE691LKzM13lEzgEhpYfADoauVw1GvZ5b30LfGRteQePEo0dkUi2NjbSnAClTSocfapBvMHNM0cbXODZ3NLdpILXm1G0PHkpVNIkdM0CsYd4aVpR4+q5rtDy5rLUjcdPY0h8jS4nb5by7wVbzaLVpzRW1gEwoQ5sxbQNeKkkdteKiNnA6ciwDQNRSi1MrwN0YrucL8zU09irU2V5IzTcyrzXup7FmtwsSscQx9B837Qplbp+AyNaALebfwgHa/uB4q4ZJc4F26CQgj4mOFHDvHEIuPyySQ7q3YDo5hDmkns0VSaqU7o3u8QY5/Co2OUtdfWq7nvgIq97Xm4fapb38fas24a9cxWy4mOLJNoD9Q9goD3t4FZuFmtUJenPEu+Lj/tlZX1HDLmMePKe+JwNag1aO9alc9tMtpD13qDS2KYACnxG47TzWps5bdbYx+o5WOa2SAua7V4N6ady6Tdi9Sy/rWDI0b37BQgNeKjuDm3Her7Mf10iZk4iE2M7zGC7WAiteW7iewqod07NmAJmrUkN3EFpJ1+E/Z4rprXLeLjckODwa1j0PA3Vtc7ECSruQWamEiSmizRHmlIB8xaEGTtUwlY16gcx4oga14VgJz1QJeiKrnkrbeCnuUCXPFLoFOkACBL5wsmYU6YLNUp0xWVB5x5+xZXATPenFVZVLrORIIQ5jvEwPa08i5tBRKsaDHwmiMNY02+Kn1qDVVqQyXAZ5Zbso55qzge81Wa0RLiPZEPFUg1YBr7SrlcBihcIgZHENbalQNOKza1I3WL1NzWMdLLu8wEFzanwtsNxOt+KmVmrawPgc7znMBlZSshJAd96prRStzVsscyE7otwDhXaKPb7wpGvWL+PNI4fiVbw3AXB5UWss+q6yRu0B0lb6kGvuNVqX9Us/QqVsbh4mB1ONaW7lK3LYU/ED3V27mu4E0d7+KmMrNiC2Rldw0NNpBFuCky1cVUlDJy2Rri2Vpq1/EcKJnLU1sSHy1JdtdJU+NtiexwUzV11hco3gggENtR4pQnkeCXZqag8trgGmr4xenEdoPJTK2IOMA7c24AO5rtfchAmJlPMAqBah1qOSyvPgt8QLjU0BvQrUZxURwgAxyNDmOI3D5luMbRYOJSOpo9jbAgaA8wrhzyQYm+FrydnO1Ow80wi3j4TAHPY8thNNrDU17wFuRx2rYY3S84/iOIDmt8JNS8NOoPBdJrXHbaD8mSCSQyOqQA0UqQB7eKrnb+C/ONda0WcsJ82vFJIMMgAKRQeaEyiDKjLBKFA1syZUbJkDRIgkSBAhxXVoiRxvdBVkkIUFeSY80TJDpSVmgC+mqzWoU6X3KYbAZFFAZ9ptqFcCr1XIAYGAbt7xRvGg4hSkLORHFGGRghwFm0qTXSvJLWyvzD2t3PrI86OIGvcsNSAfkOe5zTRxNtxFBXk0BMt4BDiGV7CWtNAdxJoaHXsUy3I2LcKkbdkdY2NowdldVK6axsMHCMUcjnHcCAGtIqASalG8L+PSFz61jJG2gFRXgs5auuV2FjiD4qGlwL0PBQsGyWUtLdzmuFrG9eYVlLoY2eUgEvBOm79qs2ZukBJM4SEkG4tatafIlpNRCZxAaTUakOsPlT2LorZLQQG7LD/cafoTZ001D5ADi51CbHl71mt68GTR1aKkiutRWvJKsnJjISGirf5hyCJfJhiJNW3NOOlO1aYsLGKA0h1Kk8Ofcs4Ut2GKgmxPFWJWDFJFB7Rw9i0xhYjwyR4dQNOBHKi7azMcdlbKxomG9Q12gPPkrdWcrPTaAEClKi3ELWscd3Q4/hgdG0C9av1qedV21rzbtD1WRzGuFz4qV43WN4jVGejqVvxXPDORtnJKNCdNamquED5wCJQOnumUCMi+tlnCGtnUU6OaoQPbLXsTKmB5Ki4RJovQKk76IKT3Em1kwhTgSsgdqilSBZblV31rdRookkqyBbjwCQta+fKb55ikAd5YrUmlCDZteNNSs1qKwz3yyEQts40NrH6VmtRJkkrQmshNKaAcFzy6Q6KBzngkgngW6exV0kbOLGJjDG/FeoGildZG6wsctYYm6V8RPGimW/VsmYhbTxacK6ISMfFcbqBzjXTgVm1111PjgDdu21KkHiszhrGTZoCaTM1cLjjULV/LGv4qpLDJsBIIvcfKstyAh0LHAugcbHi081cpdfn5WGN2ONHHbrQ8xzWozm0TmXAAvcW+UhWtQUWO07TwFtyYwuRnHo9w1a34QptE1pjYATaoTBTY8YgHU/SrhKX5VnNI8Q0qoCexpIB05n5lpjBjYG2JFjqtyMJjZtdXhWnsXTVz2ip1KA0NBUnhzW9o5/CpiPAe112ubbade32KRjZ0uM5jQA4WFyOYXXV5d45jr8tJ571DXhwFaVB4qbeWccNG2fiX+/VZQ2OV1O9Shm/tTCAfKAEwlpTpuSiA8/tUIYybgChhajmTCrMcvas1YsxvUaOe0ruKk0ZNaK5RWdEplEeVTtUXCHQ8gsqU+CyiqcsBGiLKrOiINFVImcyGJ8rhUMFQOZ4BMq5E5eQ+SR7CfMdaSU8CTZreztUw3GwgBjiDWu8yZ1nuNx3NaKLnY1FqDzHeKQbRWjWAUt2ALLrGyxcUAb3G5uK8lG9cNnhxkEOAr9mtrrLrrW2wWBsljvc34qaVUdGzaxrm11rYjieaVZxTxAxxuL8lK1LgXkWNqc1MNSjdBT4RRvzK4TPJc+G6RosCefAqXWtTbBTcHaKupSlNo4pgqRjFlCdb7R/xyWozlPlNIa3aLfDy7StBkbA0ig20dXbr8isSnCMmh9teZKlakMjjFK0o4LMWn+WNtexbkc7QGFjq6dpU9WfYjy2g0Pt/ckLRgEC66asWAJq+nsK3GKDNYSwADxcV1nhwvlSxcZk81Adsoq14510+VMOdq67J8qKN5NC4BruwixVlc9plzPqPLq+VwNQ4NFeKXy5Vz/nNDjtdUV04qYZPhmUU/wDMdqIEyk6KIBzrIhRea6qYIYx5HFFW4pbdqYVZik07FMKtsmClitg9zQF1FWWQIEgiqhBU0UIkMUICRoRpWkYiKz4Q4oZaf1OPK6PJsOx73saHVvStSjU5cN+Z8pw3+MucXCMc+blcZb1bbCMzg1zgBU8NVxrrHR4eARGy34hFdouR2rOG5WyZA2MCurdCbkrWGtViGN+40FwLk8Fzrvq2GIHMqOBuCePas4dG3x6Oa2luajWD9pbfjyCgzc83uR2cFVg/MDSBXn4rUVXA2vbq5200qCdCFvVLllWmtwB86YKh0e5pAFwOPanqsJewtNA2t9eKXVZYNjKu1oBr2FMMnR08s1O4tqHHiCrhMpjdpx3cVI1aw5FGi1OATLFiHS0aCaNro7gmUYwlwFdeKmTAtp30Vl5Zs4JcD5hrai6RhMrWuFRYjiF31ebfyoscWZDXOG2RtKPtcVWq5EeqpvysAfoyR4c08q3IKzvWdXKZmT58Mjgaizh3EqSufY1otdachxyUv7lMBzXqLk5pTCMfdAAZepQTS9dFFMY81QWonop7ZLhMI2T314qtFauvogGt0BAhRRbwoFvkRckk1KiZZtvdVXO+s3j8rBAQC17y9zPtbRb5UwRwjIQHFz3DaTw96trrI3/RjvnjGoBBJ+TRcrHSO5giMcG5wLJHGoNBQEaW4lakX5Q2MbqNqHD4nm2vOt1mx1kWMeri5jRtHyLnXfWYXosUtIqK1posbV0lbfFgAJHBZirZia4aV5AWW5qlpD4niznAM0vZX1T3hbcR3iY0eI3aHWBI7Umi3uLOJKCAQXEfCaeFPStzslQBOzdvuARQ6Xp8qsylsMZO1wpcPFDU/ItxC3SxOf5VTvIrfkTol/C8+TsUNa95c4a0IqaU4GhVkS3gqBwEGRudR3nPrTkpPFL5n7GQmh3PBBJFQeAXOJttwuMfj1o4hoP1eXaukmXLbfELnlgcC2NzaVDS4c+A/wAFbMufvjyJs0VA0OG1mn7T9ClkWbYEyWGXiQPvWPes4byHIYwuaajTXmFqM2qeTIWNN6AWPBd9K4dkawyuMxD/ABxm1Tq0rbkPr2PLnennRUEsrCQ3gSY7i/MgqYzMMW8vOsbLYxzI5H7Y5htYX2uDtIPaHChWJwzuvOxyNVuxxwERO5W4KBrGFA5jeSSBojJ4K1GGMoMMRosgWsNdEU9oICCGvduQy2rXElGsp3IFudS6FQJLqGUOmA4qYXIPMJSspaVFyY0VpxWiOG9e5deoeVE0uEbWNdTVp1+lWNyOfjwpN7HsNWGjhW1AexZ2rrI6PozWDIB2bWsNXEchyXOtx08uW7wtaC0hvhbxutN6weLkAv2Aiou4C/vKm1w7aat1BiULTStbk9i411Xi0tY0tAABA3HlVZ2WLjJGhvhcK8SpFyibqLIKCRzWPJozcQF0y57bRSzeutjb43NFfg0urlmfo1sHqrGdP5UkhLjfyRcW+yefYpLlbFqP1bjR1Ejy+Iu2AOG0tvatVqbp6tgOswZGO5zI6iMHdC74weFOYXSXLNtla2WYCQSNJbHQF3t1WPV6NN/hOLktnzJHNb+FGxrX0s6pJcKK45bzic+V9uU1oL6UDLgmxoewrTFUMfqMbcrKaTuY5wfStjuaL/IpPNZ2vEV8zrcIDWRvIfXnxOhHMqTVztUJ+twYUf4+RRjPiZG7dLVxvuPDdxK168OduaozerpJ2BuOzZBHaIO8LQOJcRqT8yzbxiEnPK307qkry2WSZ0sh8LGsFAB91g5cysN+roIM2WZzQ8PuKUbQkdhsqz64bBrpG7XyN2kAgRE27NFT9g5Ia+F1G0dSvMLp17JtK0kUo3EEE7vDTmOXfyXaVw31baMyvwJGRuG9u0xvPwl2gP0FX5ctnj3WGNk9TOjJpjvm88NLSRSQh1LaUcFL5YdlJiVea9/vWcsAOKdKIify1AmRjIr6K5Q4RHkoqfJITIMQVCgEQCuiCTDwCAPJo5EXmsJGqjSfLKBboyqYA4EaKBLgTp7UKhoNVAy4QNjDuKo8/wDVM8EnWc2Ikse02ewVIFKVI+tVJHWKGNG5kLY3uG5hqwk2cDxU2b1bnAm8pm6oe86Ht7VjDq2kD5XRXPgdd0p1JWmtY3vTIYwWkCm65txC57PVrHRwRjY3vFSO/wCZc2qZNLJAC1gBe4mjnAEDuUtwzjKpkZMm0Mc4bq1IqA48dCklZuPhqMwTzAsjDZhISS11Xu/zWXT1tJIo5PpqbywIXbqjxNY4uY3sFVv+pn2jUZfp3NYC4McJNd4oB3p6GWtyW9bhBY4l8RFHNBN6fSrhJS8P1Bm4MhrGRUbdz610pqjflso/U2RIPA0yE0AjGriFFnDqehuyHQhlN0zjvk21ruOgHY0WUy7zGMty/Fy5I5N7fE8HcwkH5FrNrFk+HF9bjzsOcuiaXxOGpN2HXaeY5KYc7w5abK6vkZAZFuNDQkGgaTzK1I53dewvT2W93/VPrvFSxzuPbzVwmcuiw/S+DJtJkAI0FQr6ynMb3D6bgwNIbOKs0Fq+8ha9YZraQSBw2xyNYHUq8EFxHYU9WKvsEbmmxFLh+psuVi8lZLCHBv22GhPMFZ1uNnTzHMSuLcuQGzHUa7sqbGvzLvHDaN3A7zOkTPloJIyYpqfaGjvbqtfDz7eXl2TNMOpy5EhbG17wAX6gl1XHuvQBSVmzDvDAPDQECgpVYtYT+XB19yRUHFCZQDca+ntVTBggoio8nsREmLwqAPLKILyeKoHyrqZFhrBRUTtsoBLKoESR3sgWYbqAmY5UyQwY9SijMTo2GQatuFYuXlPUsZh6pk5Mb3GJ8j3sPBwcbj38Fc3DrqZjwViof9MfDXgOQWLXWL0NBtLhUW8uP7XaexJGmxjZkZEgYCXUFTSwFOHIBWuujrOnY7toYdCK24e1cdnq0w3bC5pYKV+0R+xc4u5mS8bxV1HaOaOIOhCl8sfChlNiIcJXeEfE6gC76aOft+Gj6n6r6P0yGss+xjag7tT2Ci6y/ES6/NaB36s4UdWYuMXtpXc/wCmtgKldJNnK9mn5A79T2ZUId/UMbGDyGgNidIGk2oXE2VulZ/t61aP1J1d81YXYufHq4RFscpGoIa+xWfV09pYPM6p0rLYfPa+CYim2WMgju+qs2fkhHpKGPKzZoyXSeVeN1doDT891nbVvruXrPQumwtjqWgGgDjwKxiO3s3nkhsRDKNA0oNeaRPnlwvruP8vhZWTUhrWF5dyXXXlz7LiPOMTNz2Yrp4GtDCLTS1Yw9tTdx7AtvPM+WvlkynyjJlx8zqzjwY18cA/hApZJGrtj81kWd6gc8Rs9MvjjNfE0SnuNSQtekc53b2/6rmNi+tJx5uLiZOLJoWtkdtHI0dVZ9Z8O3vvjldwvV/q7oko/reJXELgwZbQPC46B4Fvas2fhPbP+0eh9J9TwZbQ+oL9PCaNp2k2WLtlq6Yb1uRJkBgt4BUtFaAd51XDbZvTXDneqRhnV43tO2tntPwvY6xB7l6dL8uO8wvySiDpvUGm7tjanmWkbXd5C3t4rzTzHn+fiSZuW17mN/LxvBYCaEvrUCnFY1No7uMtLGEHd4Rcdym3lxNaAgMtGi0A2iqGE7UGbEMILLIgWx3RBeUiZCYvegYI7AKA/LsqBdHRqKUYlKiDDVQMbDoEU9mP2IQrqkbWdOlLgSC0tsdtyLGqrU8vNtoYXsmbuYSXiN58BJ49tdarFr0aygLsF9mUb/wCWRUexR1kOxsaOOUGVz3vkI3P7Pstr/gtT9Uroen4rny2H4TLCMfCD/wCIpXTWuhhiMIYDppypyXDavVp4Wnzw7d0v4ZaLPrQA86rla1Y1WZ15uMKO/wCpjAIa9pFadoP0KzaVm9djjfUXq6QQObiMdLOf9OINNe4ld9blm3HgXTf0t/q4i6n1TNOXkytBfCLMYaV2NFdF202/DhvrM52bf/8Ak3QGu3SsldUFtBu0I5hdM2JjS+ZE436P+k47jp75fuuJDfaTRazfzWfTqnxGwk/T7oLGB35GGNwG1jz4ntA5FPVubzxE43ROjRkYkZLm1oWCrweyhrZYsjXP4WMb010/Dy3PghDGbNGWuT2Ljt5b0jpumigaxulQDVZdPDbPIAN6UFDyqtJK5/ruDDlh0MwbIxzSNrhUX40SXlnaZjRZPpmFkkZgx2SMaA0Oe6m2nAVBC3JhyFiYsDJD5pEQabOZI2vyGi3lcfhsPzfSMcVdnhprcnZX26/InvIzddr8BHU+lSk+U+TLIuGA/hj+KwCxezKzqsBmdFh6xCY8jCbLA74WSeGMdwN3Htos+0X+uwrB9B9Fw37+ntDciG/kTOc5nMDaT4e9X1iZsWpOr1PkTh+JODQxuG5pp9l2i8/Zt/h000+fLXdVe0z4pINXV2v4Ajge9duu8OXZOVLPzH/lsgVqDRrmcwNFrauE1Uo4mOaHG72tsO2lKjuVjNXek5Ljj+S+pdBQF5+sDf5OKmzhtOWzjkFKqIb5lQtCGuVUYKAwFGUgDkqVjW3RB0CCCxEGxllEyIRoqHsQyDyqkJlBCJZWHRw3RVlkPYjQzAxzCHCopU10VyR5v6txhi7T5NGSOJYQKAE3DQeAK5Xy+h9fr9tcue6c2UxPLMVsRZ8RNagczwr3LVaui3hSPlLnS7msYaFx1dy28uVFcsWY4dd0UOa1vmtAq0bIxr7ewKpG1le0U3WJoG2Xm2sezr8MGO8tJj2yOHwtcfCO0rlY6ZOZ0prmNOXO6UvuMeNoAJ7BTcQkzEzL4hX9C6VA8uihjgncD/pgOeK99brWcEmVaTFzIAX9PmbNPFrCAGvIH1bVC1N6u3XKqZvqPq2I1rix7GSgb2SMexzT94NqKdoXfXvcdvr/AKKT/VXV5bebCxrrANc55PcKVXSduflj+mT4WMWD1PnuFYtkJIJkkJbUdgT2tax+HSYPSMfBaQy8jvif39ibbLNbfKy6KPeCPjNie7ms45a/5Dxpds4sLfZ5Jss1zG4Yat4UJsSrGGrn2umO7gafuXL5aA8tYfCOe4HS63N8J6ZarqPp3pPU31lh8iT608dAa8KjQq25WaWKjPQUUbt2NkxAcXeSN5HfVS2rNZ+rbdP6PHhACrpnirg51NfutFGiixy6zWTw2IoQHSXGuhr+5ajG0/Ctm4n5mJr4ZTHPFeCY6g/Yd9pp+RYv6MS4vKvIZMjHpNEGztp5sD7jdzB+Yqe1sS6SXhquqtDcnBDyGtlc6Fw7CKrr1uHa0fVIw3L8sHwAjfXsC1v5cNfBTGOA3trtbZjDY96RLF/EgkigMr77yHVIvfn3rXmPP2HiSh7OCjmc2UWr7Ei5H5gqtFGJL2UDmuqqZMF+5DgTR+5EFS9UGEWQWGxgCwUZTtVEGO6gkR9iKNsShDY4wpap7W8lGhPAETzyBsqOQ/UDGlk6SY2xeZCA17nclz7Mvq/+NxcxzPpXp5njnDhZgAJ7Fry9HZphdyOkwYbDkzObG34WxcDfUpeHnuLw23T2h5Lydoj+IjXmQFry5XheypPA2gsdK8e9ebd6eqK8UuRC/a8Nc5x248DPrOPFx+yFxtd5MttDJHBG+R0u9xFMicfE4/YjHBtdFqT5Zszx/wADGY8kw3Tt8mJ3wY7abyP/ADHC/sCslv6L48c1aiwWtaNoDWt1a2y6TRbujyCJKbWtDjV1RUkdpKmGodHixNJOxhPA0WtdWLMikdRoLWguFKHku0wz6lbdwJrSvA6mqe2TwrTtlfUijfq0OlVjNThMeOWZLHNNSRV44UFFrf4NLxct8ImeXcD6Vr1c/ZrMqCkzaCgJFeYBWb5azwQ2SB7trnVJ0pZPXJmyZNjYODQRe30qTV0m2VhkT60AAB48Vbqe0C5jmE0FjqSki5hsbBQuAvS4C1IztSsiKjPCO4dvYue0Y+VCWS9DobVOoXOrhzPqTJEeNhSyDdtyGtceTiaArppeHLeQjr9JOqROjA/E8NO1tiuvZ5ePSG4GLukfuG6gvXQCvDmVIu9xFnqbZGNhjIIc8l7h8gqtV5Nqqi7qDuUZMApZVWF16JlMmMJUotR6XVyHNQMbXQqhgagJrKlBZAss5ZTtTInamVwwBAYbZZyGsCNQxFSaFpHOyK0vW2vlwJsYnxSRloB4uZcfIs7X4e/6H+zQ9AxPy2C8soHTBu7+WoKlvEfR7udnN+tZJJAxoaSXHbHfTt5LPy5TThu/Sj5B0+Nk7i+SJnlyPIsX059y6yvLtq2GZ1FscYr4nkhoa3mdLLy9mz0dWoI2yN8T31ypvCDqGNOvyLnI9ErdYe3aKU2xWae1dY51ebJucGC5B8bjwXSRvWYmWwjI23seS3hzonMa6m6h5DSqvqTbBUrgwWcOZuljUuVSfIDSBa+t1PCud636obh0YxjnPP2KEmvLktZjGB4fVc18bJXwuAeQb3oOVUzhLrK37GkUc6wpTso5Zs5NVyLMkawBzSCRQAXC3lLpKJzWvhLybjiaqyMbXlxvqHpXVMhzszDlMT46kR3IcPZyWPXlrXfDU9A9bUaMac1mbUOe47RbhQrXh0mK7PG65jShgD6G17XWsw9K2XnRSsG1wvyujE4vImytAqNflUWlTTN3DhbQpWJ4avPH4TnjVorbU0XDfVZeXOdSla/HLj42gmSlLVGinVU7IQ1zsvAY+v4rHgudxAPH9q7+Y8d1xW7x/Ix8P8w81YKAa3ctauXbcNTk5Uk87pHWJ5KW5eVMRUDw0lVQOFHUTKGRin7EFmLRQiwxaIMWVBtdwQPiCCwAsUTRSIngisATKJUtWDDgFFjN6qoMqK1fXsqLHwHZT/8AZcw7uVXBtflSx2+vv67y/BUGN5LpmRXY4hzAb1DxWymLH199/bFcn1np0uX1SOOjmRsNX01txCmuudnScauowenDG6PHE4eOpe88yT+xdL4eHe/yaOepy/Fz4cACvFv5err8Hsc58riw+Mja09pNFMOvhuYHMhjZFGaBoAO7j2ldZHHzcrMOWxrzQ0tUnhZWV0xwux5nMi49vsXWbM2Fz9TjrYm2h5K+yzStXkdWowuj4Gjya2UdPX8tB1z1KIYzQtDjrITenAALNpMTy03pCXJ6x10uySHY0DSQwjUk+ED51vWYcNtsvRHzYsERY47aC3eFpztW8bKiexr9wLCKd5WkzhL8iDzSWvc0mlGm4BSx01lwsvz4I4SxpDpuRNKVW447S5/RSZ1HFjYBIQRU1UynNeYes+jw/wBZyczp7wBOGy7Bp5hHjp36qbR01tUOjerp4qY8ztjmeEg3pRctnfTd2vTfUD5C124BvIarM2dLrMN1B1beK76DUOVmzndYYzPElyaV0Ks2YusSXteyjdHAih9ymznWkiZGcZ4eaBrXNPsss9U5Z7fhR6QxsszWM3AAFpaRSprxXaJtpw3HVA6PpsUZaKmSlD2BavEeP7M4jUsYNVh5ThQexEOY6yEYCN1UBs1RDozySZFhlgtAwSVQyNvvQWogBdQhwXPJhIQYdVRlVEQXUUakAZEyoXS9qKAzJFaz1DXJ6H1CAAFz4H7QdKi4TJPKr0Lqjpei9Izydzp4Wxy9jmeEq7fD7HVjbVcycKWXqbciOMuhAO540utXiuk2npj5NEssb/y2QaNlr5TvvcAs+2eHDs1+Y0GYPxJSLEA0PavLs7acF4mQRteW1Iq6g7BZZ1rpY2QefKbuIa4gA10BOq6Scs5KbngVBptbzOtFctiPUZA0Euo0XaefYFWsxrsrrUgDvHsPZxTNMxzfV/VLoGEBwaTrS1eS6a8ue++AdF6S/qRGZmtLo3GrIz9KMzlt8truhebmYrah7R5jY/q7dCFeVscX1n9Ts97vKY10rq3pb3lddeu35eXs7seI3Hp79TjPD+Xna6KYNp5LzZw5tKt1sNO6XzxW0l9fuc4eNzQAA0A1oue2Xp17NVbK9aZUG+ZjXzul8MUYPieacSdBzV1lrHb3TGJFLpOd646hkE5UjMaE32x1qB/Mt7Y+HDS2+XUDDd5G15Lq23Ovrxr2rFemYct6i6KWnz8cGOdt6C9ewrMYs+YqdH685j/Knq17T4m6W5pdW9ex1uJ1cOa2jiKfVGqmG/ZscTqUrnEOcS+o3VFiEhW6xJTUE/AbtJue5ZtcdgQYhly3QtNAX7iOzVNZyzttw3BwImRGZsbWmI+PbqQF6NHK1q+v1LMaN1pKGR4/i0Tfw8v2POGoJosPNhgeiDa+negIE1qgNrr96YQ+M6JDK00rQcwXQPYAEDmOCgOqmFTVTwYZuoogC8BRS3SKKS6ah1RSZMjtUy1IUZuZTJIEygi/GoNe1FaH0WRJB1Hor2hnkzvlwz2ONbD+JdNeY93Rvh2PQWGOEzZNWSElm0mx28aLUnDr283gOZAzIdHNMNvkuLtx4EfCvPLc5rd8WRy/UCfOf2A2515Llt5dNfCphkiItPDw1OtKrK5PzpXOY2IV0o6i3bwaqhEoYBwOhrUhakXLXZGW2KtXncOGvtNV0mqXdznVvUG94x8dhdO/wtY06k8VuauV3O6P0OYZIyMtokmGgIqGdzUyzrLfLuelRvoDSkdBt2gAkKO2ZGwmijc0M2h2+xJpbnZC7ufz/TuFlTEeTG2lyWtFfatTOXOzjLner+jMWQOdHRrm6ECmnJPexx26pWkZ6byQ6j53Fo00r71f7Mp/W6PpfSIovLDgTzeb+xX2WaurwMWjiGxhwpQOpdTLXhsW44JPmg7CK14WCsM/hVyemwyB1RRrqA07qq4PdyPWfS/nh3ltLJmXgkAF3cQVi8L5aPpM+VI50TxSeF2yQE/CQpY6a7OjxeoZEOQxsrXE1FO32rO1ajsMZ1Yg4G7zX99FnasVs8B2zOB27jtr7FvRy2mW484xvMhaAw2LeC76+WfXjDnOsTDJzXyt+HRvsU3vLwdlzWrkqsMUsEgq4ZqQ9Eyey4UBXqgsR8EyLMdSrkwsMRTQ4iyZQQdZIHbllUb0oB0tOKyhRlUypUkyzlpUlyEaiu6dGoHzTzQwkSHWtuauByI6izpXq7zy8sBl2zO1rGeAC3pW9drrcvSDnRTTBkLwYxoeYOi6b8vf1zjK3KyN7QXmoGpOi47aZalw43qDmfmZHNdVlw087rz7cV2ngnG2mTS1xTtSMnSNYXAutergeyyjWVTNc8skfUNjaLt1Jtei6a2phxXX5siKAljTsdQMb9YntK66Oe/EN9M9Mgxfx8ikmU+7ySK9wryTbbKTXE/V1WD1LpLQdsjXSAnW1T3lWcM7NvFmY7gGx0jLtCORTKxsIgx1TuaXuFncapKWZV8iOjwwDbvOo40+lXLUirL05snhdJRpFaFLMorv6HhNq9xBDSaCuvasetbkl4Px8Xp8TTuIaXAUaNRftXWasb8eF6LN6dC4Bz6nRxB1IWpq5+Uz9Y6aWOG8NdxB/wCKLXqknLn+p+p+msYfy84JYKk8FLEvHloh66xZ2eS67idWg++oXO5jWtmeCIemkdV/NxNIZO2rxW3h0XO7O2k5dpiwYmRAKsax7RVj9KU43V8m0xViB8LTsr4xxpw71mxm2rJ6lDgTtmmO1jm7Ae41V1uCa+yW9bl6jIfy3/at1k5nkF1965d+001x/wBQZNCUj5ahKQCqiu591UiAT+xBZhKgsNBJrRRcrDAmUWI9oVXg9pUwqS5VEGQAILJKxQt8lFDKu+XtUySEvnUqxWlyKcaqNRTknuil+bpVRYnzUysQch3P2K5WRxvrRhZnw5DQPxAC53dZb6/K0XSPU+VibRI4vaLB3EU0Wq9PT3Y8+G2k9Z9UnxXtw8eSah2l4FWNPeuVle6dul5gujzZLulx/mHb5w94c7hd1fpXPbXFTXf25XYJKPNTUmwCmCrUp3MbQ1pWlVLCK8kUj4QCQ61CaXJ7a8lr4ayyXoMOZA572tkDR4a2O7uWss1z3WvTckj/ACyXQaeW5puCU12xWNtcxzud6T9U4MRnwX/n9t3RA7X05gce0L1a3W+Xm203nM5UOmetevxTOxX4cgkjaXPjdUOAHY4BbvRPiuU+1ZcWYdHg+tMvIONF5EzZsm8Eew1fxNCO5c/6no17pW1Pqtzsl2MGzNzAK+SY3b6BWSL7z8hi9SSSZEsMTJ8iaJoMrA125hceIIVnrGbvn5NZ6jf+aZiOxZHZU144HAhz68QKaK5jft+q11bE9W7MJ0XTw05U3lNJfWlRVu+mi3bZ8OH9utzz4HF6J/UCbqzunvy4sbGYwSSZLGVB3cBW5PNPTfxhj/utcZcjnel/V0pl/PdVkx8VvmllLF5jdtAAFPi1XSdd+XLfvzxqz0d+mXWcrbn+o8iSDCruZhknzJBwMn2W9mqxbPh16+rb/qvP4djJ6e6eHBkWMxkYsKNHBeXs/R65rhefhYmJjg7SDwOpXLw7a8qvmFvh3Hcfq6kpC1Zx3u3ncBU0t3Iwt5WHg5uxuTEJmxnc1rq0rzNNVrWPJ9jt218XC20xxsDI2hsY+FrRQD2LTwXa3mlSSWK1EUZjUrUQnbdaUxkdVKizExQh4F6IHNI9yimNdRMkgvORQmfkqAfMiVfc9c1IlkOiiKkkqgqyT3Rcq0kxPFRZSC8lRcB30RqM3nmjTPMsi5c961ax/SRMdYXW/mXTTisuawpvOhJHiLDXS9ORXTaYrWrtPSePu6JkVHxTGvbZSvR0nxwnHhkZQ/HuZ7RdceyPV18JZIxslDc0BPeucbq42USM2toXOFK8u5FwPHY4OaHuLho8m9yrItq2yaSB9JK7QbOFwSeS18rLmDy3Mma15A3gWGp9qZYwTBF4wTRpqKNNjVR0s4W8npnR84g5cIMg8O9tnjhUO7l203w4ba/HmJxfTGHF+TOJK1wwXF2KyUDc2opSo4XXom9/dx/p6/mWfs2zsadud+akwGTPEflmWJwDnCtakO7l2nZM5scf+y1sxrv/AMVnCmwIsvInlwnwSShgkeWfEGCgqR3q++ucsb/+P7McXXb/ACbP/SZc/HyvLJkx2Pa14abB9KitOxX+OZXKfU7cXg6TqGMYmiCGSVzHtc0BtLjtNFq9mrev0Oz5sn+WHI6jIS7wYrHN2lzzvcBWtaCyl7vws+npr5vt+zSzwdPx8hsjj+amaKMfJQhg18LeFVw33t816tNZJjWev/NVyJnPcSL15rhts6a6qnlv31rYGulOC57OlqJYJJjuIG2wqfnC54TKtLAGOLRcN1JNfce1b11CvhrSwZr28dUsD4JTs3H63zK6zh837d/lg4yk8VXlLMisAkVKogs960uTI2+9QWI+CKLijOBB1OKio8z3IIdKFcNFOn9iuEKMtTqiVuXPXFVaZ2qIoTS0VFN8h5rKlEmtVFQXJhQVUagS/t9irWQOkSFU+q4wzOnzY9KufTb3grX6oqx+n4Yooi1gMrY9j/vDlbktS0ldR6Xw2x9Pkia0Dx7izlULb09Ceq4pjgc7iCagciuOz1RoHP2mxBBAIA5rm1VrHymgXFXPtQK4XWrpmfUNf8Rsacu9VunxODi0vI8uh3E6j9qF/RssXHidRwbVrxQE6H28ksYtrJsVo3BwvzpXS+qljrrsB0RABBOnDmmUsIfPmQ+IEkA1BHEcwt61mxaxfUk7CxhfqLtdrZdtd6xdYtH1cNpEjQ4A3AoLdq1/ZVnXrTG+r8BzSG0bUX0qtTdm6fqh3rCAMGwMrS5JAt3K/wBjP9f6tXN6lkyj+G8vJ0oKH2rl7liceGZ9HuFXnQH51m1qLOzxgHw86E0WctxHlAeN7aAHaA7Qj2cOSjO1RkEN8NAAPsmx4hMMytdmOJO1jgWA3J0BKNRQe87drSDXXlRKtpwnoA0aCy6SYj43bt7bWi/MXSuQhIarINryqGN1qrlTWAIpwFFcKwuvRXAAuoKcEAGS6IUZPl0VC3SIZD5iJW8c4UXCNKsz7FVGumcaqWIQ/VSxchUaRSyuFhT3cFbGoAuTC5AbomTYxsFT8Z0HIK4TK5glpkaDe+nOiuqSr3TMhv5qZmm9rXAdy279G3Kx1WDfBIfiDm1HeAuW0e6VxU72iS40FyPkoubWQCZwawNruBs6tLcEiSrmNM1zA5riSNan51XSL8UjWAh1CCa0rUt7CmDLd4MzpG7WmvHW1EqVsmN/D2v+tpoaKYahUkJABu1za/DxUrc5LkgLhQtuLup77VWjCjl9HjcxwLRepN6a9uq3HPDTTdGe0bWSVcRapq4e5ayYqqeg5clxIWsI1DS6/YVcp6rON6Wc143vkPIbXEV9oWbhZrW/xOnNhFY27i3SraEewhMnquiOQm7TuA+qLV7UyskWo8V4YN96XcOXuWpHO7TPBWTEzxVoGuHh5W4UWbGfZp8twANBU/VB4qNatZkySbQX3Y6hAFrdvJPhrhr2ECdz2mgFbfQpOa4d+/rqc2S1V2sfJH5lO9SoayVZU9j1cBzHXVU9jgVQzdRVUF3EKhb3qGSnOCoW4iiIUXKpAtdxQb9xqO1eeKrTCyopyNuiEFtTfRSmWEJhQEUTDUV3i9Vpcg40KuFEGAomRvj2UH1uPYiZHE5zXBws4XCJVXrPqPp/QscZOTIBI80hhHxPPH2Dmumml2qTf15dHh5mNm4UM8L98czA5pF/C8fvXPbXHD6um2ZlyfUofJlkh2gGN1Kcbdq44dJVB58NvC4XpwIKM07DyX7mhtnmodTQjijcbiGGMPrQSRyNv2EcKphrGV7p7jjvMVqPu39lUHSYliAS0jaKjirhMrLomFpoSaaAJ6xvIfKaQ0AVApY62Uw65NDYt/wgyOttND/gt+rGVpsbbHYA37QFyt+uGPJjWNa4N20renYpMJhLwC42NONFpCjGC4F4sbbufepdTITBEHO3CgGjeXG6s1ZuyHtYLi614c60ubKTWNpDS29XHl2rnssrRyFs87nO3CGIkkmwLzwPYsR0mWrzJy6WpdUXFafMpaUhj6sFqFxqe7guumvy+d9rszfX8GVqtPLIltVcKaHEFTCHRyXTCrLHVVwhrSVcLk0EoIc5XBkiR4HcoZV3z3VwuWedUIgDJU1WsIHddMGXRnSy8ykyAGqIqyNQILfF2IM2WsrhS3toFcLlWeNVcLaVS9VcJk+JxFxqgNra35rNhCuo5eN07Anzsi0OO0vdzJ4NHaVqS24TLw/r/XMvq/UZM3IPxH8KPVrGDRoXs11kmHJ7z+nHprOj/Srp/XRVz3yTyTwi9MbftY5g+7Qk9iz39OZ7Ty9P1O/F9b4U+uMEr2zt+t4TQ60/avnYfUaYNcKiulw2ugTAVHWLJArUag1t2hMEreYORHsFCfLJ4WIUdZWykbGWiSJlHa2NRXh3FTCZXMHN3EOHhdHQDiSStRHRYmRHKxrrV1BPM9i3hlM8rIngudTfQNrarvYr6uktA5kjfGwNJ+7ao1NVqJ7LUOU0gNFRt0J+haQ0zk3B40bUce3ipYgTkyNBDRuc1tLEcUwXFIGXRpJeC5ldzBxHCqqXyiLI3uMhaWuIFGns4qRnYrOzBDDWt6kin0rVc8ufy5y93ljwOkuXuuGtXLZrVrM/JkiiLWDbGBpx3HjTisOtrU+KWUMJt9ehtTn3qzXNw4dnZiWrDY/3L0YfMtF5RJCYQQZQXCYWpor6g2MPOyYFmOuh9iYD41MIcNEMlvKZFaWtFcKqu1SgN5BoQkBA8URN1aOlrZeUA8KwV5G0QpRbxWhmwkK4CZGarUWKkrdeSuAkhA2FlbLJVpkZqAojzH9UPUDcnNZ0nGfWDE8WQQbOlPA/wr09OuJlz2rz+XR3cuyR9zegenx4PoboWC1o2RYMDXNIsd0YLgR27ivVY4yuA9dek5OjzmbHaXdIyXVjfSvkSH/bd937JXy/sdHrczw+v9b7HvMX/ZwMwcyxGtbe1eSx7ZSJWNdGHAEOFg3s7VqM7TFNxpmtJDnbRQba2vxSzLpq3eNmOMYZTdFao4rFJE75InVjJ2uO4Em1T9U9qsYq3i9bLXChc3bYg9q3K3q2Z6qJqPLnNaLOHI8z+1alavAf6m2g8TQDYsabd9eCuU8mM6rEQ5m1vgtsJu371eXcrK1Pyk9Yc47WvbtoBWtHVHLsRDGdWgx3R1d431Ba08uCcRLmylSdag3EQgNpd3DcRwqdVrhzsvygdYcQSw0BrucaVqsxMKM3VHz1a0F7eBPNMsUmSaKKOhNb7jTny7hwWK1hpcvIbLZpNK24E9qzeVyfiY+xpJ+J5qe7gu/XPl8/7G+biLrIOK24DEIogGSKgQIDDu0sqh8bNDRRTmiiBjBQoGqBbwmRXkBooK9BW4WsjAxp4LNoLY1aAubSyJXQMNV5FY5UKe1ULc2y0MFgtwKlbqVRSlZcpCEGlbhA6EX+ZSmWi9Yes8bouM/GxXiTqjwWtaLiKv1ndvILfX15ufhm7PG5ZHyPc57i57yXOcbkk3JJXrYyrvuDX2+9J5V96+mSD6f6cRp+Whp3eWF69vLz6+F3OwsbMxZcbIjEuPK3bLE7RwK52Sty2XMeF+v/AEbk9BzBJEHP6XM//pZialpp/pv7eXNfN7uj0v6PrfX+x7T9XKREAGM86Hs7F5nrvKMiFtqWB0NNCtYYm2FvDyhEzaTcjxON7hSx0m2Vr8x5rS4EOjrWlfF8qkiKU80rH61bIahwtTirIZYOrSNcA9xG61amlluQ90jrGxwANw7xR0qP31V9T+wD+ol7jto1ldOQrayepOxn9YO5sxdUjwhoHyq4X+wb+uyB7izxB1C579fZVJqzt2kO6ux5q5xdTTX2juVwx75Pj6tkS7WbqMNBb6As1MtrDk+Sxz9w3kbdp4fvKzhcqeTlvcSS62gaLKUyzCxxK/c4Haw34aK665rPZviZbaFu41NzxXevmrjIrBTIPyuy6ZAPj5pkKMKokM7EBBtFUow1QEpTIRQoBfGsqryQooA2huhkLtarSIpVS8I3MTqrzKYTzVUNQQfkVQL6Bq1Aqq1AMh8JqtClIVRXpUqUcX6q9eDH8zA6S/8AFHhlzBoObWdvau3X1fNYuzzueeSWR0kji9zjVznGpJ5kruyQ5QLePCedFVfbv6V9XZ1X0F0XNaa7sWNj+x8Y2OHvavZt+XnjriOSw0o9U6Zh9QxJcTLibNjyij43Co7CORHArN1zMVddrLmPB/WnobqHp/JM8dcjprzVuQAasvZsnb26L5/b0XX9n1en7E24+XPsc1wEbgRuFuVVwkd7SSDH8VaaA/OrYutWIp2ba0u21aXWMN5DK+xNQRwCsZtU9W2duOtDb5VuVz2iu8kWAcSVrLFyrmbZWrHh1dKK5hyIZT3N8OO6/G1FMw/kzfO4AFtgaU4p7Jg1rdxoG7Tzd+wKezclXcYBhBBNADc2WWotGVwDS6zNACa1UVDGyyPJrRgNhxTBltMbJxo8tvT3HZkSQNyImuFA+IktqwnW4XXTW4y8nf2c+rbQN0HJLXnXWNFFkNDLIBkaNtKIK5aKrQjYKqlYWqpWVVZymxUsalS1hKzQflErK4KfHZFJexEIkYeCKhrTa2qMtnE6i8zUMqFqIwKgHngtShJqCtwwXI+ypVaTl7ydEg889ZetWFr+m9LkBaatyclvuLGftXo6+v5rFrgXGtl1yyAoAKgGnuRX0n/ax6kOR0Tqnp6V9X4MrcrGbx8qazwOwPb8q9Wlzr+zjtMbfu94CIFzaoKOdhRTwvjkaHMeCHNIqCDwIKliyvJfWP6avi35PSA6m7c7F5fwH6F5ezo+dXv6ftfGzifL3bopgRIzwuqKEkcxwovNh6cqkkTor1pxbRZw3Nii4vJPH637uSmGgHa0dvDT5VqOYHDbSpo48flUwSoLC5wPDvSxYIRSBtQAexSw8I8u3AnkdUwCDANfCDqVTkbA4Cgq4j4RwKi4NZG9zg53sKYWcOk9J+nJet9Zx+nM3Nx3muVOLlkYu4+3QLeumbhz33xLa1P9zLB0n1r6fl6f/wBOyDpzI8YNttbDIQ0L37yTWR8rW27Wrfoz1Pj9f6eJRRmbDRuTCDev2x2FeHs09XbWuoYy1VzWmgUUyMcwELQrmI8VcmAmMi61ADhaiqUuhrZVkxg4cVFlWWtoAphYylFm0KeFGlaWyiEpkSwJkWQ46jVeeNUzdRaQYKqFuNyFYFlblFXOyMbEiM2VKyCMCpc8hvuWpLfA8y9aetznF3T+lvLcP/dyNHSdg5N+denr68c3y525cS51fYuiAcdEAV5KCDXVUAortf0e9Wu9L+u+nZz37cKaT8pnDnDOQ2v8rqFd+nbnH5c+ycZnw+1h8RFajgV0sYSgW9qCnk4zXtIIspYsrh/VPonGzazxjyckaSt4/wAQ4rlv1TZ6OvuurzrqPQ8nEf5WVHt5PFwe4ry7aWPXrvL4aTKwpInOLm2pqNCFzsdpSHRgsqKVN2g6LOF8oazwXo2niNP2KmGGM1G29b11ss5WwTGuqQ0g9ylZwExOqaCtfnWctJMZBbTWtKHkqshjWuJoNRryqtYF2DGe94jZd1fEeHbVaYr2T9MugNwOmO6i5viyhSInVzB9c9/DsXp6NPl4vs9nw8r/ALtcJwyfTWeB4XRZEBd2tc1wHyr0dk/j/l5NPLxX016gzOjdTizcZx3MNJI+D2cWleezMw6voTo3V8Tq3TIM/EdWGYVodWuGrT2grxby63DpLnlsGkLPlqCpVblAOaqEvaRqrKYAQFqVLAFvABLUwJjCXdymUwsU0UUQaCoIdGpSKU8YB7FMiu5l7KZXDA2iVkxrrrlGx10otIGbKx4Gbp5WQtGpkcG/OVZrb4TLnuofqB6YwwQ3IdlSiwZCKj/MbLtr9fase8ch1n9UOqZG6Pp8YwozYO+OWnebBd9OjWeeUu1cfmdUzc2Qy5U8k7/tSOLvdVdpMeEwoPk1SgdxN1KMcbIIp/iggiiADXhxUBx/6lK03Cle1ahX2X+i3rB/qf0HhTZDt3UcCuHmXqXOiADX/wAzaFeu3Mz+XCccO+WVQQgBzKoKs+OHA1FRyRY0HVehQZDHNcwOB1BFVmzLcuHC9Y9JOj3eUN8d/AdR3Lhv0/h6tO/8uOzOmOgJG07a3aRce1eTbXD2abZUHY7BcOoeRFbrNdEeTKTQAUbqdLlZtUTIHV4VAsOKzlLA7LH5Xc0yJMRDd1fi9tKcVZSr2Dguf+ISeO2i3OWbcOz9F+k/6vl7j4MCAj83LT4yL+Uw8a/WK69ens8/b2+sewMY1rQxjQ2Ng2saLAAaBe/XXD5u1zXi/wDdbheb6H6PljXF6gWE9ksR+lqbz+NTW/yj5dY4g1C8zs6r0j6v6n0OeuO7fjvvLjPPgd3cj2qbaTbyTh7R6c9UdN65jebiv2ytA87HcfGw93Edq8nZ1XWuutlbtjqrEUe2pWlC6KpVC3Q8kCXMoiYS0hEsM3KJRAjmplcML7JkirNQkqUVXkAoUvfdSo4bM/VIAluBg1po+Z3/AIWr0a/VnzWP7Gi6h+ofqPKa5gnbixn6sDdp/wAxqV216dZ8Jmubys187zJkTGV5uTI4uPyrqzhVOXEND7Aopbs1vAVUyYC1+9tT7kAWRUjW9+SInTtQZZBFlALuKKh1qHkVco9g/t19Xu6R6w/pUrwMPrDC0A6CeMEs/wAzahenpuf4uXZPl9VNcCAWmoNwtIkqCEEOYCgRLBXgphctXmdOa8G3sRrLlOs+nIp2uO2jqWI1XPbSV107LPDh+qem5IXkt8B0uLexePs6bHv6/sS+WpdhytIDhRwtXmuFenAKNrtdVr+P3Tz7lzyXUvIxX7PMZa9Ca1a7v5KZMYFjQBjQZwYm/wC4TcU5DsXTWZZtw6T0f6ezvVGTuha7G6CyokzBZ0xBptirw5uXo6+u7fs8vb2zX93tfT+n4uBhxYeLGI8eFoaxg5Be7XSSPnb73a5q1SgW2Hl/9yWMcj9KctwFTj5WPL3DdsP/AMyWcX9j5j5AC8jufA+hQbjp/UcvEnZmYcphyYrh7T8h5havKO86P+r2RHRnVsUSN+tPBYgdrSuG3RPhub35eg9C9XenesMH5LNjdKdYXna8ewrlevaNzeVvKc1ltBaEQiZgQVi0BRMBdIOaggSFDLHOddQJkdyKIpSyEFKK/nXRHgDsubg6i+hlywWZHmtXE1UyoCaoIqgivFBYbQQjmiBqrlWXr3oguPzoMKDNQgi4FQoqBcU4FBc6XnZGJPDlYzzHlY0jZYZBqHsNQumm1lyzZmYfbvoX1JD6g9N9P6pH8OXA2Qt+y7R7fY4Fevb8x59bjh0Kw6MRGKAtoIQKkxwUVTn6e14IICi5ajO9NRztI2g15qWNTZyXWPQHU7yYYZIBfypNPY4XC8+/RK9XX9mxxvV+lz4r2szoJMSUmkb3i1fuPHhK8Pb1XV7+vumytJkYWPigSkGeQ7WY7Rvkc42oGCp1XPrmW9q6T01+lnV+rTwz9db+U6YLnp4NZZBw80j4W/dF17ev69+fDw932ZPD2HB6bi4WNHj4sTYoImhrGMFGgDgAF7ddcPn7bW1bEdFplDxQIOL/AFZwR1D9PetYhG7dBup2tId9C1rMptcPinOwpcPIdDINLtPNp0K8m2uHeXJTSarKrkMtCPlViHk2q2wKoX42OEkTixw4tNCO6iQdT0L9UfVXTC1ks/57FbT8Ka5pyDtVi6a1qbWPReh/q16c6jtiyi/AyHaiS8dexwXK9N+Gv7Py6wZEU0Qkhe2SM3a9pBHyLjZh0zlXkkFKoZVJJ6OuolY3IB4phcGGcEIhEkwvRMCjPIa1UCQ4EqJXgJXvcUIrKaoiEViBxFABw5qoFRWXsUBA8eaqJN/ZZBFuKoy2h0481kDp7UUyA0k7CtRK+h/7bPVG6DP9OSu8WMfzmICdYpDtkaB911D7V6+u51x+HDeY2z+X0DGQ5oUWUW2pRU7CoiByVUwCyiIMVdEA+R2IBMAPBBqOvuxW4z8V8TMiSUUMT2hzWjm4Feb7PdNJ+rv06W1znTOmYPTnmTp/T8XEmIp50cLfMH8zqlfOn2rL4j1baZ4zXQ4XWciMAZsYlb9aeIbXDtMfH2L1dX3pf9ph59/r/hvoHY88DZsd7ZYX/C9un+K98ufDz0TmAKorTHgg03qHHGT0rLxzcSRPaR3ii3p5Z28Pkr136ZlHTxnRt8WESyUU+oT9BWO7Th002efBeR1NY6yotRSVFCrKgjUKgJGV8TfaFmwKDuaDZ9K9Q9X6XIHYWVJFzaHEtPsNkvJHa9M/ViYgM6njh3OaI0P+Vc71T4am1dNhepek9SaHY+Q3cf8AbcQHe5cr12NzbK82XtWLGjmTWWVQ9xIRVeSvFELClSvAl7nFhQRRBh1QE0VcEBvKqBPYorKoggrAVv2KDOPzK5EGv7EAoo6naCPqmw4pEdD6Q9T5vpv1FgdbxXePFkHnM4PgdaVh72rt17+tY31zH2/0vLx8vFhysZ/mY2QxssEg0dG8bmn3Fd9piuWtbINssNJ29iACzsQSG0QGAgINqgq5+bHjFsLXNbkSN3AE/C3Td+xce7u9J+vw3ppmtJLiEu3G5depuSvj75tzXs1uCvy5F6LlZW8lSN2CvBZVT/rx6DMc+7sFxA6hA2/hNvNYPtN48wvV9X7P9dxf9L/6fq59nV7z/wCTtxJDNBHPA8SQTND4pBo5rhUEL7bwqsouiKWWzdE8cwtRK8d6x6eiyJc3Ckb+HkB7CP4l225SV82da6ZN0zquV0+UUfjyFl+XA+5fO31xcPRreFRpWVMYaFUWY3g2NxxC0JQLe2vY751lC60NKUIQSDQa2RTI5nMO5pLXDQixViOi6T636vhFrZHDIhGrH607CsbaSrNrHbdH9cdFzdrJX/lpj9V/w171y26r8Ok3ny6mMRyxh7HBzTo5pqFxvDoF8HHistYKMBqozdXzyV73nYiMQQimxDU8uCCCaojOR7UEdqAgTtVE1/YgzglGFCBr+5FYDTVJUPgfR5B7vYtD6e/tq9Zu6j0LJ9MZUhdl9IpLhbjd2HIbtH/2pPkK9Wt9tf2eezF/d7lFdqzWjNqCCxMiNiZEhqCr1jq2J0fp7s7JuAdkMQsZJDo0fSs7bTWZviNa623EeT5PUOo5edNmzTudk5DtxobNA+FrfutGi+D9je9m3tf+D6XVrNZh0PpvOAaWSufI958TnuJPsquPXvzydmjpQ0G69GHFWzYfw3U5Lntry3NnBeq+px4/T5Q40LhtomnXdrhuXHJ/6OeuWund6XznuEbvH0uV5rQi74r+9q+/1zGuPw+f2TnL1GZhDiDqFtzU5m1BCpXD9XwQ3qBcB8Q+Zd5eGHgP67em/wAl1rH6tE2kWa3ZLTTzG6e8Ly9+vy7aV5deq8zoMaIDY8gqosbqhaVDq8DdTCBNHWNjzUwFkEG/vQZXldBIce5FG2WiZRuOk+qesdNeDjZDgz/lk1afYUusvlZbHddI/U/CmDY+pQGJ5sZY7t9y8+3R+HWdv5dh0/O6f1GMSYk7JWngDcexcNpZ5dJtnw+cqL3PKxFQUGU5aoh1NrQOPFWATogi9VBIVwJvRBPD50GcEEFFCXUTIxtdTqoG1uHcdCtRHX/pr6sd6X9Z9K60XUx4JhHmtB+LGl8EoPcDu9i79Vxf3c+yZj7hxZGOAcxwfG8B0b23DmuFWuHYRddLGJVsCywrNqCNt0AZWTjYeLJlZL9kEQq48SeDWjiTwVHjfq13W/U8kXXGSOx3Rbm4eFqyNjXEUI4udTxFce/T2mPh6Or+P7qPS84TuEOQzyM2O0kJ0P3mcwvl79V1r1Tfhv8Ap+6LLAGhuvHvrjZ1zmOxbmYjImmWeNhAvVwC7zaYefAW53T8yHdi5MeQ3g6I7we4iyl2l4ySWfDzH1T0yfL6jIL+TGaMHM819H6nXPX2/LnvecOak6Vk4s8eRATHNC8SRSNsWuaagr2SYY8vdfSXqNnqLokeW4BmbD+Fmwjg8fW7nahdHCzHDYShEc91nGHmMkpoae9dNbwzXnP6x+mndW9FZYiYXZOLTIhA1qzX5FOyZjWlfLfBeGu6QbKCQSgZG8mx0VyGh/BVGOAQDXgbgqAXNIuPh+ZAKDEBB3+CAmvKZFvD6ll4kgkx5XRPHFpISjVqCKW7EGIo42kncfhbxRBOKoE/JyUEf8FMCRyVwC4d6DEAg/4JRhNvnQDqa+5RUoDZerTx0VgfjPFKO00IW4j7F/QX1YOu/p5gxvkMmd0Y/kMvd8W1vihd7YyPcvVbmSvPOLh6hG6oWK2YAoIeY443SSODI2Cr3nQAKQcV1rPm6vkgAFmHEfwIjx++7tK1+jUmCOl9PZ+RkiIoYpXj2OO4fOrYZa/qfprHmIeWUkYaxyDUHvXLfrla13pXSOkz52YcfKJpGRvdH4W0F7kXJPJfD+3p/wDp6R7+vbGuXY9O6T0nGy3GPHjOxpLiQCdO1Z6+jSbeMsb9u1jjf01ysrp+E7o+e0NyMGaSJr2jaHRF5dG633XUXm6u3Wdlj0d3XbpL+jf+o+jRvnGS0VZOK7vvDWq/RfU2/jh8zs8uXy+hg7vCvVhmbK3QMmf091huUyv5SWjMuMaFv2u9qsNpl6e4xyRskjcHRyAOY4aEG4Uc2u6jCHxE00utas1qM7CjyMSSJ43MkaWuHMEUK2Pi71T0eTo/qHqPTXt2/l53hn8BNWn3LxdmuK9EuY1QXNRBBLTRVDQa0+RFSx3AplGOFDXgqB3bTQG3FBlWVFRY601ClAcUVgUQQPFUEHIK4UEWQYATYalFNrQbB/iUQPLsVEcVBI1RUtKqM04XKDDbt7UyI7zQBBGt+CisQYgltiKKoaDtlqPrXWh7H/bj6qHSvXbelzSbMPrsRxSCaNGSzxwE95q32r0dVzLHHt85fWOO40odQlFsbQ0ucQ1oFXOOgCyrRdSnlz3BjQW4bTVo4vI+sezkFrwsUxiAcKKLk7BxWtyZBTwzNqR95v7lrLIsmJjGOdSzQT7hVZqxq+nH8vjbmjxvq4ntddfm9uy3a7fl9Kz4bfo8ZdBM913yW9i6/Xnmufa0PWcGPH6v50YoXUrRfN+5p69uY9nRtnTDeQn8z0ctdd0dHA9y+19Dt4j5/frypflWuFxWq+y8jWdR6G14Ja32UVWVY9L5z4K9JyTQCpxHn5WfsVptPlusiOrXNPJRitcY6s2pkfM39xfp38l6ixOrRtpHnRmKUj/mRm1f5SufdPl00ryHReZ0TwqgIG/YEDGntVRBJqgNrx8J4q4ASENbf2KULBqalRU6ojFVSDyRBaIEnRQQioa7aaoDDg7TX5VcoztUVnCyIm1EVNvaqjK8EEfIgjXu1Cis4II70EjtQSNUQbrsDq1LD8hWhsem5c+PLHkY7izJge2WB4tSSNwcw/5gumm2LlnbXMw+7vSXqTG9QenOm9fje3y8/GZPK7QNkpSVp5bXhwXfacuWt4bF035ulbYwNWxmxf8Aed2cgs4w0OSNpHIcFBXMQBoUXAGkRzs7TT3pDDV9fyXODcSM03+KYjUNrZv8y8X3e/0nrPO3/J3+vpm5vwwQ/hDsC+Nh6srvTsjyGkUqu3Vv6sbzLXZ0GTmZe5sZoDYryd2l7Nnfr2msbnDx/IxPKdqRQr6HTp6zDzdlzSIG7o+1pLT7F9jq39tZXj2nJjomuF9V0Rr87o7MjxMOyQHcx44EaKyrlawsp8o/L5gEeY0a/VkH2gqlJeza9zeRUTDy39f/AE6epeicieNu6bAIymU1oyz/AP4SptMxdeK+U+FQvLXZIqoM4oDaUQRFQqBHIoFygl/3RoorALIJ7lRP/FUyjOKgJWhJr+5RUUQQQgAoDbKRrcIDaQRUFESNUBGioEm6gjXuRUoMugxBiAggNhBsdHWVDMVxa/ada0IW5WbH0j/bV6hky+j9W9NzSks6dI3Pw4j/AMuc7ZR3CQA07V6Ndsz9nOzFe4wSkEFQbBvib3rKhkYFFa7MJaa8iCkI0+b48ud/NwA7hSi+R9y57K9nTxrG0EY2DuC88nC5YxtCrIVajJAtxXWM0ytQarpGKqRHblPj4SDc3vbr8i9n1dvMcuyfKwAvY5M4ogMvHbJHUijm3Y8agpKqr5Uh8T3BxpSo4q5Gs6/02LqHS8nElbVk8T4nA8ntLfpSD4Z6lgyYGflYMn+piyvhd/I4hebaYrrLwrDksKwiiAxy9yoJuqiIcKG90UNePDkiJ21u33IqBVBlOKoyqIK3tQKUEIMogEhAFEVgqEDGSga+9XIMuGtVEDc3OnJASDO1BiKxBNEE6KiW2NVEE4kPDxbd84Wx336R+qT6d9ddH6i93/SSyjCzhWlYMqkbq/wuLXexduu84/LnvOH2Q6Ixuczi0kH2LSLmM6rQFKpzhZZVrM5vvRY0gFYy438V/evjfZ/3r16eI3jW1YKLEnBQ7bpIGs0W4hhC3GVDMcYpI5x/tvBPcbH51069vXaVnaZi/toezgvqZefAXChuqlhpaHMpzCi2qYHiLeSqESR1Dgqj5B/Xfoo6Z+ouY5jdsWdHHlN4AucNr6fzNXLtnLpp4edrg2z6UQQN0BCtuaoMioQLIPNFQCogqg62P2lYqC0g8x2JgRZESgWaqDEEIMpqgghFCQgwMJNkBhjQO3mgngiMQSEEnsRWBBiDKojNFVNoXREcRcJEWcJ4dGWVIrxHDtXTWpX2x+mHqf8A90+guldYe4OzGs/J9Q/9RjUjef5hR3tXeuUjrYajRZrWFsULVka3Ps4dqNRpwykUo5PPzr5H2f8AevVreI3LP9NvcuevgrKK4BNCsQVaBaiKecwPiezmCPelDemTGfCheT42gxv/AImWX1evf21lefaYqxKLArpGbDI7tCUVpmbZ+wqoTK2hJQfPf90PQgcfpPXGN8UUjsSZ33Xjez5QVnsnC6eXz4QvO6s4qIzQ8kBE8lQQNkGOogAjkgilrqCQ4t0VUVGubUa8kQI17FAFEGII7UEoIogIN4mwQZaw0QZS/wA6DCgxBgQSNLoJVGUKgglBlrIpjHXrSy1kNgJjlI4G4WolfQP9r3qsxdX6l6Snf+D1KM5+ADo3IxxSVo/jiv3tXbXx+zlfOX0W1tCirERNKe9Sij1RlAHLLUaeSmybvr7wvl/an869PX4baG8LO0BctfC0VFQQCqMKsFecEpRV6ZKIcyTEdZsv4kR+8PiHtXr+pv51ceyfLbEboyvbHKph+Ed6tIHLZUNdySUpUkdYiVYleWfrz0h/UP036oI27pcXy8pvMeU8F1P5SUszKTy+RDrUacCvK7IURPCqtGVt86KJvekQRsO1ABtr7EEUTCoTINpHNIgWgl4aBUuIAHaTRFkB8iiMQYUGIC27RXignXjZVUUUEadyIyh9qKn6EGIJ/wCKoM0QYb2RGUr3oqKIJBVwh9bNcPq/MVYOk9G+p8v036i6Z6hxBum6ZkMyPL+2wWkYafbYSF10vPLG0zH3XHNi5uJj9SwXiTCzomZOM8XBjlaHt+Qrfi4Zng+PmsqR1KPdjkosc8+7ZhzYD7qhfN+5P5S/o9XX4bXENcaP+ELz6+FpqqCGiQQ7VaCX31VGsz2va5kzLPiNQVddsWVmxvMWZk8TZG6PFSOR4hfU12zMxwooxQkdq3UMlbviIUiADawKpXNeo+nMzul5uBIKsyoZIj/O0hbiV8JZOPJjZEuPICHwPdE7vYS36F5Npy7SlKKngmBiCRX3KAgaqwC4lpPEKIzbUVbpxCAa9lEBN1VFnphjb1GKSSzIzu9o0Wds4denHvM+FJVyZeiKyqIivFAxji4X4aoJIIKCPnQRxQT8qCCboqAiJv7eKCQrlU/OiMpZQQfegi6qmxnUHQ2KqLeI8tO0nT5luI+w/wC3H1T/AFv9NYemSkHM9OTHBcOJx3jzMd3+UlvsXW/Fc/mx6c1gBtosqDIj3QuGqLHMPFMksOjmub9K8H3J4r0ddbLBP/Sx/wAK8evhunrSDCoByoU4IEZEYc0imqIX0bI8qd2M40a81Z3r2fW7Phy7J8tuARKvb8OR4WRgjozaqjT9SjIcSO9biV8V/qz0v+nfqJ13HDSyN+SciMHi2YB4I9pK4ds5dNLmOOI9i5tsSjNFBgqgNqqMdcIBbUaGhQQ69ylGDvRUg3rVIFqIxBHBBBRRRaqxDXaBQRxQRzQYUUPFEYeKCeKAmoM4rUVh0UEcVET9ZVUt1RKtQ/6g9i3qlfR/9pP/AOx9V/8ApMP/APK9dp/r/wDb/wBnPbz/AIfRCysZJ8Lu5Fcpkf8AfM/jPzFeT7f+v+XfqX8D/tWe1fP18OlWRotAm8EiBcqAdqqETcVStYP+/i/jb866dH+0Y3dI/wD119R5jxwWVMdoO5IjUdTXSJXyD/cH/wD6PP8A+mg+Yrl3fDfX4eZH4iuEdEIiSqMGiQE3VICd8KvyoOCl8jD9XuUqBC1FPboz/jistR//2Q==\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e2\",\n    \"name\": \"employee7\",\n    \"type\": \"ABC Employee\"\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "SaveEmployeePhoto8",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"photoId_8\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "http://{{staypuft}}/userPhoto",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e1\",\n    \"name\": \"employee8\",\n    \"type\": \"ABC Employee\"\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEmployee",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"employeeUserId\", jsonData.userId);",
                  "postman.setEnvironmentVariable(\"employeeId\", jsonData.id);",
                  "postman.setEnvironmentVariable(\"employeeTokenId\", jsonData.token.id);",
                  "postman.setEnvironmentVariable(\"EmpTokenExpirationTime\", jsonData.token.expirationTime);",
                  "postman.setEnvironmentVariable(\"employeeEmail\", jsonData.email);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;",
                  "",
                  "//console.out(responseBody);"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kevin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "do {",
                  "    randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{registration}}/{{organizationId}}/employee",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gymemployee.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box {{$randomInt}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEmployee 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"employeeId_2\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kevin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "do {",
                  "    randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{registration}}/{{organizationId}}/employee",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gymemployee.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box {{$randomInt}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEmployee 3",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kevin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "do {",
                  "    randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{registration}}/{{organizationId}}/employee",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gymemployee.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box {{$randomInt}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEmployee 4",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kevin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "do {",
                  "    randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{registration}}/{{organizationId}}/employee",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gymemployee.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box {{$randomInt}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEmployee 5",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kevin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "do {",
                  "    randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{registration}}/{{organizationId}}/employee",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gymemployee.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box {{$randomInt}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEmployee 6",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kevin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "do {",
                  "    randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{registration}}/{{organizationId}}/employee",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gymemployee.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box {{$randomInt}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEmployee 7",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kevin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "do {",
                  "    randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{registration}}/{{organizationId}}/employee",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gymemployee.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box {{$randomInt}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEmployee 8",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kevin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "do {",
                  "    randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{registration}}/{{organizationId}}/employee",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gymemployee.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box {{$randomInt}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEmployee 9",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kevin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "do {",
                  "    randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{registration}}/{{organizationId}}/employee",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gymemployee.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box {{$randomInt}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEmployee 10",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kevin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{registration}}/{{organizationId}}/employee",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gymemployee.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box {{$randomInt}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\"\r\n}"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Waiver Document Waiver",
      "description": "",
      "item": [
        {
          "name": "uploadLocationDocument",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"waiverId\", jsonData.location.waiverDocId);",
                  "",
                  "tests[\"Response code was 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{my-organization}}/{{organizationId}}/{{locationId}}/document/waiver",
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"accountNumber\": \"123-456\",\r\n  \"document\": \"WAIVER - The use of this website is subject to the following terms of use: \\n\\n The content of the pages of this website is for your general information and use only. It is subject to change without notice.  \\n\\nThis website uses cookies to monitor browsing preferences. If you do allow cookies to be used, the following personal information may be stored by us for use by third parties: [insert list of information].  \\n\\nNeither we nor any third parties provide any warranty or guarantee as to the accuracy, timeliness, performance, completeness or suitability of the information and materials found or offered on this website for any particular purpose. You acknowledge that such information and materials may contain inaccuracies or errors and we expressly exclude liability for any such inaccuracies or errors to the fullest extent permitted by law.  \\n\\nYour use of any information or materials on this website is entirely at your own risk, for which we shall not be liable. It shall be your own responsibility to ensure that any products, services or information available through this website meet your specific requirements.  \\n\\nThis website contains material which is owned by or licensed to us. This material includes, but is not limited to, the design, layout, look, appearance and graphics. Reproduction is prohibited other than in accordance with the copyright notice, which forms part of these terms and conditions.  \\n\\nAll trade marks reproduced in this website which are not the property of, or licensed to, the operator are acknowledged on the website.  \\n\\nUnauthorised use of this website may give rise to a claim for damages and/or be a criminal offence.  \\n\\nFrom time to time this website may also include links to other websites. These links are provided for your convenience to provide further information. They do not signify that we endorse the website(s). We have no responsibility for the content of the linked website(s).  \\n\\nYour use of this website and any dispute arising out of such use of the website is subject to the laws of England, Northern Ireland, Scotland and Wales.\",\r\n  \"locationName\": \"Sherwood\"\r\n}"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Waiver Document TandC copy",
      "description": "",
      "item": [
        {
          "name": "uploadLocationDocumentTerms",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"termsId\", jsonData.location.waiverDocId);",
                  "",
                  "tests[\"Response code was 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{my-organization}}/{{organizationId}}/{{locationId}}/document/terms",
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"accountNumber\": \"123-456\",\r\n  \"document\": \"TERMS AND CONDITIONS - The use of this website is subject to the following terms of use: \\n\\n The content of the pages of this website is for your general information and use only. It is subject to change without notice.  \\n\\nThis website uses cookies to monitor browsing preferences. If you do allow cookies to be used, the following personal information may be stored by us for use by third parties: [insert list of information].  \\n\\nNeither we nor any third parties provide any warranty or guarantee as to the accuracy, timeliness, performance, completeness or suitability of the information and materials found or offered on this website for any particular purpose. You acknowledge that such information and materials may contain inaccuracies or errors and we expressly exclude liability for any such inaccuracies or errors to the fullest extent permitted by law.  \\n\\nYour use of any information or materials on this website is entirely at your own risk, for which we shall not be liable. It shall be your own responsibility to ensure that any products, services or information available through this website meet your specific requirements.  \\n\\nThis website contains material which is owned by or licensed to us. This material includes, but is not limited to, the design, layout, look, appearance and graphics. Reproduction is prohibited other than in accordance with the copyright notice, which forms part of these terms and conditions.  \\n\\nAll trade marks reproduced in this website which are not the property of, or licensed to, the operator are acknowledged on the website.  \\n\\nUnauthorised use of this website may give rise to a claim for damages and/or be a criminal offence.  \\n\\nFrom time to time this website may also include links to other websites. These links are provided for your convenience to provide further information. They do not signify that we endorse the website(s). We have no responsibility for the content of the linked website(s).  \\n\\nYour use of this website and any dispute arising out of such use of the website is subject to the laws of England, Northern Ireland, Scotland and Wales.\",\r\n  \"locationName\": \"Sherwood\"\r\n}"
            },
            "description": null
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Event Category",
      "description": "",
      "item": [
        {
          "name": "CreateEventCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventCategoryId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"EventCategory{{$randomInt}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Random Event for 10:30AM",
      "description": "",
      "item": [
        {
          "name": "CreateLevel",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventLevelId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventLevelId_1030am\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var levelTypes = ['Beginner', 'Intermediate', 'Moderate', 'Advanced', 'Extreme', 'Insanity'];",
                  "",
                  "var randLevel = levelTypes[Math.floor(Math.random() * levelTypes.length)];",
                  "postman.setEnvironmentVariable(\"randLevel\", randLevel);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventLevel",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{randLevel}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Create Event Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventTypeId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventTypeId_1030am\", jsonData.id);\r",
                  "\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var eventTypes = ['Yoga', 'Mat Pilates', 'Power Pilates', 'Zumba', 'Pound', 'Cycling', 'Swimming', 'Spin', 'P90X', 'Carve & Chizel', 'Powersculpt', 'Total Tone', 'Ab Attack'];",
                  "",
                  "var randEvent = eventTypes[Math.floor(Math.random() * eventTypes.length)];",
                  "postman.setEnvironmentVariable(\"randEvent\", randEvent);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{randEvent}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventId_1030am\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var current_timestamp = new Date();\r",
                  "var current_year = current_timestamp.getFullYear();\r",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);\r",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);\r",
                  "\r",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T15:30:00\";\r",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T16:00:00\";\r",
                  "\r",
                  "// var date = data.dateForEventCreation;\r",
                  "// var date = \"2018-03-13\";\r",
                  "\r",
                  "// var eventStartTime = date + \"T15:30:00\";\r",
                  "// var eventEndTime = date + \"T16:00:00\";\r",
                  "\r",
                  "// postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);\r",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_1030am}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_1030am}}\",\r\n  \"capacity\" : \"10\",\r\n  \"locationId\" : \"{{locationId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventHostId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/host",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId}}\",\r\n  \"substituteId\" : \"{{employeeId_2}}\",\r\n  \"employeeId\" : \"{{employeeId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemCatId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"itemCatId_1030am\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var randomLargeInt = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randomLargeInt\", randomLargeInt);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"name\" : \"{{randEvent}} {{randomLargeInt}}\",\r\n  \"type\" : \"Classes\"\r\n  \r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreatePromoCode",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"promoCodeId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/promotion",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"promotionCode\" : \"SAVE10\",\r\n  \"description\" : \"New Offer\",\r\n  \"promotionAmount\" : 10,\r\n  \"promotionMaxQuantity\" : 10,\r\n  \"itemCategoryId\" : \"{{itemCatId_1030am}}\",\r\n  \"currencyId\" : \"USD\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createUnlimitedItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"itemId_1030am\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category/{{itemCatId_1030am}}/item",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"Regular Package {{$randomInt}}\",\r\n  \"type\": \"SERVICE\",\r\n  \"unitPrice\": 45,\r\n  \"quantity\": 1,\r\n  \"unlimited\": true,\r\n  \"expirationStart\": \"PURCHASE\",\r\n  \"expirationTime\": 2,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"expirationUnit\":\"WEEKS\",\r\n  \"currencyId\" : \"USD\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemEligibilityId",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemEligibilityId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/itemEligibility",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"itemId\" : \"{{itemId_1030am}}\",\r\n  \"eventTypeId\" : \"{{eventTypeId_1030am}}\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createPremiumItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemId_1030am\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category/{{itemCatId_1030am}}/item",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"Premium Package {{$randomInt}}\",\r\n  \"type\": \"SERVICE\",\r\n  \"unitPrice\": 75,\r\n  \"quantity\": 5,\r\n  \"metered\": true,\r\n  \"expirationStart\": \"PURCHASE\",\r\n  \"expirationTime\": 4,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"expirationUnit\":\"WEEKS\",\r\n  \"currencyId\" : \"USD\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemEligibilityId_forPremium",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemEligibilityId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/itemEligibility",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"itemId\" : \"{{itemId_1030am}}\",\r\n  \"eventTypeId\" : \"{{eventTypeId_1030am}}\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 10:30AM",
      "description": "",
      "item": [
        {
          "name": "createCard",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"cardId\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var cardTypes = ['Mastercard','VISA','American Express','Discover'];",
                  "var randCardType = cardTypes[Math.floor(Math.random() * cardTypes.length)];",
                  "",
                  "postman.setEnvironmentVariable(\"randCardType\", randCardType);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase}}/{{organizationId}}/{{locationId}}/card",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"collectedUserId\" : \"{{employeeId}}\",\r\n  \"lastFour\" : \"1234\",\r\n  \"expiryMonth\" : 2,\r\n  \"expiryYear\" : 22,\r\n  \"gateway\" : \"STRIPE\",\r\n  \"gatewayResponse\" : \"{\\\"id\\\":\\\"src_1BW8fc2eZvKYlo2C9pRNClwF\\\",\\\"object\\\":\\\"source\\\",\\\"client_secret\\\":\\\"src_client_secret_BtwYR1BVfM1hBafiBCcNaoc9\\\",\\\"created\\\":1512588904,\\\"flow\\\":\\\"none\\\",\\\"livemode\\\":false,\\\"metadata\\\":[],\\\"owner\\\":{\\\"address\\\":{\\\"postal_code\\\":\\\"72032\\\"}}}\",\r\n  \r\n  \"cardType\" : \"{{randCardType}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kelvin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "do {",
                  "    var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n  \t\"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{phoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createUnlimitedPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "// var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{employeeId}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : 1,\r\n    \"unlimited\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"DAYS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_1030am}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId_1030am}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}",
                  "equals": true,
                  "description": ""
                }
              ],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Random Event for 12PM",
      "description": "",
      "item": [
        {
          "name": "CreateLevel",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventLevelId_1200pm\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventLevelId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var levelTypes = ['Beginner', 'Intermediate', 'Moderate', 'Advanced', 'Extreme', 'Insanity'];",
                  "",
                  "var randLevel = levelTypes[Math.floor(Math.random() * levelTypes.length)];",
                  "postman.setEnvironmentVariable(\"randLevel\", randLevel);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventLevel",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{randLevel}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Create Event Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventTypeId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventTypeId_1200pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var eventTypes = ['Yoga', 'Mat Pilates', 'Power Pilates', 'Zumba', 'Pound', 'Cycling', 'Swimming', 'Spin', 'P90X', 'Carve & Chizel', 'Powersculpt', 'Total Tone', 'Ab Attack'];",
                  "",
                  "var randEvent = eventTypes[Math.floor(Math.random() * eventTypes.length)];",
                  "postman.setEnvironmentVariable(\"randEvent\", randEvent);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{randEvent}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventId_1200pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var current_timestamp = new Date();\r",
                  "var current_year = current_timestamp.getFullYear();\r",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);\r",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);\r",
                  "\r",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:00:00\";\r",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:30:00\";\r",
                  "\r",
                  "// var date = data.dateForEventCreation;\r",
                  "\r",
                  "// var eventStartTime = date + \"T17:00:00\";\r",
                  "// var eventEndTime = date + \"T17:30:00\";\r",
                  "\r",
                  "// postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);\r",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_1200pm}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_1200pm}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventHostId_1200pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/host",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_1200pm}}\",\r\n  \"employeeId\" : \"{{employeeId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemCatId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"itemCatId_1200pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var randomLargeInt = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randomLargeInt\", randomLargeInt);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"name\" : \"{{randEvent}} {{randomLargeInt}}\",\r\n  \"type\" : \"Classes\"\r\n  \r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreatePromoCode",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"promoCodeId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/promotion",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"promotionCode\" : \"SAVE20\",\r\n  \"description\" : \"New Offer\",\r\n  \"promotionAmount\" : 10,\r\n  \"promotionMaxQuantity\" : 10,\r\n  \"itemCategoryId\" : \"{{itemCatId_1200pm}}\",\r\n  \"currencyId\" : \"USD\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"itemId_1200pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category/{{itemCatId_1200pm}}/item",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"Regular Package {{$randomInt}}\",\r\n  \"type\": \"SERVICE\",\r\n  \"unitPrice\": 45,\r\n  \"quantity\": 5,\r\n  \"metered\": true,\r\n  \"expirationStart\": \"PURCHASE\",\r\n  \"expirationTime\": 2,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"expirationUnit\":\"WEEKS\",\r\n  \"currencyId\" : \"USD\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemEligibilityId",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemEligibilityId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/itemEligibility",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"itemId\" : \"{{itemId_1200pm}}\",\r\n  \"eventTypeId\" : \"{{eventTypeId_1200pm}}\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemEligibilityId_2",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/itemEligibility",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"itemId\" : \"{{itemId_1200pm}}\",\r\n  \"eventTypeId\" : \"{{eventTypeId_1030am}}\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 12PM",
      "description": "",
      "item": [
        {
          "name": "createCard",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"cardId\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var cardTypes = ['Paypal','Mastercard','VISA','American Express','Discover'];",
                  "var randCardType = cardTypes[Math.floor(Math.random() * cardTypes.length)];",
                  "",
                  "postman.setEnvironmentVariable(\"randCardType\", randCardType);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase}}/{{organizationId}}/{{locationId}}/card",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"collectedUserId\" : \"{{employeeId}}\",\r\n  \"lastFour\" : \"1234\",\r\n  \"expiryMonth\" : 2,\r\n  \"expiryYear\" : 22,\r\n  \"gateway\" : \"STRIPE\",\r\n  \"gatewayResponse\" : \"{\\\"id\\\":\\\"src_1BW8fc2eZvKYlo2C9pRNClwF\\\",\\\"object\\\":\\\"source\\\",\\\"client_secret\\\":\\\"src_client_secret_BtwYR1BVfM1hBafiBCcNaoc9\\\",\\\"created\\\":1512588904,\\\"flow\\\":\\\"none\\\",\\\"livemode\\\":false,\\\"metadata\\\":[],\\\"owner\\\":{\\\"address\\\":{\\\"postal_code\\\":\\\"72032\\\"}}}\",\r\n  \r\n  \"cardType\" : \"{{randCardType}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kelvin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "do {",
                  "    var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{phoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{employeeId}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 30,\r\n    \"expirationUnit\" : \"DAYS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_1200pm}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId_1200pm}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}",
                  "equals": true,
                  "description": ""
                }
              ],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Random Event for 1PM",
      "description": "",
      "item": [
        {
          "name": "CreateLevel",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventLevelId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventLevelId_100pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var levelTypes = ['Beginner', 'Intermediate', 'Moderate', 'Advanced', 'Extreme', 'Insanity'];",
                  "",
                  "var randLevel = levelTypes[Math.floor(Math.random() * levelTypes.length)];",
                  "postman.setEnvironmentVariable(\"randLevel\", randLevel);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventLevel",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{randLevel}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Create Event Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventTypeId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventTypeId_100pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var eventTypes = ['Yoga', 'Mat Pilates', 'Power Pilates', 'Zumba', 'Pound', 'Cycling', 'Swimming', 'Spin', 'P90X', 'Carve & Chizel', 'Powersculpt', 'Total Tone', 'Ab Attack'];",
                  "",
                  "var randEvent = eventTypes[Math.floor(Math.random() * eventTypes.length)];",
                  "postman.setEnvironmentVariable(\"randEvent\", randEvent);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{randEvent}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventId_100pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var current_timestamp = new Date();\r",
                  "var current_year = current_timestamp.getFullYear();\r",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);\r",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);\r",
                  "\r",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T18:00:00\";\r",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T18:30:00\";\r",
                  "\r",
                  "// var date = data.dateForEventCreation;\r",
                  "\r",
                  "// var eventStartTime = date + \"T18:00:00\";\r",
                  "// var eventEndTime = date + \"T18:30:00\";\r",
                  "\r",
                  "// postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);\r",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_100pm}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_100pm}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventHostId_100pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/host",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_100pm}}\",\r\n  \"employeeId\" : \"{{employeeId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemCatId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"itemCatId_100pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var randomLargeInt = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randomLargeInt\", randomLargeInt);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"name\" : \"{{randEvent}} {{randomLargeInt}}\",\r\n  \"type\" : \"Classes\"\r\n  \r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreatePromoCode",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"promoCodeId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/promotion",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"promotionCode\" : \"SAVE30\",\r\n  \"description\" : \"New Offer\",\r\n  \"promotionAmount\" : 10,\r\n  \"promotionMaxQuantity\" : 10,\r\n  \"itemCategoryId\" : \"{{itemCatId_100pm}}\",\r\n  \"currencyId\" : \"USD\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"itemId_100pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category/{{itemCatId_100pm}}/item",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"Regular Package {{$randomInt}}\",\r\n  \"type\": \"SERVICE\",\r\n  \"unitPrice\": 45,\r\n  \"quantity\": 5,\r\n  \"metered\": true,\r\n  \"expirationStart\": \"PURCHASE\",\r\n  \"expirationTime\": 2,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"expirationUnit\":\"WEEKS\",\r\n  \"currencyId\" : \"USD\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemEligibilityId",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemEligibilityId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/itemEligibility",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"itemId\" : \"{{itemId_100pm}}\",\r\n  \"eventTypeId\" : \"{{eventTypeId_100pm}}\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 1PM",
      "description": "",
      "item": [
        {
          "name": "createCard",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"cardId\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var cardTypes = ['Paypal','Mastercard','VISA','American Express','Discover'];",
                  "var randCardType = cardTypes[Math.floor(Math.random() * cardTypes.length)];",
                  "",
                  "postman.setEnvironmentVariable(\"randCardType\", randCardType);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase}}/{{organizationId}}/{{locationId}}/card",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"collectedUserId\" : \"{{employeeId}}\",\r\n  \"lastFour\" : \"1234\",\r\n  \"expiryMonth\" : 2,\r\n  \"expiryYear\" : 22,\r\n  \"gateway\" : \"STRIPE\",\r\n  \"gatewayResponse\" : \"{\\\"id\\\":\\\"src_1BW8fc2eZvKYlo2C9pRNClwF\\\",\\\"object\\\":\\\"source\\\",\\\"client_secret\\\":\\\"src_client_secret_BtwYR1BVfM1hBafiBCcNaoc9\\\",\\\"created\\\":1512588904,\\\"flow\\\":\\\"none\\\",\\\"livemode\\\":false,\\\"metadata\\\":[],\\\"owner\\\":{\\\"address\\\":{\\\"postal_code\\\":\\\"72032\\\"}}}\",\r\n  \r\n  \"cardType\" : \"{{randCardType}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kelvin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "do {",
                  "    var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{phoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{employeeId}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 30,\r\n    \"expirationUnit\" : \"DAYS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_100pm}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId_100pm}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}",
                  "equals": true,
                  "description": ""
                }
              ],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Random Event for 2PM",
      "description": "",
      "item": [
        {
          "name": "CreateLevel",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventLevelId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventLevelId_200pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var levelTypes = ['Beginner', 'Intermediate', 'Moderate', 'Advanced', 'Extreme', 'Insanity'];",
                  "",
                  "var randLevel = levelTypes[Math.floor(Math.random() * levelTypes.length)];",
                  "postman.setEnvironmentVariable(\"randLevel\", randLevel);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventLevel",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{randLevel}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Create Event Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventTypeId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventTypeId_200pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var eventTypes = ['Yoga', 'Mat Pilates', 'Power Pilates', 'Zumba', 'Pound', 'Cycling', 'Swimming', 'Spin', 'P90X', 'Carve & Chizel', 'Powersculpt', 'Total Tone', 'Ab Attack'];",
                  "",
                  "var randEvent = eventTypes[Math.floor(Math.random() * eventTypes.length)];",
                  "postman.setEnvironmentVariable(\"randEvent\", randEvent);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{randEvent}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventId_200pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var current_timestamp = new Date();\r",
                  "var current_year = current_timestamp.getFullYear();\r",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);\r",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);\r",
                  "\r",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T19:00:00\";\r",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T19:30:00\";\r",
                  "\r",
                  "// var date = data.dateForEventCreation;\r",
                  "\r",
                  "// var eventStartTime = date + \"T19:00:00\";\r",
                  "// var eventEndTime = date + \"T19:30:00\";\r",
                  "\r",
                  "// postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);\r",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_200pm}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_200pm}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventHostId_200pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/host",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_200pm}}\",\r\n  \"employeeId\" : \"{{employeeId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemCatId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"itemCatId_200pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var randomLargeInt = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randomLargeInt\", randomLargeInt);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"name\" : \"{{randEvent}} {{randomLargeInt}}\",\r\n  \"type\" : \"Classes\"\r\n  \r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreatePromoCode",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"promoCodeId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/promotion",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"promotionCode\" : \"SAVE40\",\r\n  \"description\" : \"New Offer\",\r\n  \"promotionAmount\" : 10,\r\n  \"promotionMaxQuantity\" : 10,\r\n  \"itemCategoryId\" : \"{{itemCatId_200pm}}\",\r\n  \"currencyId\" : \"USD\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"itemId_200pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category/{{itemCatId_200pm}}/item",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"Regular Package {{$randomInt}}\",\r\n  \"type\": \"SERVICE\",\r\n  \"unitPrice\": 45,\r\n  \"quantity\": 5,\r\n  \"metered\": true,\r\n  \"expirationStart\": \"PURCHASE\",\r\n  \"expirationTime\": 2,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"expirationUnit\":\"WEEKS\",\r\n  \"currencyId\" : \"USD\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemEligibilityId",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemEligibilityId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/itemEligibility",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"itemId\" : \"{{itemId_200pm}}\",\r\n  \"eventTypeId\" : \"{{eventTypeId_200pm}}\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 2PM",
      "description": "",
      "item": [
        {
          "name": "createCard",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"cardId\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var cardTypes = ['Paypal','Mastercard','VISA','American Express','Discover'];",
                  "var randCardType = cardTypes[Math.floor(Math.random() * cardTypes.length)];",
                  "",
                  "postman.setEnvironmentVariable(\"randCardType\", randCardType);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase}}/{{organizationId}}/{{locationId}}/card",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"collectedUserId\" : \"{{employeeId}}\",\r\n  \"lastFour\" : \"1234\",\r\n  \"expiryMonth\" : 2,\r\n  \"expiryYear\" : 22,\r\n  \"gateway\" : \"STRIPE\",\r\n  \"gatewayResponse\" : \"{\\\"id\\\":\\\"src_1BW8fc2eZvKYlo2C9pRNClwF\\\",\\\"object\\\":\\\"source\\\",\\\"client_secret\\\":\\\"src_client_secret_BtwYR1BVfM1hBafiBCcNaoc9\\\",\\\"created\\\":1512588904,\\\"flow\\\":\\\"none\\\",\\\"livemode\\\":false,\\\"metadata\\\":[],\\\"owner\\\":{\\\"address\\\":{\\\"postal_code\\\":\\\"72032\\\"}}}\",\r\n  \r\n  \"cardType\" : \"{{randCardType}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kelvin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "do {",
                  "    var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{phoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{employeeId}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 30,\r\n    \"expirationUnit\" : \"DAYS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_200pm}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId_200pm}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}",
                  "equals": true,
                  "description": ""
                }
              ],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Random Event for 3PM",
      "description": "",
      "item": [
        {
          "name": "CreateLevel",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventLevelId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventLevelId_300pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var levelTypes = ['Beginner', 'Intermediate', 'Moderate', 'Advanced', 'Extreme', 'Insanity'];",
                  "",
                  "var randLevel = levelTypes[Math.floor(Math.random() * levelTypes.length)];",
                  "postman.setEnvironmentVariable(\"randLevel\", randLevel);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventLevel",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{randLevel}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Create Event Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventTypeId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventTypeId_300pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var eventTypes = ['Yoga', 'Mat Pilates', 'Power Pilates', 'Zumba', 'Pound', 'Cycling', 'Swimming', 'Spin', 'P90X', 'Carve & Chizel', 'Powersculpt', 'Total Tone', 'Ab Attack'];",
                  "",
                  "var randEvent = eventTypes[Math.floor(Math.random() * eventTypes.length)];",
                  "postman.setEnvironmentVariable(\"randEvent\", randEvent);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{randEvent}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventId_300pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var current_timestamp = new Date();\r",
                  "var current_year = current_timestamp.getFullYear();\r",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);\r",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);\r",
                  "\r",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T20:00:00\";\r",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T20:30:00\";\r",
                  "\r",
                  "// var date = data.dateForEventCreation;\r",
                  "\r",
                  "// var eventStartTime = date + \"T20:00:00\";\r",
                  "// var eventEndTime = date + \"T20:30:00\";\r",
                  "\r",
                  "// postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);\r",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_300pm}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_300pm}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventHostId_300pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/host",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_300pm}}\",\r\n  \"employeeId\" : \"{{employeeId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemCatId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"itemCatId_300pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var randomLargeInt = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randomLargeInt\", randomLargeInt);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"name\" : \"{{randEvent}} {{randomLargeInt}}\",\r\n  \"type\" : \"Classes\"\r\n  \r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreatePromoCode",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"promoCodeId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/promotion",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"promotionCode\" : \"SAVE50\",\r\n  \"description\" : \"New Offer\",\r\n  \"promotionAmount\" : 10,\r\n  \"promotionMaxQuantity\" : 10,\r\n  \"itemCategoryId\" : \"{{itemCatId_300pm}}\",\r\n  \"currencyId\" : \"USD\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"itemId_300pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category/{{itemCatId_300pm}}/item",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"Regular Package {{$randomInt}}\",\r\n  \"type\": \"SERVICE\",\r\n  \"unitPrice\": 45,\r\n  \"quantity\": 5,\r\n  \"metered\": true,\r\n  \"expirationStart\": \"PURCHASE\",\r\n  \"expirationTime\": 2,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"expirationUnit\":\"WEEKS\",\r\n  \"currencyId\" : \"USD\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemEligibilityId",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemEligibilityId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/itemEligibility",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"itemId\" : \"{{itemId_300pm}}\",\r\n  \"eventTypeId\" : \"{{eventTypeId_300pm}}\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 3PM",
      "description": "",
      "item": [
        {
          "name": "createCard",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"cardId\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var cardTypes = ['Paypal','Mastercard','VISA','American Express','Discover'];",
                  "var randCardType = cardTypes[Math.floor(Math.random() * cardTypes.length)];",
                  "",
                  "postman.setEnvironmentVariable(\"randCardType\", randCardType);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase}}/{{organizationId}}/{{locationId}}/card",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"collectedUserId\" : \"{{employeeId}}\",\r\n  \"lastFour\" : \"1234\",\r\n  \"expiryMonth\" : 2,\r\n  \"expiryYear\" : 22,\r\n  \"gateway\" : \"STRIPE\",\r\n  \"gatewayResponse\" : \"{\\\"id\\\":\\\"src_1BW8fc2eZvKYlo2C9pRNClwF\\\",\\\"object\\\":\\\"source\\\",\\\"client_secret\\\":\\\"src_client_secret_BtwYR1BVfM1hBafiBCcNaoc9\\\",\\\"created\\\":1512588904,\\\"flow\\\":\\\"none\\\",\\\"livemode\\\":false,\\\"metadata\\\":[],\\\"owner\\\":{\\\"address\\\":{\\\"postal_code\\\":\\\"72032\\\"}}}\",\r\n  \r\n  \"cardType\" : \"{{randCardType}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kelvin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "do {",
                  "    var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{phoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{employeeId}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 30,\r\n    \"expirationUnit\" : \"DAYS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_300pm}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId_300pm}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}",
                  "equals": true,
                  "description": ""
                }
              ],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Random Event for 4:30PM",
      "description": "",
      "item": [
        {
          "name": "CreateLevel",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventLevelId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventLevelId_430pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var levelTypes = ['Beginner', 'Intermediate', 'Moderate', 'Advanced', 'Extreme', 'Insanity'];",
                  "",
                  "var randLevel = levelTypes[Math.floor(Math.random() * levelTypes.length)];",
                  "postman.setEnvironmentVariable(\"randLevel\", randLevel);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventLevel",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{randLevel}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Create Event Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventTypeId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventTypeId_430pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var eventTypes = ['Yoga', 'Mat Pilates', 'Power Pilates', 'Zumba', 'Pound', 'Cycling', 'Swimming', 'Spin', 'P90X', 'Carve & Chizel', 'Powersculpt', 'Total Tone', 'Ab Attack'];",
                  "",
                  "var randEvent = eventTypes[Math.floor(Math.random() * eventTypes.length)];",
                  "postman.setEnvironmentVariable(\"randEvent\", randEvent);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{randEvent}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventId_430pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var current_timestamp = new Date();\r",
                  "var current_year = current_timestamp.getFullYear();\r",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);\r",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);\r",
                  "\r",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T21:30:00\";\r",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T22:00:00\";\r",
                  "\r",
                  "// var date = data.dateForEventCreation;\r",
                  "\r",
                  "// var eventStartTime = date + \"T21:30:00\";\r",
                  "// var eventEndTime = date + \"T22:00:00\";\r",
                  "\r",
                  "// postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);\r",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_430pm}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_430pm}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventHostId_430pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/host",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_430pm}}\",\r\n  \"employeeId\" : \"{{employeeId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemCatId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"itemCatId_430pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var randomLargeInt = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randomLargeInt\", randomLargeInt);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"name\" : \"{{randEvent}} {{randomLargeInt}}\",\r\n  \"type\" : \"Classes\"\r\n  \r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreatePromoCode",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"promoCodeId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/promotion",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"promotionCode\" : \"SAVE60\",\r\n  \"description\" : \"New Offer\",\r\n  \"promotionAmount\" : 10,\r\n  \"promotionMaxQuantity\" : 10,\r\n  \"itemCategoryId\" : \"{{itemCatId_430pm}}\",\r\n  \"currencyId\" : \"USD\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"itemId_430pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category/{{itemCatId_430pm}}/item",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"Regular Package {{$randomInt}}\",\r\n  \"type\": \"SERVICE\",\r\n  \"unitPrice\": 45,\r\n  \"quantity\": 5,\r\n  \"metered\": true,\r\n  \"expirationStart\": \"PURCHASE\",\r\n  \"expirationTime\": 2,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"expirationUnit\":\"WEEKS\",\r\n  \"currencyId\" : \"USD\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemEligibilityId",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemEligibilityId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/itemEligibility",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"itemId\" : \"{{itemId_430pm}}\",\r\n  \"eventTypeId\" : \"{{eventTypeId_430pm}}\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemEligibilityId_2",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/itemEligibility",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"itemId\" : \"{{itemId_430pm}}\",\r\n  \"eventTypeId\" : \"{{eventTypeId_1030am}}\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemEligibilityId_3",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/itemEligibility",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"itemId\" : \"{{itemId_430pm}}\",\r\n  \"eventTypeId\" : \"{{eventTypeId_1200pm}}\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemEligibilityId_4",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/itemEligibility",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"itemId\" : \"{{itemId_430pm}}\",\r\n  \"eventTypeId\" : \"{{eventTypeId_100pm}}\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemEligibilityId_5",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/itemEligibility",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"itemId\" : \"{{itemId_430pm}}\",\r\n  \"eventTypeId\" : \"{{eventTypeId_200pm}}\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemEligibilityId_6",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/itemEligibility/",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"itemId\" : \"{{itemId_430pm}}\",\r\n  \"eventTypeId\" : \"{{eventTypeId_300pm}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 4:30PM",
      "description": "",
      "item": [
        {
          "name": "createCard",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"cardId\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var cardTypes = ['Paypal','Mastercard','VISA','American Express','Discover'];",
                  "var randCardType = cardTypes[Math.floor(Math.random() * cardTypes.length)];",
                  "",
                  "postman.setEnvironmentVariable(\"randCardType\", randCardType);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase}}/{{organizationId}}/{{locationId}}/card",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"collectedUserId\" : \"{{employeeId}}\",\r\n  \"lastFour\" : \"1234\",\r\n  \"expiryMonth\" : 2,\r\n  \"expiryYear\" : 22,\r\n  \"gateway\" : \"STRIPE\",\r\n  \"gatewayResponse\" : \"{\\\"id\\\":\\\"src_1BW8fc2eZvKYlo2C9pRNClwF\\\",\\\"object\\\":\\\"source\\\",\\\"client_secret\\\":\\\"src_client_secret_BtwYR1BVfM1hBafiBCcNaoc9\\\",\\\"created\\\":1512588904,\\\"flow\\\":\\\"none\\\",\\\"livemode\\\":false,\\\"metadata\\\":[],\\\"owner\\\":{\\\"address\\\":{\\\"postal_code\\\":\\\"72032\\\"}}}\",\r\n  \r\n  \"cardType\" : \"{{randCardType}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kelvin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "do {",
                  "    var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{phoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{employeeId}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 30,\r\n    \"expirationUnit\" : \"DAYS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_430pm}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId_430pm}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}",
                  "equals": true,
                  "description": ""
                }
              ],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Random Event for 5PM",
      "description": "",
      "item": [
        {
          "name": "CreateLevel",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventLevelId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventLevelId_500pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var levelTypes = ['Beginner', 'Intermediate', 'Moderate', 'Advanced', 'Extreme', 'Insanity'];",
                  "",
                  "var randLevel = levelTypes[Math.floor(Math.random() * levelTypes.length)];",
                  "postman.setEnvironmentVariable(\"randLevel\", randLevel);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventLevel",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{randLevel}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Create Event Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventTypeId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventTypeId_500pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var eventTypes = ['Yoga', 'Mat Pilates', 'Power Pilates', 'Zumba', 'Pound', 'Cycling', 'Swimming', 'Spin', 'P90X', 'Carve & Chizel', 'Powersculpt', 'Total Tone', 'Ab Attack'];",
                  "",
                  "var randEvent = eventTypes[Math.floor(Math.random() * eventTypes.length)];",
                  "postman.setEnvironmentVariable(\"randEvent\", randEvent);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"{{randEvent}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"eventId_500pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var current_timestamp = new Date();\r",
                  "var current_year = current_timestamp.getFullYear();\r",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);\r",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);\r",
                  "\r",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T22:00:00\";\r",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T22:30:00\";\r",
                  "\r",
                  "// var date = data.dateForEventCreation;\r",
                  "\r",
                  "// var eventStartTime = date + \"T22:00:00\";\r",
                  "// var eventEndTime = date + \"T22:30:00\";\r",
                  "\r",
                  "// postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);\r",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_500pm}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_500pm}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventHostId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/host",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_500pm}}\",\r\n  \"employeeId\" : \"{{employeeId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemCatId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"itemCatId_500pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var randomLargeInt = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randomLargeInt\", randomLargeInt);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"name\" : \"{{randEvent}} {{randomLargeInt}}\",\r\n  \"type\" : \"Classes\"\r\n  \r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "CreatePromoCode",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"promoCodeId_500pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/promotion",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"promotionCode\" : \"SAVE70\",\r\n  \"description\" : \"New Offer\",\r\n  \"promotionAmount\" : 10,\r\n  \"promotionMaxQuantity\" : 10,\r\n  \"itemCategoryId\" : \"{{itemCatId_500pm}}\",\r\n  \"currencyId\" : \"USD\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"itemId_500pm\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category/{{itemCatId_500pm}}/item",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"Regular Package {{$randomInt}}\",\r\n  \"type\": \"SERVICE\",\r\n  \"unitPrice\": 45,\r\n  \"quantity\": 5,\r\n  \"metered\": true,\r\n  \"expirationStart\": \"PURCHASE\",\r\n  \"expirationTime\": 2,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"expirationUnit\":\"WEEKS\",\r\n  \"currencyId\" : \"USD\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemEligibilityId",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"itemEligibilityId\", jsonData.id);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/itemEligibility",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"itemId\" : \"{{itemId_500pm}}\",\r\n  \"eventTypeId\" : \"{{eventTypeId_500pm}}\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "itemEligibilityId_2",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/itemEligibility",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"itemId\" : \"{{itemId_500pm}}\",\r\n  \"eventTypeId\" : \"{{eventTypeId_1200pm}}\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 5PM",
      "description": "",
      "item": [
        {
          "name": "createCard",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"cardId\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var cardTypes = ['Paypal','Mastercard','VISA','American Express','Discover'];",
                  "var randCardType = cardTypes[Math.floor(Math.random() * cardTypes.length)];",
                  "",
                  "postman.setEnvironmentVariable(\"randCardType\", randCardType);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase}}/{{organizationId}}/{{locationId}}/card",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"collectedUserId\" : \"{{employeeId}}\",\r\n  \"lastFour\" : \"1234\",\r\n  \"expiryMonth\" : 2,\r\n  \"expiryYear\" : 22,\r\n  \"gateway\" : \"STRIPE\",\r\n  \"gatewayResponse\" : \"{\\\"id\\\":\\\"src_1BW8fc2eZvKYlo2C9pRNClwF\\\",\\\"object\\\":\\\"source\\\",\\\"client_secret\\\":\\\"src_client_secret_BtwYR1BVfM1hBafiBCcNaoc9\\\",\\\"created\\\":1512588904,\\\"flow\\\":\\\"none\\\",\\\"livemode\\\":false,\\\"metadata\\\":[],\\\"owner\\\":{\\\"address\\\":{\\\"postal_code\\\":\\\"72032\\\"}}}\",\r\n  \r\n  \"cardType\" : \"{{randCardType}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var firstNames = ['Michael', 'Alicia', 'Thomas', 'Olivia', 'Daniel', 'Candice', 'Amy', 'Barbara', 'Matthew', 'Ryan', 'Craig', 'Tammy', 'Heaven', 'Kent', 'Floretta','Sylvester','Mandi','Damion','Noel','Jacklyn','Viva','Taina','Myrtle','Ernest','Vina','Dorsey','Rico','Will','Wilber','Lacie','Oren','Eliana','Elva','Marilyn','Sharita','Nina','Tori','Rufina','Isiah','Lavenia','Coleman','Elfriede','Jannette','Zaida','Darius','Shelton','Jackson','Rochelle','Kermit','Branda','Casandra','Matt','Lorna','Angelo','China','Alena','Barrett','Aaron','Rana','Jeffrey','Zane','Shane','Melinda','Valencia','Jacque','Venessa','Don','Harold','Charol','Rebbecca','Melissa','Diego','Jorge','Katie','Gina','Gina','Lorita','Mina','Anthony','Debbie','Jason','Kassie','Misty','Misti','Dianne','Lashay','Tonia','Mariana','Peter','Zack','Kelvin','Vickie','Magda','Kris','Ralph','Maureen','Frederick','Emmaline','Marylee','Zoe','Katelyn','Birdee','Loren','Fran','Melvin','Delbert','Mittie','Clarence','Demetra','Nancy','Vaughn','Arminda','Garrett','Keith','Trudy','Theresia','Kelly'];",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos = [postman.getEnvironmentVariable(\"photoId_1\"),postman.getEnvironmentVariable(\"photoId_2\"),postman.getEnvironmentVariable(\"photoId_3\"),postman.getEnvironmentVariable(\"photoId_4\"),postman.getEnvironmentVariable(\"photoId_5\"),postman.getEnvironmentVariable(\"photoId_6\"),postman.getEnvironmentVariable(\"photoId_7\"),postman.getEnvironmentVariable(\"photoId_8\")];",
                  "",
                  "do {",
                  "    var randPhotoId = userPhotos[Math.floor(Math.random() * userPhotos.length)];",
                  "}",
                  "while (randPhotoId === 'undefined');",
                  "",
                  "var randFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{phoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{employeeId}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 30,\r\n    \"expirationUnit\" : \"DAYS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_500pm}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId_500pm}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{$randomInt}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "tests[\"Response code was 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "url": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
                  "tests[\"[INFO] Response: \" + responseBody] = true;",
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}",
                  "equals": true,
                  "description": ""
                }
              ],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        }
      ]
    }
  ]
}