{
  "info": {
    "_postman_id": "6a90c04e-3eb1-4039-aec9-ebb3ac920383",
    "name": "Static_Event_Creation_For_Frontend_Automation",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Create Event - Yoga For Beginner",
      "description": null,
      "item": [
        {
          "name": "CreateEventYogaForBeginners",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "630b4afe-a1fe-4428-9933-7d6228ba9518",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"eventId_1\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1f5af759-2f1d-4bc8-8aa3-a9d18b9bbdbe",
                "type": "text/javascript",
                "exec": [
                  "var startTime = data.startTime;",
                  "var endTime = data.endTime;",
                  "var startDayIncrement = Number(data.dayIncrement);",
                  "",
                  "//logic to increment endDate if the hour rolls over into the next day",
                  "if (startTime > endTime)",
                  "{",
                  "    var endDayIncrement = startDayIncrement +1;",
                  "} else",
                  "{",
                  "    var endDayIncrement = startDayIncrement;",
                  "}",
                  "//smart date increment logic, which rolls over into the next month if we're at the end of month",
                  "var startDate = new Date();",
                  "startDate.setDate(startDate.getDate() + startDayIncrement);",
                  "var endDate = new Date();",
                  "endDate.setDate(endDate.getDate() + endDayIncrement);",
                  "",
                  "var startyear = startDate.getFullYear();",
                  "var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
                  "var startDate = ('0' + (startDate.getDate())).slice(-2);",
                  "var endyear = endDate.getFullYear();",
                  "var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
                  "var endDate = ('0' + (endDate.getDate())).slice(-2);",
                  "",
                  "var eventStartTime = startyear + \"-\" + startMonth + \"-\" + startDate + \"T\" + startTime;",
                  "var eventEndTime = endyear + \"-\" + endMonth + \"-\" + endDate + \"T\" + endTime;",
                  "",
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeUserId\"),postman.getEnvironmentVariable(\"employeeUserId_2\"),postman.getEnvironmentVariable(\"employeeUserId_3\"),postman.getEnvironmentVariable(\"employeeUserId_4\"),postman.getEnvironmentVariable(\"employeeUserId_5\"),postman.getEnvironmentVariable(\"employeeUserId_6\"),postman.getEnvironmentVariable(\"employeeUserId_7\"),postman.getEnvironmentVariable(\"employeeUserId_8\"),postman.getEnvironmentVariable(\"employeeUserId_9\"),postman.getEnvironmentVariable(\"employeeUserId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);",
                  "",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_yogaForBeginners}}\",\r\n  \"name\" : \"Yoga For Beginners\",\r\n  \"description\" : \"Where you can get your Sweat On!\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_beginner}}\",\r\n  \"eventCategoryId\" : \"{{eventCategoryId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"hosts\" : [ {\r\n    \"substituteId\" : \"{{employeeUserId_8}}\",\r\n    \"employeeId\" : \"{{randEmployee}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "20508b15-7289-48d1-b616-860b661089d2",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "94e76a10-5ac9-49f8-ad2d-4aec108e0b43",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Create Event - Beginner Kick Boxing",
      "description": null,
      "item": [
        {
          "name": "CreateEventBeginnerKickBoxing",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b01d86c-feec-4f73-86b2-30b34efdc6f4",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"eventId_2\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "43caa31a-a100-4996-92c8-c32254c6e2df",
                "type": "text/javascript",
                "exec": [
                  "var startTime = data.startTime;",
                  "var endTime = data.endTime;",
                  "var startDayIncrement = Number(data.dayIncrement);",
                  "",
                  "//logic to increment endDate if the hour rolls over into the next day",
                  "if (startTime > endTime)",
                  "{",
                  "    var endDayIncrement = startDayIncrement +1;",
                  "} else",
                  "{",
                  "    var endDayIncrement = startDayIncrement;",
                  "}",
                  "//smart date increment logic, which rolls over into the next month if we're at the end of month",
                  "var startDate = new Date();",
                  "startDate.setDate(startDate.getDate() + startDayIncrement);",
                  "var endDate = new Date();",
                  "endDate.setDate(endDate.getDate() + endDayIncrement);",
                  "",
                  "var startyear = startDate.getFullYear();",
                  "var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
                  "var startDate = ('0' + (startDate.getDate())).slice(-2);",
                  "var endyear = endDate.getFullYear();",
                  "var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
                  "var endDate = ('0' + (endDate.getDate())).slice(-2);",
                  "",
                  "var eventStartTime = startyear + \"-\" + startMonth + \"-\" + startDate + \"T\" + startTime;",
                  "var eventEndTime = endyear + \"-\" + endMonth + \"-\" + endDate + \"T\" + endTime;",
                  "",
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeUserId\"),postman.getEnvironmentVariable(\"employeeUserId_2\"),postman.getEnvironmentVariable(\"employeeUserId_3\"),postman.getEnvironmentVariable(\"employeeUserId_4\"),postman.getEnvironmentVariable(\"employeeUserId_5\"),postman.getEnvironmentVariable(\"employeeUserId_6\"),postman.getEnvironmentVariable(\"employeeUserId_7\"),postman.getEnvironmentVariable(\"employeeUserId_8\"),postman.getEnvironmentVariable(\"employeeUserId_9\"),postman.getEnvironmentVariable(\"employeeUserId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);",
                  "",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_beginnerKickBoxing}}\",\r\n  \"name\" : \"Beginner Kick Boxing\",\r\n  \"description\" : \"Where you can get your Sweat On!\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_beginner}}\",\r\n  \"eventCategoryId\" : \"{{eventCategoryId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"hosts\" : [ {\r\n    \"employeeId\" : \"{{randEmployee}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Event - Spin Intermediate",
      "description": null,
      "item": [
        {
          "name": "CreateEventSpinIntermediate",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "021b635b-2936-4694-8741-e9bd71562d41",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"eventId_3\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "247b87bc-7eef-4505-99aa-8379e47eeca5",
                "type": "text/javascript",
                "exec": [
                  "var startTime = data.startTime;",
                  "var endTime = data.endTime;",
                  "var startDayIncrement = Number(data.dayIncrement);",
                  "",
                  "//logic to increment endDate if the hour rolls over into the next day",
                  "if (startTime > endTime)",
                  "{",
                  "    var endDayIncrement = startDayIncrement +1;",
                  "} else",
                  "{",
                  "    var endDayIncrement = startDayIncrement;",
                  "}",
                  "//smart date increment logic, which rolls over into the next month if we're at the end of month",
                  "var startDate = new Date();",
                  "startDate.setDate(startDate.getDate() + startDayIncrement);",
                  "var endDate = new Date();",
                  "endDate.setDate(endDate.getDate() + endDayIncrement);",
                  "",
                  "var startyear = startDate.getFullYear();",
                  "var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
                  "var startDate = ('0' + (startDate.getDate())).slice(-2);",
                  "var endyear = endDate.getFullYear();",
                  "var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
                  "var endDate = ('0' + (endDate.getDate())).slice(-2);",
                  "",
                  "var eventStartTime = startyear + \"-\" + startMonth + \"-\" + startDate + \"T\" + startTime;",
                  "var eventEndTime = endyear + \"-\" + endMonth + \"-\" + endDate + \"T\" + endTime;",
                  "",
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeUserId\"),postman.getEnvironmentVariable(\"employeeUserId_2\"),postman.getEnvironmentVariable(\"employeeUserId_3\"),postman.getEnvironmentVariable(\"employeeUserId_4\"),postman.getEnvironmentVariable(\"employeeUserId_5\"),postman.getEnvironmentVariable(\"employeeUserId_6\"),postman.getEnvironmentVariable(\"employeeUserId_7\"),postman.getEnvironmentVariable(\"employeeUserId_8\"),postman.getEnvironmentVariable(\"employeeUserId_9\"),postman.getEnvironmentVariable(\"employeeUserId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);",
                  "",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_spinIntermediate}}\",\r\n  \"name\" : \"Spin Intermediate\",\r\n  \"description\" : \"Where you can get your Sweat On!\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_intermediate}}\",\r\n  \"eventCategoryId\" : \"{{eventCategoryId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"duration\" : 60,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"hosts\" : [ {\r\n    \"employeeId\" : \"{{randEmployee}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Event - Yoga For Beginner",
      "description": null,
      "item": [
        {
          "name": "CreateEventYogaForBeginners2",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "418f56ff-1c03-41c8-8df0-0749ea8c0d07",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"eventId_4\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "05e15d0f-3ccd-4026-9bb9-268fb9e90598",
                "type": "text/javascript",
                "exec": [
                  "var startTime = data.startTime;",
                  "var endTime = data.endTime;",
                  "var startDayIncrement = Number(data.dayIncrement);",
                  "",
                  "//logic to increment endDate if the hour rolls over into the next day",
                  "if (startTime > endTime)",
                  "{",
                  "    var endDayIncrement = startDayIncrement +1;",
                  "} else",
                  "{",
                  "    var endDayIncrement = startDayIncrement;",
                  "}",
                  "//smart date increment logic, which rolls over into the next month if we're at the end of month",
                  "var startDate = new Date();",
                  "startDate.setDate(startDate.getDate() + startDayIncrement);",
                  "var endDate = new Date();",
                  "endDate.setDate(endDate.getDate() + endDayIncrement);",
                  "",
                  "var startyear = startDate.getFullYear();",
                  "var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
                  "var startDate = ('0' + (startDate.getDate())).slice(-2);",
                  "var endyear = endDate.getFullYear();",
                  "var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
                  "var endDate = ('0' + (endDate.getDate())).slice(-2);",
                  "",
                  "var eventStartTime = startyear + \"-\" + startMonth + \"-\" + startDate + \"T\" + startTime;",
                  "var eventEndTime = endyear + \"-\" + endMonth + \"-\" + endDate + \"T\" + endTime;",
                  "",
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeUserId\"),postman.getEnvironmentVariable(\"employeeUserId_2\"),postman.getEnvironmentVariable(\"employeeUserId_3\"),postman.getEnvironmentVariable(\"employeeUserId_4\"),postman.getEnvironmentVariable(\"employeeUserId_5\"),postman.getEnvironmentVariable(\"employeeUserId_6\"),postman.getEnvironmentVariable(\"employeeUserId_7\"),postman.getEnvironmentVariable(\"employeeUserId_8\"),postman.getEnvironmentVariable(\"employeeUserId_9\"),postman.getEnvironmentVariable(\"employeeUserId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);",
                  "",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_yogaForBeginners}}\",\r\n  \"name\" : \"Yoga For Beginners\",\r\n  \"description\" : \"Where you can get your Sweat On!\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_beginner}}\",\r\n  \"eventCategoryId\" : \"{{eventCategoryId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"hosts\" : [ {\r\n    \"substituteId\" : \"{{employeeUserId_8}}\",\r\n    \"employeeId\" : \"{{randEmployee}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Event - Beginner Kick Boxing",
      "description": null,
      "item": [
        {
          "name": "CreateEventBeginnerKickBoxing",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e2ba2608-6946-4824-b978-a393824f215e",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"eventId_5\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "43595682-6d04-4099-9e40-0cd95b5c9ca4",
                "type": "text/javascript",
                "exec": [
                  "var startTime = data.startTime;",
                  "var endTime = data.endTime;",
                  "var startDayIncrement = Number(data.dayIncrement);",
                  "",
                  "//logic to increment endDate if the hour rolls over into the next day",
                  "if (startTime > endTime)",
                  "{",
                  "    var endDayIncrement = startDayIncrement +1;",
                  "} else",
                  "{",
                  "    var endDayIncrement = startDayIncrement;",
                  "}",
                  "//smart date increment logic, which rolls over into the next month if we're at the end of month",
                  "var startDate = new Date();",
                  "startDate.setDate(startDate.getDate() + startDayIncrement);",
                  "var endDate = new Date();",
                  "endDate.setDate(endDate.getDate() + endDayIncrement);",
                  "",
                  "var startyear = startDate.getFullYear();",
                  "var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
                  "var startDate = ('0' + (startDate.getDate())).slice(-2);",
                  "var endyear = endDate.getFullYear();",
                  "var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
                  "var endDate = ('0' + (endDate.getDate())).slice(-2);",
                  "",
                  "var eventStartTime = startyear + \"-\" + startMonth + \"-\" + startDate + \"T\" + startTime;",
                  "var eventEndTime = endyear + \"-\" + endMonth + \"-\" + endDate + \"T\" + endTime;",
                  "",
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeUserId\"),postman.getEnvironmentVariable(\"employeeUserId_2\"),postman.getEnvironmentVariable(\"employeeUserId_3\"),postman.getEnvironmentVariable(\"employeeUserId_4\"),postman.getEnvironmentVariable(\"employeeUserId_5\"),postman.getEnvironmentVariable(\"employeeUserId_6\"),postman.getEnvironmentVariable(\"employeeUserId_7\"),postman.getEnvironmentVariable(\"employeeUserId_8\"),postman.getEnvironmentVariable(\"employeeUserId_9\"),postman.getEnvironmentVariable(\"employeeUserId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);",
                  "",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_beginnerKickBoxing}}\",\r\n  \"name\" : \"Beginner Kick Boxing\",\r\n  \"description\" : \"Where you can get your Sweat On!\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_beginner}}\",\r\n  \"eventCategoryId\" : \"{{eventCategoryId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"hosts\" : [ {\r\n    \"employeeId\" : \"{{randEmployee}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Event - Advanced Community Pilates",
      "description": null,
      "item": [
        {
          "name": "CreateEventAdvancedCommunityPilates",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "67d2a2a1-50e0-4e31-ad32-7d019e616d32",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"eventId_6\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bbd007c4-bec3-46b4-a514-b0a474490678",
                "type": "text/javascript",
                "exec": [
                  "var startTime = data.startTime;",
                  "var endTime = data.endTime;",
                  "var startDayIncrement = Number(data.dayIncrement);",
                  "",
                  "//logic to increment endDate if the hour rolls over into the next day",
                  "if (startTime > endTime)",
                  "{",
                  "    var endDayIncrement = startDayIncrement +1;",
                  "} else",
                  "{",
                  "    var endDayIncrement = startDayIncrement;",
                  "}",
                  "//smart date increment logic, which rolls over into the next month if we're at the end of month",
                  "var startDate = new Date();",
                  "startDate.setDate(startDate.getDate() + startDayIncrement);",
                  "var endDate = new Date();",
                  "endDate.setDate(endDate.getDate() + endDayIncrement);",
                  "",
                  "var startyear = startDate.getFullYear();",
                  "var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
                  "var startDate = ('0' + (startDate.getDate())).slice(-2);",
                  "var endyear = endDate.getFullYear();",
                  "var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
                  "var endDate = ('0' + (endDate.getDate())).slice(-2);",
                  "",
                  "var eventStartTime = startyear + \"-\" + startMonth + \"-\" + startDate + \"T\" + startTime;",
                  "var eventEndTime = endyear + \"-\" + endMonth + \"-\" + endDate + \"T\" + endTime;",
                  "",
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeUserId\"),postman.getEnvironmentVariable(\"employeeUserId_2\"),postman.getEnvironmentVariable(\"employeeUserId_3\"),postman.getEnvironmentVariable(\"employeeUserId_4\"),postman.getEnvironmentVariable(\"employeeUserId_5\"),postman.getEnvironmentVariable(\"employeeUserId_6\"),postman.getEnvironmentVariable(\"employeeUserId_7\"),postman.getEnvironmentVariable(\"employeeUserId_8\"),postman.getEnvironmentVariable(\"employeeUserId_9\"),postman.getEnvironmentVariable(\"employeeUserId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);",
                  "",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_advancedCommunityPilates}}\",\r\n  \"name\" : \"Advanced Community Pilates\",\r\n  \"description\" : \"Where you can get your Sweat On!\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_advanced}}\",\r\n  \"eventCategoryId\" : \"{{eventCategoryId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"hosts\" : [ {\r\n    \"employeeId\" : \"{{randEmployee}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Event - Hot Power Intermediate",
      "description": null,
      "item": [
        {
          "name": "CreateEventHotPowerIntermediate",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "60bd7712-af0a-41ab-84a0-8094f20c8288",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"eventId_7\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "df89b4d6-ef28-45c0-9b54-d2a9c0443a9a",
                "type": "text/javascript",
                "exec": [
                  "var startTime = data.startTime;",
                  "var endTime = data.endTime;",
                  "var startDayIncrement = Number(data.dayIncrement);",
                  "",
                  "//logic to increment endDate if the hour rolls over into the next day",
                  "if (startTime > endTime)",
                  "{",
                  "    var endDayIncrement = startDayIncrement +1;",
                  "} else",
                  "{",
                  "    var endDayIncrement = startDayIncrement;",
                  "}",
                  "//smart date increment logic, which rolls over into the next month if we're at the end of month",
                  "var startDate = new Date();",
                  "startDate.setDate(startDate.getDate() + startDayIncrement);",
                  "var endDate = new Date();",
                  "endDate.setDate(endDate.getDate() + endDayIncrement);",
                  "",
                  "var startyear = startDate.getFullYear();",
                  "var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
                  "var startDate = ('0' + (startDate.getDate())).slice(-2);",
                  "var endyear = endDate.getFullYear();",
                  "var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
                  "var endDate = ('0' + (endDate.getDate())).slice(-2);",
                  "",
                  "var eventStartTime = startyear + \"-\" + startMonth + \"-\" + startDate + \"T\" + startTime;",
                  "var eventEndTime = endyear + \"-\" + endMonth + \"-\" + endDate + \"T\" + endTime;",
                  "",
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeUserId\"),postman.getEnvironmentVariable(\"employeeUserId_2\"),postman.getEnvironmentVariable(\"employeeUserId_3\"),postman.getEnvironmentVariable(\"employeeUserId_4\"),postman.getEnvironmentVariable(\"employeeUserId_5\"),postman.getEnvironmentVariable(\"employeeUserId_6\"),postman.getEnvironmentVariable(\"employeeUserId_7\"),postman.getEnvironmentVariable(\"employeeUserId_8\"),postman.getEnvironmentVariable(\"employeeUserId_9\"),postman.getEnvironmentVariable(\"employeeUserId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);",
                  "",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_hotPowerIntermediate}}\",\r\n  \"name\" : \"Hot Power Intermediate\",\r\n  \"description\" : \"Where you can get your Sweat On!\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_intermediate}}\",\r\n  \"eventCategoryId\" : \"{{eventCategoryId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"hosts\" : [ {\r\n    \"employeeId\" : \"{{randEmployee}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}