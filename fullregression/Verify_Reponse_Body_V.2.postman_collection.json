{
	"info": {
		"_postman_id": "f94720c3-eb7d-4579-8b5b-9e7a6a7f0622",
		"name": "Verify_Reponse_Body_V.2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Iteration",
			"description": null,
			"item": [
				{
					"name": "createUserForOrg copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05b3f9ea-02ae-43d5-b92d-42f2c343891f",
								"type": "text/javascript",
								"exec": [
									"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
									"    if(testFirstNameIteration.length>0) {",
									"        console.log(testFirstNameIteration);",
									"        postman.setNextRequest(\"createUserForOrg copy\");",
									"    } else {",
									"        postman.setNextRequest(null);",
									"        ",
									"    }"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ccf37cb7-0a9f-4579-84b6-f3bcb59b37c7",
								"type": "text/javascript",
								"exec": [
									"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
									"",
									"if(!testFirstNameIteration) {",
									"    ",
									"    testFirstNameIteration =  [\"Michael\", \"Alicia\", \"Thomas\"];",
									"}",
									"",
									"var currentNameIteration =testFirstNameIteration.shift();",
									"",
									"pm.environment.set(\"testFirstNameIteration\", testFirstNameIteration);",
									"pm.environment.set(\"currentNameIteration\", currentNameIteration)",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\" : \"{{currentNameIteration}}\",\r\n  \"lastName\" : \"Test_Surname\",\r\n  \"password\" : \"Password1\",\r\n  \"phone\" : {\r\n    \"number\" : \"1234567890\",\r\n    \"extension\" : \"12345\"\r\n  },\r\n  \"birthDate\" : \"1998-01-27\",\r\n  \"email\" : \"TestUser@abc.com\"\r\n}"
						},
						"url": {
							"raw": "https://qa.greatestclubmanagementsoftwareever.com/registration/user",
							"protocol": "https",
							"host": [
								"qa",
								"greatestclubmanagementsoftwareever",
								"com"
							],
							"path": [
								"registration",
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Response_Verification",
			"description": null,
			"item": [
				{
					"name": "createUserForOrg",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "367da521-b768-4886-b071-25012e4f8619",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var appURL = postman.getEnvironmentVariable(\"baseURL\") + jsonData.organizationId;",
									"postman.setEnvironmentVariable(\"ownerId\", jsonData.userId);",
									"postman.setEnvironmentVariable(\"organizationId\", jsonData.organizationId);",
									"postman.setEnvironmentVariable(\"ownerEmail\", jsonData.email);",
									"postman.setEnvironmentVariable(\"ownerPassword\", jsonData.password);",
									"postman.setEnvironmentVariable(\"appURL\", appURL);",
									"",
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"var firstName = postman.getEnvironmentVariable(\"randFirstName\");",
									"var lastName = postman.getEnvironmentVariable(\"randLastName\");",
									"var phoneNumber = postman.getEnvironmentVariable(\"phoneNumber\");",
									"var photoId = postman.getEnvironmentVariable(\"randPhotoId\");",
									"",
									"tests[\"Response Body has Correct FirstName\"] = responseBody.has(firstName);",
									"tests[\"Response Body has Correct LastName\"] = responseBody.has(lastName);",
									"tests[\"Response Body has Correct Password\"] = responseBody.has(\"Password1\");",
									"tests[\"Response Body has Correct PhoneNumber\"] = responseBody.has(phoneNumber);",
									"tests[\"Response Body has Correct Email\"] = responseBody.has(\"TestUser@abc.com\");",
									"tests[\"Response Body has Correct Birthdate\"] = responseBody.has(\"1998-01-27\");",
									"tests[\"Response Body has Correct extension\"] = responseBody.has(\"1234\");",
									"tests[\"Response Body has Correct photoId\"] = responseBody.has(photoId);",
									"",
									"var obj1 = ",
									"{",
									"  \"firstName\" : \"{{randFirstName}}\",",
									"  \"lastName\" : \"{{randLastName}}\",",
									"  \"password\" : \"Password1\",",
									"  \"phone\" : {",
									"    \"number\" : \"{{phoneNumber}}\",",
									"    \"extension\" : \"1234\"",
									"  },",
									"  \"birthDate\" : \"1998-01-27\",",
									"  \"email\" : \"TestUser@abc.com\",",
									"  \"photoId\" : \"{{randPhotoId}}\"",
									"}",
									"var obj2 =â€‚jsonData;",
									"var parsedFunc = eval('('+environment.deepDiffMapper+'()'+')');",
									"var result=parsedFunc.map(obj1,obj2);",
									"console.log(parsedFunc.dot(result));",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2f027e12-033d-4f7e-8cb9-ed249980fbcd",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"",
									"var phoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"phoneNumber\", phoneNumber);",
									"",
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"",
									"",
									"",
									"",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"password\" : \"Password1\",\r\n  \"phone\" : {\r\n    \"number\" : \"{{phoneNumber}}\",\r\n    \"extension\" : \"1234\"\r\n  },\r\n  \"birthDate\" : \"1998-01-27\",\r\n  \"email\" : \"TestUser@abc.com\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
						},
						"url": {
							"raw": "{{registration}}/user",
							"host": [
								"{{registration}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c895d105-c320-4960-8948-02179b85eece",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);",
									"    tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"}",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YXV0b21hdGVkLXRlc3RpbmctY2xpZW50OiNhbnRpLWpvbmFz"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{ownerPassword}}\",\r\n  \"username\": \"{{ownerEmail}}\"\r\n}"
						},
						"url": {
							"raw": "{{authentication}}/organization/{{organizationId}}/login?clientId=automated-testing-client",
							"host": [
								"{{authentication}}"
							],
							"path": [
								"organization",
								"{{organizationId}}",
								"login"
							],
							"query": [
								{
									"key": "clientId",
									"value": "automated-testing-client"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SaveEmployeePhoto1_male",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"photoId_male_1\", jsonData.id);",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e8\",\n    \"name\": \"employee1\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				},
				{
					"name": "createOrgLocation_test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c31c749-70be-4f85-a249-b3cb80d8c9b1",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"addressId\", jsonData.location.address.id);",
									"postman.setEnvironmentVariable(\"locationId\", jsonData.location.id);",
									"postman.setEnvironmentVariable(\"locationName\", jsonData.location.name);",
									"postman.setEnvironmentVariable(\"orgName\", jsonData.name);",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"var obj1 = {",
									"  \"name\" : \"University Sports and Fitness #\"+postman.getEnvironmentVariable(\"orgNumber\"),",
									"  \"ownerId\" : postman.getEnvironmentVariable(\"ownerId\"),",
									"  \"location.name\" : \"University Fitness Center #\"+postman.getEnvironmentVariable(\"orgNumber\"),",
									"  \"location.address.address1\" : \"123 Fitness Lane\",",
									"  \"location.address.address2\" : \"PO Box #\"+postman.getEnvironmentVariable(\"orgNumber\"),",
									"  \"location.address.city\" : \"Little Rock\",",
									"  \"location.address.state\" : postman.getEnvironmentVariable(\"randState\"),",
									"  \"location.address.country\" : \"United States\",",
									"  \"location.address.zipCode\" : \"33935\",",
									"  \"location.phone.number\" : postman.getEnvironmentVariable(\"phoneNumber\"),",
									"  \"location.phone.extension\" : \"411\",",
									"  \"location.email.address\" : \"UniversityFitness\"+postman.getEnvironmentVariable(\"orgNumber\")+\"@ufit.com\"",
									"};",
									"",
									"",
									"    var parseJsonObject = eval('('+environment.flattenJSONobject+')');",
									"    var obj2 =â€‚parseJsonObject(jsonData);",
									"  ",
									"    var notMatchedData1 = eval('('+environment.myDiffMethod+')');",
									"    var notMatchedData=notMatchedData1(obj1,obj2);",
									" ",
									"  if(notMatchedData.length>0) {",
									"â€‚â€‚â€‚â€‚ tests[\"[INFO] Test is fail becuase expected elements did not match with actual, Elements umatached are : \" + notMatchedData] = false;",
									"â€‚â€‚â€‚â€‚â€‚â€‚tests[\"[INFO] Actual Response Bodyâ€‚â€‚:\"+JSON.stringify(jsonData)] = true;",
									"} else {",
									"â€‚â€‚â€‚â€‚tests[\"[INFO] Expected and Actual has been matched successfully, Response Bodyâ€‚â€‚:\"+JSON.stringify(jsonData)] = true;",
									"}",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d93e92f7-f609-421e-b75c-551af4e680bf",
								"type": "text/javascript",
								"exec": [
									"var orgNumber = Math.floor(Math.random() * 9000000) + 1000000;",
									"",
									"postman.setEnvironmentVariable(\"orgNumber\", orgNumber);",
									"",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"postman.setEnvironmentVariable(\"randState\", randState);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\" : \"University Sports and Fitness #{{orgNumber}}\",\n  \"ownerId\" : \"{{ownerId}}\",\n  \"location\" : {\n    \"name\" : \"University Fitness Center #{{orgNumber}}\",\n    \"address\" : {\n      \"address1\" : \"123 Fitness Lane\",\n      \"address2\" : \"PO Box #{{orgNumber}}\",\n      \"city\" : \"Little Rock\",\n      \"state\" : \"{{randState}}\",\n      \"country\" : \"United States\",\n      \"zipCode\" : \"33935\"\n    },\n    \"phone\" : {\n      \"number\" : \"{{phoneNumber}}\",\n      \"extension\" : \"411\"\n    },\n    \"email\" : {\n      \"address\" : \"UniversityFitness{{orgNumber}}@ufit.com\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/organization",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateEventCategory_test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "416601f2-0dc3-43e8-95fb-e94bd22a468c",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"eventCategoryId\", jsonData.id);",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"var obj1 = {",
									"  \"name\" : \"Yoga\"",
									"};",
									"",
									"var obj2 =â€‚jsonData;",
									"    ",
									"  // tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"  var notMatchedData1 = eval('('+environment.myDiffMethod+')');",
									"  var notMatchedData=notMatchedData1(obj1,obj2);",
									"",
									"  if(notMatchedData.length>0) {",
									"â€‚â€‚â€‚â€‚ tests[\"[INFO] Test is fail becuase expected elements did not match with actual, Elements umatached are : \" + notMatchedData] = false;",
									"â€‚â€‚â€‚â€‚â€‚â€‚tests[\"[INFO] Actual Response Bodyâ€‚â€‚:\"+JSON.stringify(jsonData)] = true;",
									"} else {",
									"â€‚â€‚â€‚â€‚tests[\"[INFO] Expected and Actual has been matched successfully, Response Bodyâ€‚â€‚:\"+JSON.stringify(jsonData)] = true;",
									"}",
									"  ",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "39089364-adfc-454b-8b9f-4dbbdb8bd98a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Yoga\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateItemCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"itemCatId\", jsonData.id);\r",
									"\r",
									"if (responseCode.code != 201)\r",
									"{\r",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
									"}\r",
									"\r",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var randomLargeInt = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randomLargeInt\", randomLargeInt);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"name\" : \"Class Category {{randomLargeInt}}\",\r\n  \"type\" : \"Classes\"\r\n  \r\n}\r\n"
						},
						"url": {
							"raw": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category",
							"host": [
								"{{purchase-setup}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"category"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUnlimitedItem_test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "453c8d17-9560-41f4-b33b-a4497bdabe87",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"itemId_unlimited\", jsonData.id);",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code == 201)",
									"{",
									"var obj1 = {",
									"  \"name\" : \"Unlimited Package \"+postman.getEnvironmentVariable(\"randItemNumber\"),",
									"  \"type\" : \"SERVICE\",",
									"  \"unitPrice\" : 45,",
									"  \"quantity\" : 1,",
									"  \"metered\" : false,",
									"  \"expirationStart\" : \"PURCHASE\",",
									"  \"expirationTime\" : 2,",
									"  \"locationId\" : postman.getEnvironmentVariable(\"locationId\"),",
									"  \"expirationUnit\" : \"MONTHS\",",
									"  \"currencyId\" : \"USD\"",
									"};",
									"",
									"var obj2 =â€‚jsonData;",
									"    ",
									"  // tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"  var notMatchedData1 = eval('('+environment.myDiffMethod+')');",
									"  var notMatchedData=notMatchedData1(obj1,obj2);",
									"",
									"  if(notMatchedData.length>0) {",
									"â€‚â€‚â€‚â€‚ tests[\"[INFO] Test is fail becuase expected elements did not match with actual, Elements umatached are : \" + notMatchedData] = false;",
									"â€‚â€‚â€‚â€‚â€‚â€‚tests[\"[INFO] Actual Response Bodyâ€‚â€‚:\"+JSON.stringify(jsonData)] = true;",
									"} else {",
									"â€‚â€‚â€‚â€‚tests[\"[INFO] Expected and Actual has been matched successfully, Response Bodyâ€‚â€‚:\"+JSON.stringify(jsonData)] = true;",
									"}",
									"  ",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a9f9b520-7eb6-4cd3-9118-6fc6228b704c",
								"type": "text/javascript",
								"exec": [
									"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Unlimited Package {{randItemNumber}}\",\r\n  \"type\": \"SERVICE\",\r\n  \"unitPrice\": 45,\r\n  \"quantity\": 1,\r\n  \"unlimited\": true,\r\n  \"expirationStart\": \"PURCHASE\",\r\n  \"expirationTime\": 2,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"expirationUnit\":\"MONTHS\",\r\n  \"currencyId\" : \"USD\"\r\n}"
						},
						"url": {
							"raw": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category/{{itemCatId}}/item",
							"host": [
								"{{purchase-setup}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"category",
								"{{itemCatId}}",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createMeteredItem_test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06e60ba8-a481-4e43-81e5-aefdb912e1f9",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"itemId_metered\", jsonData.id);",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code == 201)",
									"{",
									"var obj1 = {",
									"  \"name\" : \"Regular Package \"+postman.getEnvironmentVariable(\"randItemNumber\"),",
									"  \"type\" : \"SERVICE\",",
									"  \"unitPrice\" : 45,",
									"  \"quantity\" : 5,",
									"  \"metered\" : true,",
									"  \"expirationStart\" : \"PURCHASE\",",
									"  \"expirationTime\" : 2,",
									"  \"locationId\" : postman.getEnvironmentVariable(\"locationId\"),",
									"  \"expirationUnit\" : \"MONTHS\",",
									"  \"currencyId\" : \"USD\"",
									"};",
									"",
									"var obj2 =â€‚jsonData;",
									"    ",
									"  // tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"  var notMatchedData1 = eval('('+environment.myDiffMethod+')');",
									"  var notMatchedData=notMatchedData1(obj1,obj2);",
									"",
									"  if(notMatchedData.length>0) {",
									"â€‚â€‚â€‚â€‚ tests[\"[INFO] Test is fail becuase expected elements did not match with actual, Elements umatached are : \" + notMatchedData] = false;",
									"â€‚â€‚â€‚â€‚â€‚â€‚tests[\"[INFO] Actual Response Bodyâ€‚â€‚:\"+JSON.stringify(jsonData)] = true;",
									"} else {",
									"â€‚â€‚â€‚â€‚tests[\"[INFO] Expected and Actual has been matched successfully, Response Bodyâ€‚â€‚:\"+JSON.stringify(jsonData)] = true;",
									"}",
									"  ",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a37098d9-5ea4-456b-8d9a-a37d1efaa522",
								"type": "text/javascript",
								"exec": [
									"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Regular Package {{randItemNumber}}\",\r\n  \"type\": \"SERVICE\",\r\n  \"unitPrice\": 45,\r\n  \"quantity\": 5,\r\n  \"metered\": true,\r\n  \"expirationStart\": \"PURCHASE\",\r\n  \"expirationTime\": 2,\r\n  \"locationId\" : \"{{locationId}}\",\r\n  \"expirationUnit\":\"MONTHS\",\r\n  \"currencyId\" : \"USD\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{purchase-setup}}/{{organizationId}}/{{locationId}}/inventory/category/{{itemCatId}}/item",
							"host": [
								"{{purchase-setup}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"category",
								"{{itemCatId}}",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEventCategory_test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a6accf-ecd1-451b-97fd-9b6d1aa9b4a6",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code == 200)",
									"{",
									"var obj1 = {",
									"  \"name\" : \"Yoga\"",
									"};",
									"",
									"var obj2 =â€‚jsonData;",
									"    ",
									"  // tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"  var notMatchedData1 = eval('('+environment.myDiffMethod+')');",
									"  var notMatchedData=notMatchedData1(obj1,obj2);",
									"",
									"  if(notMatchedData.length>0) {",
									"â€‚â€‚â€‚â€‚ tests[\"[INFO] Test is fail becuase expected elements did not match with actual, Elements umatached are : \" + notMatchedData] = false;",
									"â€‚â€‚â€‚â€‚â€‚â€‚tests[\"[INFO] Actual Response Bodyâ€‚â€‚:\"+JSON.stringify(jsonData)] = true;",
									"} else {",
									"â€‚â€‚â€‚â€‚tests[\"[INFO] Expected and Actual has been matched successfully, Response Bodyâ€‚â€‚:\"+JSON.stringify(jsonData)] = true;",
									"}",
									"  ",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory",
								"{{eventCategoryId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}