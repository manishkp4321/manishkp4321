{
	"info": {
		"_postman_id": "7ad6d5fd-e64d-4b75-9062-0a25f1b8a9d7",
		"name": "Iteration copy.postman_collection_05_24",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Org, Location and User",
			"description": null,
			"item": [
				{
					"name": "createUserForOrg copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c266b5b4-cd3e-45c5-a61f-0ba672743146",
								"type": "text/javascript",
								"exec": [
									" var orgInfo =  pm.environment.get(\"orgInfoDetails\"); ",
									" var resBody = JSON.parse(responseBody);",
									" if(!orgInfo) orgInfo=[];",
									" ",
									"function pushOrgInfoToAry(orgId,ownerId,ownerEmail,ownerPassword,testType) {",
									"    ",
									"   var obj = {",
									"       orgId:orgId,",
									"       ownerId:ownerId,",
									"       ownerEmail:ownerEmail,",
									"       ownerPassword:ownerPassword,",
									"       testType:testType",
									"   };",
									"",
									"   orgInfo.push(obj);",
									"   console.log(orgInfo);",
									"}",
									"",
									"  if (responseCode.code===201) {",
									"           // var compareResponse = ",
									"    ",
									"            if(pm.environment.get(\"testType\") === \"\\\"Nominal\\\"\") {",
									"          ",
									"            pushOrgInfoToAry(resBody.organizationId, resBody.userId,resBody.email,resBody.password,\"Nominal\"); ",
									"            ",
									"        } else if(pm.environment.get(\"testType\") == \"\\\"Max\\\"\") {",
									"           ",
									"          pushOrgInfoToAry(resBody.organizationId, resBody.userId,resBody.email,resBody.password,\"Max\"); ",
									"        } else if(pm.environment.get(\"testType\") == \"\\\"Min\\\"\") {",
									"            ",
									"         pushOrgInfoToAry(resBody.organizationId, resBody.userId,resBody.email,resBody.password,\"Min\"); ",
									"        } else if(pm.environment.get(\"testType\") == \"\\\"allFields\\\"\") {",
									"         ",
									"          pushOrgInfoToAry(resBody.organizationId, resBody.userId,resBody.email,resBody.password,\"allFields\"); ",
									"        }",
									"      ",
									"    pm.environment.set(\"orgInfoDetails\", orgInfo); ",
									"  ",
									"  } ",
									"  ",
									" var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
									"    if(testFirstNameIteration.length>0) {",
									"        console.log(testFirstNameIteration);",
									"        postman.setNextRequest(\"createUserForOrg copy\");",
									"    } else {",
									"        pm.environment.unset(\"testFirstNameIteration\");",
									"        postman.setNextRequest();",
									"        ",
									"    }",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc43079c-c7aa-454b-993a-79ebd055463b",
								"type": "text/javascript",
								"exec": [
									"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
									"var emailId=pm.environment.get(\"emailId\");",
									"var nominalUserData={",
									"  \"firstName\" : \"Michael\",",
									"  \"lastName\" : \"Test_Surname\",",
									"  \"password\" : \"Password1\",",
									"  \"phone\" : {",
									"    \"number\" : \"1234567890\",",
									"    \"extension\" : \"12345\"",
									"  },",
									"  \"birthDate\" : \"1998-01-27\",",
									"  \"email\" : \"TestUser@abc.com\"",
									"};",
									"var maxUserData={",
									"  \"firstName\" : \"First name of employee for maximum characters Firs\",",
									"  \"lastName\" : \"Last name of employee for maximum characters Last Last name of employee for maximum characters  Last\",",
									"  \"password\" : \"Password2\",",
									"  \"phone\" : {",
									"    \"number\" : \"123456789011123\",",
									"    \"extension\" : \"12121\"",
									"  },",
									"  \"birthDate\" : \"1998-01-27\",",
									"  \"email\" :  \"emailllll@shilpi.com\"",
									"};",
									"var minUserData={",
									"  \"firstName\" : \"T\",",
									"  \"lastName\" : \"e\",",
									"  \"password\" : \"Password3\",",
									"  \"phone\" : {",
									"    \"number\" : \"1234567888\",",
									"    \"extension\" : \"54321\"",
									"  },",
									"  \"birthDate\" : \"1998-01-27\",",
									"  \"email\" : \"T@a.com\"",
									"};",
									"var allFieldsUserData={",
									"  \"firstName\" : \"Thomas\",",
									"  \"lastName\" : \"Test_Surname\",",
									"  \"password\" : \"Password3\",",
									"   \"address\" : {",
									"    \"address1\" : \"10 Lane\",",
									"    \"address2\" : \"Little Avenue\",",
									"    \"city\" : \"Little Rock\",",
									"    \"state\" : \"Arkansas\",",
									"    \"country\" : \"United States\",",
									"    \"zipCode\" : \"70002\"",
									"  },",
									"  \"phone\" : {",
									"    \"number\" : \"1234567999\",",
									"    \"extension\" : \"32154\"",
									"  },",
									"  \"birthDate\" : \"1998-01-27\",",
									"  \"email\" : \"TestUser@abc.com\"",
									"};",
									"console.log(JSON.stringify(request));",
									"if(!testFirstNameIteration) {",
									"    ",
									"    testFirstNameIteration =  [",
									"        {data: nominalUserData,statusCode :201 , type : \"Nominal\"},",
									"        {data: maxUserData,statusCode: 201, type: \"Max\"},",
									"        {data: minUserData,statusCode :201 , type : \"Min\"},",
									"        {data: allFieldsUserData,statusCode: 201 , type: \"allFields\"}];",
									"}",
									"var currentNameIteration =testFirstNameIteration.shift();",
									"",
									"pm.environment.set(\"testFirstNameIteration\", testFirstNameIteration);",
									"pm.environment.set(\"currentNameIteration\", JSON.stringify(currentNameIteration));",
									"pm.environment.set(\"currentNameIterationData\", JSON.stringify(currentNameIteration.data));",
									"pm.environment.set(\"testType\", JSON.stringify(currentNameIteration.type));",
									"pm.environment.set(\"statsCode\", JSON.stringify(currentNameIteration.statusCode));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentNameIterationData}}\n"
						},
						"url": {
							"raw": "https://qa.greatestclubmanagementsoftwareever.com/registration/user",
							"protocol": "https",
							"host": [
								"qa",
								"greatestclubmanagementsoftwareever",
								"com"
							],
							"path": [
								"registration",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1eeb1936-8705-4784-bc00-3d7820a16193",
								"type": "text/javascript",
								"exec": [
									"",
									"var currentRequest =  JSON.parse(pm.environment.get(\"currentNameIteration\")); ",
									"console.log(\"Current request\");",
									"console.log(currentRequest);",
									"var orgInfo =  pm.environment.get(\"orgInfoDetails\"); ",
									" var resBody = JSON.parse(responseBody);",
									" if(!orgInfo) orgInfo=[];",
									" ",
									"function pushOrgInfoToAry(accessToken) {",
									"    ",
									"    for(var i=0; i<orgInfo.length; i++){",
									"        console.log(\"current orgid : \"+orgInfo[i].orgId+\" comp org : \"+currentRequest.orgId);",
									"        if(orgInfo[i].orgId==currentRequest.orgId){",
									"            orgInfo[i].accessToken=accessToken;",
									"             console.log(\"setting access token\");",
									"             console.log(orgInfo[i]);",
									"            break;",
									"        }",
									"    }",
									"  ",
									"}",
									"",
									"  if (responseCode.code===200) {",
									"          console.log(resBody);",
									"         pushOrgInfoToAry(resBody.accessToken); ",
									"      console.log(\"saving updated orgInfo\");",
									"    pm.environment.set(\"orgInfoDetails\", orgInfo); ",
									"  ",
									"  } ",
									"  ",
									" var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
									"    if(testFirstNameIteration.length>0) {",
									"        console.log(\"Going next request\");",
									"        console.log(testFirstNameIteration);",
									"        postman.setNextRequest(\"Authorization Copy\");",
									"    } else {",
									"      pm.environment.unset(\"currentRequest\");",
									"      pm.environment.unset(\"currentNameIteration\");",
									"      pm.environment.unset(\"currentNameIterationData\");",
									"      pm.environment.unset(\"testFirstNameIteration\");",
									"        postman.setNextRequest();",
									"        ",
									"        ",
									"    }",
									"    ",
									"     ",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8054d913-8275-4ab0-be2a-705b5ca6e19c",
								"type": "text/javascript",
								"exec": [
									"var orgInfo =  pm.environment.get(\"orgInfoDetails\");",
									"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
									"",
									"if(!testFirstNameIteration) {",
									"    testFirstNameIteration =JSON.parse(JSON.stringify(orgInfo));",
									"}",
									"",
									"var currentNameIteration =testFirstNameIteration.shift();",
									"",
									"pm.environment.set(\"testFirstNameIteration\", testFirstNameIteration);",
									"pm.environment.set(\"currentNameIteration\", JSON.stringify(currentNameIteration));",
									"pm.environment.set(\"organizationId\", currentNameIteration.orgId);",
									"pm.environment.set(\"ownerEmail\",currentNameIteration.ownerEmail );",
									"pm.environment.set(\"ownerPassword\",currentNameIteration.ownerPassword);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YXV0b21hdGVkLXRlc3RpbmctY2xpZW50OiNhbnRpLWpvbmFz"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{ownerPassword}}\",\r\n  \"username\": \"{{ownerEmail}}\"\r\n}"
						},
						"url": {
							"raw": "{{authentication}}/organization/{{organizationId}}/login?clientId=automated-testing-client",
							"host": [
								"{{authentication}}"
							],
							"path": [
								"organization",
								"{{organizationId}}",
								"login"
							],
							"query": [
								{
									"key": "clientId",
									"value": "automated-testing-client"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "createOrgLocation Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1443f93c-254f-439c-acab-afaaf3a62e94",
								"type": "text/javascript",
								"exec": [
									"var currentRequest =  JSON.parse(pm.environment.get(\"currentOrgInfo\")); ",
									"console.log(\"Current request\");",
									"console.log(currentRequest);",
									"var orgInfo =  pm.environment.get(\"orgInfoDetails\"); ",
									" var resBody = JSON.parse(responseBody);",
									" if(!orgInfo) orgInfo=[];",
									"",
									"",
									"",
									"",
									" ",
									"function pushOrgInfoToAry(addressId,locationId,locationName,orgName) {",
									"    ",
									"        for(var i=0; i<orgInfo.length; i++){",
									"        console.log(\"current orgid : \"+orgInfo[i].orgId+\" comp org : \"+currentRequest.orgId);",
									"        if(orgInfo[i].orgId==currentRequest.orgId){",
									"            ",
									"            orgInfo[i].addressId=addressId;",
									"            orgInfo[i].locationId=locationId;",
									"            orgInfo[i].locationName=locationName;",
									"            orgInfo[i].orgName=orgName;",
									"             ",
									"             console.log(orgInfo[i]);",
									"            break;",
									"        }",
									"    }",
									"}",
									"",
									"  if (responseCode.code===201) {",
									"     console.log(resBody);",
									"     pushOrgInfoToAry(resBody.location.address.id,resBody.location.id,resBody.location.name,resBody.name);",
									"     console.log(\"saving updated orgInfo\");",
									"    pm.environment.set(\"orgInfoDetails\", orgInfo); ",
									"  ",
									"  } ",
									"",
									"",
									" var testFirstNameIteration = pm.environment.get(\"testFirstNameIteration\");",
									"  if (testFirstNameIteration.length > 0) {",
									"    postman.setNextRequest(\"createOrgLocation Copy\");",
									"    } else {",
									"         pm.environment.unset(\"currentRequest\");",
									"         pm.environment.unset(\"currentNameIteration\");",
									"         pm.environment.unset(\"testFirstNameIteration\");",
									"         pm.environment.unset(\"currentNameIterationData\");",
									"         postman.setNextRequest();",
									"",
									"}",
									"",
									"  tests[\"Response code should be 201\"] = responseCode.code === 201;",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2fd05b65-a439-4736-93d7-2d5648172a89",
								"type": "text/javascript",
								"exec": [
									"var orgInfo =  pm.environment.get(\"orgInfoDetails\");",
									"",
									"console.log(\"Complete orgInfo:->\"+ JSON.stringify(orgInfo));",
									"",
									"",
									"var orgInfoValue =  pm.environment.get(\"orgInfoValue\");",
									"if(!orgInfoValue) {",
									"    orgInfoValue =JSON.parse(JSON.stringify(orgInfo));",
									"}",
									"    ",
									"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
									"var currentOrgInfo=orgInfoValue.shift();",
									" ",
									"var orgNumber = Math.floor(Math.random() * 9000000) + 1000000;",
									"",
									"",
									"postman.setEnvironmentVariable(\"orgNumber\", orgNumber);",
									"console.log(\"CurrentOrgInfo:->\"+JSON.stringify(currentOrgInfo));",
									"",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"",
									"",
									"var nominalUserData={",
									"  \"name\" : \"University Sports and Fitnes Nominal \"+orgNumber,",
									"  \"ownerId\" : currentOrgInfo.ownerId,",
									"  \"location\" : {",
									"    \"name\" : \"University Fitness Center \"+orgNumber,",
									"    \"address\" : {",
									"      \"address1\" : \"123 Fitness Lane \"+orgNumber,",
									"      \"address2\" : \"PO Box \"+orgNumber,",
									"      \"city\" : \"Little Rock\",",
									"      \"state\" : \"Alaska\",",
									"      \"country\" : \"United States\",",
									"      \"zipCode\" : \"33935\"",
									"    },",
									"    \"phone\" : {",
									"      \"number\" : \"1234567899\",",
									"      \"extension\" : \"411\"",
									"    },",
									"    \"email\" : {",
									"      \"address\" : \"UniversityFitness\"+orgNumber+\"@ufit.com\"",
									"    }",
									"  }",
									"};",
									"",
									"var maxUserData={",
									"  \"name\" : \"aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeee dsfsfsdfdfsfsffasdfsdfsdffd\"+orgNumber,",
									"  \"ownerId\" : currentOrgInfo.ownerId,",
									"  \"location\" : {",
									"    \"name\" : \"University Fitness University Fitness Center University Fitness Center Center\"+orgNumber,",
									"    \"address\" : {",
									"      \"address1\" : \"123 Fitness 123 Fitness Lane Lane Fitness Lane Lane\"+orgNumber,",
									"      \"address2\" : \"PO Box 123 PO Box PO Box 123\"+orgNumber,",
									"      \"city\" : \"Little Rock sMALL Rock Middle Rock\",",
									"      \"state\" : \"Alaska\",",
									"      \"country\" : \"United States\",",
									"      \"zipCode\" : \"339312335\"",
									"    },",
									"    \"phone\" : {",
									"      \"number\" : \"1234567892\",",
									"      \"extension\" : \"414\"",
									"    },",
									"    \"email\" : {",
									"      \"address\" : \"UniversityFit\"+orgNumber+\"@ufit.com\"",
									"    }",
									"  }",
									"};",
									"",
									"var minUserData={",
									"  \"name\" : \"U\"+orgNumber,",
									"  \"ownerId\" : currentOrgInfo.ownerId,",
									"  \"location\" : {",
									"    \"name\" : \"U\",",
									"    \"address\" : {",
									"      \"address1\" : \"L\",",
									"      \"address2\" : \"PO\"+orgNumber,",
									"      \"city\" : \"Little\",",
									"      \"state\" : \"Alaska\",",
									"      \"country\" : \"United States\",",
									"      \"zipCode\" : \"75028\"",
									"    },",
									"    \"phone\" : {",
									"      \"number\" : \"1234567896\",",
									"      \"extension\" : \"413\"",
									"    },",
									"    \"email\" : {",
									"      \"address\" : \"U\"+orgNumber+\"@ufit.com\"",
									"    }",
									"  }",
									"};",
									"",
									"var allFieldsUserData={",
									"  \"name\" : \"University Sports and Fitness\"+orgNumber,",
									"  \"tin\" : \"12345\",",
									"  \"ownerId\" : currentOrgInfo.ownerId,",
									"  \"location\" : {",
									"    \"name\" : \"University Fitness Center\"+orgNumber,",
									"    \"address\" : {",
									"      \"address1\" : \"123 456 Fitness Lane\"+orgNumber,",
									"      \"address2\" : \"PO Box\"+orgNumber,",
									"      \"city\" : \"Little Rock\",",
									"      \"state\" : \"Florida\",",
									"      \"country\" : \"United States\",",
									"      \"zipCode\" : \"33935\"",
									"    },",
									"    \"phone\" : {",
									"      \"number\" : \"1234567890\",",
									"      \"extension\" : \"412\"",
									"      ",
									"    },",
									"    \"email\" : {",
									"      \"address\" : \"UniversityFitnez\"+orgNumber+\"@ufit.com\"",
									"    }",
									"  },",
									"  \"email\" : {",
									"      \"address\" : \"abc\"+orgNumber+\"@ufit.com\"",
									"  }",
									"};",
									"",
									"",
									"console.log(JSON.stringify(request));",
									"if(!testFirstNameIteration) {",
									"    testFirstNameIteration =  [",
									"        {data: nominalUserData,statusCode :201 , type : \"Nominal\"},",
									"        {data: maxUserData,statusCode: 201, type: \"Max\"},",
									"        {data: minUserData,statusCode :201 , type : \"Min\"},",
									"        {data: allFieldsUserData,statusCode: 201 , type: \"allFields\"}",
									"        ];",
									"}",
									"",
									"var currentNameIteration =testFirstNameIteration.shift();",
									"",
									"console.log(\"orgID:->\"+currentOrgInfo.orgId);",
									"",
									"pm.environment.set(\"testFirstNameIteration\", testFirstNameIteration);",
									"pm.environment.set(\"orgInfoValue\", orgInfoValue);",
									"pm.environment.set(\"currentNameIteration\", JSON.stringify(currentNameIteration));",
									"pm.environment.set(\"currentOrgInfo\", JSON.stringify(currentOrgInfo));",
									"pm.environment.set(\"organizationId\", currentOrgInfo.orgId);",
									"pm.environment.set(\"accessToken\", currentOrgInfo.accessToken);",
									"pm.environment.set(\"testType\", JSON.stringify(currentNameIteration.type));",
									"pm.environment.set(\"currentNameIterationData\", JSON.stringify(currentNameIteration.data));",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentNameIterationData}}"
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/organization",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"organization"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Photos For Org",
			"description": null,
			"item": [
				{
					"name": "SaveEmployeePhoto1_male",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ce9d9fb-8a9b-44b9-bda5-3f6a60376ec1",
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"photoId_male_1\", jsonData.id);",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e8\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee1\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e8\",\n    \"name\": \"employee1\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Employee",
			"description": null,
			"item": [
				{
					"name": "create Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ffbfe7da-299a-4775-9337-0aa696ffb1a9",
								"type": "text/javascript",
								"exec": [
									"var currentRequest =  JSON.parse(pm.environment.get(\"currentNameIteration\")); ",
									"console.log(\"Current request\");",
									"console.log(currentRequest);",
									"var orgInfo =  pm.environment.get(\"orgInfoDetails\"); ",
									" var resBody = JSON.parse(responseBody);",
									" if(!orgInfo) orgInfo=[];",
									"",
									"",
									"",
									"",
									" ",
									"function pushOrgInfoToAry(employeeUserId,employeeId,employeeTokenId,EmpTokenExpirationTime,employeeEmail) {",
									"    ",
									"        for(var i=0; i<orgInfo.length; i++){",
									"        console.log(\"current orgid : \"+orgInfo[i].orgId+\" comp org : \"+currentRequest.orgId);",
									"        if(orgInfo[i].orgId== pm.environment.get(\"organizationId\")){",
									"             if(!orgInfo[i].employees)  orgInfo[i].employees=[];",
									"             orgInfo[i].employees.push({",
									"                 employeeUserId: employeeUserId,",
									"                 employeeId:employeeId,",
									"                 employeeTokenId:employeeTokenId,",
									"                 empTokenExpirationTime:EmpTokenExpirationTime,",
									"                 employeeEmail:employeeEmail",
									"                 ",
									"             });",
									"          ",
									"             console.log(orgInfo[i]);",
									"            break;",
									"        }",
									"    }",
									"}",
									"",
									"  if (responseCode.code===201) {",
									"     console.log(resBody);",
									"     pushOrgInfoToAry(resBody.userId,resBody.id,resBody.token.id,resBody.token.expirationTime,resBody.email);",
									"     console.log(\"saving updated orgInfo In Employee\");",
									"    pm.environment.set(\"orgInfoDetails\", orgInfo); ",
									"  ",
									"  } ",
									"",
									"",
									" var testFirstNameIteration = pm.environment.get(\"testFirstNameIteration\");",
									"  if (testFirstNameIteration.length > 0) {",
									"    postman.setNextRequest(\"create Employee\");",
									"    } else {",
									"         pm.environment.unset(\"currentNameIteration\");",
									"         pm.environment.unset(\"testFirstNameIteration\");",
									"         pm.environment.unset(\"currentNameIterationData\");",
									"         postman.setNextRequest();",
									"",
									"}",
									"",
									"  tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"",
									"",
									"pm.globals.unset(\"variable_key\");",
									"",
									"pm.globals.unset(\"variable_value\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "113dee49-ea84-41e6-9f49-20e0197386cf",
								"type": "text/javascript",
								"exec": [
									"var orgInfo =  pm.environment.get(\"orgInfoDetails\");",
									"",
									"console.log(\"Complete orgInfo:->\"+ JSON.stringify(orgInfo[0]));",
									"",
									"",
									"",
									"    ",
									"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
									"",
									" ",
									"var orgNumber = Math.floor(Math.random() * 9000000) + 1000000;",
									"",
									"",
									"postman.setEnvironmentVariable(\"orgNumber\", orgNumber);",
									"",
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"",
									"var photoId = postman.getEnvironmentVariable(\"photoId_male_1\");",
									"",
									"var nominalUserData={",
									"  ",
									"  \"email\" : \"UniversityFitness12\"+orgNumber+\"@qa4life.com\",",
									"  \"firstName\" : \"{{randFirstName}}\"+orgNumber,",
									"  \"lastName\" : \"{{randLastName}}\"+orgNumber,",
									"  \"address\" : {",
									"    \"address1\" :\"123 Fitness Lane \"+orgNumber,",
									"    \"address2\" : \"PO Box \"+orgNumber,",
									"    \"city\" : \"Little Rock\",",
									"    \"state\" : \"Alabama\",",
									"    \"country\" : \"United States\",",
									"    \"zipCode\" : \"33935\"",
									"  },",
									"  \"phone\" : {",
									"      \"number\" : \"1234567899\",",
									"      \"extension\" : \"411\"",
									"    },",
									"  \"userType\" : \"Customer\",",
									"   \"photoId\" : photoId",
									"",
									"  ",
									"};",
									"",
									"var maxUserData={",
									"  \"email\" : \"cMTH0p5ZWopWG9A9D3YWFQ60rQns5owQmsH0vyFDUI4U9OVl5ODrHhIDPO7aK5xSAoPRme6jILNFpuxg5o3AKPhJCHp4hOp3LcASAca0SL85I8Yxt28wPoLbGszMTJKE2MXzfZpvJtQx8uFN2MQ32fc2W4ZVCdwiLnzdVC2SmtBx2WXDpO1LrzpE0MYzeg5ngQqTB6MoE1o7CtaIBu4jTj0RiRsIdbYaCtFmQkN4jh\"+orgNumber+\"@qa4life.com\",",
									"  \"firstName\" :  \"aaaaaaaaaabbbbbbbbbbccccccccccddddddddddee\",",
									"  \"lastName\" : \"p8kIec4DW8r9kT7FneKIiTUhJUJr5w6HHy9e68g0dRR9tiTcHv6uf7o7EzRrx6t9cVWVLWcL9XsRYyWiyObYSqyW2NImO\",",
									"  \"address\" : {",
									"    \"address1\" :\"4FBxeU96nwIVi5Hn6BM9UyvBkxCdh4PKsWM7JoPYxSmDxBKdxCC7ebGGIuEZfNlMsMhjd5eAOYmMGWhuIl4GHZTvsJYf14Xj1mX2wKBkPCQXMz2dXy9dctESxN4OVFbczuAOb60qMJS7WLukg2QiqHbCFErsMfnxDmu49Zbjva8lTZlO8zpw8TBMyUYcAVvnF\",",
									"    \"address2\" : \"PO Box 123 PO Box PO Box 123\",",
									"    \"city\" : \"Little Rock\",",
									"    \"state\" : \"Alabama\",",
									"    \"country\" : \"United States\",",
									"    \"zipCode\" : \"339312335\"",
									"  },",
									"  \"phone\" : {",
									"      \"number\" : \"123451234512345\",",
									"      \"extension\" : \"7508175081\"",
									"    },",
									"  \"userType\" : \"Customer\"",
									"",
									"  ",
									"};",
									"",
									"var minUserData={",
									"  \"email\" : \"U3\"+orgNumber+\"@qa4life.com\",",
									"  ",
									"  \"firstName\" :  \"a\",",
									"  \"lastName\" : \"b\",",
									"  \"address\" : {",
									"    \"address1\" :\"123 Fitness 123 Fitness Lane Lane Fitness Lane Lane\"+orgNumber,",
									"    \"address2\" : \"PO Box 123 PO Box PO Box 123\"+orgNumber,",
									"    \"city\" : \"Little Rock\",",
									"    \"state\" : \"Alabama\",",
									"    \"country\" : \"United States\",",
									"    \"zipCode\" : \"75081\"",
									"  },",
									"  \"phone\" : {",
									"      \"number\" : \"1234512345\",",
									"      \"extension\" : \"411\"",
									"    },",
									"  \"userType\" : \"Customer\"",
									"",
									"",
									"  ",
									"};",
									"",
									"var allFieldsUserData={",
									"  \"email\" : \"UniversityFitnez67\"+orgNumber+\"@qa4life.com\",",
									"  ",
									" \"firstName\" : \"Abc\"+orgNumber,",
									"  \"lastName\" : \"Team\"+orgNumber,",
									"  \"address\" : {",
									"    \"address1\" :\"123 Fitness 123 Fitness Lane Lane Fitness Lane Lane\"+orgNumber,",
									"    \"address2\" : \"PO Box 123 PO Box PO Box 123\"+orgNumber,",
									"    \"city\" : \"Little Rock\",",
									"    \"state\" : \"Alabama\",",
									"    \"country\" : \"United States\",",
									"    \"zipCode\" : \"339312335\"",
									"  },",
									"  \"phone\" : {",
									"      \"number\" : \"1234567798\",",
									"      \"extension\" : \"412\"",
									"    },",
									"  \"userType\" : \"Customer\",",
									"   \"photoId\" : photoId",
									"",
									" ",
									"};",
									"",
									"",
									"",
									"console.log(JSON.stringify(request));",
									"if(!testFirstNameIteration) {",
									"    testFirstNameIteration =  [",
									"        {data: nominalUserData,statusCode :201 , type : \"Nominal\"},",
									"        {data: maxUserData,statusCode: 201, type: \"Max\"},",
									"        {data: minUserData,statusCode :201 , type : \"Min\"},",
									"        {data: allFieldsUserData,statusCode: 201 , type: \"allFields\"}",
									"        ];",
									"}",
									"",
									"var currentNameIteration =testFirstNameIteration.shift();",
									"",
									"",
									"pm.environment.set(\"testFirstNameIteration\", testFirstNameIteration);",
									"pm.environment.set(\"currentNameIteration\", JSON.stringify(currentNameIteration));",
									"pm.environment.set(\"organizationId\", orgInfo[0].orgId);",
									"pm.environment.set(\"accessToken\", orgInfo[0].accessToken);",
									"pm.environment.set(\"testType\", JSON.stringify(currentNameIteration.type));",
									"pm.environment.set(\"currentNameIterationData\", JSON.stringify(currentNameIteration.data));",
									"",
									"",
									"",
									"pm.globals.set(\"variable_key\", \"variable_value\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentNameIterationData}}"
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/employee",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"employee"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UpdatePassword",
			"description": null,
			"item": [
				{
					"name": "UpdatePassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5c2c18d-5725-484f-929a-99711fd2b6e8",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;",
									" var testFirstNameIteration=pm.environment.get(\"currentEmployeeList\");",
									"    if(testFirstNameIteration.length>0) {",
									"        postman.setNextRequest(\"UpdatePassword\");",
									"    } else {",
									"      pm.environment.unset(\"currentEmployeeList\");",
									"      postman.setNextRequest();",
									"    }",
									"    "
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9dde715a-ac54-4f96-bc1e-2dfa95db48df",
								"type": "text/javascript",
								"exec": [
									"var orgInfo =  pm.environment.get(\"orgInfoDetails\");",
									"var currentEmployees= pm.environment.get(\"currentEmployeeList\");",
									"",
									"if(!currentEmployees){",
									"    currentEmployees=[];",
									"    currentEmployees=orgInfo[0].employees;",
									"}",
									"",
									"var employee=currentEmployees.shift();",
									"",
									"",
									"postman.setEnvironmentVariable(\"organizationId\",  orgInfo[0].orgId);",
									"postman.setEnvironmentVariable(\"employeeUserId_10\", employee.employeeUserId);",
									"postman.setEnvironmentVariable(\"employeeTokenId_3\", employee.employeeTokenId);",
									"",
									"pm.environment.set(\"currentEmployeeList\",currentEmployees);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\" : \"password2\"\r\n}"
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/user/{{employeeUserId_10}}/password?token={{employeeTokenId_3}}",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"user",
								"{{employeeUserId_10}}",
								"password"
							],
							"query": [
								{
									"key": "token",
									"value": "{{employeeTokenId_3}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Event Category",
			"description": null,
			"item": [
				{
					"name": "createEventCategory",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "beca9911-e3c5-4f7f-8aa5-caaef944e9f4",
								"type": "text/javascript",
								"exec": [
									"var eventCategory =  pm.environment.get(\"orgInfoDetails\");",
									"",
									"// var orgNum =  pm.environment.get(\"orgNumber\");",
									"",
									"    ",
									"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
									"",
									"",
									"var nominalUserData={ ",
									" \"name\" : \"Video Games5\"",
									"};",
									"",
									"var maxUserData={",
									"     \"name\" : \"swgPeZDRenhY0q8L4fR4HOSgSg2pBA18cOOesUl21wlD2seOf7zQ2GhiorcnrBEVG6hm63GXnJKT0d0JgqnXc72kJUHFP\"",
									"};",
									"",
									"var minUserData={",
									"  \"name\" : \"U\"",
									"  ",
									"};",
									"",
									"var allFieldsUserData={",
									" \"name\" : \"Yoga15\"",
									"};",
									"",
									"",
									"",
									"console.log(JSON.stringify(request));",
									"if(!testFirstNameIteration) {",
									"    testFirstNameIteration =  [",
									"        {data: nominalUserData,statusCode :201 , type : \"Nominal\"},",
									"        {data: maxUserData,statusCode: 201, type: \"Max\"},",
									"        {data: minUserData,statusCode :201 , type : \"Min\"},",
									"        {data: allFieldsUserData,statusCode: 201 , type: \"allFields\"}",
									"        ];",
									"}",
									"",
									"var currentNameIteration =testFirstNameIteration.shift();",
									"",
									"pm.environment.set(\"organizationId\",eventCategory[0].orgId);",
									"pm.environment.set(\"locationId\",eventCategory[0].locationId);",
									"",
									"",
									"pm.environment.set(\"testFirstNameIteration\", testFirstNameIteration);",
									"pm.environment.set(\"currentNameIteration\", JSON.stringify(currentNameIteration));",
									"pm.environment.set(\"testType\", currentNameIteration.type);",
									"pm.environment.set(\"currentNameIterationData\", JSON.stringify(currentNameIteration.data));",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bc253a76-591b-4824-afa0-9b2b2e09a95b",
								"type": "text/javascript",
								"exec": [
									"var currentRequest =  JSON.parse(pm.environment.get(\"currentNameIteration\")); ",
									"var testTypeNominal =  pm.environment.get(\"testType\"); ",
									"console.log(currentRequest);",
									"var orgInfo =  pm.environment.get(\"orgInfoDetails\"); ",
									" var resBody = JSON.parse(responseBody);",
									" if(!orgInfo) orgInfo=[];",
									"    console.log(\"Event Category\" + testTypeNominal);",
									"  if (responseCode.code===201 && testTypeNominal==\"Nominal\" ) {",
									"     console.log(resBody);",
									"       orgInfo[0].eventcategoryId=resBody.id;",
									"    ",
									"   ",
									"    pm.environment.set(\"orgInfoDetails\", orgInfo); ",
									"  ",
									"  } ",
									"",
									"",
									" var testFirstNameIteration = pm.environment.get(\"testFirstNameIteration\");",
									"  if (testFirstNameIteration.length > 0) {",
									"    postman.setNextRequest(\"createEventCategory\");",
									"    } else {",
									"         pm.environment.unset(\"currentNameIteration\");",
									"         pm.environment.unset(\"testFirstNameIteration\");",
									"         pm.environment.unset(\"currentNameIterationData\");",
									"         postman.setNextRequest();",
									"",
									"}",
									"",
									"  tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"",
									"",
									"pm.globals.unset(\"variable_key\");",
									"",
									"pm.globals.unset(\"variable_value\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentNameIterationData}}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get/Put Event Category",
			"description": null,
			"item": [
				{
					"name": "updateEventCategorybyID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0bf97a27-46c3-41c0-b69b-579cd5ab7511",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"postman.setNextRequest();"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "814d893c-134c-4f6f-a02a-7576bc3d7486",
								"type": "text/javascript",
								"exec": [
									"var orgInfo =  pm.environment.get(\"orgInfoDetails\");",
									"",
									"console.log(\"Update password\");",
									"console.log(orgInfo);",
									"",
									"postman.setEnvironmentVariable(\"organizationId\", orgInfo[0].orgId);",
									"pm.environment.set(\"locationId\",orgInfo[0].locationId);",
									"",
									"postman.setEnvironmentVariable(\"eventCategoryId\", orgInfo[0].eventcategoryId);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Movies\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory",
								"{{eventCategoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEventCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b008c69-dff7-4abb-90ed-3f0765089509",
								"type": "text/javascript",
								"exec": [
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "512e9a83-b7c6-4637-92e0-f5a145527e16",
								"type": "text/javascript",
								"exec": [
									"var orgInfo =  pm.environment.get(\"orgInfoDetails\");",
									"",
									"console.log(orgInfo);",
									"postman.setEnvironmentVariable(\"organizationId\", orgInfo[0].orgId);",
									"pm.environment.set(\"locationId\",orgInfo[0].locationId);",
									"postman.setEnvironmentVariable(\"eventCategoryId\", orgInfo[0].eventcategoryId);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory",
								"{{eventCategoryId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Events",
			"description": null,
			"item": [
				{
					"name": "CreateEventTypeYoga",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1046cfb8-ee56-4eae-89a6-cbc6c7dd3460",
								"type": "text/javascript",
								"exec": [
									"var currentRequest =  JSON.parse(pm.environment.get(\"currentNameIteration\")); ",
									"console.log(\"Current request\");",
									"console.log(currentRequest);",
									"var orgInfo =  pm.environment.get(\"orgInfoDetails\"); ",
									" var resBody = JSON.parse(responseBody);",
									" if(!orgInfo) orgInfo=[];",
									"",
									"",
									"",
									"",
									" ",
									"function pushOrgInfoToAry(eventId) {",
									"    ",
									"        for(var i=0; i<orgInfo.length; i++){",
									"        console.log(\"current orgid : \"+orgInfo[i].orgId+\" comp org : \"+currentRequest.orgId);",
									"        if(orgInfo[i].orgId== pm.environment.get(\"organizationId\")){",
									"             if(!orgInfo[i].event)  orgInfo[i].event=[];",
									"             orgInfo[i].event.push({",
									"                 eventId:eventId",
									"             });",
									"          ",
									"             console.log(orgInfo[i]);",
									"            break;",
									"        }",
									"    }",
									"}",
									"",
									"  if (responseCode.code===201) {",
									"     console.log(resBody);",
									"     pushOrgInfoToAry(resBody.id);",
									"     console.log(\"saving updated orgInfo In CreateEventTypeYoga\");",
									"    pm.environment.set(\"orgInfoDetails\", orgInfo); ",
									"  ",
									"  } ",
									"",
									"",
									" var testFirstNameIteration = pm.environment.get(\"testFirstNameIteration\");",
									"  if (testFirstNameIteration.length > 0) {",
									"    postman.setNextRequest(\"CreateEventTypeYoga\");",
									"    } else {",
									"         pm.environment.unset(\"currentNameIteration\");",
									"         pm.environment.unset(\"testFirstNameIteration\");",
									"         pm.environment.unset(\"currentNameIterationData\");",
									"         postman.setNextRequest();",
									"",
									"}",
									"",
									"  tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"",
									"",
									"pm.globals.unset(\"variable_key\");",
									"",
									"pm.globals.unset(\"variable_value\");",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "451d8aab-86d1-4785-b4d7-e6e1767633e9",
								"type": "text/javascript",
								"exec": [
									"var orgInfo =  pm.environment.get(\"orgInfoDetails\");",
									"",
									"console.log(\"Complete orgInfo:->\"+ JSON.stringify(orgInfo[0]));",
									"",
									"var orgNum =  pm.environment.get(\"orgNumber\");",
									"",
									"    ",
									"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
									"pm.getEnvironment",
									"",
									"var nominalUserData={ ",
									" \"name\" : \"Yoga\"+orgNum",
									"};",
									"",
									"var maxUserData={",
									"     \"name\" : \"K00eqvEgpwY3ee6pU8PCAAmA2QkPoYumJtncmJ75xOJixxQuLnidUolEt9UNAwwcAwZHGFQfTFn5VDIuglhwcbSDAyarD\"+orgNum",
									"};",
									"",
									"var minUserData={",
									"  \"name\" : \"Y\"+orgNum",
									"  ",
									"};",
									"",
									"var allFieldsUserData={",
									" \"name\" : \"BeerYoga\"+orgNum",
									"};",
									"",
									"",
									"",
									"console.log(JSON.stringify(request));",
									"if(!testFirstNameIteration) {",
									"    testFirstNameIteration =  [",
									"        {data: nominalUserData,statusCode :201 , type : \"Nominal\"},",
									"        {data: maxUserData,statusCode: 201, type: \"Max\"},",
									"        {data: minUserData,statusCode :201 , type : \"Min\"},",
									"        {data: allFieldsUserData,statusCode: 201 , type: \"allFields\"}",
									"        ];",
									"}",
									"",
									"var currentNameIteration =testFirstNameIteration.shift();",
									"",
									"",
									"pm.environment.set(\"testFirstNameIteration\", testFirstNameIteration);",
									"pm.environment.set(\"currentNameIteration\", JSON.stringify(currentNameIteration));",
									"pm.environment.set(\"testType\", JSON.stringify(currentNameIteration.type));",
									"pm.environment.set(\"currentNameIterationData\", JSON.stringify(currentNameIteration.data));",
									"",
									"",
									"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
									"    console.log(response.json());",
									"});",
									"",
									"pm.globals.set(\"variable_key\", \"variable_value\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{currentNameIterationData}}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory",
								"{{eventCategoryId}}",
								"eventType"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Packages",
			"description": null,
			"item": [
				{
					"name": "createUnlimitedItem_yoga",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddd359c6-71e8-4172-8221-5c7b84a7b508",
								"type": "text/javascript",
								"exec": [
									"var currentRequest =  JSON.parse(pm.environment.get(\"currentNameIteration\")); ",
									"console.log(\"Current request\");",
									"console.log(currentRequest);",
									"var orgInfo =  pm.environment.get(\"orgInfoDetails\"); ",
									" var resBody = JSON.parse(responseBody);",
									" if(!orgInfo) orgInfo=[];",
									"",
									"",
									"",
									"",
									" ",
									"function pushOrgInfoToAry(itemId_unlimited) {",
									"    ",
									"        for(var i=0; i<orgInfo.length; i++){",
									"        console.log(\"current orgid : \"+orgInfo[i].orgId+\" comp org : \"+currentRequest.orgId);",
									"        if(orgInfo[i].orgId== pm.environment.get(\"organizationId\")){",
									"             if(!orgInfo[i].purchaseUnlimited)  orgInfo[i].purchaseUnlimited=[];",
									"             orgInfo[i].purchaseUnlimited.push({",
									"                 itemId_unlimited:itemId_unlimited",
									"             });",
									"          ",
									"             console.log(orgInfo[i]);",
									"            break;",
									"        }",
									"    }",
									"}",
									"",
									"  if (responseCode.code===201) {",
									"     console.log(resBody);",
									"     pushOrgInfoToAry(resBody.id);",
									"     console.log(\"saving updated orgInfo In Employee\");",
									"    pm.environment.set(\"orgInfoDetails\", orgInfo); ",
									"  ",
									"  } ",
									"",
									"",
									" var testFirstNameIteration = pm.environment.get(\"testFirstNameIteration\");",
									"  if (testFirstNameIteration.length > 0) {",
									"    postman.setNextRequest(\"CreateEventTypeYoga\");",
									"    } else {",
									"         pm.environment.unset(\"currentNameIteration\");",
									"         pm.environment.unset(\"testFirstNameIteration\");",
									"         pm.environment.unset(\"currentNameIterationData\");",
									"         postman.setNextRequest();",
									"",
									"}",
									"",
									"  tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"",
									"",
									"pm.globals.unset(\"variable_key\");",
									"",
									"pm.globals.unset(\"variable_value\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2cd97842-b2e3-4efe-b62d-d89314fb7841",
								"type": "text/javascript",
								"exec": [
									"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);",
									"",
									"var orgInfo =  pm.environment.get(\"orgInfoDetails\");",
									"var currentEvent= pm.environment.get(\"currentEventList\");",
									"",
									"if(!currentEvent){",
									"    currentEvent=[];",
									"    currentEvent=orgInfo[0].event;",
									"}",
									"",
									"var Event=currentEvent.shift();",
									"",
									"",
									"postman.setEnvironmentVariable(\"organizationId\", orgInfo[0].orgId);",
									"postman.setEnvironmentVariable(\"eventTypeId_yoga\", Event.eventId);",
									"",
									"pm.environment.set(\"currentEventList\",currentEvent);",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;",
									" var testFirstNameIteration=pm.environment.get(\"currentEventList\");",
									"    if(testFirstNameIteration.length>0) {",
									"        postman.setNextRequest(\"updateEventCategorybyID\");",
									"    } else {",
									"      pm.environment.unset(\"currentEventCategoryList\");",
									"      postman.setNextRequest();",
									"    }",
									"",
									"//var orgInfo =  pm.environment.get(\"orgInfoDetails\");",
									"",
									"console.log(\"Complete orgInfo:->\"+ JSON.stringify(orgInfo[0]));",
									"",
									"var orgNum =  pm.environment.get(\"orgNumber\");",
									"",
									"    ",
									"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
									"pm.getEnvironment",
									"",
									"var nominalUserData={ ",
									" \"name\" : \"Yoga{{randItemNumber}}\",",
									"  \"type\" : \"SERVICE\",",
									"  \"unitPrice\" : 100,",
									"  \"quantity\" : 1,",
									"  \"unlimited\" :true,",
									"  \"expirationStart\" : \"PURCHASE\",",
									"  \"expirationTime\" : 1,",
									"  \"expirationUnit\" : \"DAYS\",",
									"  \"currencyId\" : \"USD\",",
									"  \"eligibleClasses\" : [ {",
									"    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"",
									"  } ]",
									"};",
									"",
									"var maxUserData={",
									" ",
									"  \"name\" : \"Yoga&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&{{randItemNumber}}\",",
									"  \"type\" : \"SERVICE\",",
									"  \"unitPrice\" : 100,",
									"  \"quantity\" : 1,",
									"  \"unlimited\" :true,",
									"  \"expirationStart\" : \"PURCHASE\",",
									"  \"expirationTime\" : 1,",
									"  \"expirationUnit\" : \"DAYS\",",
									"  \"currencyId\" : \"USD\",",
									"  \"eligibleClasses\" : [ {",
									"    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"",
									"  } ]",
									"",
									"};",
									"",
									"var minUserData={",
									"  \"name\" : \"Y{{randItemNumber}}\",",
									"  \"type\" : \"SERVICE\",",
									"  \"unitPrice\" : 100,",
									"  \"quantity\" : 1,",
									"  \"unlimited\" :true,",
									"  \"expirationStart\" : \"PURCHASE\",",
									"  \"expirationTime\" : 1,",
									"  \"expirationUnit\" : \"DAYS\",",
									"  \"currencyId\" : \"USD\",",
									"  \"eligibleClasses\" : [ {",
									"    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"",
									"  } ]",
									"  ",
									"};",
									"",
									"var allFieldsUserData={",
									"  \"name\" : \"YogaALLFeilds{{randItemNumber}}\",",
									"  \"type\" : \"SERVICE\",",
									"  \"unitPrice\" : 100,",
									"  \"quantity\" : 1,",
									"  \"unlimited\" :true,",
									"  \"expirationStart\" : \"PURCHASE\",",
									"  \"expirationTime\" : 1,",
									"  \"expirationUnit\" : \"DAYS\",",
									"  \"currencyId\" : \"USD\",",
									"  \"eligibleClasses\" : [ {",
									"    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"",
									"  } ]",
									"};",
									"",
									"",
									"",
									"console.log(JSON.stringify(request));",
									"if(!testFirstNameIteration) {",
									"    testFirstNameIteration =  [",
									"        {data: nominalUserData,statusCode :201 , type : \"Nominal\"},",
									"        {data: maxUserData,statusCode: 201, type: \"Max\"},",
									"        {data: minUserData,statusCode :201 , type : \"Min\"},",
									"        {data: allFieldsUserData,statusCode: 201 , type: \"allFields\"}",
									"        ];",
									"}",
									"",
									"var currentNameIteration =testFirstNameIteration.shift();",
									"",
									"",
									"pm.environment.set(\"testFirstNameIteration\", testFirstNameIteration);",
									"pm.environment.set(\"currentNameIteration\", JSON.stringify(currentNameIteration));",
									"pm.environment.set(\"testType\", JSON.stringify(currentNameIteration.type));",
									"pm.environment.set(\"currentNameIterationData\", JSON.stringify(currentNameIteration.data));",
									"",
									"",
									"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
									"    console.log(response.json());",
									"});",
									"",
									"pm.globals.set(\"variable_key\", \"variable_value\");",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Yoga{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" :true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  } ]\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createMeteredItem_yoga",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59206e1-4fe1-4b76-98cf-fe5fda518a0c",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_yoga\", jsonData.id);",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_yoga\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"unitPrice\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":2\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"MONTHS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bcf389d9-cdbc-4f58-a954-92c6bbade3ac",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Yoga Package\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 10,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" : false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 2,\r\n  \"expirationUnit\" : \"MONTHS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n    }\r\n  ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Item",
			"description": null,
			"item": [
				{
					"name": "createUnlimitedItem_cycling",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cfdb6c9e-7a38-44b4-a9b4-20b779f3ec3b",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_unlmtd_cycle\", jsonData.id);",
									"    ",
									"tests[\"Response Body has Name\"] = responseBody.has(\"Cycling \"+postman.getEnvironmentVariable(\"randItemNumber\"));",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Unit Price\"] = responseBody.has(\"\\\"unitPrice\\\":70\");",
									"tests[\"Response Body has Item Id\"] = responseBody.has(postman.getEnvironmentVariable(\"itemId_unlmtd_cycle\"));  ",
									"tests[\"Response Body has Correct quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\"); ",
									"tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\"); ",
									"tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":10\");",
									"tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"tests[\"Response Body has Correct currencyId\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":false\");",
									"tests[\"Response Body has Correct eventTypeId\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_cycling\"));",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a0ae3e57-f1e0-4376-b852-cdbbb39611c9",
								"type": "text/javascript",
								"exec": [
									"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Cycling {{randItemNumber}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 70,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" : true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 10,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_cycling}}\"\r\n  } ]\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createMeteredItem_yoga",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2227b71-3400-43b3-b12a-12afb2a6622e",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_metered_yoga\", jsonData.id);",
									"    ",
									"tests[\"Response Body has Name\"] = responseBody.has(\"Yoga \"+postman.getEnvironmentVariable(\"randItemNumber\"));",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Unit Price\"] = responseBody.has(\"\\\"unitPrice\\\":50\");",
									"tests[\"Response Body has Item Id\"] = responseBody.has(postman.getEnvironmentVariable(\"itemId_metered_yoga\"));  ",
									"tests[\"Response Body has Correct quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\"); ",
									"tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\"); ",
									"tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":5\");",
									"tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"tests[\"Response Body has Correct currencyId\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":true\");",
									"tests[\"Response Body has Correct eventTypeId\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_yoga\"));",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0b42b1e-28d6-4d20-824a-4c14d9a61f9c",
								"type": "text/javascript",
								"exec": [
									"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Yoga {{randItemNumber}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 50,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" : false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 5,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  } ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Purchase",
			"description": null,
			"item": [
				{
					"name": "getPurchase_metered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d171367-147b-4337-b035-4c5eb4ace29d",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if(responseCode.code==200) {",
									" ",
									"tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"multiple\\\"\");",
									"tests[\"Response Body has Correct Unit Price\"] = responseBody.has(\"\\\"unitPrice\\\":50\");",
									"tests[\"Response Body has Item Id\"] = responseBody.has(postman.getEnvironmentVariable(\"itemId_metered_yoga\"));  ",
									"tests[\"Response Body has Correct quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\"); ",
									"tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\"); ",
									"tests[\"Response Body has Correct currencyId\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":true\");",
									"tests[\"Response Body has Correct extendedPrice\"] = responseBody.has(\"\\\"extendedPrice\\\":50\");",
									"tests[\"Response Body has Correct tax\"] = responseBody.has(\"\\\"tax\\\":3\");",
									"tests[\"Response Body has Correct totalAmount\"] = responseBody.has(\"\\\"totalAmount\\\":53\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"item\" : {\r\n    \"id\" : \"{{itemId_metered_yoga}}\",\r\n    \"name\": \"Yoga\",\r\n    \"type\" : \"multiple\",\r\n    \"unitPrice\" : 50,\r\n    \"quantity\" : 1,\r\n    \"unlimited\" : false,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"currency\" : \"USD\",\r\n    \"eligibleClasses\" : [ ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPurchase_unlimited",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f75eb847-0fef-43bf-a5f9-7b1dad27dc20",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if(responseCode.code==200) {",
									"    ",
									"tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\\\"Cycling\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"multiple\\\"\");",
									"tests[\"Response Body has Correct Unit Price\"] = responseBody.has(\"\\\"unitPrice\\\":70\");",
									"tests[\"Response Body has Item Id\"] = responseBody.has(postman.getEnvironmentVariable(\"itemId_unlmtd_cycle\"));  ",
									"tests[\"Response Body has Correct quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\"); ",
									"tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\"); ",
									"tests[\"Response Body has Correct currencyId\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":false\");",
									"tests[\"Response Body has Correct extendedPrice\"] = responseBody.has(\"\\\"extendedPrice\\\":70\");",
									"tests[\"Response Body has Correct tax\"] = responseBody.has(\"\\\"tax\\\":4.2\");",
									"tests[\"Response Body has Correct totalAmount\"] = responseBody.has(\"\\\"totalAmount\\\":74.2\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"item\" : {\r\n    \"id\" : \"{{itemId_unlmtd_cycle}}\",\r\n    \"name\": \"Cycling\",\r\n    \"type\" : \"multiple\",\r\n    \"unitPrice\" : 70,\r\n    \"quantity\" : 1,\r\n    \"unlimited\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"currency\" : \"USD\",\r\n    \"eligibleClasses\" : [ ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Yoga for 10:30AM",
			"description": null,
			"item": [
				{
					"name": "CreateEvent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d2865e2-a748-4103-aca1-8a36c89d6d6b",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"eventId_1030am\", jsonData.id);",
									"tests[\"Response Body has Event Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_1030am\")+\"\\\"\");",
									"//tests[\"Response Body has Event Type Id\"] = responseBody.has(\"\\\"eventTypeid\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"tests[\"Response Body has Event Type Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"eventLevelId\");",
									"tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
									"tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
									"tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
									"tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6a3a3412-54c5-4878-8c24-a212f62bc536",
								"type": "text/javascript",
								"exec": [
									"var current_timestamp = new Date();",
									"var current_year = current_timestamp.getFullYear();",
									"var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
									"var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
									"",
									"var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:00:00\";",
									"var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:30:00\";",
									"",
									"var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
									"",
									"var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"do {",
									"    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"}",
									"while (randEventLevelId === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
									"postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
									"postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_yoga}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"locationId\" : \"{{locationId}}\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateEventForSwap",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e42900d1-5f52-44d2-82d2-7162d56ab89a",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventId_Swap\", jsonData.id); ",
									"    ",
									"    ",
									"tests[\"Response Body has Event Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_Swap\")+\"\\\"\");",
									"tests[\"Response Body has Event Type Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"eventLevelId\");",
									"tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
									"tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
									"tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":12\");",
									"tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9872d40a-2ce5-43e1-9222-8c9501f9b118",
								"type": "text/javascript",
								"exec": [
									"var current_timestamp = new Date();",
									"var current_year = current_timestamp.getFullYear();",
									"var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
									"var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
									"",
									"var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:00:00\";",
									"var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:30:00\";",
									"",
									"var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
									"",
									"var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"do {",
									"    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"}",
									"while (randEventLevelId === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
									"postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
									"postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_yoga}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"12\",\r\n  \"locationId\" : \"{{locationId}}\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateHost",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3ba80ad-8c4d-441b-8740-b2a5ce6938e1",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201){",
									"    ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventHostId\", jsonData.id);",
									"    tests[\"Response Body has eventHostId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventHostId\")+\"\\\"\");",
									"    tests[\"Response Body has employeeId\"] = responseBody.has(\"\\\"employeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");",
									"    tests[\"Response Body has substituteId\"] = responseBody.has(\"\\\"substituteId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId_2\")+\"\\\"\");",
									"    tests[\"Response Body has eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_1030am\")+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f85df667-db85-45b9-b383-ac874734086c",
								"type": "text/javascript",
								"exec": [
									"var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
									"",
									"var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"do {",
									"    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"}",
									"while (randEmployee === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventId\" : \"{{eventId_1030am}}\",\r\n  \"substituteId\" : \"{{employeeId_2}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/host",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_1030am}}",
								"host"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create and Enroll Member for 10:30AM",
			"description": null,
			"item": [
				{
					"name": "createUserMember",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6093b9d-3cf4-43c6-bb9a-4ae16c547a56",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"memberId_1030am\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
									"    ",
									"tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "94036e42-4a01-4281-a429-e5779fcaa2ae",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n    \"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
						},
						"url": {
							"raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
							"host": [
								"{{manageMember}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"member"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUnlimitedPurchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0519fcf8-f287-4cfc-bf42-b9f50dfc92a1",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
									"    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
									"    ",
									"    tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ea130f93-a6d5-483c-80f5-efa56bb79051",
								"type": "text/javascript",
								"exec": [
									"// var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
									"var randItemQuantity = 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
									"var purchaseAmount = randItemQuantity * unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUnlimitedPurchase_cycling",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6de6f11-5757-4319-9d84-83d87caeb76c",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"invoiceId1\", jsonData.items[0].invoiceId);",
									"    postman.setEnvironmentVariable(\"saleItemsId1\", jsonData.items[0].id);",
									"    ",
									"    ",
									"    ",
									"    tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId1\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlmtd_cycle\")+\"\\\"\");   ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId1\")+\"\\\"\");   ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"}",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "66fbb250-c6cb-46fe-bec5-b27e337bd67c",
								"type": "text/javascript",
								"exec": [
									"// var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
									"var randItemQuantity = 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
									"var purchaseAmount = randItemQuantity * unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlmtd_cycle}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createLimitedPurchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "971a3e20-4aea-40bc-8daf-ebd48bc5e33e",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"invoiceId2\", jsonData.items[0].invoiceId);",
									"postman.setEnvironmentVariable(\"saleItemsId2\", jsonData.items[0].id);",
									"",
									"tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId2\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_metered\")+\"\\\"\");   ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId2\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+true);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0ed6e2bf-66e4-42d2-869f-da9ca2853bbc",
								"type": "text/javascript",
								"exec": [
									"var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * .06).toFixed(2);",
									"var purchaseAmount = unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : false,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_metered}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEnrollment_yoga",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6fad71b-1e0b-4b97-97d2-e11f1ca3d360",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
									"    ",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\");  ",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+false);  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_1030am}}",
								"enrollment",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEnrollment_yogaSwap",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd0ba3ee-8884-409c-b7c5-c6da38e31bd5",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"        var jsonData = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"enrollmentIdSwap\", jsonData.id);",
									"        ",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentIdSwap\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
									"     tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+false);  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
									"        ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_Swap}}/enrollment/{{userId}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_Swap}}",
								"enrollment",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEnrollmentForSwap1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29b9eee3-d6fe-4c4e-8567-ee3b4fe4d553",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if(responseCode.code==200) {",
									"    ",
									"    var jsonData = JSON.parse(responseBody);",
									"    ",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/enrollment/{{userId}}/swap/{{eventId_Swap}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"enrollment",
								"{{userId}}",
								"swap",
								"{{eventId_Swap}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "swapEnrollmentUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b22fadba-1622-443c-b934-dfca989d9411",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    ",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"        var jsonData = JSON.parse(responseBody);",
									"        ",
									"        ",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");   ",
									"    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"photoId_female_5\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+false);  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
									"        ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fromEventId\" : \"{{eventId_Swap}}\",\r\n  \"toEventId\" : \"{{eventId_300pm}}\",\r\n  \"userid\" : \"{{userId}}\"\r\n}"
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/enrollment/swap",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"enrollment",
								"swap"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc588d5a-46ea-4cd9-9240-94c0ea378620",
								"type": "text/javascript",
								"exec": [
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
									"postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
									"",
									"//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
									"if(attendStatus == 'reserved'){",
									"    if (responseCode.code != 409)",
									"    {",
									"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    }",
									"    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
									"}else{",
									"    if (responseCode.code != 200)",
									"    {",
									"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    }",
									"    tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
									"tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\\\"attended\\\"\");",
									"tests[\"Response Body has Correct Member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\");",
									"tests[\"Response Body has Correct LastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct photoId\"] =  responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
									"tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");",
									"tests[\"Response Body has Correct attendanceDateTime\"] = responseBody.has(\"\\\"attendanceDateTime\\\":\"+\"\\\"\"+jsonData.attendanceDateTime+\"\\\"\");",
									"tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"//tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"expirationDateTime\");",
									"tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");",
									"tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":false\");",
									"tests[\"Response Body has Correct unlimited\"] = responseBody.has(jsonData.purchaseSummary.unlimited);",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "642dbddc-894a-4264-a4b5-9df5ebc16978",
								"type": "text/javascript",
								"exec": [
									"var attendStatus = ''",
									"var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
									"//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
									"console.log(\"Attend percent:\" + attendPercent)",
									"if(Math.random() <=  attendPercent){",
									"    attendStatus = \"attended\"",
									"}else{",
									"    attendStatus = \"reserved\"",
									"}",
									"postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}?status={{attendStatus}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_1030am}}",
								"enrollment",
								"{{userId}}"
							],
							"query": [
								{
									"key": "status",
									"value": "{{attendStatus}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Available Session",
			"description": null,
			"item": [
				{
					"name": "getAvailableSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f59284c-9d6a-49c0-8ebf-71e4a08b53d9",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if(responseCode.code==200) {",
									"    ",
									"    tests[\"Response Body has Correct enrolled\"] = responseBody.has(\"\\\"enrolled\\\":\"+false);",
									"",
									"    tests[\"Response Body has scheduled\"] = responseBody.has(\"scheduled\");",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"unlimited\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/enrollment/{{userId}}/session/{{eventId_1030am}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"enrollment",
								"{{userId}}",
								"session",
								"{{eventId_1030am}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Location",
			"description": null,
			"item": [
				{
					"name": "updateLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95a4d4d9-7655-4e1d-bdab-aab2b136ecbf",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\"); ",
									"tests[\"Response Body has Correct phoneNumber\"] = responseBody.has(\"\\\"phoneNumber\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"phoneNumber\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct phoneExtension\"] = responseBody.has(\"\\\"phoneExtension\\\":\"+\"\\\"\"+411+\"\\\"\"); ",
									"tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.email+\"\\\"\"); ",
									"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+jsonData.number+\"\\\"\"); ",
									"tests[\"Response Body has Correct waiverDocId\"] = responseBody.has(\"\\\"waiverDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\");",
									"tests[\"Response Body has Correct termDocId\"] = responseBody.has(\"\\\"termDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
									"tests[\"Response Body has Correct address id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.address.id+\"\\\"\");",
									"tests[\"Response Body has Correct address1\"] = responseBody.has(\"\\\"address1\\\":\"+\"\\\"\"+\"123 Fitness Lane\"+\"\\\"\");",
									"tests[\"Response Body has Correct address2\"] = responseBody.has(\"\\\"address2\\\":\"+\"\\\"\"+jsonData.address.address2+\"\\\"\");",
									"tests[\"Response Body has Correct address city\"] = responseBody.has(\"\\\"city\\\":\"+\"\\\"\"+\"Little Rock\"+\"\\\"\");",
									"tests[\"Response Body has Correct address zipCode\"] = responseBody.has(\"\\\"zipCode\\\":\"+\"\\\"33935\"+\"\\\"\");",
									"tests[\"Response Body has Correct address state\"] = responseBody.has(\"\\\"state\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randState\")+\"\\\"\");",
									"tests[\"Response Body has Correct address country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"\"+\"United States\"+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"University Fitness Center #{{orgNumber}}\",\r\n    \"address\" : {\r\n      \"address1\" : \"123 Fitness Lane\",\r\n      \"address2\" : \"PO Box {{$randomInt}}\",\r\n      \"city\" : \"Little Rock\",\r\n      \"state\" : \"{{randState}}\",\r\n      \"country\" : \"United States\",\r\n      \"zipCode\" : \"33935\"\r\n    },\r\n  \"email\" : {\r\n    \"address\" : \"UniversityFitness{{orgNumber}}@qa4life.com\"\r\n  },\r\n  \"phone\" : {\r\n      \"number\" : \"{{phoneNumber}}\",\r\n      \"extension\" : \"411\"\r\n    }\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{my-organization}}/{{organizationId}}/location/{{locationId}}",
							"host": [
								"{{my-organization}}"
							],
							"path": [
								"{{organizationId}}",
								"location",
								"{{locationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ffe900d-6ec7-49bc-a20a-181905d8cb81",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if(responseCode.code==200) {",
									"     var jsonData = JSON.parse(responseBody);",
									"    ",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\"); ",
									"tests[\"Response Body has Correct phoneNumber\"] = responseBody.has(\"\\\"phoneNumber\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"phoneNumber\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct phoneExtension\"] = responseBody.has(\"\\\"phoneExtension\\\":\"+\"\\\"\"+411+\"\\\"\"); ",
									"tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.email+\"\\\"\"); ",
									"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+jsonData.number+\"\\\"\"); ",
									"tests[\"Response Body has Correct waiverDocId\"] = responseBody.has(\"\\\"waiverDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\");",
									"tests[\"Response Body has Correct termDocId\"] = responseBody.has(\"\\\"termDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
									"tests[\"Response Body has Correct address id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.address.id+\"\\\"\");",
									"tests[\"Response Body has Correct address1\"] = responseBody.has(\"\\\"address1\\\":\"+\"\\\"\"+\"123 Fitness Lane\"+\"\\\"\");",
									"tests[\"Response Body has Correct address2\"] = responseBody.has(\"\\\"address2\\\":\"+\"\\\"\"+jsonData.address.address2+\"\\\"\");",
									"tests[\"Response Body has Correct address city\"] = responseBody.has(\"\\\"city\\\":\"+\"\\\"\"+\"Little Rock\"+\"\\\"\");",
									"tests[\"Response Body has Correct address zipCode\"] = responseBody.has(\"\\\"zipCode\\\":\"+\"\\\"33935\"+\"\\\"\");",
									"tests[\"Response Body has Correct address country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"\"+\"United States\"+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"University Fitness Center #{{orgNumber}}\",\r\n    \"address\" : {\r\n      \"address1\" : \"123 Fitness Lane\",\r\n      \"address2\" : \"PO Box {{$randomInt}}\",\r\n      \"city\" : \"Little Rock\",\r\n      \"state\" : \"{{randState}}\",\r\n      \"country\" : \"United States\",\r\n      \"zipCode\" : \"33935\"\r\n    },\r\n  \"email\" : {\r\n    \"address\" : \"UniversityFitness{{orgNumber}}@ufit.com\"\r\n  },\r\n  \"phone\" : {\r\n      \"number\" : \"{{phoneNumber}}\",\r\n      \"extension\" : \"411\"\r\n    }\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{my-organization}}/{{organizationId}}/location/{{locationId}}",
							"host": [
								"{{my-organization}}"
							],
							"path": [
								"{{organizationId}}",
								"location",
								"{{locationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetLocationDocument",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3202c8d0-aeef-43d0-9fab-b2044d06825e",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct waiverDocId\"] = responseBody.has(\"\\\"waiverDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\");",
									"tests[\"Response Body has Correct termDocId\"] = responseBody.has(\"\\\"termDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"University Fitness Center #{{orgNumber}}\",\r\n    \"address\" : {\r\n      \"address1\" : \"123 Fitness Lane\",\r\n      \"address2\" : \"PO Box {{$randomInt}}\",\r\n      \"city\" : \"Little Rock\",\r\n      \"state\" : \"{{randState}}\",\r\n      \"country\" : \"United States\",\r\n      \"zipCode\" : \"33935\"\r\n    },\r\n  \"email\" : {\r\n    \"address\" : \"UniversityFitness{{orgNumber}}@ufit.com\"\r\n  },\r\n  \"phone\" : {\r\n      \"number\" : \"{{phoneNumber}}\",\r\n      \"extension\" : \"411\"\r\n    }\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{my-organization}}/{{organizationId}}/{{locationId}}/document",
							"host": [
								"{{my-organization}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"document"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Send Reset Password Mail",
			"description": "Sends Reset Password email with Passcode for Reset Password/Forgot Password",
			"item": [
				{
					"name": "sendPasswordResetMail",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 202)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 202;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YXV0b21hdGVkLXRlc3RpbmctY2xpZW50OiNhbnRpLWpvbmFz"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{employeeEmail}}\"\r\n}"
						},
						"url": {
							"raw": "{{authentication}}/organization/{{organizationId}}/password?reset=true",
							"host": [
								"{{authentication}}"
							],
							"path": [
								"organization",
								"{{organizationId}}",
								"password"
							],
							"query": [
								{
									"key": "reset",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Promotion",
			"description": null,
			"item": [
				{
					"name": "CreatePromoCode_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f978107-eed4-423c-a724-f6e031bbbf39",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"promoCodeId\", jsonData.id);",
									"var code = postman.getEnvironmentVariable(\"promoCode\").toUpperCase();",
									"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
									"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
									"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount\");",
									"console.log(promoCodeAmount);",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoCodeId\")+\"\\\"\");",
									"tests[\"Response Body has Correct Code\"] = responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
									"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoStartDate\")+\"\\\"\");",
									"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoEndDate\")+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+promoCodeAmount);",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"FIXED_AMOUNT\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
									"",
									"}",
									"",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "651f470c-69ec-4ba4-a06e-1574cc9f5c11",
								"type": "text/javascript",
								"exec": [
									"var promoCodeAmount=3;",
									"var promoCodePrefix=\"Save\";",
									"var promoCode=promoCodePrefix+promoCodeAmount;",
									"",
									"//smart date increment logic, which rolls over into the next month if we're at the end of month",
									"var startDate = new Date();",
									"startDate.setDate(startDate.getDate() + 1);",
									"var endDate = new Date();",
									"endDate.setDate(endDate.getDate() + 5);",
									"",
									"var startyear = startDate.getFullYear();",
									"var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
									"var startDate = ('0' + (startDate.getDate())).slice(-2);",
									"var endyear = endDate.getFullYear();",
									"var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
									"var endDate = ('0' + (endDate.getDate())).slice(-2);",
									"",
									"var promoStartDate = startyear + \"-\" + startMonth + \"-\" + startDate;",
									"var promoEndDate = endyear + \"-\" + endMonth + \"-\" + endDate;",
									"",
									"",
									"postman.setEnvironmentVariable(\"promoStartDate\", promoStartDate);",
									"postman.setEnvironmentVariable(\"promoEndDate\", promoEndDate);",
									"postman.setEnvironmentVariable(\"promoCodeAmount\", promoCodeAmount);",
									"postman.setEnvironmentVariable(\"promoCode\", promoCode);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"promotion"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreatePromoCode_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95675abf-a380-47b5-8044-1b06e328031d",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"promoCodeId_2\", jsonData.id);",
									"var code = postman.getEnvironmentVariable(\"promoCode_2\").toUpperCase();",
									"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
									"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
									"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount_2\");",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoCodeId_2\")+\"\\\"\");",
									"tests[\"Response Body has Correct Code\"] = responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
									"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoStartDate\")+\"\\\"\");",
									"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoEndDate\")+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+promoCodeAmount);",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"FIXED_AMOUNT\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
									"}",
									"",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4616c289-d6b8-4546-8fd7-24faacc15c61",
								"type": "text/javascript",
								"exec": [
									"//smart date increment logic, which rolls over into the next month if we're at the end of month",
									"var startDate = new Date();",
									"startDate.setDate(startDate.getDate() + 1);",
									"var endDate = new Date();",
									"endDate.setDate(endDate.getDate() + 5);",
									"",
									"var startyear = startDate.getFullYear();",
									"var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
									"var startDate = ('0' + (startDate.getDate())).slice(-2);",
									"var endyear = endDate.getFullYear();",
									"var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
									"var endDate = ('0' + (endDate.getDate())).slice(-2);",
									"",
									"var promoStartDate = startyear + \"-\" + startMonth + \"-\" + startDate;",
									"var promoEndDate = endyear + \"-\" + endMonth + \"-\" + endDate;",
									"",
									"var promoCodeAmount_2=60;",
									"var promoCodePrefix=\"Save\";",
									"var promoCode_2=promoCodePrefix+promoCodeAmount_2;",
									"",
									"postman.setEnvironmentVariable(\"promoStartDate\", promoStartDate);",
									"postman.setEnvironmentVariable(\"promoEndDate\", promoEndDate);",
									"postman.setEnvironmentVariable(\"promoCodeAmount_2\", promoCodeAmount_2);",
									"postman.setEnvironmentVariable(\"promoCode_2\", promoCode_2);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode_2}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount_2}}\",\r\n  \"currency\" : \"USD\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"promotion"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPromoCodeByCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7eff8a04-b8f3-46af-bbf8-35613164545c",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"var code = postman.getEnvironmentVariable(\"promoCode\").toUpperCase();",
									"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
									"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
									"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount\");",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoCodeId\")+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCode\"] = responseBody.has(\"\\\"code\\\":\\\"\"+code+\"\\\"\");",
									"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoStartDate\")+\"\\\"\");",
									"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoEndDate\")+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+postman.getEnvironmentVariable(\"promoCodeAmount\"));",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"FIXED_AMOUNT\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
									"",
									"}",
									"",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "11ed69d9-22dd-4a40-829c-7dcc08ccf078",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCode}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"promotion",
								"{{promoCode}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPromoCodeByAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33003718-39a3-4252-93ad-5c6dccc0d6a8",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var code = postman.getEnvironmentVariable(\"promoCode\").toUpperCase();",
									"var code2 = postman.getEnvironmentVariable(\"promoCode_2\").toUpperCase();",
									"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
									"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
									"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount\");",
									"var promoCodeAmount2 = postman.getEnvironmentVariable(\"promoCodeAmount_2\");",
									"var promoCodeId = postman.getEnvironmentVariable(\"promoCodeId\");",
									"var promoCodeId2 = postman.getEnvironmentVariable(\"promoCodeId_2\");",
									"",
									"",
									"tests[\"Response Body has Correct PromoCode\"] = responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCode2\"] = responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code2+\"\\\"\");",
									"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+promoStartDate+\"\\\"\");",
									"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+promoEndDate+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount+\"\");",
									"tests[\"Response Body has Correct PromoCodeAmount2\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount2+\"\");",
									"tests[\"Response Body has Correct PromoCodeId1\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCodeId2\"] = tests[\"Response Body has Correct PromoCodeId1\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId2+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"FIXED_AMOUNT\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
									"",
									"",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "11ed69d9-22dd-4a40-829c-7dcc08ccf078",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"promotion"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdatePromoCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fc2a842-17f8-46c6-8d7c-4f1dfba1f4e2",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"var code = postman.getEnvironmentVariable(\"updatePromoCode\").toUpperCase();",
									"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
									"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
									"var promoCodeAmount = postman.getEnvironmentVariable(\"updatePromoCodeAmount\");",
									"var promoCodeId = postman.getEnvironmentVariable(\"promoCodeId\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCode\"] =  responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
									"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+promoStartDate+\"\\\"\");",
									"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+promoEndDate+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount+\"\");",
									"tests[\"Response Body has Correct PromoCodeId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"FIXED_AMOUNT\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
									"}",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6ffb73f7-a2fb-4b3c-b9b5-c762055d9958",
								"type": "text/javascript",
								"exec": [
									"var updateCodeAmount=38;",
									"var promoCodePrefix=\"SAVE\";",
									"var updatePromoCode=promoCodePrefix+updateCodeAmount;",
									"",
									"//smart date increment logic, which rolls over into the next month if we're at the end of month",
									"var startDate = new Date();",
									"startDate.setDate(startDate.getDate() + 1);",
									"var endDate = new Date();",
									"endDate.setDate(endDate.getDate() + 5);",
									"",
									"var startyear = startDate.getFullYear();",
									"var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
									"var startDate = ('0' + (startDate.getDate())).slice(-2);",
									"var endyear = endDate.getFullYear();",
									"var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
									"var endDate = ('0' + (endDate.getDate())).slice(-2);",
									"",
									"var promoStartDate = startyear + \"-\" + startMonth + \"-\" + startDate;",
									"var promoEndDate = endyear + \"-\" + endMonth + \"-\" + endDate;",
									"",
									"postman.setEnvironmentVariable(\"promoStartDate\", promoStartDate);",
									"postman.setEnvironmentVariable(\"promoEndDate\", promoEndDate);",
									"postman.setEnvironmentVariable(\"updatePromoCodeAmount\", updateCodeAmount);",
									"postman.setEnvironmentVariable(\"updatePromoCode\", updatePromoCode);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{updatePromoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{updatePromoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCodeId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"promotion",
								"{{promoCodeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PatchPromoCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c05bed9e-2227-488c-a628-e075a52fd4f9",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"promoCodeId\", jsonData.id);",
									"postman.setEnvironmentVariable(\"updatedPromoCode\", jsonData.code);",
									"var code = postman.getEnvironmentVariable(\"updatePromoCode\").toUpperCase();",
									"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
									"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
									"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount_2\");",
									"var promoCodeId = postman.getEnvironmentVariable(\"promoCodeId_2\");",
									"",
									"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCode\"] =  responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
									"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+promoStartDate+\"\\\"\");",
									"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+promoEndDate+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount+\"\");",
									"tests[\"Response Body has Correct PromoCodeId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"FIXED_AMOUNT\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save2\\\"\");",
									"}",
									"",
									"",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3806108e-88cd-4169-8c59-eaeda27490ce",
								"type": "text/javascript",
								"exec": [
									"",
									"var updatePromoCodePrefix=postman.getEnvironmentVariable(\"updatePromoCode\").replace(\"SAVE\",\"OFFER\");",
									"",
									"",
									"postman.setEnvironmentVariable(\"updatePromoCodePrefix\", updatePromoCodePrefix);",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Offer to Save2\",\r\n  \"code\" : \"{{updatePromoCode}}\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCodeId_2}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"promotion",
								"{{promoCodeId_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeletePromoCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6baba519-0330-4390-8f87-11ab666ff0a4",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200) ",
									"{",
									"var code = postman.getEnvironmentVariable(\"updatePromoCode\").toUpperCase();",
									"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
									"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
									"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount_2\");",
									"var promoCodeId = postman.getEnvironmentVariable(\"promoCodeId\");",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCode\"] =  responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
									"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+promoStartDate+\"\\\"\");",
									"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+promoEndDate+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount+\"\");",
									"tests[\"Response Body has Correct PromoCodeId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"FIXED_AMOUNT\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save2\\\"\");",
									"}",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ccc1cfc3-7a43-4173-9781-a3c9f869e30f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCodeId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"promotion",
								"{{promoCodeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetDeletedPromoCodeByCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d59b8adc-01c1-4976-b1e9-70800d61857f",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"",
									"if (responseCode.code != 404)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 404) ",
									"{",
									"",
									"}",
									"",
									"",
									"tests[\"Response code should be 404\"] = responseCode.code === 404;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "11ed69d9-22dd-4a40-829c-7dcc08ccf078",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCode}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"promotion",
								"{{promoCode}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}