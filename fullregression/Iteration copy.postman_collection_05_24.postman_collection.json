{
	"id": "045918fb-8be2-4a1f-8dc7-1c2305a5874b",
	"name": "Iteration copy.postman_collection_05_25_Shilpi",
	"description": null,
	"auth": null,
	"events": null,
	"variables": null,
	"order": [],
	"folders_order": [
		"1827f0e4-ed7e-4a48-a608-5d684460dc5c",
		"71e8c4c6-208b-4f26-9e0f-651a0ddd04fa",
		"f88cff5a-1b55-42bb-9b0c-e2dfb043e739",
		"c65b5055-4241-4ffa-bf29-de3735e65883",
		"18c9311d-3c14-49ac-98bd-141ef43dc4a7",
		"3b18f106-5a7f-49c8-af21-13f7fcdf3f35",
		"a5cbe7da-1952-47fb-98dd-fe3255449b62",
		"98793742-99b4-4eac-acc2-01fa5e566ccc",
		"53d7e50f-65f4-4f6d-994c-53e1c04bd7e7",
		"90ec4d67-1f9d-43c2-ad2b-5f0715a42fcc",
		"00326462-08c1-48f7-ac37-184657e02aea",
		"01871932-40a3-4417-bc06-f74df3c377ae",
		"bb92b5f7-21f7-40ac-81a7-12e012c0c2dd",
		"50cc7196-1d1b-4613-b7a5-b4be7227b020",
		"c7aaa660-1ed1-49b0-90ee-99f945c43b23"
	],
	"folders": [
		{
			"id": "01871932-40a3-4417-bc06-f74df3c377ae",
			"name": "Available Session",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "045918fb-8be2-4a1f-8dc7-1c2305a5874b",
			"folder": null,
			"order": [
				"0a94782b-beed-40f9-9aaf-271e21b74231"
			],
			"folders_order": []
		},
		{
			"id": "f88cff5a-1b55-42bb-9b0c-e2dfb043e739",
			"name": "Create Employee",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "045918fb-8be2-4a1f-8dc7-1c2305a5874b",
			"folder": null,
			"order": [
				"9e095b20-99f6-41ed-9d96-b5d8dc99bcf0"
			],
			"folders_order": []
		},
		{
			"id": "18c9311d-3c14-49ac-98bd-141ef43dc4a7",
			"name": "Create Event Category",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "045918fb-8be2-4a1f-8dc7-1c2305a5874b",
			"folder": null,
			"order": [
				"cc362938-2911-47bd-a905-a4d79ddd431c"
			],
			"folders_order": []
		},
		{
			"id": "a5cbe7da-1952-47fb-98dd-fe3255449b62",
			"name": "Create Events",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "045918fb-8be2-4a1f-8dc7-1c2305a5874b",
			"folder": null,
			"order": [
				"5d072bbf-9319-4d0d-b2b1-a74ae90d1bb6"
			],
			"folders_order": []
		},
		{
			"id": "53d7e50f-65f4-4f6d-994c-53e1c04bd7e7",
			"name": "Create Item",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "045918fb-8be2-4a1f-8dc7-1c2305a5874b",
			"folder": null,
			"order": [
				"7b16f4b0-7918-4b5e-be53-9f56d7bfdbf2",
				"ea212c17-2465-488a-adb1-228d6bcb522c"
			],
			"folders_order": []
		},
		{
			"id": "1827f0e4-ed7e-4a48-a608-5d684460dc5c",
			"name": "Create Org, Location and User",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "045918fb-8be2-4a1f-8dc7-1c2305a5874b",
			"folder": null,
			"order": [
				"2752201c-9b98-4531-b067-b6741469a675",
				"6888fb34-2038-4dbd-91de-aae84e4794f9",
				"60d3353b-71a4-4a11-873e-c93a3ffe7e6c"
			],
			"folders_order": []
		},
		{
			"id": "98793742-99b4-4eac-acc2-01fa5e566ccc",
			"name": "Create Packages",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "045918fb-8be2-4a1f-8dc7-1c2305a5874b",
			"folder": null,
			"order": [
				"4f770017-46ca-4aca-99d7-62b5b0df1d9e",
				"6edb0726-defa-4afc-9c45-75c0712e8a28"
			],
			"folders_order": []
		},
		{
			"id": "71e8c4c6-208b-4f26-9e0f-651a0ddd04fa",
			"name": "Create Photos For Org",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "045918fb-8be2-4a1f-8dc7-1c2305a5874b",
			"folder": null,
			"order": [
				"785fcdfe-4984-4da5-bf19-e9a4d50b3906"
			],
			"folders_order": []
		},
		{
			"id": "90ec4d67-1f9d-43c2-ad2b-5f0715a42fcc",
			"name": "Create Yoga for 10:30AM",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "045918fb-8be2-4a1f-8dc7-1c2305a5874b",
			"folder": null,
			"order": [
				"139ccdf9-41a5-40dd-a7fb-6b23ab0af32d",
				"7a7c3b45-4644-4e7f-97de-8a1c0a17298f",
				"5508e4ad-1121-4fc1-904b-0f69a5663c80"
			],
			"folders_order": []
		},
		{
			"id": "00326462-08c1-48f7-ac37-184657e02aea",
			"name": "Create and Enroll Member for 10:30AM",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "045918fb-8be2-4a1f-8dc7-1c2305a5874b",
			"folder": null,
			"order": [
				"0d7cc5de-38a9-4681-b2a7-2d1ecc2b7a78",
				"9ed8a064-6542-4f23-90b8-b4d5d5346e45",
				"97021ab3-ad07-46df-831e-ed2cd5ee2dd9",
				"472ad974-e5d4-4bf0-a601-994beaea0593",
				"16f0d784-f61f-458e-ad35-b202a5659885",
				"32a5a59d-e2a1-4392-94ca-4c82326b7148",
				"00894082-50cc-47bd-a765-f0fb3f4a998c",
				"aa8a8681-5840-4341-8b1f-744f51d9e9df",
				"a5e0a944-a6b4-4e18-82d0-9faf6c371c56"
			],
			"folders_order": []
		},
		{
			"id": "3b18f106-5a7f-49c8-af21-13f7fcdf3f35",
			"name": "Get/Put Event Category",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "045918fb-8be2-4a1f-8dc7-1c2305a5874b",
			"folder": null,
			"order": [
				"e46bc28e-d95d-4398-87ff-7a658e6e2afb",
				"adfe449a-da72-4f25-81a6-ec1948345114"
			],
			"folders_order": []
		},
		{
			"id": "c7aaa660-1ed1-49b0-90ee-99f945c43b23",
			"name": "Promotion",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "045918fb-8be2-4a1f-8dc7-1c2305a5874b",
			"folder": null,
			"order": [
				"6b0ac476-6e14-4f3a-b31a-670ad5b84144",
				"6e3e8acc-bb4c-45f4-bf10-c0877966a287",
				"2b9ea334-f372-4bc1-a8c1-b27fdafbc111",
				"ee85fe9f-b229-4328-a944-58b13a35c70a",
				"0bff4a68-391a-435b-a345-5931b56757bf",
				"45c5c479-0c39-4b0b-9e36-e0171f930be1",
				"695884f4-3db8-472d-b3d3-4677cc10451c",
				"d8f359b7-9339-4b6a-99f1-8d2f4f35bc8d"
			],
			"folders_order": []
		},
		{
			"id": "50cc7196-1d1b-4613-b7a5-b4be7227b020",
			"name": "Send Reset Password Mail",
			"description": "Sends Reset Password email with Passcode for Reset Password/Forgot Password",
			"auth": null,
			"events": null,
			"collection": "045918fb-8be2-4a1f-8dc7-1c2305a5874b",
			"folder": null,
			"order": [
				"7b6dd90a-ca7b-4599-8347-76811b6f4934"
			],
			"folders_order": []
		},
		{
			"id": "bb92b5f7-21f7-40ac-81a7-12e012c0c2dd",
			"name": "Update Location",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "045918fb-8be2-4a1f-8dc7-1c2305a5874b",
			"folder": null,
			"order": [
				"925ec25f-6b6f-4d37-85c9-4feab471d6f9",
				"f6272013-5b3f-41d2-a88e-52ad4b41d475",
				"c00fce22-0445-4574-8705-d9412d15a030"
			],
			"folders_order": []
		},
		{
			"id": "c65b5055-4241-4ffa-bf29-de3735e65883",
			"name": "UpdatePassword",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "045918fb-8be2-4a1f-8dc7-1c2305a5874b",
			"folder": null,
			"order": [
				"97cad6b4-c58e-4778-afdf-779351b20e4a"
			],
			"folders_order": []
		}
	],
	"requests": [
		{
			"id": "00894082-50cc-47bd-a765-f0fb3f4a998c",
			"name": "getEnrollmentForSwap1",
			"url": "{{enrollment}}/{{organizationId}}/{{locationId}}/enrollment/{{userId}}/swap/{{eventId_Swap}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "29b9eee3-d6fe-4c4e-8567-ee3b4fe4d553",
						"type": "text/javascript",
						"exec": [
							"if (responseCode.code != 200)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"} else if(responseCode.code==200) {",
							"    ",
							"    var jsonData = JSON.parse(responseBody);",
							"    ",
							"    ",
							"}",
							"",
							"tests[\"Response code should be 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"folder": "00326462-08c1-48f7-ac37-184657e02aea",
			"rawModeData": "",
			"headers": "Authorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "0a94782b-beed-40f9-9aaf-271e21b74231",
			"name": "getAvailableSession",
			"url": "{{enrollment}}/{{organizationId}}/{{locationId}}/enrollment/{{userId}}/session/{{eventId_1030am}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "8f59284c-9d6a-49c0-8ebf-71e4a08b53d9",
						"type": "text/javascript",
						"exec": [
							"if (responseCode.code != 200)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if(responseCode.code==200) {",
							"    ",
							"    tests[\"Response Body has Correct enrolled\"] = responseBody.has(\"\\\"enrolled\\\":\"+false);",
							"",
							"    tests[\"Response Body has scheduled\"] = responseBody.has(\"scheduled\");",
							"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"unlimited\");",
							"    ",
							"}",
							"",
							"tests[\"Response code should be 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"folder": "01871932-40a3-4417-bc06-f74df3c377ae",
			"rawModeData": "",
			"headers": "Authorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "0bff4a68-391a-435b-a345-5931b56757bf",
			"name": "UpdatePromoCode",
			"url": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCodeId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "1fc2a842-17f8-46c6-8d7c-4f1dfba1f4e2",
						"type": "text/javascript",
						"exec": [
							"if (responseCode.code != 200)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 200) ",
							"{",
							"var code = postman.getEnvironmentVariable(\"updatePromoCode\").toUpperCase();",
							"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
							"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
							"var promoCodeAmount = postman.getEnvironmentVariable(\"updatePromoCodeAmount\");",
							"var promoCodeId = postman.getEnvironmentVariable(\"promoCodeId\");",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");",
							"tests[\"Response Body has Correct PromoCode\"] =  responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
							"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+promoStartDate+\"\\\"\");",
							"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+promoEndDate+\"\\\"\");",
							"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount+\"\");",
							"tests[\"Response Body has Correct PromoCodeId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId+\"\\\"\");",
							"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"USD\\\"\");",
							"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"FIXED_AMOUNT\\\"\");",
							"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
							"}",
							"tests[\"Response code should be 200\"] = responseCode.code === 200;",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6ffb73f7-a2fb-4b3c-b9b5-c762055d9958",
						"type": "text/javascript",
						"exec": [
							"var updateCodeAmount=38;",
							"var promoCodePrefix=\"SAVE\";",
							"var updatePromoCode=promoCodePrefix+updateCodeAmount;",
							"",
							"//smart date increment logic, which rolls over into the next month if we're at the end of month",
							"var startDate = new Date();",
							"startDate.setDate(startDate.getDate() + 1);",
							"var endDate = new Date();",
							"endDate.setDate(endDate.getDate() + 5);",
							"",
							"var startyear = startDate.getFullYear();",
							"var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
							"var startDate = ('0' + (startDate.getDate())).slice(-2);",
							"var endyear = endDate.getFullYear();",
							"var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
							"var endDate = ('0' + (endDate.getDate())).slice(-2);",
							"",
							"var promoStartDate = startyear + \"-\" + startMonth + \"-\" + startDate;",
							"var promoEndDate = endyear + \"-\" + endMonth + \"-\" + endDate;",
							"",
							"postman.setEnvironmentVariable(\"promoStartDate\", promoStartDate);",
							"postman.setEnvironmentVariable(\"promoEndDate\", promoEndDate);",
							"postman.setEnvironmentVariable(\"updatePromoCodeAmount\", updateCodeAmount);",
							"postman.setEnvironmentVariable(\"updatePromoCode\", updatePromoCode);"
						]
					}
				}
			],
			"folder": "c7aaa660-1ed1-49b0-90ee-99f945c43b23",
			"rawModeData": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{updatePromoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{updatePromoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "0d7cc5de-38a9-4681-b2a7-2d1ecc2b7a78",
			"name": "createUserMember",
			"url": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "e6093b9d-3cf4-43c6-bb9a-4ae16c547a56",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"if (responseCode.code != 201)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 201) ",
							"{",
							"    var jsonData = JSON.parse(responseBody);",
							"    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
							"    postman.setEnvironmentVariable(\"memberId_1030am\", jsonData.id);",
							"    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
							"    ",
							"tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
							"tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
							"tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
							"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
							"tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
							"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
							"tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
							"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
							"tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
							"}",
							"",
							"tests[\"Response code should be 201\"] = responseCode.code === 201;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "94036e42-4a01-4281-a429-e5779fcaa2ae",
						"type": "text/javascript",
						"exec": [
							"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
							"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
							"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
							"var randFirstName = randFirstNameWithGenderArray[0];",
							"var gender = randFirstNameWithGenderArray[1];",
							"",
							"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
							"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
							"",
							"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
							"",
							"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
							"",
							"if(gender === 'male')",
							"{",
							"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
							"    do {",
							"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
							"    }",
							"    while (randPhotoId === undefined);",
							"} ",
							"else if (gender === 'female')",
							"{",
							"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
							"    do {",
							"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
							"    }",
							"    while (randPhotoId === undefined);",
							"}",
							"else",
							"{",
							"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
							"}",
							"",
							"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
							"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
							"var randState = states[Math.floor(Math.random() * states.length)];",
							"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
							"",
							"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
							"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
							"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
							"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
							"postman.setEnvironmentVariable(\"randState\", randState);",
							"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
						]
					}
				}
			],
			"folder": "00326462-08c1-48f7-ac37-184657e02aea",
			"rawModeData": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n    \"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "139ccdf9-41a5-40dd-a7fb-6b23ab0af32d",
			"name": "CreateEvent",
			"url": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "2d2865e2-a748-4103-aca1-8a36c89d6d6b",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"",
							"if (responseCode.code != 201)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 201)",
							"{",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"eventId_1030am\", jsonData.id);",
							"tests[\"Response Body has Event Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_1030am\")+\"\\\"\");",
							"//tests[\"Response Body has Event Type Id\"] = responseBody.has(\"\\\"eventTypeid\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
							"tests[\"Response Body has Event Type Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
							"tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"eventLevelId\");",
							"tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
							"tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
							"tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
							"tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
							"",
							"}",
							"",
							"tests[\"Response code should be 201\"] = responseCode.code === 201;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6a3a3412-54c5-4878-8c24-a212f62bc536",
						"type": "text/javascript",
						"exec": [
							"var current_timestamp = new Date();",
							"var current_year = current_timestamp.getFullYear();",
							"var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
							"var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
							"",
							"var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:00:00\";",
							"var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:30:00\";",
							"",
							"var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
							"",
							"var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
							"do {",
							"    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
							"}",
							"while (randEventLevelId === undefined);",
							"",
							"postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
							"postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
							"postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
						]
					}
				}
			],
			"folder": "90ec4d67-1f9d-43c2-ad2b-5f0715a42fcc",
			"rawModeData": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_yoga}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"locationId\" : \"{{locationId}}\"\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "16f0d784-f61f-458e-ad35-b202a5659885",
			"name": "createEnrollment_yoga",
			"url": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "text/plain"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "f6fad71b-1e0b-4b97-97d2-e11f1ca3d360",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"if (responseCode.code != 201)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 201) ",
							"{",
							"    var jsonData = JSON.parse(responseBody);",
							"    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
							"    ",
							"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
							"    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
							"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
							"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
							"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
							"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
							"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
							"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\");  ",
							"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
							"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
							"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
							"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+false);  ",
							"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
							"}",
							"",
							"tests[\"Response code should be 201\"] = responseCode.code === 201;"
						]
					}
				}
			],
			"folder": "00326462-08c1-48f7-ac37-184657e02aea",
			"rawModeData": "",
			"headers": "Content-Type: text/plain\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "2752201c-9b98-4531-b067-b6741469a675",
			"name": "createUserForOrg copy",
			"url": "https://qa.greatestclubmanagementsoftwareever.com/registration/user",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "c266b5b4-cd3e-45c5-a61f-0ba672743146",
						"type": "text/javascript",
						"exec": [
							" var orgInfo =  pm.environment.get(\"orgInfoDetails\"); ",
							" var resBody = JSON.parse(responseBody);",
							" if(!orgInfo) orgInfo=[];",
							" ",
							"function pushOrgInfoToAry(orgId,ownerId,ownerEmail,ownerPassword,testType) {",
							"    ",
							"   var obj = {",
							"       orgId:orgId,",
							"       ownerId:ownerId,",
							"       ownerEmail:ownerEmail,",
							"       ownerPassword:ownerPassword,",
							"       testType:testType",
							"   };",
							"",
							"   orgInfo.push(obj);",
							"   console.log(orgInfo);",
							"}",
							"",
							"  if (responseCode.code===201) {",
							"           // var compareResponse = ",
							"    ",
							"            if(pm.environment.get(\"testType\") === \"\\\"Nominal\\\"\") {",
							"          ",
							"            pushOrgInfoToAry(resBody.organizationId, resBody.userId,resBody.email,resBody.password,\"Nominal\"); ",
							"            ",
							"        } else if(pm.environment.get(\"testType\") == \"\\\"Max\\\"\") {",
							"           ",
							"          pushOrgInfoToAry(resBody.organizationId, resBody.userId,resBody.email,resBody.password,\"Max\"); ",
							"        } else if(pm.environment.get(\"testType\") == \"\\\"Min\\\"\") {",
							"            ",
							"         pushOrgInfoToAry(resBody.organizationId, resBody.userId,resBody.email,resBody.password,\"Min\"); ",
							"        } else if(pm.environment.get(\"testType\") == \"\\\"allFields\\\"\") {",
							"         ",
							"          pushOrgInfoToAry(resBody.organizationId, resBody.userId,resBody.email,resBody.password,\"allFields\"); ",
							"        }",
							"      ",
							"    pm.environment.set(\"orgInfoDetails\", orgInfo); ",
							"  ",
							"  } ",
							"  ",
							" var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
							"    if(testFirstNameIteration.length>0) {",
							"        console.log(testFirstNameIteration);",
							"        postman.setNextRequest(\"createUserForOrg copy\");",
							"    } else {",
							"        pm.environment.unset(\"testFirstNameIteration\");",
							"        postman.setNextRequest();",
							"        ",
							"    }",
							"tests[\"Response code should be 201\"] = responseCode.code === 201;",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "cc43079c-c7aa-454b-993a-79ebd055463b",
						"type": "text/javascript",
						"exec": [
							"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
							"var emailId=pm.environment.get(\"emailId\");",
							"var nominalUserData={",
							"  \"firstName\" : \"Michael\",",
							"  \"lastName\" : \"Test_Surname\",",
							"  \"password\" : \"Password1\",",
							"  \"phone\" : {",
							"    \"number\" : \"1234567890\",",
							"    \"extension\" : \"12345\"",
							"  },",
							"  \"birthDate\" : \"1998-01-27\",",
							"  \"email\" : \"TestUser@abc.com\"",
							"};",
							"var maxUserData={",
							"  \"firstName\" : \"First name of employee for maximum characters Firs\",",
							"  \"lastName\" : \"Last name of employee for maximum characters Last Last name of employee for maximum characters  Last\",",
							"  \"password\" : \"Password2\",",
							"  \"phone\" : {",
							"    \"number\" : \"123456789011123\",",
							"    \"extension\" : \"12121\"",
							"  },",
							"  \"birthDate\" : \"1998-01-27\",",
							"  \"email\" :  \"emailllll@shilpi.com\"",
							"};",
							"var minUserData={",
							"  \"firstName\" : \"T\",",
							"  \"lastName\" : \"e\",",
							"  \"password\" : \"Password3\",",
							"  \"phone\" : {",
							"    \"number\" : \"1234567888\",",
							"    \"extension\" : \"54321\"",
							"  },",
							"  \"birthDate\" : \"1998-01-27\",",
							"  \"email\" : \"T@a.com\"",
							"};",
							"var allFieldsUserData={",
							"  \"firstName\" : \"Thomas\",",
							"  \"lastName\" : \"Test_Surname\",",
							"  \"password\" : \"Password3\",",
							"   \"address\" : {",
							"    \"address1\" : \"10 Lane\",",
							"    \"address2\" : \"Little Avenue\",",
							"    \"city\" : \"Little Rock\",",
							"    \"state\" : \"Arkansas\",",
							"    \"country\" : \"United States\",",
							"    \"zipCode\" : \"70002\"",
							"  },",
							"  \"phone\" : {",
							"    \"number\" : \"1234567999\",",
							"    \"extension\" : \"32154\"",
							"  },",
							"  \"birthDate\" : \"1998-01-27\",",
							"  \"email\" : \"TestUser@abc.com\"",
							"};",
							"console.log(JSON.stringify(request));",
							"if(!testFirstNameIteration) {",
							"    ",
							"    testFirstNameIteration =  [",
							"        {data: nominalUserData,statusCode :201 , type : \"Nominal\"},",
							"        {data: maxUserData,statusCode: 201, type: \"Max\"},",
							"        {data: minUserData,statusCode :201 , type : \"Min\"},",
							"        {data: allFieldsUserData,statusCode: 201 , type: \"allFields\"}];",
							"}",
							"var currentNameIteration =testFirstNameIteration.shift();",
							"",
							"pm.environment.set(\"testFirstNameIteration\", testFirstNameIteration);",
							"pm.environment.set(\"currentNameIteration\", JSON.stringify(currentNameIteration));",
							"pm.environment.set(\"currentNameIterationData\", JSON.stringify(currentNameIteration.data));",
							"pm.environment.set(\"testType\", JSON.stringify(currentNameIteration.type));",
							"pm.environment.set(\"statsCode\", JSON.stringify(currentNameIteration.statusCode));"
						]
					}
				}
			],
			"folder": "1827f0e4-ed7e-4a48-a608-5d684460dc5c",
			"rawModeData": "{{currentNameIterationData}}\n",
			"headers": "Content-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "2b9ea334-f372-4bc1-a8c1-b27fdafbc111",
			"name": "GetPromoCodeByCode",
			"url": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCode}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "7eff8a04-b8f3-46af-bbf8-35613164545c",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"",
							"if (responseCode.code != 200)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 200) ",
							"{",
							"var jsonData = JSON.parse(responseBody);",
							"var code = postman.getEnvironmentVariable(\"promoCode\").toUpperCase();",
							"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
							"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
							"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount\");",
							"",
							"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoCodeId\")+\"\\\"\");",
							"tests[\"Response Body has Correct PromoCode\"] = responseBody.has(\"\\\"code\\\":\\\"\"+code+\"\\\"\");",
							"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoStartDate\")+\"\\\"\");",
							"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoEndDate\")+\"\\\"\");",
							"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+postman.getEnvironmentVariable(\"promoCodeAmount\"));",
							"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\\\"USD\\\"\");",
							"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"FIXED_AMOUNT\\\"\");",
							"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
							"",
							"}",
							"",
							"",
							"tests[\"Response code should be 200\"] = responseCode.code === 200;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "11ed69d9-22dd-4a40-829c-7dcc08ccf078",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"folder": "c7aaa660-1ed1-49b0-90ee-99f945c43b23",
			"rawModeData": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "32a5a59d-e2a1-4392-94ca-4c82326b7148",
			"name": "createEnrollment_yogaSwap",
			"url": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_Swap}}/enrollment/{{userId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "text/plain"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "cd0ba3ee-8884-409c-b7c5-c6da38e31bd5",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"if (responseCode.code != 201)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 201) ",
							"{",
							"        var jsonData = JSON.parse(responseBody);",
							"        postman.setEnvironmentVariable(\"enrollmentIdSwap\", jsonData.id);",
							"        ",
							"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentIdSwap\")+\"\\\"\");  ",
							"    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
							"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
							"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
							"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
							"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
							"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
							"     tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
							"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
							"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
							"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
							"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+false);  ",
							"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
							"        ",
							"}",
							"",
							"tests[\"Response code should be 201\"] = responseCode.code === 201;"
						]
					}
				}
			],
			"folder": "00326462-08c1-48f7-ac37-184657e02aea",
			"rawModeData": "",
			"headers": "Content-Type: text/plain\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "45c5c479-0c39-4b0b-9e36-e0171f930be1",
			"name": "PatchPromoCode",
			"url": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCodeId_2}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "PATCH",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "c05bed9e-2227-488c-a628-e075a52fd4f9",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"if (responseCode.code != 200)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"",
							"else if (responseCode.code === 200) ",
							"{",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"promoCodeId\", jsonData.id);",
							"postman.setEnvironmentVariable(\"updatedPromoCode\", jsonData.code);",
							"var code = postman.getEnvironmentVariable(\"updatePromoCode\").toUpperCase();",
							"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
							"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
							"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount_2\");",
							"var promoCodeId = postman.getEnvironmentVariable(\"promoCodeId_2\");",
							"",
							"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");",
							"tests[\"Response Body has Correct PromoCode\"] =  responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
							"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+promoStartDate+\"\\\"\");",
							"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+promoEndDate+\"\\\"\");",
							"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount+\"\");",
							"tests[\"Response Body has Correct PromoCodeId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId+\"\\\"\");",
							"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"USD\\\"\");",
							"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"FIXED_AMOUNT\\\"\");",
							"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save2\\\"\");",
							"}",
							"",
							"",
							"",
							"tests[\"Response code should be 200\"] = responseCode.code === 200;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3806108e-88cd-4169-8c59-eaeda27490ce",
						"type": "text/javascript",
						"exec": [
							"",
							"var updatePromoCodePrefix=postman.getEnvironmentVariable(\"updatePromoCode\").replace(\"SAVE\",\"OFFER\");",
							"",
							"",
							"postman.setEnvironmentVariable(\"updatePromoCodePrefix\", updatePromoCodePrefix);",
							""
						]
					}
				}
			],
			"folder": "c7aaa660-1ed1-49b0-90ee-99f945c43b23",
			"rawModeData": "{\r\n  \"name\" : \"Offer to Save2\",\r\n  \"code\" : \"{{updatePromoCode}}\"\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "472ad974-e5d4-4bf0-a601-994beaea0593",
			"name": "createLimitedPurchase",
			"url": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "971a3e20-4aea-40bc-8daf-ebd48bc5e33e",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"if (responseCode.code != 201)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 201) ",
							"{",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"invoiceId2\", jsonData.items[0].invoiceId);",
							"postman.setEnvironmentVariable(\"saleItemsId2\", jsonData.items[0].id);",
							"",
							"tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
							"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
							"    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId2\")+\"\\\"\");  ",
							"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);  ",
							"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
							"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
							"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
							"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_metered\")+\"\\\"\");   ",
							"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
							"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId2\")+\"\\\"\");  ",
							"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
							"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+true);",
							"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
							"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
							"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
							"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
							"}",
							"",
							"tests[\"Response code should be 201\"] = responseCode.code === 201;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0ed6e2bf-66e4-42d2-869f-da9ca2853bbc",
						"type": "text/javascript",
						"exec": [
							"var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
							"var unitPrice = 22.5;",
							"var salesTax = (unitPrice * .06).toFixed(2);",
							"var purchaseAmount = unitPrice;",
							"purchaseAmount = +purchaseAmount + +salesTax;",
							"",
							"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
							"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
							"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
							"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
						]
					}
				}
			],
			"folder": "00326462-08c1-48f7-ac37-184657e02aea",
			"rawModeData": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : false,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_metered}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "4f770017-46ca-4aca-99d7-62b5b0df1d9e",
			"name": "createUnlimitedItem_yoga",
			"url": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "f4662b2f-fbe6-4cb9-94c2-e5ad02ca29b3",
						"type": "text/javascript",
						"exec": [
							"var currentRequest =  JSON.parse(pm.environment.get(\"currentNameIteration\")); ",
							"var testTypeNominal =  pm.environment.get(\"testType\"); ",
							"console.log(currentRequest);",
							"var orgInfo =  pm.environment.get(\"orgInfoDetails\"); ",
							" var resBody = JSON.parse(responseBody);",
							" if(!orgInfo) orgInfo=[];",
							"    console.log(\"create package unlimited\" + testTypeNominal);",
							"  if (responseCode.code===201 && testTypeNominal==\"Nominal\" ) {",
							"     console.log(resBody);",
							"       orgInfo[0].itemId_unlimited=resBody.id;",
							"    ",
							"   ",
							"    pm.environment.set(\"orgInfoDetails\", orgInfo); ",
							"  ",
							"  } ",
							"",
							"",
							" var testFirstNameIteration = pm.environment.get(\"testFirstNameIteration\");",
							"  if (testFirstNameIteration.length > 0) {",
							"    postman.setNextRequest(\"createUnlimitedItem_yoga\");",
							"    } else {",
							"         pm.environment.unset(\"currentNameIteration\");",
							"         pm.environment.unset(\"testFirstNameIteration\");",
							"         pm.environment.unset(\"currentNameIterationData\");",
							"         postman.setNextRequest();",
							"",
							"}",
							"",
							"  tests[\"Response code should be 201\"] = responseCode.code === 201;",
							"",
							"",
							"pm.globals.unset(\"variable_key\");",
							"",
							"pm.globals.unset(\"variable_value\");"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e5b72f79-2f02-40b0-9164-fdcaface623c",
						"type": "text/javascript",
						"exec": [
							"var itemUnlimited =  pm.environment.get(\"orgInfoDetails\");",
							"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
							"",
							"",
							"var nominalUserData={ ",
							" \"name\" : \"Yoga{{randItemNumber}}\",",
							"  \"type\" : \"SERVICE\",",
							"  \"unitPrice\" : 100,",
							"  \"quantity\" : 1,",
							"  \"unlimited\" :true,",
							"  \"expirationStart\" : \"PURCHASE\",",
							"  \"expirationTime\" : 1,",
							"  \"expirationUnit\" : \"DAYS\",",
							"  \"currencyId\" : \"USD\",",
							"  \"eligibleClasses\" : [ {",
							"    \"eventTypeId\" : eventTypeIdUnlimited",
							"  } ]",
							"};",
							"",
							"var maxUserData={",
							" ",
							"  \"name\" : \"Yoga&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&{{randItemNumber}}\",",
							"  \"type\" : \"SERVICE\",",
							"  \"unitPrice\" : 100,",
							"  \"quantity\" : 1,",
							"  \"unlimited\" :true,",
							"  \"expirationStart\" : \"PURCHASE\",",
							"  \"expirationTime\" : 1,",
							"  \"expirationUnit\" : \"DAYS\",",
							"  \"currencyId\" : \"USD\",",
							"  \"eligibleClasses\" : [ {",
							"    \"eventTypeId\" : eventTypeIdUnlimited",
							"  } ]",
							"",
							"};",
							"",
							"var minUserData={",
							"  \"name\" : \"Y{{randItemNumber}}\",",
							"  \"type\" : \"SERVICE\",",
							"  \"unitPrice\" : 100,",
							"  \"quantity\" : 1,",
							"  \"unlimited\" :true,",
							"  \"expirationStart\" : \"PURCHASE\",",
							"  \"expirationTime\" : 1,",
							"  \"expirationUnit\" : \"DAYS\",",
							"  \"currencyId\" : \"USD\",",
							"  \"eligibleClasses\" : [ {",
							"    \"eventTypeId\" : eventTypeIdUnlimited",
							"  } ]",
							"  ",
							"};",
							"",
							"var allFieldsUserData={",
							"  \"name\" : \"YogaALLFeilds{{randItemNumber}}\",",
							"  \"type\" : \"SERVICE\",",
							"  \"unitPrice\" : 100,",
							"  \"quantity\" : 1,",
							"  \"unlimited\" :true,",
							"  \"expirationStart\" : \"PURCHASE\",",
							"  \"expirationTime\" : 1,",
							"  \"expirationUnit\" : \"DAYS\",",
							"  \"currencyId\" : \"USD\",",
							"  \"eligibleClasses\" : [ {",
							"    \"eventTypeId\" : eventTypeIdUnlimited",
							"  } ]",
							"};",
							"",
							"",
							"",
							"console.log(JSON.stringify(request));",
							"if(!testFirstNameIteration) {",
							"    testFirstNameIteration =  [",
							"        {data: nominalUserData,statusCode :201 , type : \"Nominal\"},",
							"        {data: maxUserData,statusCode: 201, type: \"Max\"},",
							"        {data: minUserData,statusCode :201 , type : \"Min\"},",
							"        {data: allFieldsUserData,statusCode: 201 , type: \"allFields\"}",
							"        ];",
							"}",
							"",
							"",
							"var currentNameIteration =testFirstNameIteration.shift();",
							"",
							"pm.environment.set(\"organizationId\",itemUnlimited[0].orgId);",
							"pm.environment.set(\"locationId\",itemUnlimited[0].locationId);",
							"postman.setEnvironmentVariable(\"eventTypeId_yoga\", itemUnlimited[0].eventId);",
							"var eventTypeIdUnlimited=pm.environment.get(\"eventTypeId_yoga\");",
							"",
							"pm.environment.set(\"testFirstNameIteration\", testFirstNameIteration);",
							"pm.environment.set(\"currentNameIteration\", JSON.stringify(currentNameIteration));",
							"pm.environment.set(\"testType\", currentNameIteration.type);",
							"pm.environment.set(\"currentNameIterationData\", JSON.stringify(currentNameIteration.data));"
						]
					}
				}
			],
			"folder": "98793742-99b4-4eac-acc2-01fa5e566ccc",
			"rawModeData": "{{currentNameIterationData}}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "5508e4ad-1121-4fc1-904b-0f69a5663c80",
			"name": "CreateHost",
			"url": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/host",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "b3ba80ad-8c4d-441b-8740-b2a5ce6938e1",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"if (responseCode.code != 201)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 201){",
							"    ",
							"    var jsonData = JSON.parse(responseBody);",
							"    postman.setEnvironmentVariable(\"eventHostId\", jsonData.id);",
							"    tests[\"Response Body has eventHostId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventHostId\")+\"\\\"\");",
							"    tests[\"Response Body has employeeId\"] = responseBody.has(\"\\\"employeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");",
							"    tests[\"Response Body has substituteId\"] = responseBody.has(\"\\\"substituteId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId_2\")+\"\\\"\");",
							"    tests[\"Response Body has eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_1030am\")+\"\\\"\");",
							"}",
							"",
							"tests[\"Response code should be 201\"] = responseCode.code === 201;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f85df667-db85-45b9-b383-ac874734086c",
						"type": "text/javascript",
						"exec": [
							"var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
							"",
							"var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
							"do {",
							"    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
							"}",
							"while (randEmployee === undefined);",
							"",
							"postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
						]
					}
				}
			],
			"folder": "90ec4d67-1f9d-43c2-ad2b-5f0715a42fcc",
			"rawModeData": "{\r\n  \"eventId\" : \"{{eventId_1030am}}\",\r\n  \"substituteId\" : \"{{employeeId_2}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "5d072bbf-9319-4d0d-b2b1-a74ae90d1bb6",
			"name": "CreateEventTypeYoga",
			"url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "014da6e5-575f-40b8-8591-29c63e2e12c8",
						"type": "text/javascript",
						"exec": [
							"var currentRequest =  JSON.parse(pm.environment.get(\"currentNameIteration\")); ",
							"var testTypeNominal =  pm.environment.get(\"testType\"); ",
							"console.log(currentRequest);",
							"var orgInfo =  pm.environment.get(\"orgInfoDetails\"); ",
							" var resBody = JSON.parse(responseBody);",
							" if(!orgInfo) orgInfo=[];",
							"    console.log(\"Event \" + testTypeNominal);",
							"  if (responseCode.code===201 && testTypeNominal==\"Nominal\" ) {",
							"     console.log(resBody);",
							"       orgInfo[0].eventId=resBody.id;",
							"    ",
							"   ",
							"    pm.environment.set(\"orgInfoDetails\", orgInfo); ",
							"  ",
							"  } ",
							"",
							"",
							" var testFirstNameIteration = pm.environment.get(\"testFirstNameIteration\");",
							"  if (testFirstNameIteration.length > 0) {",
							"    postman.setNextRequest(\"CreateEventTypeYoga\");",
							"    } else {",
							"         pm.environment.unset(\"currentNameIteration\");",
							"         pm.environment.unset(\"testFirstNameIteration\");",
							"         pm.environment.unset(\"currentNameIterationData\");",
							"         postman.setNextRequest();",
							"",
							"}",
							"",
							"  tests[\"Response code should be 201\"] = responseCode.code === 201;",
							"",
							"",
							"pm.globals.unset(\"variable_key\");",
							"",
							"pm.globals.unset(\"variable_value\");"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8522926e-12c1-437f-bde2-0f7bb1b60327",
						"type": "text/javascript",
						"exec": [
							"var event =  pm.environment.get(\"orgInfoDetails\");",
							"",
							"var orgNum =  pm.environment.get(\"orgNumber\");",
							"",
							"    ",
							"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
							"",
							"var nominalUserData={ ",
							" \"name\" : \"Yoga\"",
							"};",
							"",
							"var maxUserData={",
							"     \"name\" : \"K00eqvEgpwY3ee6pU8PCAAmA2QkPoYumJtncmJ75xOJixxQuLnidUolEt9UNAwwcAwZHGFQfTFn5VDIuglhwcbSDAyarD\"",
							"};",
							"",
							"var minUserData={",
							"  \"name\" : \"Y\"",
							"  ",
							"};",
							"",
							"var allFieldsUserData={",
							" \"name\" : \"adventure\"",
							"};",
							"",
							"",
							"console.log(JSON.stringify(request));",
							"if(!testFirstNameIteration) {",
							"    testFirstNameIteration =  [",
							"        {data: nominalUserData,statusCode :201 , type : \"Nominal\"},",
							"        {data: maxUserData,statusCode: 201, type: \"Max\"},",
							"        {data: minUserData,statusCode :201 , type : \"Min\"},",
							"        {data: allFieldsUserData,statusCode: 201 , type: \"allFields\"}",
							"        ];",
							"}",
							"",
							"var currentNameIteration =testFirstNameIteration.shift();",
							"",
							"pm.environment.set(\"organizationId\",event[0].orgId);",
							"pm.environment.set(\"locationId\",event[0].locationId);",
							"",
							"",
							"pm.environment.set(\"testFirstNameIteration\", testFirstNameIteration);",
							"pm.environment.set(\"currentNameIteration\", JSON.stringify(currentNameIteration));",
							"pm.environment.set(\"testType\", currentNameIteration.type);",
							"pm.environment.set(\"currentNameIterationData\", JSON.stringify(currentNameIteration.data));",
							""
						]
					}
				}
			],
			"folder": "a5cbe7da-1952-47fb-98dd-fe3255449b62",
			"rawModeData": "{{currentNameIterationData}}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "60d3353b-71a4-4a11-873e-c93a3ffe7e6c",
			"name": "createOrgLocation Copy",
			"url": "{{registration}}/{{organizationId}}/organization",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "1443f93c-254f-439c-acab-afaaf3a62e94",
						"type": "text/javascript",
						"exec": [
							"var currentRequest =  JSON.parse(pm.environment.get(\"currentOrgInfo\")); ",
							"console.log(\"Current request\");",
							"console.log(currentRequest);",
							"var orgInfo =  pm.environment.get(\"orgInfoDetails\"); ",
							" var resBody = JSON.parse(responseBody);",
							" if(!orgInfo) orgInfo=[];",
							"",
							"",
							"",
							"",
							" ",
							"function pushOrgInfoToAry(addressId,locationId,locationName,orgName) {",
							"    ",
							"        for(var i=0; i<orgInfo.length; i++){",
							"        console.log(\"current orgid : \"+orgInfo[i].orgId+\" comp org : \"+currentRequest.orgId);",
							"        if(orgInfo[i].orgId==currentRequest.orgId){",
							"            ",
							"            orgInfo[i].addressId=addressId;",
							"            orgInfo[i].locationId=locationId;",
							"            orgInfo[i].locationName=locationName;",
							"            orgInfo[i].orgName=orgName;",
							"             ",
							"             console.log(orgInfo[i]);",
							"            break;",
							"        }",
							"    }",
							"}",
							"",
							"  if (responseCode.code===201) {",
							"     console.log(resBody);",
							"     pushOrgInfoToAry(resBody.location.address.id,resBody.location.id,resBody.location.name,resBody.name);",
							"     console.log(\"saving updated orgInfo\");",
							"    pm.environment.set(\"orgInfoDetails\", orgInfo); ",
							"  ",
							"  } ",
							"",
							"",
							" var testFirstNameIteration = pm.environment.get(\"testFirstNameIteration\");",
							"  if (testFirstNameIteration.length > 0) {",
							"    postman.setNextRequest(\"createOrgLocation Copy\");",
							"    } else {",
							"         pm.environment.unset(\"currentRequest\");",
							"         pm.environment.unset(\"currentNameIteration\");",
							"         pm.environment.unset(\"testFirstNameIteration\");",
							"         pm.environment.unset(\"currentNameIterationData\");",
							"         postman.setNextRequest();",
							"",
							"}",
							"",
							"  tests[\"Response code should be 201\"] = responseCode.code === 201;",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2fd05b65-a439-4736-93d7-2d5648172a89",
						"type": "text/javascript",
						"exec": [
							"var orgInfo =  pm.environment.get(\"orgInfoDetails\");",
							"",
							"console.log(\"Complete orgInfo:->\"+ JSON.stringify(orgInfo));",
							"",
							"",
							"var orgInfoValue =  pm.environment.get(\"orgInfoValue\");",
							"if(!orgInfoValue) {",
							"    orgInfoValue =JSON.parse(JSON.stringify(orgInfo));",
							"}",
							"    ",
							"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
							"var currentOrgInfo=orgInfoValue.shift();",
							" ",
							"var orgNumber = Math.floor(Math.random() * 9000000) + 1000000;",
							"",
							"",
							"postman.setEnvironmentVariable(\"orgNumber\", orgNumber);",
							"console.log(\"CurrentOrgInfo:->\"+JSON.stringify(currentOrgInfo));",
							"",
							"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
							"",
							"var randState = states[Math.floor(Math.random() * states.length)];",
							"postman.setEnvironmentVariable(\"randState\", randState);",
							"",
							"",
							"var nominalUserData={",
							"  \"name\" : \"University Sports and Fitnes Nominal \"+orgNumber,",
							"  \"ownerId\" : currentOrgInfo.ownerId,",
							"  \"location\" : {",
							"    \"name\" : \"University Fitness Center \"+orgNumber,",
							"    \"address\" : {",
							"      \"address1\" : \"123 Fitness Lane \"+orgNumber,",
							"      \"address2\" : \"PO Box \"+orgNumber,",
							"      \"city\" : \"Little Rock\",",
							"      \"state\" : \"Alaska\",",
							"      \"country\" : \"United States\",",
							"      \"zipCode\" : \"33935\"",
							"    },",
							"    \"phone\" : {",
							"      \"number\" : \"1234567899\",",
							"      \"extension\" : \"411\"",
							"    },",
							"    \"email\" : {",
							"      \"address\" : \"UniversityFitness\"+orgNumber+\"@ufit.com\"",
							"    }",
							"  }",
							"};",
							"",
							"var maxUserData={",
							"  \"name\" : \"aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeee dsfsfsdfdfsfsffasdfsdfsdffd\"+orgNumber,",
							"  \"ownerId\" : currentOrgInfo.ownerId,",
							"  \"location\" : {",
							"    \"name\" : \"University Fitness University Fitness Center University Fitness Center Center\"+orgNumber,",
							"    \"address\" : {",
							"      \"address1\" : \"123 Fitness 123 Fitness Lane Lane Fitness Lane Lane\"+orgNumber,",
							"      \"address2\" : \"PO Box 123 PO Box PO Box 123\"+orgNumber,",
							"      \"city\" : \"Little Rock sMALL Rock Middle Rock\",",
							"      \"state\" : \"Alaska\",",
							"      \"country\" : \"United States\",",
							"      \"zipCode\" : \"339312335\"",
							"    },",
							"    \"phone\" : {",
							"      \"number\" : \"1234567892\",",
							"      \"extension\" : \"414\"",
							"    },",
							"    \"email\" : {",
							"      \"address\" : \"UniversityFit\"+orgNumber+\"@ufit.com\"",
							"    }",
							"  }",
							"};",
							"",
							"var minUserData={",
							"  \"name\" : \"U\"+orgNumber,",
							"  \"ownerId\" : currentOrgInfo.ownerId,",
							"  \"location\" : {",
							"    \"name\" : \"U\",",
							"    \"address\" : {",
							"      \"address1\" : \"L\",",
							"      \"address2\" : \"PO\"+orgNumber,",
							"      \"city\" : \"Little\",",
							"      \"state\" : \"Alaska\",",
							"      \"country\" : \"United States\",",
							"      \"zipCode\" : \"75028\"",
							"    },",
							"    \"phone\" : {",
							"      \"number\" : \"1234567896\",",
							"      \"extension\" : \"413\"",
							"    },",
							"    \"email\" : {",
							"      \"address\" : \"U\"+orgNumber+\"@ufit.com\"",
							"    }",
							"  }",
							"};",
							"",
							"var allFieldsUserData={",
							"  \"name\" : \"University Sports and Fitness\"+orgNumber,",
							"  \"tin\" : \"12345\",",
							"  \"ownerId\" : currentOrgInfo.ownerId,",
							"  \"location\" : {",
							"    \"name\" : \"University Fitness Center\"+orgNumber,",
							"    \"address\" : {",
							"      \"address1\" : \"123 456 Fitness Lane\"+orgNumber,",
							"      \"address2\" : \"PO Box\"+orgNumber,",
							"      \"city\" : \"Little Rock\",",
							"      \"state\" : \"Florida\",",
							"      \"country\" : \"United States\",",
							"      \"zipCode\" : \"33935\"",
							"    },",
							"    \"phone\" : {",
							"      \"number\" : \"1234567890\",",
							"      \"extension\" : \"412\"",
							"      ",
							"    },",
							"    \"email\" : {",
							"      \"address\" : \"UniversityFitnez\"+orgNumber+\"@ufit.com\"",
							"    }",
							"  },",
							"  \"email\" : {",
							"      \"address\" : \"abc\"+orgNumber+\"@ufit.com\"",
							"  }",
							"};",
							"",
							"",
							"console.log(JSON.stringify(request));",
							"if(!testFirstNameIteration) {",
							"    testFirstNameIteration =  [",
							"        {data: nominalUserData,statusCode :201 , type : \"Nominal\"},",
							"        {data: maxUserData,statusCode: 201, type: \"Max\"},",
							"        {data: minUserData,statusCode :201 , type : \"Min\"},",
							"        {data: allFieldsUserData,statusCode: 201 , type: \"allFields\"}",
							"        ];",
							"}",
							"",
							"var currentNameIteration =testFirstNameIteration.shift();",
							"",
							"console.log(\"orgID:->\"+currentOrgInfo.orgId);",
							"",
							"pm.environment.set(\"testFirstNameIteration\", testFirstNameIteration);",
							"pm.environment.set(\"orgInfoValue\", orgInfoValue);",
							"pm.environment.set(\"currentNameIteration\", JSON.stringify(currentNameIteration));",
							"pm.environment.set(\"currentOrgInfo\", JSON.stringify(currentOrgInfo));",
							"pm.environment.set(\"organizationId\", currentOrgInfo.orgId);",
							"pm.environment.set(\"accessToken\", currentOrgInfo.accessToken);",
							"pm.environment.set(\"testType\", JSON.stringify(currentNameIteration.type));",
							"pm.environment.set(\"currentNameIterationData\", JSON.stringify(currentNameIteration.data));",
							"",
							""
						]
					}
				}
			],
			"folder": "1827f0e4-ed7e-4a48-a608-5d684460dc5c",
			"rawModeData": "{{currentNameIterationData}}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "6888fb34-2038-4dbd-91de-aae84e4794f9",
			"name": "Authorization Copy",
			"url": "{{authentication}}/organization/{{organizationId}}/login?clientId=automated-testing-client",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Basic YXV0b21hdGVkLXRlc3RpbmctY2xpZW50OiNhbnRpLWpvbmFz"
				},
				{
					"key": "",
					"value": "",
					"enabled": false
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "clientId",
					"value": "automated-testing-client"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "1eeb1936-8705-4784-bc00-3d7820a16193",
						"type": "text/javascript",
						"exec": [
							"",
							"var currentRequest =  JSON.parse(pm.environment.get(\"currentNameIteration\")); ",
							"console.log(\"Current request\");",
							"console.log(currentRequest);",
							"var orgInfo =  pm.environment.get(\"orgInfoDetails\"); ",
							" var resBody = JSON.parse(responseBody);",
							" if(!orgInfo) orgInfo=[];",
							" ",
							"function pushOrgInfoToAry(accessToken) {",
							"    ",
							"    for(var i=0; i<orgInfo.length; i++){",
							"        console.log(\"current orgid : \"+orgInfo[i].orgId+\" comp org : \"+currentRequest.orgId);",
							"        if(orgInfo[i].orgId==currentRequest.orgId){",
							"            orgInfo[i].accessToken=accessToken;",
							"             console.log(\"setting access token\");",
							"             console.log(orgInfo[i]);",
							"            break;",
							"        }",
							"    }",
							"  ",
							"}",
							"",
							"  if (responseCode.code===200) {",
							"          console.log(resBody);",
							"         pushOrgInfoToAry(resBody.accessToken); ",
							"      console.log(\"saving updated orgInfo\");",
							"    pm.environment.set(\"orgInfoDetails\", orgInfo); ",
							"  ",
							"  } ",
							"  ",
							" var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
							"    if(testFirstNameIteration.length>0) {",
							"        console.log(\"Going next request\");",
							"        console.log(testFirstNameIteration);",
							"        postman.setNextRequest(\"Authorization Copy\");",
							"    } else {",
							"      pm.environment.unset(\"currentRequest\");",
							"      pm.environment.unset(\"currentNameIteration\");",
							"      pm.environment.unset(\"currentNameIterationData\");",
							"      pm.environment.unset(\"testFirstNameIteration\");",
							"        postman.setNextRequest();",
							"        ",
							"        ",
							"    }",
							"    ",
							"     ",
							"",
							"tests[\"Response code should be 200\"] = responseCode.code === 200;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8054d913-8275-4ab0-be2a-705b5ca6e19c",
						"type": "text/javascript",
						"exec": [
							"var orgInfo =  pm.environment.get(\"orgInfoDetails\");",
							"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
							"",
							"if(!testFirstNameIteration) {",
							"    testFirstNameIteration =JSON.parse(JSON.stringify(orgInfo));",
							"}",
							"",
							"var currentNameIteration =testFirstNameIteration.shift();",
							"",
							"pm.environment.set(\"testFirstNameIteration\", testFirstNameIteration);",
							"pm.environment.set(\"currentNameIteration\", JSON.stringify(currentNameIteration));",
							"pm.environment.set(\"organizationId\", currentNameIteration.orgId);",
							"pm.environment.set(\"ownerEmail\",currentNameIteration.ownerEmail );",
							"pm.environment.set(\"ownerPassword\",currentNameIteration.ownerPassword);"
						]
					}
				}
			],
			"folder": "1827f0e4-ed7e-4a48-a608-5d684460dc5c",
			"rawModeData": "{\r\n  \"password\": \"{{ownerPassword}}\",\r\n  \"username\": \"{{ownerEmail}}\"\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Basic YXV0b21hdGVkLXRlc3RpbmctY2xpZW50OiNhbnRpLWpvbmFz\n",
			"pathVariables": {}
		},
		{
			"id": "695884f4-3db8-472d-b3d3-4677cc10451c",
			"name": "DeletePromoCode",
			"url": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCodeId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "6baba519-0330-4390-8f87-11ab666ff0a4",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"if (responseCode.code != 200)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"else if (responseCode.code === 200) ",
							"{",
							"var code = postman.getEnvironmentVariable(\"updatePromoCode\").toUpperCase();",
							"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
							"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
							"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount_2\");",
							"var promoCodeId = postman.getEnvironmentVariable(\"promoCodeId\");",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");",
							"tests[\"Response Body has Correct PromoCode\"] =  responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
							"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+promoStartDate+\"\\\"\");",
							"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+promoEndDate+\"\\\"\");",
							"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount+\"\");",
							"tests[\"Response Body has Correct PromoCodeId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId+\"\\\"\");",
							"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"USD\\\"\");",
							"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"FIXED_AMOUNT\\\"\");",
							"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save2\\\"\");",
							"}",
							"tests[\"Response code should be 200\"] = responseCode.code === 200;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ccc1cfc3-7a43-4173-9781-a3c9f869e30f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"folder": "c7aaa660-1ed1-49b0-90ee-99f945c43b23",
			"rawModeData": "",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "6b0ac476-6e14-4f3a-b31a-670ad5b84144",
			"name": "CreatePromoCode_1",
			"url": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "9f978107-eed4-423c-a724-f6e031bbbf39",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"if (responseCode.code != 201)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 201) ",
							"{",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"promoCodeId\", jsonData.id);",
							"var code = postman.getEnvironmentVariable(\"promoCode\").toUpperCase();",
							"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
							"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
							"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount\");",
							"console.log(promoCodeAmount);",
							"",
							"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoCodeId\")+\"\\\"\");",
							"tests[\"Response Body has Correct Code\"] = responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
							"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoStartDate\")+\"\\\"\");",
							"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoEndDate\")+\"\\\"\");",
							"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+promoCodeAmount);",
							"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\\\"USD\\\"\");",
							"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"FIXED_AMOUNT\\\"\");",
							"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
							"",
							"}",
							"",
							"",
							"",
							"tests[\"Response code should be 201\"] = responseCode.code === 201;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "651f470c-69ec-4ba4-a06e-1574cc9f5c11",
						"type": "text/javascript",
						"exec": [
							"var promoCodeAmount=3;",
							"var promoCodePrefix=\"Save\";",
							"var promoCode=promoCodePrefix+promoCodeAmount;",
							"",
							"//smart date increment logic, which rolls over into the next month if we're at the end of month",
							"var startDate = new Date();",
							"startDate.setDate(startDate.getDate() + 1);",
							"var endDate = new Date();",
							"endDate.setDate(endDate.getDate() + 5);",
							"",
							"var startyear = startDate.getFullYear();",
							"var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
							"var startDate = ('0' + (startDate.getDate())).slice(-2);",
							"var endyear = endDate.getFullYear();",
							"var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
							"var endDate = ('0' + (endDate.getDate())).slice(-2);",
							"",
							"var promoStartDate = startyear + \"-\" + startMonth + \"-\" + startDate;",
							"var promoEndDate = endyear + \"-\" + endMonth + \"-\" + endDate;",
							"",
							"",
							"postman.setEnvironmentVariable(\"promoStartDate\", promoStartDate);",
							"postman.setEnvironmentVariable(\"promoEndDate\", promoEndDate);",
							"postman.setEnvironmentVariable(\"promoCodeAmount\", promoCodeAmount);",
							"postman.setEnvironmentVariable(\"promoCode\", promoCode);"
						]
					}
				}
			],
			"folder": "c7aaa660-1ed1-49b0-90ee-99f945c43b23",
			"rawModeData": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "6e3e8acc-bb4c-45f4-bf10-c0877966a287",
			"name": "CreatePromoCode_2",
			"url": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "95675abf-a380-47b5-8044-1b06e328031d",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"",
							"if (responseCode.code != 201)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 201) ",
							"{",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"promoCodeId_2\", jsonData.id);",
							"var code = postman.getEnvironmentVariable(\"promoCode_2\").toUpperCase();",
							"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
							"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
							"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount_2\");",
							"",
							"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoCodeId_2\")+\"\\\"\");",
							"tests[\"Response Body has Correct Code\"] = responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
							"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoStartDate\")+\"\\\"\");",
							"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoEndDate\")+\"\\\"\");",
							"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+promoCodeAmount);",
							"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\\\"USD\\\"\");",
							"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"FIXED_AMOUNT\\\"\");",
							"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
							"}",
							"",
							"",
							"",
							"tests[\"Response code should be 201\"] = responseCode.code === 201;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4616c289-d6b8-4546-8fd7-24faacc15c61",
						"type": "text/javascript",
						"exec": [
							"//smart date increment logic, which rolls over into the next month if we're at the end of month",
							"var startDate = new Date();",
							"startDate.setDate(startDate.getDate() + 1);",
							"var endDate = new Date();",
							"endDate.setDate(endDate.getDate() + 5);",
							"",
							"var startyear = startDate.getFullYear();",
							"var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
							"var startDate = ('0' + (startDate.getDate())).slice(-2);",
							"var endyear = endDate.getFullYear();",
							"var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
							"var endDate = ('0' + (endDate.getDate())).slice(-2);",
							"",
							"var promoStartDate = startyear + \"-\" + startMonth + \"-\" + startDate;",
							"var promoEndDate = endyear + \"-\" + endMonth + \"-\" + endDate;",
							"",
							"var promoCodeAmount_2=60;",
							"var promoCodePrefix=\"Save\";",
							"var promoCode_2=promoCodePrefix+promoCodeAmount_2;",
							"",
							"postman.setEnvironmentVariable(\"promoStartDate\", promoStartDate);",
							"postman.setEnvironmentVariable(\"promoEndDate\", promoEndDate);",
							"postman.setEnvironmentVariable(\"promoCodeAmount_2\", promoCodeAmount_2);",
							"postman.setEnvironmentVariable(\"promoCode_2\", promoCode_2);"
						]
					}
				}
			],
			"folder": "c7aaa660-1ed1-49b0-90ee-99f945c43b23",
			"rawModeData": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode_2}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount_2}}\",\r\n  \"currency\" : \"USD\"\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "6edb0726-defa-4afc-9c45-75c0712e8a28",
			"name": "createMeteredItem_yoga",
			"url": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "45b82628-44c0-4642-ba2f-1ebe501b77e6",
						"type": "text/javascript",
						"exec": [
							"var currentRequest =  JSON.parse(pm.environment.get(\"currentNameIteration\")); ",
							"var testTypeNominal =  pm.environment.get(\"testType\"); ",
							"console.log(currentRequest);",
							"var orgInfo =  pm.environment.get(\"orgInfoDetails\"); ",
							" var resBody = JSON.parse(responseBody);",
							" if(!orgInfo) orgInfo=[];",
							"    console.log(\"create package unlimited\" + testTypeNominal);",
							"  if (responseCode.code===201 && testTypeNominal==\"Nominal\" ) {",
							"     console.log(resBody);",
							"       orgInfo[0].itemId_limited=resBody.id;",
							"   ",
							"    pm.environment.set(\"orgInfoDetails\", orgInfo); ",
							"  ",
							"  } ",
							"",
							"",
							" var testFirstNameIteration = pm.environment.get(\"testFirstNameIteration\");",
							"  if (testFirstNameIteration.length > 0) {",
							"    postman.setNextRequest(\"createMeteredItem_yoga\");",
							"    } else {",
							"         pm.environment.unset(\"currentNameIteration\");",
							"         pm.environment.unset(\"testFirstNameIteration\");",
							"         pm.environment.unset(\"currentNameIterationData\");",
							"         postman.setNextRequest();",
							"",
							"}",
							"",
							"  tests[\"Response code should be 201\"] = responseCode.code === 201;",
							"",
							"",
							"pm.globals.unset(\"variable_key\");",
							"",
							"pm.globals.unset(\"variable_value\");"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2725003b-2b7d-421d-8ce4-8420abea8f94",
						"type": "text/javascript",
						"exec": [
							"var itemlimited =  pm.environment.get(\"orgInfoDetails\");",
							"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
							"postman.setEnvironmentVariable(\"eventTypeId_yoga\", itemlimited[0].eventId);",
							"var eventTypeLimited=pm.environment.get(\"eventTypeId_yoga\");",
							"",
							"var nominalUserData={ ",
							" \"name\" : \"Yoga{{randItemNumber}}\",",
							"  \"type\" : \"SERVICE\",",
							"  \"unitPrice\" : 100,",
							"  \"quantity\" : 6,",
							"  \"unlimited\" :false,",
							"  \"expirationStart\" : \"PURCHASE\",",
							"  \"expirationTime\" : 1,",
							"  \"expirationUnit\" : \"DAYS\",",
							"  \"currencyId\" : \"USD\",",
							"  \"eligibleClasses\" : [ {",
							"    \"eventTypeId\" : eventTypeLimited",
							"  } ]",
							"};",
							"",
							"var maxUserData={",
							" ",
							"  \"name\" : \"Yoga&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&{{randItemNumber}}\",",
							"  \"type\" : \"SERVICE\",",
							"  \"unitPrice\" : 100,",
							"  \"quantity\" : 250,",
							"  \"unlimited\" :false,",
							"  \"expirationStart\" : \"PURCHASE\",",
							"  \"expirationTime\" : 1,",
							"  \"expirationUnit\" : \"DAYS\",",
							"  \"currencyId\" : \"USD\",",
							"  \"eligibleClasses\" : [ {",
							"    \"eventTypeId\" : eventTypeLimited",
							"  } ]",
							"",
							"};",
							"",
							"var minUserData={",
							"  \"name\" : \"Y\",",
							"  \"type\" : \"SERVICE\",",
							"  \"unitPrice\" : 100,",
							"  \"quantity\" : 2,",
							"  \"unlimited\" :false,",
							"  \"expirationStart\" : \"PURCHASE\",",
							"  \"expirationTime\" : 1,",
							"  \"expirationUnit\" : \"DAYS\",",
							"  \"currencyId\" : \"USD\",",
							"  \"eligibleClasses\" : [ {",
							"    \"eventTypeId\" : eventTypeLimited",
							"  } ]",
							"  ",
							"};",
							"",
							"var allFieldsUserData={",
							"  \"name\" : \"YogaALLFeilds{{randItemNumber}}\",",
							"  \"type\" : \"SERVICE\",",
							"  \"unitPrice\" : 100,",
							"  \"quantity\" : 5,",
							"  \"unlimited\" :false,",
							"  \"expirationStart\" : \"PURCHASE\",",
							"  \"expirationTime\" : 1,",
							"  \"expirationUnit\" : \"DAYS\",",
							"  \"currencyId\" : \"USD\",",
							"  \"eligibleClasses\" : [ {",
							"    \"eventTypeId\" : eventTypeLimited",
							"  } ]",
							"};",
							"",
							"",
							"",
							"console.log(JSON.stringify(request));",
							"if(!testFirstNameIteration) {",
							"    testFirstNameIteration =  [",
							"        {data: nominalUserData,statusCode :201 , type : \"Nominal\"},",
							"        {data: maxUserData,statusCode: 201, type: \"Max\"},",
							"        {data: minUserData,statusCode :201 , type : \"Min\"},",
							"        {data: allFieldsUserData,statusCode: 201 , type: \"allFields\"}",
							"        ];",
							"}",
							"",
							"",
							"var currentNameIteration =testFirstNameIteration.shift();",
							"",
							"pm.environment.set(\"organizationId\",itemlimited[0].orgId);",
							"pm.environment.set(\"locationId\",itemlimited[0].locationId);",
							"",
							"",
							"pm.environment.set(\"testFirstNameIteration\", testFirstNameIteration);",
							"pm.environment.set(\"currentNameIteration\", JSON.stringify(currentNameIteration));",
							"pm.environment.set(\"testType\", currentNameIteration.type);",
							"pm.environment.set(\"currentNameIterationData\", JSON.stringify(currentNameIteration.data));"
						]
					}
				}
			],
			"folder": "98793742-99b4-4eac-acc2-01fa5e566ccc",
			"rawModeData": "{{currentNameIterationData}}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "785fcdfe-4984-4da5-bf19-e9a4d50b3906",
			"name": "SaveEmployeePhoto1_male",
			"url": "{{staypuft}}/userPhoto",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "9ce9d9fb-8a9b-44b9-bda5-3f6a60376ec1",
						"type": "text/javascript",
						"exec": [
							"",
							"if (responseCode.code != 201)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 201)",
							"{",
							"    var jsonData = JSON.parse(responseBody);",
							"    postman.setEnvironmentVariable(\"photoId_male_1\", jsonData.id);",
							"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
							"    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e8\\\"\");",
							"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee1\\\"\");",
							"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
							"}",
							"",
							"tests[\"Response code should be 201\"] = responseCode.code === 201;"
						]
					}
				}
			],
			"folder": "71e8c4c6-208b-4f26-9e0f-651a0ddd04fa",
			"rawModeData": "{\n  \"content\": \"/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAABkAAD/4QMraHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjAtYzA2MCA2MS4xMzQ3NzcsIDIwMTAvMDIvMTItMTc6MzI6MDAgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDUzUgTWFjaW50b3NoIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjBEQTM5MDEyMjFGOTExRTI4RUQ5QjkzNTdCMjZENjEyIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjBEQTM5MDEzMjFGOTExRTI4RUQ5QjkzNTdCMjZENjEyIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6MERBMzkwMTAyMUY5MTFFMjhFRDlCOTM1N0IyNkQ2MTIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6MERBMzkwMTEyMUY5MTFFMjhFRDlCOTM1N0IyNkQ2MTIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7/7gAmQWRvYmUAZMAAAAABAwAVBAMGCg0AABLfAAAqagAAMrUAAD9k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\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e8\",\n    \"name\": \"employee1\",\n    \"type\": \"ABC Employee\"\n  }\n}",
			"headers": "Content-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "7a7c3b45-4644-4e7f-97de-8a1c0a17298f",
			"name": "CreateEventForSwap",
			"url": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "e42900d1-5f52-44d2-82d2-7162d56ab89a",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"if (responseCode.code != 201)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 201)",
							"{",
							"    var jsonData = JSON.parse(responseBody);",
							"    postman.setEnvironmentVariable(\"eventId_Swap\", jsonData.id); ",
							"    ",
							"    ",
							"tests[\"Response Body has Event Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_Swap\")+\"\\\"\");",
							"tests[\"Response Body has Event Type Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
							"tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"eventLevelId\");",
							"tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
							"tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
							"tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":12\");",
							"tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
							"    ",
							"}",
							"",
							"tests[\"Response code should be 201\"] = responseCode.code === 201;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9872d40a-2ce5-43e1-9222-8c9501f9b118",
						"type": "text/javascript",
						"exec": [
							"var current_timestamp = new Date();",
							"var current_year = current_timestamp.getFullYear();",
							"var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
							"var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
							"",
							"var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:00:00\";",
							"var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:30:00\";",
							"",
							"var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
							"",
							"var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
							"do {",
							"    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
							"}",
							"while (randEventLevelId === undefined);",
							"",
							"postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
							"postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
							"postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
						]
					}
				}
			],
			"folder": "90ec4d67-1f9d-43c2-ad2b-5f0715a42fcc",
			"rawModeData": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_yoga}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"12\",\r\n  \"locationId\" : \"{{locationId}}\"\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "7b16f4b0-7918-4b5e-be53-9f56d7bfdbf2",
			"name": "createUnlimitedItem_cycling",
			"url": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "cfdb6c9e-7a38-44b4-a9b4-20b779f3ec3b",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"if (responseCode.code != 201)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 201)",
							"{",
							"    var jsonData = JSON.parse(responseBody);",
							"    postman.setEnvironmentVariable(\"itemId_unlmtd_cycle\", jsonData.id);",
							"    ",
							"tests[\"Response Body has Name\"] = responseBody.has(\"Cycling \"+postman.getEnvironmentVariable(\"randItemNumber\"));",
							"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
							"tests[\"Response Body has Correct Unit Price\"] = responseBody.has(\"\\\"unitPrice\\\":70\");",
							"tests[\"Response Body has Item Id\"] = responseBody.has(postman.getEnvironmentVariable(\"itemId_unlmtd_cycle\"));  ",
							"tests[\"Response Body has Correct quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
							"tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\"); ",
							"tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\"); ",
							"tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":10\");",
							"tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
							"tests[\"Response Body has Correct currencyId\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
							"tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":false\");",
							"tests[\"Response Body has Correct eventTypeId\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_cycling\"));",
							"}",
							"",
							"tests[\"Response code should be 201\"] = responseCode.code === 201;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a0ae3e57-f1e0-4376-b852-cdbbb39611c9",
						"type": "text/javascript",
						"exec": [
							"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
							"",
							"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
						]
					}
				}
			],
			"folder": "53d7e50f-65f4-4f6d-994c-53e1c04bd7e7",
			"rawModeData": "{\r\n  \"name\" : \"Cycling {{randItemNumber}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 70,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" : true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 10,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_cycling}}\"\r\n  } ]\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "7b6dd90a-ca7b-4599-8347-76811b6f4934",
			"name": "sendPasswordResetMail",
			"url": "{{authentication}}/organization/{{organizationId}}/password?reset=true",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Basic YXV0b21hdGVkLXRlc3RpbmctY2xpZW50OiNhbnRpLWpvbmFz"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "reset",
					"value": "true"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"if (responseCode.code != 202)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"tests[\"Response code should be 200\"] = responseCode.code === 202;"
						]
					}
				}
			],
			"folder": "50cc7196-1d1b-4613-b7a5-b4be7227b020",
			"rawModeData": "{\r\n  \"email\": \"{{employeeEmail}}\"\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Basic YXV0b21hdGVkLXRlc3RpbmctY2xpZW50OiNhbnRpLWpvbmFz\n",
			"pathVariables": {}
		},
		{
			"id": "925ec25f-6b6f-4d37-85c9-4feab471d6f9",
			"name": "updateLocation",
			"url": "{{my-organization}}/{{organizationId}}/location/{{locationId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "95a4d4d9-7655-4e1d-bdab-aab2b136ecbf",
						"type": "text/javascript",
						"exec": [
							"if (responseCode.code != 200)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 200)",
							"{",
							"    var jsonData = JSON.parse(responseBody);",
							"tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");   ",
							"tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\"); ",
							"tests[\"Response Body has Correct phoneNumber\"] = responseBody.has(\"\\\"phoneNumber\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"phoneNumber\")+\"\\\"\"); ",
							"tests[\"Response Body has Correct phoneExtension\"] = responseBody.has(\"\\\"phoneExtension\\\":\"+\"\\\"\"+411+\"\\\"\"); ",
							"tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.email+\"\\\"\"); ",
							"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+jsonData.number+\"\\\"\"); ",
							"tests[\"Response Body has Correct waiverDocId\"] = responseBody.has(\"\\\"waiverDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\");",
							"tests[\"Response Body has Correct termDocId\"] = responseBody.has(\"\\\"termDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
							"tests[\"Response Body has Correct address id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.address.id+\"\\\"\");",
							"tests[\"Response Body has Correct address1\"] = responseBody.has(\"\\\"address1\\\":\"+\"\\\"\"+\"123 Fitness Lane\"+\"\\\"\");",
							"tests[\"Response Body has Correct address2\"] = responseBody.has(\"\\\"address2\\\":\"+\"\\\"\"+jsonData.address.address2+\"\\\"\");",
							"tests[\"Response Body has Correct address city\"] = responseBody.has(\"\\\"city\\\":\"+\"\\\"\"+\"Little Rock\"+\"\\\"\");",
							"tests[\"Response Body has Correct address zipCode\"] = responseBody.has(\"\\\"zipCode\\\":\"+\"\\\"33935\"+\"\\\"\");",
							"tests[\"Response Body has Correct address state\"] = responseBody.has(\"\\\"state\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randState\")+\"\\\"\");",
							"tests[\"Response Body has Correct address country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"\"+\"United States\"+\"\\\"\");",
							"}",
							"",
							"tests[\"Response code should be 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"folder": "bb92b5f7-21f7-40ac-81a7-12e012c0c2dd",
			"rawModeData": "{\r\n  \"name\" : \"University Fitness Center #{{orgNumber}}\",\r\n    \"address\" : {\r\n      \"address1\" : \"123 Fitness Lane\",\r\n      \"address2\" : \"PO Box {{$randomInt}}\",\r\n      \"city\" : \"Little Rock\",\r\n      \"state\" : \"{{randState}}\",\r\n      \"country\" : \"United States\",\r\n      \"zipCode\" : \"33935\"\r\n    },\r\n  \"email\" : {\r\n    \"address\" : \"UniversityFitness{{orgNumber}}@qa4life.com\"\r\n  },\r\n  \"phone\" : {\r\n      \"number\" : \"{{phoneNumber}}\",\r\n      \"extension\" : \"411\"\r\n    }\r\n}\r\n\r\n",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "97021ab3-ad07-46df-831e-ed2cd5ee2dd9",
			"name": "createUnlimitedPurchase_cycling",
			"url": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "c6de6f11-5757-4319-9d84-83d87caeb76c",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"if (responseCode.code != 201)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 201) ",
							"{",
							"    var jsonData = JSON.parse(responseBody);",
							"    postman.setEnvironmentVariable(\"invoiceId1\", jsonData.items[0].invoiceId);",
							"    postman.setEnvironmentVariable(\"saleItemsId1\", jsonData.items[0].id);",
							"    ",
							"    ",
							"    ",
							"    tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
							"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
							"    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId1\")+\"\\\"\"); ",
							"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
							"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
							"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
							"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
							"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlmtd_cycle\")+\"\\\"\");   ",
							"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
							"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId1\")+\"\\\"\");   ",
							"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
							"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
							"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
							"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
							"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
							"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
							"}",
							"",
							"",
							"tests[\"Response code should be 201\"] = responseCode.code === 201;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "66fbb250-c6cb-46fe-bec5-b27e337bd67c",
						"type": "text/javascript",
						"exec": [
							"// var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
							"var randItemQuantity = 1;",
							"var unitPrice = 22.5;",
							"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
							"var purchaseAmount = randItemQuantity * unitPrice;",
							"purchaseAmount = +purchaseAmount + +salesTax;",
							"",
							"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
							"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
							"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
							"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
						]
					}
				}
			],
			"folder": "00326462-08c1-48f7-ac37-184657e02aea",
			"rawModeData": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlmtd_cycle}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "97cad6b4-c58e-4778-afdf-779351b20e4a",
			"name": "UpdatePassword",
			"url": "{{registration}}/{{organizationId}}/user/{{employeeUserId_10}}/password?token={{employeeTokenId_3}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "token",
					"value": "{{employeeTokenId_3}}"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "d5c2c18d-5725-484f-929a-99711fd2b6e8",
						"type": "text/javascript",
						"exec": [
							"if (responseCode.code != 200)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"tests[\"Response code should be 200\"] = responseCode.code === 200;",
							" var testFirstNameIteration=pm.environment.get(\"currentEmployeeList\");",
							"    if(testFirstNameIteration.length>0) {",
							"        postman.setNextRequest(\"UpdatePassword\");",
							"    } else {",
							"      pm.environment.unset(\"currentEmployeeList\");",
							"      postman.setNextRequest();",
							"    }",
							"    "
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9dde715a-ac54-4f96-bc1e-2dfa95db48df",
						"type": "text/javascript",
						"exec": [
							"var orgInfo =  pm.environment.get(\"orgInfoDetails\");",
							"var currentEmployees= pm.environment.get(\"currentEmployeeList\");",
							"",
							"if(!currentEmployees){",
							"    currentEmployees=[];",
							"    currentEmployees=orgInfo[0].employees;",
							"}",
							"",
							"var employee=currentEmployees.shift();",
							"",
							"",
							"postman.setEnvironmentVariable(\"organizationId\",  orgInfo[0].orgId);",
							"postman.setEnvironmentVariable(\"employeeUserId_10\", employee.employeeUserId);",
							"postman.setEnvironmentVariable(\"employeeTokenId_3\", employee.employeeTokenId);",
							"",
							"pm.environment.set(\"currentEmployeeList\",currentEmployees);",
							"",
							""
						]
					}
				}
			],
			"folder": "c65b5055-4241-4ffa-bf29-de3735e65883",
			"rawModeData": "{\r\n  \"password\" : \"password2\"\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "9e095b20-99f6-41ed-9d96-b5d8dc99bcf0",
			"name": "create Employee",
			"url": "{{registration}}/{{organizationId}}/employee",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "ffbfe7da-299a-4775-9337-0aa696ffb1a9",
						"type": "text/javascript",
						"exec": [
							"var currentRequest =  JSON.parse(pm.environment.get(\"currentNameIteration\")); ",
							"console.log(\"Current request\");",
							"console.log(currentRequest);",
							"var orgInfo =  pm.environment.get(\"orgInfoDetails\"); ",
							" var resBody = JSON.parse(responseBody);",
							" if(!orgInfo) orgInfo=[];",
							"",
							"",
							"",
							"",
							" ",
							"function pushOrgInfoToAry(employeeUserId,employeeId,employeeTokenId,EmpTokenExpirationTime,employeeEmail) {",
							"    ",
							"        for(var i=0; i<orgInfo.length; i++){",
							"        console.log(\"current orgid : \"+orgInfo[i].orgId+\" comp org : \"+currentRequest.orgId);",
							"        if(orgInfo[i].orgId== pm.environment.get(\"organizationId\")){",
							"             if(!orgInfo[i].employees)  orgInfo[i].employees=[];",
							"             orgInfo[i].employees.push({",
							"                 employeeUserId: employeeUserId,",
							"                 employeeId:employeeId,",
							"                 employeeTokenId:employeeTokenId,",
							"                 empTokenExpirationTime:EmpTokenExpirationTime,",
							"                 employeeEmail:employeeEmail",
							"                 ",
							"             });",
							"          ",
							"             console.log(orgInfo[i]);",
							"            break;",
							"        }",
							"    }",
							"}",
							"",
							"  if (responseCode.code===201) {",
							"     console.log(resBody);",
							"     pushOrgInfoToAry(resBody.userId,resBody.id,resBody.token.id,resBody.token.expirationTime,resBody.email);",
							"     console.log(\"saving updated orgInfo In Employee\");",
							"    pm.environment.set(\"orgInfoDetails\", orgInfo); ",
							"  ",
							"  } ",
							"",
							"",
							" var testFirstNameIteration = pm.environment.get(\"testFirstNameIteration\");",
							"  if (testFirstNameIteration.length > 0) {",
							"    postman.setNextRequest(\"create Employee\");",
							"    } else {",
							"         pm.environment.unset(\"currentNameIteration\");",
							"         pm.environment.unset(\"testFirstNameIteration\");",
							"         pm.environment.unset(\"currentNameIterationData\");",
							"         postman.setNextRequest();",
							"",
							"}",
							"",
							"  tests[\"Response code should be 201\"] = responseCode.code === 201;",
							"",
							"",
							"pm.globals.unset(\"variable_key\");",
							"",
							"pm.globals.unset(\"variable_value\");"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "113dee49-ea84-41e6-9f49-20e0197386cf",
						"type": "text/javascript",
						"exec": [
							"var orgInfo =  pm.environment.get(\"orgInfoDetails\");",
							"",
							"console.log(\"Complete orgInfo:->\"+ JSON.stringify(orgInfo[0]));",
							"",
							"",
							"",
							"    ",
							"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
							"",
							" ",
							"var orgNumber = Math.floor(Math.random() * 9000000) + 1000000;",
							"",
							"",
							"postman.setEnvironmentVariable(\"orgNumber\", orgNumber);",
							"",
							"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
							"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
							"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
							"var randFirstName = randFirstNameWithGenderArray[0];",
							"var gender = randFirstNameWithGenderArray[1];",
							"",
							"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
							"",
							"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
							"",
							"var randState = states[Math.floor(Math.random() * states.length)];",
							"postman.setEnvironmentVariable(\"randState\", randState);",
							"",
							"var photoId = postman.getEnvironmentVariable(\"photoId_male_1\");",
							"",
							"var nominalUserData={",
							"  ",
							"  \"email\" : \"UniversityFitness12\"+orgNumber+\"@qa4life.com\",",
							"  \"firstName\" : \"{{randFirstName}}\"+orgNumber,",
							"  \"lastName\" : \"{{randLastName}}\"+orgNumber,",
							"  \"address\" : {",
							"    \"address1\" :\"123 Fitness Lane \"+orgNumber,",
							"    \"address2\" : \"PO Box \"+orgNumber,",
							"    \"city\" : \"Little Rock\",",
							"    \"state\" : \"Alabama\",",
							"    \"country\" : \"United States\",",
							"    \"zipCode\" : \"33935\"",
							"  },",
							"  \"phone\" : {",
							"      \"number\" : \"1234567899\",",
							"      \"extension\" : \"411\"",
							"    },",
							"  \"userType\" : \"Customer\",",
							"   \"photoId\" : photoId",
							"",
							"  ",
							"};",
							"",
							"var maxUserData={",
							"  \"email\" : \"cMTH0p5ZWopWG9A9D3YWFQ60rQns5owQmsH0vyFDUI4U9OVl5ODrHhIDPO7aK5xSAoPRme6jILNFpuxg5o3AKPhJCHp4hOp3LcASAca0SL85I8Yxt28wPoLbGszMTJKE2MXzfZpvJtQx8uFN2MQ32fc2W4ZVCdwiLnzdVC2SmtBx2WXDpO1LrzpE0MYzeg5ngQqTB6MoE1o7CtaIBu4jTj0RiRsIdbYaCtFmQkN4jh\"+orgNumber+\"@qa4life.com\",",
							"  \"firstName\" :  \"aaaaaaaaaabbbbbbbbbbccccccccccddddddddddee\",",
							"  \"lastName\" : \"p8kIec4DW8r9kT7FneKIiTUhJUJr5w6HHy9e68g0dRR9tiTcHv6uf7o7EzRrx6t9cVWVLWcL9XsRYyWiyObYSqyW2NImO\",",
							"  \"address\" : {",
							"    \"address1\" :\"4FBxeU96nwIVi5Hn6BM9UyvBkxCdh4PKsWM7JoPYxSmDxBKdxCC7ebGGIuEZfNlMsMhjd5eAOYmMGWhuIl4GHZTvsJYf14Xj1mX2wKBkPCQXMz2dXy9dctESxN4OVFbczuAOb60qMJS7WLukg2QiqHbCFErsMfnxDmu49Zbjva8lTZlO8zpw8TBMyUYcAVvnF\",",
							"    \"address2\" : \"PO Box 123 PO Box PO Box 123\",",
							"    \"city\" : \"Little Rock\",",
							"    \"state\" : \"Alabama\",",
							"    \"country\" : \"United States\",",
							"    \"zipCode\" : \"339312335\"",
							"  },",
							"  \"phone\" : {",
							"      \"number\" : \"123451234512345\",",
							"      \"extension\" : \"7508175081\"",
							"    },",
							"  \"userType\" : \"Customer\"",
							"",
							"  ",
							"};",
							"",
							"var minUserData={",
							"  \"email\" : \"U3\"+orgNumber+\"@qa4life.com\",",
							"  ",
							"  \"firstName\" :  \"a\",",
							"  \"lastName\" : \"b\",",
							"  \"address\" : {",
							"    \"address1\" :\"123 Fitness 123 Fitness Lane Lane Fitness Lane Lane\"+orgNumber,",
							"    \"address2\" : \"PO Box 123 PO Box PO Box 123\"+orgNumber,",
							"    \"city\" : \"Little Rock\",",
							"    \"state\" : \"Alabama\",",
							"    \"country\" : \"United States\",",
							"    \"zipCode\" : \"75081\"",
							"  },",
							"  \"phone\" : {",
							"      \"number\" : \"1234512345\",",
							"      \"extension\" : \"411\"",
							"    },",
							"  \"userType\" : \"Customer\"",
							"",
							"",
							"  ",
							"};",
							"",
							"var allFieldsUserData={",
							"  \"email\" : \"UniversityFitnez67\"+orgNumber+\"@qa4life.com\",",
							"  ",
							" \"firstName\" : \"Abc\"+orgNumber,",
							"  \"lastName\" : \"Team\"+orgNumber,",
							"  \"address\" : {",
							"    \"address1\" :\"123 Fitness 123 Fitness Lane Lane Fitness Lane Lane\"+orgNumber,",
							"    \"address2\" : \"PO Box 123 PO Box PO Box 123\"+orgNumber,",
							"    \"city\" : \"Little Rock\",",
							"    \"state\" : \"Alabama\",",
							"    \"country\" : \"United States\",",
							"    \"zipCode\" : \"339312335\"",
							"  },",
							"  \"phone\" : {",
							"      \"number\" : \"1234567798\",",
							"      \"extension\" : \"412\"",
							"    },",
							"  \"userType\" : \"Customer\",",
							"   \"photoId\" : photoId",
							"",
							" ",
							"};",
							"",
							"",
							"",
							"console.log(JSON.stringify(request));",
							"if(!testFirstNameIteration) {",
							"    testFirstNameIteration =  [",
							"        {data: nominalUserData,statusCode :201 , type : \"Nominal\"},",
							"        {data: maxUserData,statusCode: 201, type: \"Max\"},",
							"        {data: minUserData,statusCode :201 , type : \"Min\"},",
							"        {data: allFieldsUserData,statusCode: 201 , type: \"allFields\"}",
							"        ];",
							"}",
							"",
							"var currentNameIteration =testFirstNameIteration.shift();",
							"",
							"",
							"pm.environment.set(\"testFirstNameIteration\", testFirstNameIteration);",
							"pm.environment.set(\"currentNameIteration\", JSON.stringify(currentNameIteration));",
							"pm.environment.set(\"organizationId\", orgInfo[0].orgId);",
							"pm.environment.set(\"accessToken\", orgInfo[0].accessToken);",
							"pm.environment.set(\"testType\", JSON.stringify(currentNameIteration.type));",
							"pm.environment.set(\"currentNameIterationData\", JSON.stringify(currentNameIteration.data));",
							"",
							"",
							"",
							"pm.globals.set(\"variable_key\", \"variable_value\");"
						]
					}
				}
			],
			"folder": "f88cff5a-1b55-42bb-9b0c-e2dfb043e739",
			"rawModeData": "{{currentNameIterationData}}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "9ed8a064-6542-4f23-90b8-b4d5d5346e45",
			"name": "createUnlimitedPurchase",
			"url": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "0519fcf8-f287-4cfc-bf42-b9f50dfc92a1",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"if (responseCode.code != 201)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 201) ",
							"{",
							"    var jsonData = JSON.parse(responseBody);",
							"    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
							"    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
							"    ",
							"    tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
							"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
							"    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId\")+\"\\\"\");  ",
							"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
							"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
							"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
							"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
							"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited\")+\"\\\"\");  ",
							"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
							"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId\")+\"\\\"\");  ",
							"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
							"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
							"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
							"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
							"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
							"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
							"}",
							"",
							"tests[\"Response code should be 201\"] = responseCode.code === 201;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ea130f93-a6d5-483c-80f5-efa56bb79051",
						"type": "text/javascript",
						"exec": [
							"// var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
							"var randItemQuantity = 1;",
							"var unitPrice = 22.5;",
							"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
							"var purchaseAmount = randItemQuantity * unitPrice;",
							"purchaseAmount = +purchaseAmount + +salesTax;",
							"",
							"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
							"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
							"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
							"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
						]
					}
				}
			],
			"folder": "00326462-08c1-48f7-ac37-184657e02aea",
			"rawModeData": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "a5e0a944-a6b4-4e18-82d0-9faf6c371c56",
			"name": "updateEnrollment",
			"url": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}?status={{attendStatus}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "text/plain"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "status",
					"value": "{{attendStatus}}"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "cc588d5a-46ea-4cd9-9240-94c0ea378620",
						"type": "text/javascript",
						"exec": [
							"",
							"var jsonData = JSON.parse(responseBody);",
							"var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
							"postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
							"",
							"//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
							"if(attendStatus == 'reserved'){",
							"    if (responseCode.code != 409)",
							"    {",
							"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"    }",
							"    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
							"}else{",
							"    if (responseCode.code != 200)",
							"    {",
							"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"    }",
							"    tests[\"Response code should be 200\"] = responseCode.code === 200;",
							"tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
							"tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\\\"attended\\\"\");",
							"tests[\"Response Body has Correct Member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
							"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
							"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\");",
							"tests[\"Response Body has Correct LastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
							"tests[\"Response Body has Correct photoId\"] =  responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
							"tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");",
							"tests[\"Response Body has Correct attendanceDateTime\"] = responseBody.has(\"\\\"attendanceDateTime\\\":\"+\"\\\"\"+jsonData.attendanceDateTime+\"\\\"\");",
							"tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
							"//tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"expirationDateTime\");",
							"tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");",
							"tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":false\");",
							"tests[\"Response Body has Correct unlimited\"] = responseBody.has(jsonData.purchaseSummary.unlimited);",
							"}",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "642dbddc-894a-4264-a4b5-9df5ebc16978",
						"type": "text/javascript",
						"exec": [
							"var attendStatus = ''",
							"var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
							"//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
							"console.log(\"Attend percent:\" + attendPercent)",
							"if(Math.random() <=  attendPercent){",
							"    attendStatus = \"attended\"",
							"}else{",
							"    attendStatus = \"reserved\"",
							"}",
							"postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
						]
					}
				}
			],
			"folder": "00326462-08c1-48f7-ac37-184657e02aea",
			"rawModeData": "",
			"headers": "Content-Type: text/plain\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "aa8a8681-5840-4341-8b1f-744f51d9e9df",
			"name": "swapEnrollmentUser",
			"url": "{{enrollment}}/{{organizationId}}/{{locationId}}/enrollment/swap",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "b22fadba-1622-443c-b934-dfca989d9411",
						"type": "text/javascript",
						"exec": [
							"if (responseCode.code != 200)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"    ",
							"}",
							"",
							"else if (responseCode.code === 201) ",
							"{",
							"        var jsonData = JSON.parse(responseBody);",
							"        ",
							"        ",
							"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");   ",
							"    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
							"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
							"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
							"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
							"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
							"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
							"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"photoId_female_5\")+\"\\\"\");  ",
							"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
							"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
							"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
							"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+false);  ",
							"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
							"        ",
							"}",
							"",
							"tests[\"Response code should be 201\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"folder": "00326462-08c1-48f7-ac37-184657e02aea",
			"rawModeData": "{\r\n  \"fromEventId\" : \"{{eventId_Swap}}\",\r\n  \"toEventId\" : \"{{eventId_300pm}}\",\r\n  \"userid\" : \"{{userId}}\"\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "adfe449a-da72-4f25-81a6-ec1948345114",
			"name": "getEventCategory",
			"url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "9b008c69-dff7-4abb-90ed-3f0765089509",
						"type": "text/javascript",
						"exec": [
							"",
							"tests[\"Response code should be 200\"] = responseCode.code === 200;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "512e9a83-b7c6-4637-92e0-f5a145527e16",
						"type": "text/javascript",
						"exec": [
							"var orgInfo =  pm.environment.get(\"orgInfoDetails\");",
							"",
							"console.log(orgInfo);",
							"postman.setEnvironmentVariable(\"organizationId\", orgInfo[0].orgId);",
							"pm.environment.set(\"locationId\",orgInfo[0].locationId);",
							"postman.setEnvironmentVariable(\"eventCategoryId\", orgInfo[0].eventcategoryId);",
							"",
							""
						]
					}
				}
			],
			"folder": "3b18f106-5a7f-49c8-af21-13f7fcdf3f35",
			"rawModeData": "",
			"headers": "Authorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "c00fce22-0445-4574-8705-d9412d15a030",
			"name": "GetLocationDocument",
			"url": "{{my-organization}}/{{organizationId}}/{{locationId}}/document",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "3202c8d0-aeef-43d0-9fab-b2044d06825e",
						"type": "text/javascript",
						"exec": [
							"if (responseCode.code != 200)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 200)",
							"{",
							"    var jsonData = JSON.parse(responseBody);",
							"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
							"    tests[\"Response Body has Correct waiverDocId\"] = responseBody.has(\"\\\"waiverDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\");",
							"tests[\"Response Body has Correct termDocId\"] = responseBody.has(\"\\\"termDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
							"    ",
							"}",
							"",
							"tests[\"Response code should be 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"folder": "bb92b5f7-21f7-40ac-81a7-12e012c0c2dd",
			"rawModeData": "{\r\n  \"name\" : \"University Fitness Center #{{orgNumber}}\",\r\n    \"address\" : {\r\n      \"address1\" : \"123 Fitness Lane\",\r\n      \"address2\" : \"PO Box {{$randomInt}}\",\r\n      \"city\" : \"Little Rock\",\r\n      \"state\" : \"{{randState}}\",\r\n      \"country\" : \"United States\",\r\n      \"zipCode\" : \"33935\"\r\n    },\r\n  \"email\" : {\r\n    \"address\" : \"UniversityFitness{{orgNumber}}@ufit.com\"\r\n  },\r\n  \"phone\" : {\r\n      \"number\" : \"{{phoneNumber}}\",\r\n      \"extension\" : \"411\"\r\n    }\r\n}\r\n\r\n",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "cc362938-2911-47bd-a905-a4d79ddd431c",
			"name": "createEventCategory",
			"url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0185ecca-493e-4312-929f-51cf35811cda",
						"type": "text/javascript",
						"exec": [
							"var eventCategory =  pm.environment.get(\"orgInfoDetails\");",
							"var testFirstNameIteration=pm.environment.get(\"testFirstNameIteration\");",
							"",
							"",
							"var nominalUserData={ ",
							" \"name\" : \"Video Games5\"",
							"};",
							"",
							"var maxUserData={",
							"     \"name\" : \"swgPeZDRenhY0q8L4fR4HOSgSg2pBA18cOOesUl21wlD2seOf7zQ2GhiorcnrBEVG6hm63GXnJKT0d0JgqnXc72kJUHFP\"",
							"};",
							"",
							"var minUserData={",
							"  \"name\" : \"U\"",
							"  ",
							"};",
							"",
							"var allFieldsUserData={",
							" \"name\" : \"Yoga15\"",
							"};",
							"",
							"",
							"",
							"console.log(JSON.stringify(request));",
							"if(!testFirstNameIteration) {",
							"    testFirstNameIteration =  [",
							"        {data: nominalUserData,statusCode :201 , type : \"Nominal\"},",
							"        {data: maxUserData,statusCode: 201, type: \"Max\"},",
							"        {data: minUserData,statusCode :201 , type : \"Min\"},",
							"        {data: allFieldsUserData,statusCode: 201 , type: \"allFields\"}",
							"        ];",
							"}",
							"",
							"var currentNameIteration =testFirstNameIteration.shift();",
							"",
							"pm.environment.set(\"organizationId\",eventCategory[0].orgId);",
							"pm.environment.set(\"locationId\",eventCategory[0].locationId);",
							"",
							"",
							"pm.environment.set(\"testFirstNameIteration\", testFirstNameIteration);",
							"pm.environment.set(\"currentNameIteration\", JSON.stringify(currentNameIteration));",
							"pm.environment.set(\"testType\", currentNameIteration.type);",
							"pm.environment.set(\"currentNameIterationData\", JSON.stringify(currentNameIteration.data));",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bc253a76-591b-4824-afa0-9b2b2e09a95b",
						"type": "text/javascript",
						"exec": [
							"var currentRequest =  JSON.parse(pm.environment.get(\"currentNameIteration\")); ",
							"var testTypeNominal =  pm.environment.get(\"testType\"); ",
							"console.log(currentRequest);",
							"var orgInfo =  pm.environment.get(\"orgInfoDetails\"); ",
							" var resBody = JSON.parse(responseBody);",
							" if(!orgInfo) orgInfo=[];",
							"    console.log(\"Event Category\" + testTypeNominal);",
							"  if (responseCode.code===201 && testTypeNominal==\"Nominal\" ) {",
							"     console.log(resBody);",
							"       orgInfo[0].eventcategoryId=resBody.id;",
							"    ",
							"   ",
							"    pm.environment.set(\"orgInfoDetails\", orgInfo); ",
							"  ",
							"  } ",
							"",
							"",
							" var testFirstNameIteration = pm.environment.get(\"testFirstNameIteration\");",
							"  if (testFirstNameIteration.length > 0) {",
							"    postman.setNextRequest(\"createEventCategory\");",
							"    } else {",
							"         pm.environment.unset(\"currentNameIteration\");",
							"         pm.environment.unset(\"testFirstNameIteration\");",
							"         pm.environment.unset(\"currentNameIterationData\");",
							"         postman.setNextRequest();",
							"",
							"}",
							"",
							"  tests[\"Response code should be 201\"] = responseCode.code === 201;",
							"",
							"",
							"pm.globals.unset(\"variable_key\");",
							"",
							"pm.globals.unset(\"variable_value\");"
						]
					}
				}
			],
			"folder": "18c9311d-3c14-49ac-98bd-141ef43dc4a7",
			"rawModeData": "{{currentNameIterationData}}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "d8f359b7-9339-4b6a-99f1-8d2f4f35bc8d",
			"name": "GetDeletedPromoCodeByCode",
			"url": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCode}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "d59b8adc-01c1-4976-b1e9-70800d61857f",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"",
							"if (responseCode.code != 404)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 404) ",
							"{",
							"",
							"}",
							"",
							"",
							"tests[\"Response code should be 404\"] = responseCode.code === 404;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "11ed69d9-22dd-4a40-829c-7dcc08ccf078",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"folder": "c7aaa660-1ed1-49b0-90ee-99f945c43b23",
			"rawModeData": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "e46bc28e-d95d-4398-87ff-7a658e6e2afb",
			"name": "updateEventCategorybyID",
			"url": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "0bf97a27-46c3-41c0-b69b-579cd5ab7511",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"if (responseCode.code != 200)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"tests[\"Response code should be 200\"] = responseCode.code === 200;",
							"postman.setNextRequest();"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "814d893c-134c-4f6f-a02a-7576bc3d7486",
						"type": "text/javascript",
						"exec": [
							"var orgInfo =  pm.environment.get(\"orgInfoDetails\");",
							"",
							"console.log(\"Update password\");",
							"console.log(orgInfo);",
							"",
							"postman.setEnvironmentVariable(\"organizationId\", orgInfo[0].orgId);",
							"pm.environment.set(\"locationId\",orgInfo[0].locationId);",
							"",
							"postman.setEnvironmentVariable(\"eventCategoryId\", orgInfo[0].eventcategoryId);",
							"",
							""
						]
					}
				}
			],
			"folder": "3b18f106-5a7f-49c8-af21-13f7fcdf3f35",
			"rawModeData": "{\r\n    \"name\": \"Movies\"\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "ea212c17-2465-488a-adb1-228d6bcb522c",
			"name": "createMeteredItem_yoga",
			"url": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "c2227b71-3400-43b3-b12a-12afb2a6622e",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"if (responseCode.code != 201)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if (responseCode.code === 201)",
							"{",
							"    var jsonData = JSON.parse(responseBody);",
							"    postman.setEnvironmentVariable(\"itemId_metered_yoga\", jsonData.id);",
							"    ",
							"tests[\"Response Body has Name\"] = responseBody.has(\"Yoga \"+postman.getEnvironmentVariable(\"randItemNumber\"));",
							"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
							"tests[\"Response Body has Correct Unit Price\"] = responseBody.has(\"\\\"unitPrice\\\":50\");",
							"tests[\"Response Body has Item Id\"] = responseBody.has(postman.getEnvironmentVariable(\"itemId_metered_yoga\"));  ",
							"tests[\"Response Body has Correct quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
							"tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\"); ",
							"tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\"); ",
							"tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":5\");",
							"tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
							"tests[\"Response Body has Correct currencyId\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
							"tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":true\");",
							"tests[\"Response Body has Correct eventTypeId\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_yoga\"));",
							"}",
							"",
							"tests[\"Response code should be 201\"] = responseCode.code === 201;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c0b42b1e-28d6-4d20-824a-4c14d9a61f9c",
						"type": "text/javascript",
						"exec": [
							"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
							"",
							"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
						]
					}
				}
			],
			"folder": "53d7e50f-65f4-4f6d-994c-53e1c04bd7e7",
			"rawModeData": "{\r\n  \"name\" : \"Yoga {{randItemNumber}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 50,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" : false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 5,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  } ]\r\n}\r\n",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "ee85fe9f-b229-4328-a944-58b13a35c70a",
			"name": "GetPromoCodeByAll",
			"url": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "33003718-39a3-4252-93ad-5c6dccc0d6a8",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"",
							"if (responseCode.code != 200)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"",
							"else if (responseCode.code === 200) ",
							"{",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"var code = postman.getEnvironmentVariable(\"promoCode\").toUpperCase();",
							"var code2 = postman.getEnvironmentVariable(\"promoCode_2\").toUpperCase();",
							"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
							"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
							"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount\");",
							"var promoCodeAmount2 = postman.getEnvironmentVariable(\"promoCodeAmount_2\");",
							"var promoCodeId = postman.getEnvironmentVariable(\"promoCodeId\");",
							"var promoCodeId2 = postman.getEnvironmentVariable(\"promoCodeId_2\");",
							"",
							"",
							"tests[\"Response Body has Correct PromoCode\"] = responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
							"tests[\"Response Body has Correct PromoCode2\"] = responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code2+\"\\\"\");",
							"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+promoStartDate+\"\\\"\");",
							"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+promoEndDate+\"\\\"\");",
							"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount+\"\");",
							"tests[\"Response Body has Correct PromoCodeAmount2\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount2+\"\");",
							"tests[\"Response Body has Correct PromoCodeId1\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId+\"\\\"\");",
							"tests[\"Response Body has Correct PromoCodeId2\"] = tests[\"Response Body has Correct PromoCodeId1\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId2+\"\\\"\");",
							"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\\\"USD\\\"\");",
							"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"FIXED_AMOUNT\\\"\");",
							"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
							"",
							"",
							"",
							"}",
							"",
							"tests[\"Response code should be 200\"] = responseCode.code === 200;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "11ed69d9-22dd-4a40-829c-7dcc08ccf078",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"folder": "c7aaa660-1ed1-49b0-90ee-99f945c43b23",
			"rawModeData": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		},
		{
			"id": "f6272013-5b3f-41d2-a88e-52ad4b41d475",
			"name": "GetLocation",
			"url": "{{my-organization}}/{{organizationId}}/location/{{locationId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{accessToken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "6ffe900d-6ec7-49bc-a20a-181905d8cb81",
						"type": "text/javascript",
						"exec": [
							"if (responseCode.code != 200)",
							"{",
							"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
							"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
							"}",
							"",
							"else if(responseCode.code==200) {",
							"     var jsonData = JSON.parse(responseBody);",
							"    ",
							"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");   ",
							"tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\"); ",
							"tests[\"Response Body has Correct phoneNumber\"] = responseBody.has(\"\\\"phoneNumber\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"phoneNumber\")+\"\\\"\"); ",
							"tests[\"Response Body has Correct phoneExtension\"] = responseBody.has(\"\\\"phoneExtension\\\":\"+\"\\\"\"+411+\"\\\"\"); ",
							"tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.email+\"\\\"\"); ",
							"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+jsonData.number+\"\\\"\"); ",
							"tests[\"Response Body has Correct waiverDocId\"] = responseBody.has(\"\\\"waiverDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\");",
							"tests[\"Response Body has Correct termDocId\"] = responseBody.has(\"\\\"termDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
							"tests[\"Response Body has Correct address id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.address.id+\"\\\"\");",
							"tests[\"Response Body has Correct address1\"] = responseBody.has(\"\\\"address1\\\":\"+\"\\\"\"+\"123 Fitness Lane\"+\"\\\"\");",
							"tests[\"Response Body has Correct address2\"] = responseBody.has(\"\\\"address2\\\":\"+\"\\\"\"+jsonData.address.address2+\"\\\"\");",
							"tests[\"Response Body has Correct address city\"] = responseBody.has(\"\\\"city\\\":\"+\"\\\"\"+\"Little Rock\"+\"\\\"\");",
							"tests[\"Response Body has Correct address zipCode\"] = responseBody.has(\"\\\"zipCode\\\":\"+\"\\\"33935\"+\"\\\"\");",
							"tests[\"Response Body has Correct address country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"\"+\"United States\"+\"\\\"\");",
							"    ",
							"}",
							"",
							"tests[\"Response code should be 200\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"folder": "bb92b5f7-21f7-40ac-81a7-12e012c0c2dd",
			"rawModeData": "{\r\n  \"name\" : \"University Fitness Center #{{orgNumber}}\",\r\n    \"address\" : {\r\n      \"address1\" : \"123 Fitness Lane\",\r\n      \"address2\" : \"PO Box {{$randomInt}}\",\r\n      \"city\" : \"Little Rock\",\r\n      \"state\" : \"{{randState}}\",\r\n      \"country\" : \"United States\",\r\n      \"zipCode\" : \"33935\"\r\n    },\r\n  \"email\" : {\r\n    \"address\" : \"UniversityFitness{{orgNumber}}@ufit.com\"\r\n  },\r\n  \"phone\" : {\r\n      \"number\" : \"{{phoneNumber}}\",\r\n      \"extension\" : \"411\"\r\n    }\r\n}\r\n\r\n",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{accessToken}}\n",
			"pathVariables": {}
		}
	]
}