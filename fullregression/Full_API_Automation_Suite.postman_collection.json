{
  "info": {
    "_postman_id": "f27b4a02-006b-4d5e-aee8-76e1bc54aa2c",
    "name": "Full_API_Automation_Suite",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Create Org, Location and User",
      "description": null,
      "item": [
        {
          "name": "createUserForOrg",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5d4b4d81-88d3-401f-ad9a-e73cd6d7acfc",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    var appURL = postman.getEnvironmentVariable(\"baseURL\") + jsonData.organizationId;",
                  "    postman.setEnvironmentVariable(\"ownerId\", jsonData.userId);",
                  "    postman.setEnvironmentVariable(\"organizationId\", jsonData.organizationId);",
                  "    postman.setEnvironmentVariable(\"ownerEmail\", jsonData.email);",
                  "    postman.setEnvironmentVariable(\"ownerPassword\", jsonData.password);",
                  "    postman.setEnvironmentVariable(\"appURL\", appURL);",
                  "    postman.setEnvironmentVariable(\"roleId\", jsonData.roleId);",
                  "    postman.setEnvironmentVariable(\"personId\", jsonData.personId);",
                  "    tests[\"Response Body has Correct Organization ID\"] = responseBody.has(\"\\\"organizationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"organizationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct User ID\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"ownerId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct FirstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct LastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Password\"] = responseBody.has(\"\\\"password\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"ownerPassword\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct PhoneNumber\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"phoneNumber\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"ownerEmail\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Birthdate\"] = responseBody.has(\"birthDate\");",
                  "    tests[\"Response Body has Correct extension\"] = responseBody.has(\"extension\");",
                  "    tests[\"Response Body has Correct person id\"] = responseBody.has(\"\\\"personId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"personId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct role id\"] = responseBody.has(\"\\\"roleId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"roleId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct employee id\"] = responseBody.has(\"employeeId\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "298a76db-c033-4c5e-929e-d573e0515bb9",
                "type": "text/javascript",
                "exec": [
                  "var phoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"phoneNumber\", phoneNumber);",
                  "",
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"password\" : \"Password1\",\r\n  \"phone\" : {\r\n    \"number\" : \"{{phoneNumber}}\",\r\n    \"extension\" : \"1234\"\r\n  },\r\n  \"birthDate\" : \"1998-01-27\",\r\n  \"email\" : \"TestUser@qa4life.com\"\r\n}"
            },
            "url": {
              "raw": "{{registration}}/user",
              "host": [
                "{{registration}}"
              ],
              "path": [
                "user"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Authorization",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "760ddec9-aa94-423d-84cd-6fd75378c360",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);",
                  "   ",
                  "    tests[\"Response Body has Correct Token Type\"] = responseBody.has(\"\\\"tokenType\\\":\\\"Bearer\\\"\");",
                  "    tests[\"Response Body has Access Token\"] = responseBody.has(\"\\\"accessToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"accessToken\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Client Id\"] = responseBody.has(\"clientId\");",
                  "    tests[\"Response Body has Correct Username\"] = responseBody.has(\"\\\"username\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"ownerEmail\")+\"\\\"\");",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Basic YXV0b21hdGVkLXRlc3RpbmctY2xpZW50OiNhbnRpLWpvbmFz"
              },
              {
                "key": "",
                "value": "",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"password\": \"{{ownerPassword}}\",\r\n  \"username\": \"{{ownerEmail}}\"\r\n}"
            },
            "url": {
              "raw": "{{authentication}}/organization/{{organizationId}}/login?clientId=automated-testing-client",
              "host": [
                "{{authentication}}"
              ],
              "path": [
                "organization",
                "{{organizationId}}",
                "login"
              ],
              "query": [
                {
                  "key": "clientId",
                  "value": "automated-testing-client"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "createOrgLocation",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc33e895-2c7f-4e84-8192-366882f0df42",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"addressId\", jsonData.location.address.id);",
                  "    postman.setEnvironmentVariable(\"locationId\", jsonData.location.id);",
                  "    postman.setEnvironmentVariable(\"locationName\", jsonData.location.name);",
                  "    postman.setEnvironmentVariable(\"orgName\", jsonData.name);",
                  "    var loc_address1 = \"123 Fitness Lane\";",
                  "    var loc_address2 = \"PO Box #\"+postman.getEnvironmentVariable(\"orgNumber\");",
                  "    var city = \"Little Rock\";",
                  "    var emailaddress = \"UniversityFitness\"+postman.getEnvironmentVariable(\"orgNumber\")+\"@qa4life.com\";",
                  "    responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+\"UniversityFitness\"+postman.getEnvironmentVariable(\"phoneNumber\")+\"@ufit.com\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct Location id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Address id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"addressId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Org name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"orgName\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Owner ID\"] = responseBody.has(\"\\\"ownerId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"ownerId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Loc name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationName\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Loc address1\"] = responseBody.has(loc_address1);",
                  "    tests[\"Response Body has Correct Loc address2\"] = responseBody.has(loc_address2);",
                  "    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has Correct State\"] =responseBody.has(\"\\\"state\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randState\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
                  "    tests[\"Response Body has Correct Zip code\"] = responseBody.has(\"zipCode\");",
                  "    tests[\"Response Body has Correct Phone number\"] =  responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"phoneNumber\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct extension\"] = responseBody.has(\"extension\");",
                  "    tests[\"Response Body has Correct Email\"] = responseBody.has(emailaddress);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "697738f3-b9f4-4646-9044-97f803022747",
                "type": "text/javascript",
                "exec": [
                  "var orgNumber = Math.floor(Math.random() * 9000000) + 1000000;",
                  "",
                  "postman.setEnvironmentVariable(\"orgNumber\", orgNumber);",
                  "",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "postman.setEnvironmentVariable(\"randState\", randState);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\" : \"University Sports and Fitness #{{orgNumber}}\",\n  \"ownerId\" : \"{{ownerId}}\",\n  \"location\" : {\n    \"name\" : \"University Fitness Center #{{orgNumber}}\",\n    \"address\" : {\n      \"address1\" : \"123 Fitness Lane\",\n      \"address2\" : \"PO Box #{{orgNumber}}\",\n      \"city\" : \"Little Rock\",\n      \"state\" : \"{{randState}}\",\n      \"country\" : \"United States\",\n      \"zipCode\" : \"33935\"\n    },\n    \"phone\" : {\n      \"number\" : \"{{phoneNumber}}\",\n      \"extension\" : \"411\"\n    },\n    \"email\" : {\n      \"address\" : \"UniversityFitness{{orgNumber}}@qa4life.com\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{registration}}/{{organizationId}}/organization",
              "host": [
                "{{registration}}"
              ],
              "path": [
                "{{organizationId}}",
                "organization"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "My Organisation",
      "description": null,
      "item": [
        {
          "name": "getLocationbyLocID",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cb6dd4ab-5e42-40aa-a697-a3302322bbff",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct Location id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Address id\"] = responseBody.has(jsonData.address.id);",
                  "    tests[\"Response Body has Correct Org name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Correct Address1\"] = responseBody.has(\"address1\");",
                  "    tests[\"Response Body has Correct Address2\"] = responseBody.has(\"address2\");",
                  "    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has Correct State\"] =responseBody.has(\"state\");",
                  "    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
                  "    tests[\"Response Body has Correct Zip code\"] = responseBody.has(\"zipCode\");",
                  "    tests[\"Response Body has Correct Phone number\"] =  responseBody.has(jsonData.phone.phoneNumber);",
                  "    tests[\"Response Body has Correct extension\"] = responseBody.has(jsonData.phone.phoneExtension);",
                  "    tests[\"Response Body has Correct Email\"] = responseBody.has(\"email\");",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{my-organization}}/{{organizationId}}/location/{{locationId}}",
              "host": [
                "{{my-organization}}"
              ],
              "path": [
                "{{organizationId}}",
                "location",
                "{{locationId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getLocationDocuments",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "50de8557-9862-4332-8a76-df0472133b6d",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    tests[\"Response Body has Correct Location id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{my-organization}}/{{organizationId}}/{{locationId}}/document",
              "host": [
                "{{my-organization}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "document"
              ]
            }
          },
          "response": []
        },
        {
          "name": "uploadLocationDocument",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a727611f-57fe-4c7f-af1d-ebaa1540365b",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct Location id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct waiverDocId\"] = responseBody.has(\"waiverDocId\");",
                  "    ",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "81b051c3-494a-410d-b8aa-5cba2dc5d542",
                "type": "text/javascript",
                "exec": [
                  "var randnum = (parseInt)((Math.random()*100)+1);",
                  "",
                  "if(randnum<10)",
                  "{",
                  "    randnum = randnum + 10;",
                  "}",
                  "",
                  "postman.setEnvironmentVariable(\"randnum\", randnum);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"locationName\" : \"{{locationName}}\",\r\n  \"accountNumber\" : \"{{randnum}}R4Q6\",\r\n  \"document\" : \"Our employees are encouraged to be pro-active in expressing their ideas and contributing to the company's future.\"\r\n}"
            },
            "url": {
              "raw": "{{my-organization}}/{{organizationId}}/{{locationId}}/document/waiver",
              "host": [
                "{{my-organization}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "document",
                "waiver"
              ]
            }
          },
          "response": []
        },
        {
          "name": "uploadLocation",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "49c2ecae-5f19-4dca-97f8-9472d8e0e427",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    tests[\"Response Body has Correct Location id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Address id\"] = responseBody.has(jsonData.address.id);",
                  "    tests[\"Response Body has Correct Org name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Correct Address1\"] = responseBody.has(\"address1\");",
                  "    tests[\"Response Body has Correct Address2\"] = responseBody.has(\"address2\");",
                  "    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has Correct State\"] =responseBody.has(\"state\");",
                  "    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
                  "    tests[\"Response Body has Correct Zip code\"] = responseBody.has(\"zipCode\");",
                  "    tests[\"Response Body has Correct Phone number\"] =  responseBody.has(\"\\\"phoneNumber\\\":\\\"9999888877\\\"\");",
                  "    tests[\"Response Body has Correct extension\"] = responseBody.has(\"\\\"phoneExtension\\\":\\\"666\\\"\");",
                  "    tests[\"Response Body has Correct Email\"] = responseBody.has(\"\\\"email\\\":\\\"myabc555@abc.com\\\"\");",
                  "    tests[\"Response Body has Correct waiverDocId\"] = responseBody.has(\"waiverDocId\");",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "7f9eec26-4099-4b38-abad-a34e7f3b7ea6",
                "type": "text/javascript",
                "exec": [
                  "var randnum = (parseInt)((Math.random()*100)+1);",
                  "",
                  "if(randnum<10)",
                  "{",
                  "    randnum = randnum + 10;",
                  "}",
                  "",
                  "postman.setEnvironmentVariable(\"randnum\", randnum);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\" : {\r\n    \"address\" : \"myabc555@abc.com\"\r\n  },\r\n  \"phone\" : {\r\n    \"number\" : \"9999888877\",\r\n    \"extension\" : \"666\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{my-organization}}/{{organizationId}}/location/{{locationId}}",
              "host": [
                "{{my-organization}}"
              ],
              "path": [
                "{{organizationId}}",
                "location",
                "{{locationId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "uploadLocationLogo",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b39f5199-0bfb-4010-b38d-5363c911c560",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    tests[\"Response Body has Correct Location id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct logoId\"] = responseBody.has(\"logoId\");",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0a45eebd-1ff9-4db2-b51f-aa4eff207a12",
                "type": "text/javascript",
                "exec": [
                  "var randnum = (parseInt)((Math.random()*100)+1);",
                  "",
                  "if(randnum<10)",
                  "{",
                  "    randnum = randnum + 10;",
                  "}",
                  "",
                  "postman.setEnvironmentVariable(\"randnum\", randnum);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"locationName\" : \"{{locationName}}\",\r\n  \"accountNumber\" : \"{{randnum}}R4Q6\",\r\n  \"document\" : \"\"\r\n}"
            },
            "url": {
              "raw": "{{my-organization}}/{{organizationId}}/{{locationId}}/logo",
              "host": [
                "{{my-organization}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "logo"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Photos For Org",
      "description": null,
      "item": [
        {
          "name": "SaveEmployeePhoto1_male",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9ce9d9fb-8a9b-44b9-bda5-3f6a60376ec1",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"photoId_male_1\", jsonData.id);",
                  "    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
                  "    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e8\\\"\");",
                  "    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee1\\\"\");",
                  "    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e8\",\n    \"name\": \"employee1\",\n    \"type\": \"ABC Employee\"\n  }\n}"
            },
            "url": {
              "raw": "{{staypuft}}/userPhoto",
              "host": [
                "{{staypuft}}"
              ],
              "path": [
                "userPhoto"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SaveEmployeePhoto2_male",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5cc65a61-97ef-4382-945b-fa074f741c83",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"photoId_male_2\", jsonData.id);",
                  "    ",
                  "    ",
                  "    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
                  "    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e7\\\"\");",
                  "    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee2\\\"\");",
                  "    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e7\",\n    \"name\": \"employee2\",\n    \"type\": \"ABC Employee\"\n  }\n}"
            },
            "url": {
              "raw": "{{staypuft}}/userPhoto",
              "host": [
                "{{staypuft}}"
              ],
              "path": [
                "userPhoto"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SaveEmployeePhoto3_male",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72e71899-4212-4452-a4d5-c06e93f09051",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"photoId_male_3\", jsonData.id);",
                  "    ",
                  "    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
                  "    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e5\\\"\");",
                  "    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee4\\\"\");",
                  "    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e5\",\n    \"name\": \"employee4\",\n    \"type\": \"ABC Employee\"\n  }\n}"
            },
            "url": {
              "raw": "{{staypuft}}/userPhoto",
              "host": [
                "{{staypuft}}"
              ],
              "path": [
                "userPhoto"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SaveEmployeePhoto4_male",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7a04596f-7b39-48e7-aae7-9654f5be8306",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"photoId_male_4\", jsonData.id);",
                  "        ",
                  "    ",
                  "    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
                  "    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e1\\\"\");",
                  "    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee8\\\"\");",
                  "    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"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\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e1\",\n    \"name\": \"employee8\",\n    \"type\": \"ABC Employee\"\n  }\n}"
            },
            "url": {
              "raw": "{{staypuft}}/userPhoto",
              "host": [
                "{{staypuft}}"
              ],
              "path": [
                "userPhoto"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SaveEmployeePhoto1_female",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a5cbf6d0-f047-4768-866f-56c90ba1df1a",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"photoId_female_1\", jsonData.id);",
                  "        ",
                  "    ",
                  "    ",
                  "    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
                  "     tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e6\\\"\");",
                  "    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee3\\\"\");",
                  "    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"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pcVkbUS1BQAAAAAAAJYIKCMscjHHLEAARSBQAAAQADOG4ILKAJYJZCyiy1AAAVBZRFDPAlmatdykrLHKy43EiJdswiZYRKylLYrGshZcaWEAApCoFlAABARQAGWORjjligCKIKAACAEpAAMteVmcrSAqUgAiAtgsqoSKgqC2KtgqAlGUtlSCJKlxi4zKGRTJbGGWK1lLJljljQSgAlIWWCwAAAIAKAyxyMccsUIAUAAEEAAUAExyx3WYscqFqUBBKiAWUsBLASKhaizK4i2WlWypiZYkslxhiylVbFtsLhUywzlyRZjcbm5DOgFhAFgABZQAgQQqFZ4ZpjhliWCgAAggCgAgADbqthjTNLoAAQJZEoAWWAEVGKxaQtxJnJaWqhjDFsiZW6TKSzJiGFS3IsY2RZlitsY1QAhYAACKACCLYCwMsckuAAoACCAAoIBAAu7A3nAZuWRqAIEoIAQApSAAAEUVaWIS4YmblkWBSgBMhLCpiS2kWmdAAAlCwAECAoAADIT/xAA0EAACAgECBAQGAgIDAAIDAAABAgADBBESBRMhMhAiMUAGFCAjMFAzQTRCFSRgB0MWJTX/2gAIAQEAAQUCdm37mm5puabmm5puabmm5puabmm4zc03NNzTc03GbjNzTc03NNzTcZuabmm5puabjNzTc03NNzTc03NNzTc03NNzTc03Gbmm4zc03NNzTcZuabmm4zc03NNWm5puabmm5puabmm4zc03NNzTc03NNzTc03NNzTc03GatNzTc03NNzTc03NNzTc03NNzTc03NNzTc03NNzTc03NNzTc03NNzTc03NNzTc03NNzRGbe/f/AOiTvfv/APRJ3v3/APok737/AP0Sd79//ok737//AESd79//AKJO9+/9joTOS+hrcTT9cne/f+vRNSqAEWKJzhq/QsTNmp5RhRpoZp+pTvfv/WgElKVSO0O4zSKIuoigNGXSddvMaNtMNcPr+nTvfu/WV1kzUJDcNWsafcM22iA2ys2yp9ZXVvAq0j43W3GsE0aFQ8esj9One/f+rxq90ssjL11QQ2RbNItqyqyuVcl4mGjhsXlOlwKjbooRqc3GMYFYDqLqen6VO9+/9ViUG5rtNtlgEJmsRGMWiLUmtVKmUYzTFpt01zEWyyqwZG0WY9rKcR9Jm4yMlqGs16NMujYf0id79/6nHpe62wLX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\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e6\",\n    \"name\": \"employee3\",\n    \"type\": \"ABC Employee\"\n  }\n}"
            },
            "url": {
              "raw": "{{staypuft}}/userPhoto",
              "host": [
                "{{staypuft}}"
              ],
              "path": [
                "userPhoto"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SaveEmployeePhoto2_female",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "719fd4ad-9f67-4441-a201-8bc3bce6f948",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"photoId_female_2\", jsonData.id);",
                  "    ",
                  "    ",
                  "    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
                  "     tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e3\\\"\");",
                  "    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee6\\\"\");",
                  "    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e3\",\n    \"name\": \"employee6\",\n    \"type\": \"ABC Employee\"\n  }\n}"
            },
            "url": {
              "raw": "{{staypuft}}/userPhoto",
              "host": [
                "{{staypuft}}"
              ],
              "path": [
                "userPhoto"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SaveEmployeePhoto3_female",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "991c1fbc-7865-4773-b6ed-28abcfdc5767",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"photoId_female_3\", jsonData.id);",
                  "        ",
                  "    ",
                  "    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
                  "     tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e1\\\"\");",
                  "    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee9\\\"\");",
                  "    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e1\",\n    \"name\": \"employee9\",\n    \"type\": \"ABC Employee\"\n  }\n}"
            },
            "url": {
              "raw": "{{staypuft}}/userPhoto",
              "host": [
                "{{staypuft}}"
              ],
              "path": [
                "userPhoto"
              ]
            }
          },
          "response": []
        },
        {
          "name": "SaveEmployeePhoto4_female",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "beb41216-06b2-4fae-9332-e6c24fbc793f",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"photoId_female_4\", jsonData.id);",
                  "        ",
                  "   ",
                  "    var metadataID = \"\";",
                  "    var metadataName = \"employee10\";",
                  "    var metadataType = \"ABC Employee\";",
                  "    ",
                  "    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
                  "    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e1\\\"\");",
                  "    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee10\\\"\");",
                  "    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e1\",\n    \"name\": \"employee10\",\n    \"type\": \"ABC Employee\"\n  }\n}"
            },
            "url": {
              "raw": "{{staypuft}}/userPhoto",
              "host": [
                "{{staypuft}}"
              ],
              "path": [
                "userPhoto"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Employees",
      "description": null,
      "item": [
        {
          "name": "createEmployee 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a42d5571-642d-4ffc-889b-205f352ee95a",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"employeeUserId\", jsonData.userId);",
                  "    postman.setEnvironmentVariable(\"employeeId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"employeeTokenId\", jsonData.token.id);",
                  "    postman.setEnvironmentVariable(\"EmpTokenExpirationTime\", jsonData.token.expirationTime);",
                  "    postman.setEnvironmentVariable(\"employeeEmail\", jsonData.email);",
                  "    postman.setEnvironmentVariable(\"tokenid\", jsonData.token.id);",
                  "    tests[\"Response Body has Correct Employee id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Email id\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeEmail\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct First name\"] =  responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Last name\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct address1\"] = responseBody.has(\"address1\");",
                  "    tests[\"Response Body has Correct address2\"] = responseBody.has(\"address2\");",
                  "    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has Correct State\"] =  responseBody.has(\"state\");",
                  "    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
                  "    tests[\"Response Body has Correct Zip code\"] =  responseBody.has(\"zipCode\");",
                  "    tests[\"Response Body has Correct Phone number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct photo Id\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhotoId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct entityId\"] =  responseBody.has(jsonData.token.entityId);",
                  "    tests[\"Response Body has Correct expirationTime\"] =  responseBody.has(jsonData.token.expirationTime);",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "700b6baf-f587-4d45-8668-15aea4eb7a8a",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "var orgNumber = Math.floor(Math.random() * 9000000) + 1000000;",
                  "",
                  "postman.setEnvironmentVariable(\"orgNumber\", orgNumber);",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box #{{orgNumber}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
            },
            "url": {
              "raw": "{{registration}}/{{organizationId}}/employee",
              "host": [
                "{{registration}}"
              ],
              "path": [
                "{{organizationId}}",
                "employee"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEmployee 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4d60649b-0dfc-4268-9e54-1b4a02872b2a",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"employeeUserId_2\", jsonData.userId);",
                  "    postman.setEnvironmentVariable(\"employeeId_2\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"employeeTokenId_2\", jsonData.token.id);",
                  "    postman.setEnvironmentVariable(\"EmpTokenExpirationTime_2\", jsonData.token.expirationTime);",
                  "    postman.setEnvironmentVariable(\"employeeEmail_2\", jsonData.email);",
                  "    postman.setEnvironmentVariable(\"tokenid2\", jsonData.token.id);",
                  "    tests[\"Response Body has Correct Employee id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId_2\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Email id\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeEmail_2\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct First name\"] =  responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Last name\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct address1\"] = responseBody.has(\"address1\");",
                  "    tests[\"Response Body has Correct address2\"] = responseBody.has(\"address2\");",
                  "    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has Correct State\"] =  responseBody.has(\"state\");",
                  "    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
                  "    tests[\"Response Body has Correct Zip code\"] =  responseBody.has(\"zipCode\");",
                  "    tests[\"Response Body has Correct Phone number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct photo Id\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhotoId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct entityId\"] =  responseBody.has(jsonData.token.entityId);",
                  "    tests[\"Response Body has Correct expirationTime\"] =  responseBody.has(jsonData.token.expirationTime);",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3b63656b-5cb9-4582-9684-ba967f1c6167",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box #{{orgNumber}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
            },
            "url": {
              "raw": "{{registration}}/{{organizationId}}/employee",
              "host": [
                "{{registration}}"
              ],
              "path": [
                "{{organizationId}}",
                "employee"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEmployee 3",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "60670849-e0f2-47cc-8da2-06249b213ca0",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"employeeUserId_9\", jsonData.userId);",
                  "    postman.setEnvironmentVariable(\"employeeId_9\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"employeeTokenId\", jsonData.token.id);",
                  "    postman.setEnvironmentVariable(\"EmpTokenExpirationTime\", jsonData.token.expirationTime);",
                  "    postman.setEnvironmentVariable(\"employeeEmail_9\", jsonData.email);",
                  "    postman.setEnvironmentVariable(\"tokenid9\", jsonData.token.id);",
                  "    postman.setEnvironmentVariable(\"getEmpFirstName\", jsonData.firstName);",
                  "    postman.setEnvironmentVariable(\"getEmpLastName\", jsonData.lastName);",
                  "    postman.setEnvironmentVariable(\"getEmpEmailId\", jsonData.email);",
                  "    tests[\"Response Body has Correct Employee id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId_9\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Email id\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeEmail_9\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct First name\"] =  responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Last name\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct address1\"] = responseBody.has(\"address1\");",
                  "    tests[\"Response Body has Correct address2\"] = responseBody.has(\"address2\");",
                  "    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has Correct State\"] =  responseBody.has(\"state\");",
                  "    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
                  "    tests[\"Response Body has Correct Zip code\"] =  responseBody.has(\"zipCode\");",
                  "    tests[\"Response Body has Correct Phone number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct photo Id\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhotoId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct entityId\"] =  responseBody.has(jsonData.token.entityId);",
                  "    tests[\"Response Body has Correct expirationTime\"] =  responseBody.has(jsonData.token.expirationTime);",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "439d1fee-4035-4c0c-bc76-2c54715ff475",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box #{{orgNumber}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
            },
            "url": {
              "raw": "{{registration}}/{{organizationId}}/employee",
              "host": [
                "{{registration}}"
              ],
              "path": [
                "{{organizationId}}",
                "employee"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEmployee 4",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "62525b77-8e25-4012-bc4f-4b0c3a87fd1b",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"employeeUserId_10\", jsonData.userId);",
                  "    postman.setEnvironmentVariable(\"employeeId_10\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"employeeTokenId_3\", jsonData.token.id);",
                  "    postman.setEnvironmentVariable(\"EmpTokenExpirationTime\", jsonData.token.expirationTime);",
                  "    postman.setEnvironmentVariable(\"employeeEmail_10\", jsonData.email);",
                  "    postman.setEnvironmentVariable(\"employeeFirstName\", jsonData.firstName);",
                  "    postman.setEnvironmentVariable(\"employeeLastName\", jsonData.lastName);",
                  "     postman.setEnvironmentVariable(\"employeePhoneNumber\", jsonData.phone.number);",
                  "     postman.setEnvironmentVariable(\"tokenid10\", jsonData.token.id);",
                  "    tests[\"Response Body has Correct Employee id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId_10\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Email id\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeEmail_10\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct First name\"] =  responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Last name\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct address1\"] = responseBody.has(\"address1\");",
                  "    tests[\"Response Body has Correct address2\"] = responseBody.has(\"address2\");",
                  "    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
                  "    tests[\"Response Body has Correct State\"] =  responseBody.has(\"state\");",
                  "    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
                  "    tests[\"Response Body has Correct Zip code\"] =  responseBody.has(\"zipCode\");",
                  "    tests[\"Response Body has Correct Phone number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct photo Id\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhotoId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct entityId\"] =  responseBody.has(jsonData.token.entityId);",
                  "    tests[\"Response Body has Correct expirationTime\"] =  responseBody.has(jsonData.token.expirationTime);",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "530f477a-aef2-44b0-9174-5b659f925f5b",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box #{{orgNumber}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
            },
            "url": {
              "raw": "{{registration}}/{{organizationId}}/employee",
              "host": [
                "{{registration}}"
              ],
              "path": [
                "{{organizationId}}",
                "employee"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "UpdatePassword",
      "description": null,
      "item": [
        {
          "name": "UpdatePassword",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dff5df04-b6ad-4985-97b9-f200d05733b3",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5bec4b57-ca0a-47d2-b9f3-797bbbc64f00",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"password\" : \"password2\"\r\n}"
            },
            "url": {
              "raw": "{{registration}}/{{organizationId}}/user/{{employeeUserId_10}}/password?token={{employeeTokenId_3}}",
              "host": [
                "{{registration}}"
              ],
              "path": [
                "{{organizationId}}",
                "user",
                "{{employeeUserId_10}}",
                "password"
              ],
              "query": [
                {
                  "key": "token",
                  "value": "{{employeeTokenId_3}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Documents",
      "description": null,
      "item": [
        {
          "name": "uploadTermsAndConditionsDoc",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "77c7074c-7a26-4d14-b4f7-3ff1de73c8dc",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"termsId\", jsonData.location.termDocId);",
                  "    ",
                  "    tests[\"Response Body has Correct location.id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct location term Doc Id\"] = responseBody.has(\"\\\"termDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"accountNumber\": \"123-456\",\r\n  \"document\": \"TERMS AND CONDITIONS - The use of this website is subject to the following terms of use: \\n\\n The content of the pages of this website is for your general information and use only. It is subject to change without notice.  \\n\\nThis website uses cookies to monitor browsing preferences. If you do allow cookies to be used, the following personal information may be stored by us for use by third parties: [insert list of information].  \\n\\nNeither we nor any third parties provide any warranty or guarantee as to the accuracy, timeliness, performance, completeness or suitability of the information and materials found or offered on this website for any particular purpose. You acknowledge that such information and materials may contain inaccuracies or errors and we expressly exclude liability for any such inaccuracies or errors to the fullest extent permitted by law.  \\n\\nYour use of any information or materials on this website is entirely at your own risk, for which we shall not be liable. It shall be your own responsibility to ensure that any products, services or information available through this website meet your specific requirements.  \\n\\nThis website contains material which is owned by or licensed to us. This material includes, but is not limited to, the design, layout, look, appearance and graphics. Reproduction is prohibited other than in accordance with the copyright notice, which forms part of these terms and conditions.  \\n\\nAll trade marks reproduced in this website which are not the property of, or licensed to, the operator are acknowledged on the website.  \\n\\nUnauthorised use of this website may give rise to a claim for damages and/or be a criminal offence.  \\n\\nFrom time to time this website may also include links to other websites. These links are provided for your convenience to provide further information. They do not signify that we endorse the website(s). We have no responsibility for the content of the linked website(s).  \\n\\nYour use of this website and any dispute arising out of such use of the website is subject to the laws of England, Northern Ireland, Scotland and Wales.\",\r\n  \"locationName\": \"Sherwood\"\r\n}"
            },
            "url": {
              "raw": "{{my-organization}}/{{organizationId}}/{{locationId}}/document/terms",
              "host": [
                "{{my-organization}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "document",
                "terms"
              ]
            }
          },
          "response": []
        },
        {
          "name": "uploadWaiverDoc",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bbdbf572-eaef-4f76-b722-10a39effdd75",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"waiverId\", jsonData.location.waiverDocId);",
                  "    ",
                  "    tests[\"Response Body has Correct location id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct location waiver Doc Id\"] = responseBody.has(\"\\\"waiverDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct location termDoc Id\"] = responseBody.has(\"\\\"termDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"accountNumber\": \"123-456\",\r\n  \"document\": \"WAIVER - The use of this website is subject to the following terms of use: \\n\\n The content of the pages of this website is for your general information and use only. It is subject to change without notice.  \\n\\nThis website uses cookies to monitor browsing preferences. If you do allow cookies to be used, the following personal information may be stored by us for use by third parties: [insert list of information].  \\n\\nNeither we nor any third parties provide any warranty or guarantee as to the accuracy, timeliness, performance, completeness or suitability of the information and materials found or offered on this website for any particular purpose. You acknowledge that such information and materials may contain inaccuracies or errors and we expressly exclude liability for any such inaccuracies or errors to the fullest extent permitted by law.  \\n\\nYour use of any information or materials on this website is entirely at your own risk, for which we shall not be liable. It shall be your own responsibility to ensure that any products, services or information available through this website meet your specific requirements.  \\n\\nThis website contains material which is owned by or licensed to us. This material includes, but is not limited to, the design, layout, look, appearance and graphics. Reproduction is prohibited other than in accordance with the copyright notice, which forms part of these terms and conditions.  \\n\\nAll trade marks reproduced in this website which are not the property of, or licensed to, the operator are acknowledged on the website.  \\n\\nUnauthorised use of this website may give rise to a claim for damages and/or be a criminal offence.  \\n\\nFrom time to time this website may also include links to other websites. These links are provided for your convenience to provide further information. They do not signify that we endorse the website(s). We have no responsibility for the content of the linked website(s).  \\n\\nYour use of this website and any dispute arising out of such use of the website is subject to the laws of England, Northern Ireland, Scotland and Wales.\",\r\n  \"locationName\": \"Sherwood\"\r\n}"
            },
            "url": {
              "raw": "{{my-organization}}/{{organizationId}}/{{locationId}}/document/waiver",
              "host": [
                "{{my-organization}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "document",
                "waiver"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getUserInfobyToken",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c2c95cc3-cea4-493d-b769-b61c09095fe9",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    tests[\"Response Body has Correct identity\"] = responseBody.has(\"identity\");",
                  "    ",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{registration}}/{{organizationId}}/user/{{employeeUserId}}/token/{{tokenid}}",
              "host": [
                "{{registration}}"
              ],
              "path": [
                "{{organizationId}}",
                "user",
                "{{employeeUserId}}",
                "token",
                "{{tokenid}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Event/Item Category and Promo Code",
      "description": null,
      "item": [
        {
          "name": "CreateEventCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1cc34f08-90f6-47a6-89e3-581518cdce1b",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventCategoryId\", jsonData.id);",
                  "",
                  "    tests[\"Response Body has Correct location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");    ",
                  "    tests[\"Response Body has Correct Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
                  "    tests[\"Response Body has Name\"] =responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "39089364-adfc-454b-8b9f-4dbbdb8bd98a",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Yoga\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateEventCategory1",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2a1de309-8748-44f5-ae87-dbbbe56e8089",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventCategoryId1\", jsonData.id);",
                  "    ",
                  "    tests[\"Response Body has Correct location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");    ",
                  "    tests[\"Response Body has Correct Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId1\")+\"\\\"\");",
                  "    tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b7bddb01-901f-4784-8254-744ec228cf84",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Video Games\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateEventCategory2",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b4dac063-c0be-4854-a527-1252d2d5fa33",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventCategoryId2\", jsonData.id);",
                  "",
                  "    tests[\"Response Body has Correct location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");    ",
                  "    tests[\"Response Body has Correct Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId2\")+\"\\\"\");",
                  "    tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\");",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f4f0fc2d-3262-4e0e-b6e8-0d7b9381765e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Adventure\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Get/Put Event Category",
      "description": null,
      "item": [
        {
          "name": "getEventCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "718ad541-af01-40e8-886e-8b45b4571ae2",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if(responseCode.code==200) {",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    tests[\"Response Body has Correct location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");    ",
                  "    tests[\"Response Body has Correct Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
                  "    tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\");",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory",
                "{{eventCategoryId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEventCategorybyID",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5739fef3-b472-4b93-ae36-9d276349dd8c",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    //postman.setEnvironmentVariable(\"eventCategoryId1\", jsonData.id);",
                  "    ",
                  "     tests[\"Response Body has Correct location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");    ",
                  "    tests[\"Response Body has Correct Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
                  "    tests[\"Response Body has Name\"] =responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\");",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "34657a65-5676-4eb2-838a-db95226e4eb1",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Movies\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory",
                "{{eventCategoryId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getEventCategories",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3c7ee33-4ca9-4525-8cda-5301e3c9948c",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} ",
                  "else if(responseCode.code==200) ",
                  "{",
                  "    ",
                  "    tests[\"Response Body has Correct location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId1\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId2\")+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has numberOfElements\"] = responseBody.has(\"numberOfElements\");",
                  "    tests[\"Response Body has unsorted\"] = responseBody.has(\"\\\"unsorted\\\":true\");",
                  "    tests[\"Response Body has sorted\"] = responseBody.has(\"\\\"sorted\\\":false\");",
                  "    //tests[\"Response Body has pageSize\"] = responseBody.has(\"\\\"pageSize\\\":20\");",
                  "   // tests[\"Response Body has pageNumber\"] = responseBody.has(\"\\\"pageNumber\\\":0\");",
                  "   // tests[\"Response Body has offset\"] = responseBody.has(\"\\\"offset\\\":0\");",
                  "   // tests[\"Response Body has paged\"] = responseBody.has(\"\\\"paged\\\":true\");",
                  "   // tests[\"Response Body has unpaged\"] = responseBody.has(\"\\\"unpaged\\\":false\");",
                  "    tests[\"Response Body has totalPages\"] = responseBody.has(\"\\\"totalPages\\\":1\");",
                  "    tests[\"Response Body has last\"] = responseBody.has(\"\\\"last\\\":true\");",
                  "    tests[\"Response Body has first\"] = responseBody.has(\"\\\"first\\\":true\");",
                  "    tests[\"Response Body has totalElements\"] = responseBody.has(\"\\\"totalElements\\\":3\");",
                  "    //tests[\"Response Body has size\"] = responseBody.has(\"\\\"size\\\":20\");",
                  "    tests[\"Response Body has number\"] = responseBody.has(\"\\\"number\\\":0\");",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory"
              ]
            }
          },
          "response": []
        },
        {
          "name": "patchUpdateEventCategorybyID",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f01f8fed-58d2-43ad-bc02-6ce4fefbe4b4",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    tests[\"Response Body has Correct location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\");",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ac707f20-34a5-4b17-91bd-13b5f33aa701",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Gym\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory",
                "{{eventCategoryId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getEventCategories",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "683ee4c5-bec1-412c-a84b-ec366dc28f22",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} ",
                  "else if(responseCode.code==200) ",
                  "{",
                  "    ",
                  "    tests[\"Response Body has Correct location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId1\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId2\")+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":3\");",
                  "    tests[\"Response Body has unsorted\"] = responseBody.has(\"\\\"unsorted\\\":true\");",
                  "    tests[\"Response Body has sorted\"] = responseBody.has(\"\\\"sorted\\\":false\");",
                  "    //tests[\"Response Body has pageSize\"] = responseBody.has(\"\\\"pageSize\\\":20\");",
                  "   // tests[\"Response Body has pageNumber\"] = responseBody.has(\"\\\"pageNumber\\\":0\");",
                  "   // tests[\"Response Body has offset\"] = responseBody.has(\"\\\"offset\\\":0\");",
                  "   // tests[\"Response Body has paged\"] = responseBody.has(\"\\\"paged\\\":true\");",
                  "   // tests[\"Response Body has unpaged\"] = responseBody.has(\"\\\"unpaged\\\":false\");",
                  "    tests[\"Response Body has totalPages\"] = responseBody.has(\"\\\"totalPages\\\":1\");",
                  "    tests[\"Response Body has last\"] = responseBody.has(\"\\\"last\\\":true\");",
                  "    tests[\"Response Body has first\"] = responseBody.has(\"\\\"first\\\":true\");",
                  "    tests[\"Response Body has totalElements\"] = responseBody.has(\"\\\"totalElements\\\":3\");",
                  "    //tests[\"Response Body has size\"] = responseBody.has(\"\\\"size\\\":20\");",
                  "    tests[\"Response Body has number\"] = responseBody.has(\"\\\"number\\\":0\");",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Get Event Levels",
      "description": null,
      "item": [
        {
          "name": "getEventLevels",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4885b658-0c4a-4c83-844e-900628952905",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "    const levels =  jsonData.content[0].id;",
                  "    const levels2 =  jsonData.content[1].id;",
                  "    const levels3 =  jsonData.content[2].id;",
                  "    ",
                  "    postman.setEnvironmentVariable(\"eventLevelId_beginner\", levels);",
                  "    postman.setEnvironmentVariable(\"eventLevelId_intermediate\", levels2);",
                  "    postman.setEnvironmentVariable(\"eventLevelId_advanced\", levels3);",
                  "    ",
                  "    postman.setEnvironmentVariable(\"eventLevelId1\", levels);",
                  "    postman.setEnvironmentVariable(\"eventLevelId2\", levels2);",
                  "    postman.setEnvironmentVariable(\"eventLevelId3\", levels3);",
                  "    ",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\\\"Beginner\\\"\");",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\\\"Intermediate\\\"\");",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\\\"Advanced\\\"\");",
                  "tests[\"Response Body has Correct Event Level for Begineer\"] = responseBody.has(postman.getEnvironmentVariable(\"eventLevelId_beginner\"));",
                  "tests[\"Response Body has Correct Event Level for Intermediate\"] = responseBody.has(postman.getEnvironmentVariable(\"eventLevelId_intermediate\"));",
                  "tests[\"Response Body has Correct Event Level for Advanced\"] = responseBody.has(postman.getEnvironmentVariable(\"eventLevelId_advanced\"));",
                  "tests[\"Response Body has pageable\"] = responseBody.has(\"INSTANCE\");",
                  "tests[\"Response Body has totalPages\"] = responseBody.has(\"\\\"totalPages\\\":1\");",
                  "tests[\"Response Body has last\"] = responseBody.has(\"\\\"last\\\":true\");",
                  "tests[\"Response Body has totalElements\"] = responseBody.has(\"\\\"totalElements\\\":4\");",
                  "tests[\"Response Body has unsorted\"] = responseBody.has(\"\\\"unsorted\\\":true\");",
                  "tests[\"Response Body has sorted\"] = responseBody.has(\"\\\"sorted\\\":false\");",
                  "tests[\"Response Body has first\"] = responseBody.has(\"\\\"first\\\":true\");",
                  "tests[\"Response Body has numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":4\");",
                  "tests[\"Response Body has size\"] = responseBody.has(\"\\\"size\\\":0\");",
                  "tests[\"Response Body has number\"] = responseBody.has(\"\\\"number\\\":0\");",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventLevel",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventLevel"
              ]
            }
          },
          "response": []
        },
        {
          "name": "deleteEventCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2942567a-d6f6-4ef2-85f6-77f0ec32adf2",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if(responseCode.code==200) {",
                  "",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"Adventure\");",
                  "tests[\"Response Body has Correct location ID\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));",
                  "tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId2\"));    ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9e766f3f-3a84-4b2c-819a-9fab07816d1d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId2}}",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory",
                "{{eventCategoryId2}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getDeletedEventCategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c132709-14ec-4daa-b78b-2429cb6939fb",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 204)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} ",
                  "else if(responseCode.code===204) {",
                  "  ",
                  "}",
                  "",
                  "tests[\"Response code should be 204\"] = responseCode.code === 204;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId2}}",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory",
                "{{eventCategoryId2}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Events",
      "description": null,
      "item": [
        {
          "name": "Create Event Type - Yoga",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "55b0a19d-14d6-4ea5-a2a0-819443e8b7d4",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventTypeId_yoga\", jsonData.id);",
                  "    ",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"Yoga\");",
                  "tests[\"Response Body has Event Type Id for Yoga\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_yoga\"));",
                  "tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
                  "tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
                  "tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
                  "tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\"); ",
                  "tests[\"Response Body has Correct eventLevelId\"] = responseBody.has(jsonData.eventLevelId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Yoga\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory",
                "{{eventCategoryId}}",
                "eventType"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Event Type - P90X",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c46a405d-112d-430b-866c-fc74555296c0",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventTypeId_p90x\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"P90X\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_p90x\"));",
                  "tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
                  "tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
                  "tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
                  "tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\"); ",
                  "tests[\"Response Body has Correct eventLevelId\"] = responseBody.has(jsonData.eventLevelId);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"P90X\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory",
                "{{eventCategoryId}}",
                "eventType"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Event Type - Pilates",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "540062c8-ec90-4ff4-948b-587c907257dd",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventTypeId_pilates\", jsonData.id);",
                  "    ",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"Pilates\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_pilates\"));",
                  "tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
                  "tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
                  "tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
                  "tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\"); ",
                  "tests[\"Response Body has Correct eventLevelId\"] = responseBody.has(jsonData.eventLevelId);",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Pilates\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory",
                "{{eventCategoryId}}",
                "eventType"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Event Type - Zumba",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2e50422f-7c48-4600-a7d3-203d0b3d6751",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventTypeId_zumba\", jsonData.id);",
                  "    ",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"Zumba\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_zumba\"));",
                  "tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
                  "tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
                  "tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
                  "tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\"); ",
                  "tests[\"Response Body has Correct eventLevelId\"] = responseBody.has(jsonData.eventLevelId);",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Zumba\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory",
                "{{eventCategoryId}}",
                "eventType"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Event Type - Cycling",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6effa4d8-2a8a-4cf0-9cd0-9b3ba91014f6",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventTypeId_cycling\", jsonData.id);",
                  "    ",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"Cycling\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_cycling\"));",
                  "tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
                  "tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
                  "tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
                  "tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\"); ",
                  "tests[\"Response Body has Correct eventLevelId\"] = responseBody.has(jsonData.eventLevelId);",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Cycling\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory",
                "{{eventCategoryId}}",
                "eventType"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Event Type - Aerobics",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d7ab0474-5395-46ea-a5d2-d4dff7562681",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventTypeId_aerobics\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"Aerobics\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_aerobics\"));",
                  "tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
                  "tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
                  "tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
                  "tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\"); ",
                  "tests[\"Response Body has Correct eventLevelId\"] = responseBody.has(jsonData.eventLevelId);",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Aerobics\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory",
                "{{eventCategoryId}}",
                "eventType"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Event Type - Turbo Kick",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ccdd5fa6-e942-46a4-b75f-c56da742dea8",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventTypeId_turboKick\", jsonData.id);",
                  "    ",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"Turbo Kick\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_turboKick\"));",
                  "tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
                  "tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
                  "tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
                  "tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\"); ",
                  "tests[\"Response Body has Correct eventLevelId\"] = responseBody.has(jsonData.eventLevelId);",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Turbo Kick\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventCategory",
                "{{eventCategoryId}}",
                "eventType"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Packages",
      "description": null,
      "item": [
        {
          "name": "createUnlimitedItem_yoga",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "05aea834-f319-417d-b0a2-6863a6575150",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"itemId_unlimited\", jsonData.id);",
                  "",
                  "",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
                  "tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
                  "tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
                  "tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
                  "tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
                  "tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
                  "tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "51f532e5-939f-4784-83be-a5aa233ffbfb",
                "type": "text/javascript",
                "exec": [
                  "var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Yoga{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" :true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createUnlimitedItem_p90x",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "814caa39-bff0-4bc6-9c50-080f72eaecd1",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"itemId_unlimited_p90x\", jsonData.id);",
                  "",
                  "",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_p90x\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_p90x\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
                  "tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
                  "tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
                  "tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
                  "tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
                  "tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
                  "tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "51f532e5-939f-4784-83be-a5aa233ffbfb",
                "type": "text/javascript",
                "exec": [
                  "var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"P90x{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" :true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_p90x}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createUnlimitedItem_cycling",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "93d9ce89-4f7c-49f1-b121-31ab4b0dbfc3",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"itemId_unlimited_cyc\", jsonData.id);",
                  "",
                  "",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_cyc\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_cycling\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
                  "tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
                  "tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
                  "tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
                  "tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
                  "tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
                  "tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "51f532e5-939f-4784-83be-a5aa233ffbfb",
                "type": "text/javascript",
                "exec": [
                  "var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Cycling{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" :true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_cycling}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createUnlimitedItem_turbokick",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a3fce739-d805-4cd4-8edd-5de827c0f713",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"itemId_unlimited_tur\", jsonData.id);",
                  "",
                  "",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_tur\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_turboKick\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
                  "tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
                  "tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
                  "tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
                  "tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
                  "tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
                  "tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "51f532e5-939f-4784-83be-a5aa233ffbfb",
                "type": "text/javascript",
                "exec": [
                  "var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Turbo{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" :true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_turboKick}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5724ac89-ccb3-426c-8ffc-5d2c1ae227f0",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"itemId_metered\", jsonData.id);",
                  "",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_metered\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
                  "",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
                  "tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
                  "tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
                  "tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
                  "tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
                  "tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
                  "tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e71d7db4-4121-4003-a1c9-0453c97ebe3a",
                "type": "text/javascript",
                "exec": [
                  "var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Yoga{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" :false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredItem_p90x",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8da239b2-ee44-464f-92c7-1c90fc1ec9d3",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"itemId_p90x\", jsonData.id);",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"itemId_p90x\", jsonData.id);",
                  "",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_p90x\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_p90x\")+\"\\\"\");",
                  "",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
                  "tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
                  "tests[\"Response Body has Correct Price\"] = responseBody.has(\"unitPrice\");",
                  "tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
                  "tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
                  "tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":2\");",
                  "tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"MONTHS\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "37755c1a-4f1b-446f-a870-1393ea237057",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"P90X Package\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 12,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" : false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 2,\r\n  \"expirationUnit\" : \"MONTHS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n      \"eventTypeId\" : \"{{eventTypeId_p90x}}\"\r\n    }\r\n  ]\r\n}\r\n"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredItem_aerobics",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7d9405c5-7f13-474b-9ec0-6b997e279f08",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"itemId_aerobics\", jsonData.id);",
                  "",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_aerobics\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_aerobics\")+\"\\\"\");",
                  "",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
                  "tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
                  "tests[\"Response Body has Correct Price\"] = responseBody.has(\"unitPrice\");",
                  "tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
                  "tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
                  "tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":2\");",
                  "tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"MONTHS\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f3d86a0c-618f-4033-9860-18a42a888300",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Aerobics Package\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 15,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" : false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 2,\r\n  \"expirationUnit\" : \"MONTHS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n      \"eventTypeId\" : \"{{eventTypeId_aerobics}}\"\r\n    }\r\n  ]\r\n}\r\n"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredItem_pilates",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2aa17352-4d50-4ee4-ae0a-f7a46fdbe6dc",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"itemId_pilates\", jsonData.id);",
                  "",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_pilates\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_pilates\")+\"\\\"\");",
                  "",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
                  "tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
                  "tests[\"Response Body has Correct Price\"] = responseBody.has(\"unitPrice\");",
                  "tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
                  "tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
                  "tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":2\");",
                  "tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"MONTHS\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "09701f47-e4ef-4e23-8c96-28869fc42d39",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Pilates Package\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 5,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" : false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 2,\r\n  \"expirationUnit\" : \"MONTHS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n      \"eventTypeId\" : \"{{eventTypeId_pilates}}\"\r\n    }\r\n  ]\r\n}\r\n"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Item",
      "description": null,
      "item": [
        {
          "name": "createUnlimitedItem_cycling",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cfdb6c9e-7a38-44b4-a9b4-20b779f3ec3b",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"itemId_unlmtd_cycle\", jsonData.id);",
                  "    ",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"Cycling \"+postman.getEnvironmentVariable(\"randItemNumber\"));",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Unit Price\"] = responseBody.has(\"\\\"unitPrice\\\":70\");",
                  "tests[\"Response Body has Item Id\"] = responseBody.has(postman.getEnvironmentVariable(\"itemId_unlmtd_cycle\"));  ",
                  "tests[\"Response Body has Correct quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
                  "tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\"); ",
                  "tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\"); ",
                  "tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":10\");",
                  "tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
                  "tests[\"Response Body has Correct currencyId\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":false\");",
                  "tests[\"Response Body has Correct eventTypeId\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_cycling\"));",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a0ae3e57-f1e0-4376-b852-cdbbb39611c9",
                "type": "text/javascript",
                "exec": [
                  "var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Cycling {{randItemNumber}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 70,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" : true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 10,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_cycling}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredItem_yoga",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c2227b71-3400-43b3-b12a-12afb2a6622e",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"itemId_metered_yoga\", jsonData.id);",
                  "    ",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"Yoga \"+postman.getEnvironmentVariable(\"randItemNumber\"));",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Unit Price\"] = responseBody.has(\"\\\"unitPrice\\\":50\");",
                  "tests[\"Response Body has Item Id\"] = responseBody.has(postman.getEnvironmentVariable(\"itemId_metered_yoga\"));  ",
                  "tests[\"Response Body has Correct quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
                  "tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\"); ",
                  "tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\"); ",
                  "tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":5\");",
                  "tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
                  "tests[\"Response Body has Correct currencyId\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":true\");",
                  "tests[\"Response Body has Correct eventTypeId\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_yoga\"));",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c0b42b1e-28d6-4d20-824a-4c14d9a61f9c",
                "type": "text/javascript",
                "exec": [
                  "var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Yoga {{randItemNumber}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 50,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" : false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 5,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  } ]\r\n}\r\n"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Get Purchase",
      "description": null,
      "item": [
        {
          "name": "getPurchase_metered",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0d171367-147b-4337-b035-4c5eb4ace29d",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if(responseCode.code==200) {",
                  " ",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"multiple\\\"\");",
                  "tests[\"Response Body has Correct Unit Price\"] = responseBody.has(\"\\\"unitPrice\\\":50\");",
                  "tests[\"Response Body has Item Id\"] = responseBody.has(postman.getEnvironmentVariable(\"itemId_metered_yoga\"));  ",
                  "tests[\"Response Body has Correct quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
                  "tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\"); ",
                  "tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\"); ",
                  "tests[\"Response Body has Correct currencyId\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":true\");",
                  "tests[\"Response Body has Correct extendedPrice\"] = responseBody.has(\"\\\"extendedPrice\\\":50\");",
                  "tests[\"Response Body has Correct tax\"] = responseBody.has(\"\\\"tax\\\":3\");",
                  "tests[\"Response Body has Correct totalAmount\"] = responseBody.has(\"\\\"totalAmount\\\":53\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"item\" : {\r\n    \"id\" : \"{{itemId_metered_yoga}}\",\r\n    \"name\": \"Yoga\",\r\n    \"type\" : \"multiple\",\r\n    \"unitPrice\" : 50,\r\n    \"quantity\" : 1,\r\n    \"unlimited\" : false,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"currency\" : \"USD\",\r\n    \"eligibleClasses\" : [ ]\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getPurchase_unlimited",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f75eb847-0fef-43bf-a5f9-7b1dad27dc20",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if(responseCode.code==200) {",
                  "    ",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\\\"Cycling\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"multiple\\\"\");",
                  "tests[\"Response Body has Correct Unit Price\"] = responseBody.has(\"\\\"unitPrice\\\":70\");",
                  "tests[\"Response Body has Item Id\"] = responseBody.has(postman.getEnvironmentVariable(\"itemId_unlmtd_cycle\"));  ",
                  "tests[\"Response Body has Correct quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
                  "tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\"); ",
                  "tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\"); ",
                  "tests[\"Response Body has Correct currencyId\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":false\");",
                  "tests[\"Response Body has Correct extendedPrice\"] = responseBody.has(\"\\\"extendedPrice\\\":70\");",
                  "tests[\"Response Body has Correct tax\"] = responseBody.has(\"\\\"tax\\\":4.2\");",
                  "tests[\"Response Body has Correct totalAmount\"] = responseBody.has(\"\\\"totalAmount\\\":74.2\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"item\" : {\r\n    \"id\" : \"{{itemId_unlmtd_cycle}}\",\r\n    \"name\": \"Cycling\",\r\n    \"type\" : \"multiple\",\r\n    \"unitPrice\" : 70,\r\n    \"quantity\" : 1,\r\n    \"unlimited\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"currency\" : \"USD\",\r\n    \"eligibleClasses\" : [ ]\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Yoga for 10:30AM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6e3b817a-5097-48cc-af2e-070151631e89",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"eventId_1030am\", jsonData.id);",
                  "tests[\"Response Body has Event Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_1030am\")+\"\\\"\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
                  "tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"eventLevelId\");",
                  "tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
                  "tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
                  "tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
                  "tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6a3a3412-54c5-4878-8c24-a212f62bc536",
                "type": "text/javascript",
                "exec": [
                  "var current_timestamp = new Date();",
                  "var current_year = current_timestamp.getFullYear();",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:00:00\";",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:30:00\";",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_yoga}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"locationId\" : \"{{locationId}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateEventForSwap",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e42900d1-5f52-44d2-82d2-7162d56ab89a",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventId_Swap\", jsonData.id); ",
                  "    ",
                  "    ",
                  "tests[\"Response Body has Event Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_Swap\")+\"\\\"\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
                  "tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"eventLevelId\");",
                  "tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
                  "tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
                  "tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":12\");",
                  "tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9872d40a-2ce5-43e1-9222-8c9501f9b118",
                "type": "text/javascript",
                "exec": [
                  "var current_timestamp = new Date();",
                  "var current_year = current_timestamp.getFullYear();",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:00:00\";",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:30:00\";",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_yoga}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"12\",\r\n  \"locationId\" : \"{{locationId}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b3ba80ad-8c4d-441b-8740-b2a5ce6938e1",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201){",
                  "    ",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventHostId\", jsonData.id);",
                  "    tests[\"Response Body has eventHostId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventHostId\")+\"\\\"\");",
                  "    tests[\"Response Body has employeeId\"] = responseBody.has(\"\\\"employeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");",
                  "    tests[\"Response Body has substituteId\"] = responseBody.has(\"\\\"substituteId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId_2\")+\"\\\"\");",
                  "    tests[\"Response Body has eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_1030am\")+\"\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f85df667-db85-45b9-b383-ac874734086c",
                "type": "text/javascript",
                "exec": [
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_1030am}}\",\r\n  \"substituteId\" : \"{{employeeId_2}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/host",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "host"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create P90X for 12PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3fd134e0-de3a-493c-855a-f694e2db5efb",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventId_1200pm\", jsonData.id);",
                  "    ",
                  "tests[\"Response Body has Event Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_1200pm\")+\"\\\"\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_p90x\")+\"\\\"\");",
                  "tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"eventLevelId\");",
                  "tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
                  "tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
                  "tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
                  "tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    ",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8f91bb57-5131-4ea1-b905-77642538b753",
                "type": "text/javascript",
                "exec": [
                  "var current_timestamp = new Date();",
                  "var current_year = current_timestamp.getFullYear();",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:00:00\";",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:30:00\";",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_p90x}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"locationId\" : \"{{locationId}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41fd1858-6d3a-4272-9c9b-fe500f3619e5",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventHostId_1200pm\", jsonData.id);",
                  "",
                  "    tests[\"Response Body has eventHostId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventHostId_1200pm\")+\"\\\"\");",
                  "    tests[\"Response Body has employeeId\"] = responseBody.has(\"\\\"employeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");",
                  "    tests[\"Response Body has eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_1200pm\")+\"\\\"\");    ",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "278fee7e-e725-4188-9bd0-fbef2ea812a4",
                "type": "text/javascript",
                "exec": [
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_1200pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/host",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "host"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Aerobics for 1PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a44d867-6310-4107-a27e-4160d943be94",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventId_100pm\", jsonData.id);",
                  "    ",
                  "tests[\"Response Body has Event Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_100pm\")+\"\\\"\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_aerobics\")+\"\\\"\");",
                  "tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"eventLevelId\");",
                  "tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
                  "tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
                  "tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
                  "tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6e556e7f-76f7-41ca-9c4d-477ba15ccba8",
                "type": "text/javascript",
                "exec": [
                  "var current_timestamp = new Date();",
                  "var current_year = current_timestamp.getFullYear();",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T18:00:00\";",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T18:30:00\";",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_aerobics}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "43b0dbf7-b321-4157-8afd-d595e13eb0e1",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    ",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventHostId_100pm\", jsonData.id);",
                  "   ",
                  "    tests[\"Response Body has eventHostId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventHostId_100pm\")+\"\\\"\");",
                  "    tests[\"Response Body has employeeId\"] = responseBody.has(\"\\\"employeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");",
                  "    tests[\"Response Body has eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_100pm\")+\"\\\"\"); ",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ac0d47f1-9075-4a93-b210-46af370aa34e",
                "type": "text/javascript",
                "exec": [
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_100pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/host",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "host"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Pilates for 2PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c342e88f-8aec-43fa-8137-c823ab2d14b6",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventId_200pm\", jsonData.id);",
                  "    ",
                  "tests[\"Response Body has Event Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_200pm\")+\"\\\"\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_pilates\")+\"\\\"\");",
                  "tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"eventLevelId\");",
                  "tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
                  "tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
                  "tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
                  "tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4b8cd431-ec76-4e45-8007-85f152ce9ee9",
                "type": "text/javascript",
                "exec": [
                  "var current_timestamp = new Date();",
                  "var current_year = current_timestamp.getFullYear();",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T19:00:00\";",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T19:30:00\";",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_pilates}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dbfcfada-bbf0-42f2-a5dd-fce00d7176d5",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventHostId_200pm\", jsonData.id); ",
                  "    ",
                  "  tests[\"Response Body has eventHostId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventHostId_200pm\")+\"\\\"\");",
                  "    tests[\"Response Body has employeeId\"] = responseBody.has(\"\\\"employeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");",
                  "    tests[\"Response Body has eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_200pm\")+\"\\\"\"); ",
                  "    ",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "7bc0c619-422b-4894-8b68-14c4a9d0450b",
                "type": "text/javascript",
                "exec": [
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_200pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/host",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "host"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Zumba for 3PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bed14c3f-109f-44a7-b1d8-acef25dc1301",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventId_300pm\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Event Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_300pm\")+\"\\\"\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_zumba\")+\"\\\"\");",
                  "tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"eventLevelId\");",
                  "tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
                  "tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
                  "tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
                  "tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");    ",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "31e65891-fd49-4dd1-80ea-9a9c70ea6fce",
                "type": "text/javascript",
                "exec": [
                  "var current_timestamp = new Date();",
                  "var current_year = current_timestamp.getFullYear();",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T20:00:00\";",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T20:30:00\";",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_zumba}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "93d8d8d0-4346-4222-9ca4-cd5419e1c799",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventHostId_300pm\", jsonData.id);",
                  "    ",
                  "     tests[\"Response Body has eventHostId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventHostId_300pm\")+\"\\\"\");",
                  "    tests[\"Response Body has employeeId\"] = responseBody.has(\"\\\"employeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");",
                  "    tests[\"Response Body has eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_300pm\")+\"\\\"\"); ",
                  "}",
                  "",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e0a821f8-c37e-4b85-ad3f-b88528d6983f",
                "type": "text/javascript",
                "exec": [
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_300pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/host",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "host"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Turbo Kick for 4:30PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "498e0af7-45b2-4845-8001-739703875f6c",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventId_430pm\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Event Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_430pm\")+\"\\\"\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_turboKick\")+\"\\\"\");",
                  "tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"eventLevelId\");",
                  "tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
                  "tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
                  "tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
                  "tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");    ",
                  "   ",
                  "    ",
                  "}",
                  "",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d23969e0-24c4-41eb-8060-a0b7e55e66cd",
                "type": "text/javascript",
                "exec": [
                  "var current_timestamp = new Date();",
                  "var current_year = current_timestamp.getFullYear();",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T21:30:00\";",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T22:00:00\";",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_turboKick}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eaeb10c3-5bdd-4e6b-b743-cfed4d0d7124",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    ",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventHostId_430pm\", jsonData.id);",
                  "    ",
                  "    tests[\"Response Body has eventHostId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventHostId_430pm\")+\"\\\"\");",
                  "    tests[\"Response Body has employeeId\"] = responseBody.has(\"\\\"employeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");",
                  "    tests[\"Response Body has eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_430pm\")+\"\\\"\");     ",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "95a8a384-3807-45d7-9d79-6b2b6e9381c6",
                "type": "text/javascript",
                "exec": [
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_430pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/host",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "host"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Cycling for 5PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa180e46-e457-4e26-9c80-cc1632327bc3",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventId_500pm\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Event Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_500pm\")+\"\\\"\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_cycling\")+\"\\\"\");",
                  "tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"eventLevelId\");",
                  "tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
                  "tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
                  "tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
                  "tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");       ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ba91734f-97ec-41be-aa01-5a6fe2febb21",
                "type": "text/javascript",
                "exec": [
                  "var current_timestamp = new Date();",
                  "var current_year = current_timestamp.getFullYear();",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T22:00:00\";",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T22:30:00\";",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_cycling}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2816f30d-0093-4bbc-9ab3-ec5df0ea4425",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventHostId\", jsonData.id);",
                  "",
                  "   tests[\"Response Body has eventHostId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventHostId\")+\"\\\"\");",
                  "    tests[\"Response Body has employeeId\"] = responseBody.has(\"\\\"employeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");",
                  "    tests[\"Response Body has eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_500pm\")+\"\\\"\");       ",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "078bcf6e-2a77-4eff-a576-6d36029cb58d",
                "type": "text/javascript",
                "exec": [
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_500pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/host",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "host"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 10:30AM",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8c43a46d-2f70-4644-afea-a714f5a4d54e",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"memberId_1030am\", jsonData.id);",
                  "    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "    ",
                  "tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
                  "tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
                  "tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "94036e42-4a01-4281-a429-e5779fcaa2ae",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n    \"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createUnlimitedPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0519fcf8-f287-4cfc-bf42-b9f50dfc92a1",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "    ",
                  "    tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
                  "    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
                  "    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
                  "    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ea130f93-a6d5-483c-80f5-efa56bb79051",
                "type": "text/javascript",
                "exec": [
                  "// var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createLimitedPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "971a3e20-4aea-40bc-8daf-ebd48bc5e33e",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId2\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId2\", jsonData.items[0].id);",
                  "",
                  "tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId2\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);  ",
                  "    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
                  "    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_metered\")+\"\\\"\");   ",
                  "    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId2\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+true);",
                  "    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0ed6e2bf-66e4-42d2-869f-da9ca2853bbc",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : false,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_metered}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment_yoga",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6fad71b-1e0b-4b97-97d2-e11f1ca3d360",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    ",
                  "    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
                  "    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
                  "    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+false);  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment_yogaSwap",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e2a8808f-a1dd-48af-a37f-5a44a54c9caf",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        postman.setEnvironmentVariable(\"enrollmentIdSwap\", jsonData.id);",
                  "        ",
                  "    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentIdSwap\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
                  "     tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
                  "    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
                  "    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+false);  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_Swap}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_Swap}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getEnrollmentForSwap1",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a2811b83-0705-41fb-86a2-dacdb1b2374c",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if(responseCode.code==200) {",
                  "    ",
                  "    var jsonData = JSON.parse(responseBody);",
                  "  ",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/enrollment/{{userId}}/swap/{{eventId_Swap}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "enrollment",
                "{{userId}}",
                "swap",
                "{{eventId_Swap}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "swapEnrollmentUser",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "588e58d7-a48f-4436-88f3-b303bc6c00d4",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    ",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "        var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");   ",
                  "    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"photoId_female_5\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
                  "    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
                  "    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+false);  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"fromEventId\" : \"{{eventId_Swap}}\",\r\n  \"toEventId\" : \"{{eventId_300pm}}\",\r\n  \"userid\" : \"{{userId}}\"\r\n}"
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/enrollment/swap",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "enrollment",
                "swap"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "80064016-76fb-4415-8401-d7d21f2e58b8",
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
                  "tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\\\"attended\\\"\");",
                  "tests[\"Response Body has Correct Member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\");",
                  "tests[\"Response Body has Correct LastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "tests[\"Response Body has Correct photoId\"] =  responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
                  "tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");",
                  "tests[\"Response Body has Correct attendanceDateTime\"] = responseBody.has(\"\\\"attendanceDateTime\\\":\"+\"\\\"\"+jsonData.attendanceDateTime+\"\\\"\");",
                  "tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
                  "tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");",
                  "tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":false\");",
                  "tests[\"Response Body has Correct unlimited\"] = responseBody.has(jsonData.purchaseSummary.unlimited);",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "642dbddc-894a-4264-a4b5-9df5ebc16978",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Turbo Event for Deletion",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "011db7f3-64d2-49f9-9a3f-f87c4f80711f",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201)",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"eventId_new\", jsonData.id);",
                  "tests[\"Response Body has Event Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_new\")+\"\\\"\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_turboKick\")+\"\\\"\");",
                  "tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"eventLevelId\");",
                  "tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
                  "tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
                  "tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
                  "tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "745a7f3f-95c6-4ed4-bd84-92a530ca675c",
                "type": "text/javascript",
                "exec": [
                  "var current_timestamp = new Date();",
                  "var current_year = current_timestamp.getFullYear();",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T18:00:00\";",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T18:30:00\";",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_turboKick}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_beginner}}\",\r\n  \"capacity\" : \"10\",\r\n  \"locationId\" : \"{{locationId}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "79afd1ef-23cd-4d98-b5bb-8a17529fe583",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId_new\", jsonData.id);",
                  "postman.setEnvironmentVariable(\"userId_new\", jsonData.userId);",
                  "",
                  "tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
                  "tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId_new\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId_new\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
                  "tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c0521e28-0fcd-4020-9902-4b59134dc251",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createUnlimitedPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "51a8364a-5a72-46c9-9c64-1be92b8c8682",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId_new\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
                  "    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
                  "    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_tur\")+\"\\\"\");   ",
                  "    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
                  "    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "14b8d380-03f0-42b1-90e9-ba610166dec3",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited_tur}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId_new}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId_new}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "98368231-6568-43ab-a4e2-72d4eed2b6f9",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId_new\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId_new\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId_new\")+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
                  "    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
                  "    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_new}}/enrollment/{{userId_new}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_new}}",
                "enrollment",
                "{{userId_new}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f1edf4b9-e7b4-4cd1-8b0c-77c889082bab",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct event id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventLevel id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventLevel.id+\"\\\"\");",
                  "  //  tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Intermediate\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventType id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventType.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventType name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+jsonData.event.startDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+jsonData.event.endDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct maxCapacity\"] = responseBody.has(\"\\\"maxCapacity\\\":\"+jsonData.event.maxCapacity);",
                  "    ",
                  "    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].id+\"\\\"\");",
                  "    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].reservationDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.enrollment[0].status+\"\\\"\");",
                  "    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.userId+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.firstName+\"\\\"\");",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.lastName+\"\\\"\");",
                  "    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.photoId+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.email+\"\\\"\");",
                  "    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.enrollment[0].purchaseSummary.expiringSoon);",
                  "    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+jsonData.enrollment[0].purchaseSummary.purchaseOpportunity);",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.enrollment[0].purchaseSummary.unlimited);",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_new}}/enrollment",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_new}}",
                "enrollment"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getEvents",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b0f46db4-5444-48e5-83cb-355e17d17069",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200) {",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if (responseCode.code === 200) {",
                  "",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "    tests[\"Response Body has Correct  eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_new\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].eventLevel.name+\"\\\"\");",
                  "    tests[\"Response Body has Correct  locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  checkInTime\"] = responseBody.has(\"checkInTime\");",
                  "    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\" + jsonData.pageable.sort.sorted);",
                  "    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\" + jsonData.pageable.sort.unsorted);",
                  "    tests[\"Response Body has Correct  pageSize\"] = responseBody.has(\"\\\"pageSize\\\":\" + jsonData.pageable.pageSize);",
                  "    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"pageNumber\\\":\" + jsonData.pageable.pageNumber);",
                  "    tests[\"Response Body has Correct  offset\"] = responseBody.has(\"\\\"offset\\\":\" + jsonData.pageable.offset);",
                  "    tests[\"Response Body has Correct  paged\"] = responseBody.has(\"\\\"paged\\\":\" + jsonData.pageable.paged);",
                  "    tests[\"Response Body has Correct  unpaged\"] = responseBody.has(\"\\\"unpaged\\\":\" + jsonData.pageable.unpaged);",
                  "",
                  "    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\" + jsonData.totalElements);",
                  "    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\" + jsonData.last);",
                  "    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\" + jsonData.totalPages);",
                  "    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\" + jsonData.first);",
                  "    ",
                  "    tests[\"Response Body has Correct  startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\" + \"\\\"\" +jsonData.content[0].startDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct  endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\" + \"\\\"\" +jsonData.content[0].endDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct  enrollmentFull\"] = responseBody.has(\"\\\"enrollmentFull\\\":\"+jsonData.content[0].enrollmentFull);",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/schedule?startDateTime={{eventStartTime}}&endDateTime={{eventEndTime}}",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "schedule"
              ],
              "query": [
                {
                  "key": "startDateTime",
                  "value": "{{eventStartTime}}"
                },
                {
                  "key": "endDateTime",
                  "value": "{{eventEndTime}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e0475e06-5792-4cc0-a133-123afba27305",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventId_newup\", jsonData.id); ",
                  "    ",
                  "    ",
                  "tests[\"Response Body has Event Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_newup\")+\"\\\"\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_turboKick\")+\"\\\"\");",
                  "tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"eventLevelId\");",
                  "tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
                  "tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
                  "tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":12\");",
                  "tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9872d40a-2ce5-43e1-9222-8c9501f9b118",
                "type": "text/javascript",
                "exec": [
                  "var current_timestamp = new Date();",
                  "var current_year = current_timestamp.getFullYear();",
                  "var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
                  "var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
                  "",
                  "var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:00:00\";",
                  "var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:30:00\";",
                  "",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
                  "",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "do {",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
                  "}",
                  "while (randEventLevelId === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_turboKick}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_beginner}}\",\r\n  \"capacity\" : \"12\",\r\n  \"locationId\" : \"{{locationId}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_new}}",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_new}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "DeleteEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ecf713f4-dc64-41f1-9c04-a1b1915fc2be",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 400)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 400) ",
                  "{",
                  "",
                  "}",
                  "tests[\"Response code should be 400\"] = responseCode.code === 400;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ccc1cfc3-7a43-4173-9781-a3c9f869e30f",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_new}}",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_new}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getDeletedEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7a3251ad-2c5c-4db4-8953-567ad22442de",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 200) {",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} ",
                  "else if (responseCode.code === 200) {",
                  "",
                  "    if(responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_new\")+\"\\\"\")===true){",
                  "   var jsonData = JSON.parse(responseBody);",
                  "",
                  "    tests[\"Response Body has Correct  eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_new\")+\"\\\"\");",
                  "    }",
                  "    else",
                  "    {",
                  "       tests[\"Event id has been deleted from Response Body\"] = responseBody.has(\"\");",
                  "    }",
                  "}",
                  " tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/schedule?startDateTime={{eventStartTime}}&endDateTime={{eventEndTime}}",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "schedule"
              ],
              "query": [
                {
                  "key": "startDateTime",
                  "value": "{{eventStartTime}}"
                },
                {
                  "key": "endDateTime",
                  "value": "{{eventEndTime}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "getEnrollment Copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0b7787d-a536-4252-a0d1-1aacbbf011c9",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct event id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventLevel id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventLevel.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventType id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventType.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventType name\"] = responseBody.has(\"name\");",
                  "    tests[\"Response Body has Correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+jsonData.event.startDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+jsonData.event.endDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct maxCapacity\"] = responseBody.has(\"\\\"maxCapacity\\\":\"+jsonData.event.maxCapacity);",
                  "    ",
                  "    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].id+\"\\\"\");",
                  "    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].reservationDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.enrollment[0].status+\"\\\"\");",
                  "    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.userId+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.firstName+\"\\\"\");",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.lastName+\"\\\"\");",
                  "    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.photoId+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.email+\"\\\"\");",
                  "    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.enrollment[0].purchaseSummary.expiringSoon);",
                  "    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+jsonData.enrollment[0].purchaseSummary.purchaseOpportunity);",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.enrollment[0].purchaseSummary.unlimited);",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_new}}/enrollment",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_new}}",
                "enrollment"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 12PM",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ff96a54b-20a2-4596-b000-35c176fed70a",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} ",
                  "",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  " var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "postman.setEnvironmentVariable(\"memberId_1200pm\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
                  "tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
                  "tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "dd748f69-7b63-4c0a-b2a5-4f6225e4f8c4",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createUnlimitedPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ea2a1bac-b4fd-4c01-aef8-b2b2400e6000",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
                  "    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
                  "    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_p90x\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
                  "    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "",
                  "}",
                  "",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "23033a14-685a-46a3-a15b-1d93d6f52054",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited_p90x}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "578937bb-8366-40dd-a665-e8d13cba1a1c",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
                  "    ",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
                  "    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
                  "    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
                  "",
                  "}",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7001174e-23f4-4de8-a7e5-991b515a7985",
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\");",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id); ",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
                  "tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\\\"attended\\\"\");",
                  "tests[\"Response Body has Correct Member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\");",
                  "tests[\"Response Body has Correct LastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "tests[\"Response Body has Correct photoId\"] =  responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
                  "tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");",
                  "tests[\"Response Body has Correct attendanceDateTime\"] = responseBody.has(\"\\\"attendanceDateTime\\\":\"+\"\\\"\"+jsonData.attendanceDateTime+\"\\\"\");",
                  "tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
                  "tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");",
                  "tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":false\");",
                  "tests[\"Response Body has Correct unlimited\"] = responseBody.has(jsonData.purchaseSummary.unlimited);",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "37c56aff-b4b7-44d9-b334-93b7a1e98ac8",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 1PM (2)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f8f7f6f-0af2-4ffe-86cb-dc292ca0023a",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "",
                  "tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
                  "tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
                  "tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "7303811a-caad-4b71-b84d-8348cf94bbe1",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3ad33b5b-bd51-440c-bf37-55f50a7d1645",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);  ",
                  "    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
                  "    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_aerobics\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+true);",
                  "    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "17976b8b-6d17-46fd-811c-11df61f4c04b",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_aerobics}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fb81e41d-f105-4a96-80ea-3bfd8b8294b1",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
                  " ",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
                  "    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
                  "    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(jsonData.purchaseSummary.purchaseOpportunity);  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b015bf71-4070-4205-83ff-91ba4d437ec6",
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\");",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id); ",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
                  "tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\\\"attended\\\"\");",
                  "tests[\"Response Body has Correct Member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\");",
                  "tests[\"Response Body has Correct LastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "tests[\"Response Body has Correct photoId\"] =  responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
                  "tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");",
                  "tests[\"Response Body has Correct attendanceDateTime\"] = responseBody.has(\"\\\"attendanceDateTime\\\":\"+\"\\\"\"+jsonData.attendanceDateTime+\"\\\"\");",
                  "tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
                  "tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");",
                  "tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":false\");",
                  "tests[\"Response Body has Correct unlimited\"] = responseBody.has(jsonData.purchaseSummary.unlimited);",
                  "}",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0cb9d1ca-53c0-485f-8d6d-5ae17fd4ffac",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 2PM (3)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "47066dea-7933-475d-8ce8-751bebeb1293",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "",
                  "tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
                  "tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
                  "tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "}",
                  "",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cde17f47-54c3-49ef-8c9b-af761f45b504",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "18b83da2-9ca7-4f59-98d0-18081f40b44f",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);  ",
                  "    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
                  "    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_pilates\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+true);",
                  "    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "}",
                  "",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ba25d436-a167-418c-a50c-e385b751dc23",
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * .06).toFixed(2);",
                  "var purchaseAmount = unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_pilates}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7d8f0eaf-66fe-4536-b7d0-63faa923052e",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhotoId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
                  "    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
                  "    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);",
                  "",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "af75fb97-73f4-4cad-90c4-b4117ce0cea1",
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\");",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id); ",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
                  "tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\\\"attended\\\"\");",
                  "tests[\"Response Body has Correct Member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\");",
                  "tests[\"Response Body has Correct LastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "tests[\"Response Body has Correct photoId\"] =  responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
                  "tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");",
                  "tests[\"Response Body has Correct attendanceDateTime\"] = responseBody.has(\"\\\"attendanceDateTime\\\":\"+\"\\\"\"+jsonData.attendanceDateTime+\"\\\"\");",
                  "tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
                  "tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");",
                  "tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":false\");",
                  "tests[\"Response Body has Correct unlimited\"] = responseBody.has(jsonData.purchaseSummary.unlimited);",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d1e4094a-a304-4b01-bbd8-5b090a2eb0ea",
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for Cycling",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "47066dea-7933-475d-8ce8-751bebeb1293",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
                  "",
                  "tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
                  "tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
                  "tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "}",
                  "",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cde17f47-54c3-49ef-8c9b-af761f45b504",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createUnlimitedPurchase_cycling",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c6de6f11-5757-4319-9d84-83d87caeb76c",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"invoiceId1\", jsonData.items[0].invoiceId);",
                  "    postman.setEnvironmentVariable(\"saleItemsId1\", jsonData.items[0].id);",
                  "    ",
                  "    ",
                  "    ",
                  "    tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId1\")+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
                  "    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
                  "    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlmtd_cycle\")+\"\\\"\");   ",
                  "    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId1\")+\"\\\"\");   ",
                  "    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
                  "    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "}",
                  "",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "66fbb250-c6cb-46fe-bec5-b27e337bd67c",
                "type": "text/javascript",
                "exec": [
                  "// var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlmtd_cycle}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment_cycling",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6fad71b-1e0b-4b97-97d2-e11f1ca3d360",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "    ",
                  "    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
                  "    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
                  "    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+false);  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Available Session",
      "description": null,
      "item": [
        {
          "name": "getAvailableSession",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be5c8a9b-3c84-4225-b297-f8f59bf8ae89",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if(responseCode.code==200) {",
                  "    ",
                  "    tests[\"Response Body has Correct enrolled\"] = responseBody.has(\"\\\"enrolled\\\":\"+false);",
                  "",
                  "    tests[\"Response Body has scheduled\"] = responseBody.has(\"scheduled\");",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"unlimited\");",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/enrollment/{{userId}}/session/{{eventId_1030am}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "enrollment",
                "{{userId}}",
                "session",
                "{{eventId_1030am}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Update Location",
      "description": null,
      "item": [
        {
          "name": "updateLocation",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95a4d4d9-7655-4e1d-bdab-aab2b136ecbf",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");   ",
                  "tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\"); ",
                  "tests[\"Response Body has Correct phoneNumber\"] = responseBody.has(\"\\\"phoneNumber\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"phoneNumber\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct phoneExtension\"] = responseBody.has(\"\\\"phoneExtension\\\":\"+\"\\\"\"+411+\"\\\"\"); ",
                  "tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.email+\"\\\"\"); ",
                  "tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+jsonData.number+\"\\\"\"); ",
                  "tests[\"Response Body has Correct waiverDocId\"] = responseBody.has(\"\\\"waiverDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct termDocId\"] = responseBody.has(\"\\\"termDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct address id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.address.id+\"\\\"\");",
                  "tests[\"Response Body has Correct address1\"] = responseBody.has(\"\\\"address1\\\":\"+\"\\\"\"+\"123 Fitness Lane\"+\"\\\"\");",
                  "tests[\"Response Body has Correct address2\"] = responseBody.has(\"\\\"address2\\\":\"+\"\\\"\"+jsonData.address.address2+\"\\\"\");",
                  "tests[\"Response Body has Correct address city\"] = responseBody.has(\"\\\"city\\\":\"+\"\\\"\"+\"Little Rock\"+\"\\\"\");",
                  "tests[\"Response Body has Correct address zipCode\"] = responseBody.has(\"\\\"zipCode\\\":\"+\"\\\"33935\"+\"\\\"\");",
                  "tests[\"Response Body has Correct address state\"] = responseBody.has(\"\\\"state\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randState\")+\"\\\"\");",
                  "tests[\"Response Body has Correct address country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"\"+\"United States\"+\"\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"University Fitness Center #{{orgNumber}}\",\r\n    \"address\" : {\r\n      \"address1\" : \"123 Fitness Lane\",\r\n      \"address2\" : \"PO Box {{$randomInt}}\",\r\n      \"city\" : \"Little Rock\",\r\n      \"state\" : \"{{randState}}\",\r\n      \"country\" : \"United States\",\r\n      \"zipCode\" : \"33935\"\r\n    },\r\n  \"email\" : {\r\n    \"address\" : \"UniversityFitness{{orgNumber}}@qa4life.com\"\r\n  },\r\n  \"phone\" : {\r\n      \"number\" : \"{{phoneNumber}}\",\r\n      \"extension\" : \"411\"\r\n    }\r\n}\r\n\r\n"
            },
            "url": {
              "raw": "{{my-organization}}/{{organizationId}}/location/{{locationId}}",
              "host": [
                "{{my-organization}}"
              ],
              "path": [
                "{{organizationId}}",
                "location",
                "{{locationId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetLocation",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6ffe900d-6ec7-49bc-a20a-181905d8cb81",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if(responseCode.code==200) {",
                  "     var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");   ",
                  "tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\"); ",
                  "tests[\"Response Body has Correct phoneNumber\"] = responseBody.has(\"\\\"phoneNumber\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"phoneNumber\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct phoneExtension\"] = responseBody.has(\"\\\"phoneExtension\\\":\"+\"\\\"\"+411+\"\\\"\"); ",
                  "tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.email+\"\\\"\"); ",
                  "tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+jsonData.number+\"\\\"\"); ",
                  "tests[\"Response Body has Correct waiverDocId\"] = responseBody.has(\"\\\"waiverDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct termDocId\"] = responseBody.has(\"\\\"termDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct address id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.address.id+\"\\\"\");",
                  "tests[\"Response Body has Correct address1\"] = responseBody.has(\"\\\"address1\\\":\"+\"\\\"\"+\"123 Fitness Lane\"+\"\\\"\");",
                  "tests[\"Response Body has Correct address2\"] = responseBody.has(\"\\\"address2\\\":\"+\"\\\"\"+jsonData.address.address2+\"\\\"\");",
                  "tests[\"Response Body has Correct address city\"] = responseBody.has(\"\\\"city\\\":\"+\"\\\"\"+\"Little Rock\"+\"\\\"\");",
                  "tests[\"Response Body has Correct address zipCode\"] = responseBody.has(\"\\\"zipCode\\\":\"+\"\\\"33935\"+\"\\\"\");",
                  "tests[\"Response Body has Correct address country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"\"+\"United States\"+\"\\\"\");",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"University Fitness Center #{{orgNumber}}\",\r\n    \"address\" : {\r\n      \"address1\" : \"123 Fitness Lane\",\r\n      \"address2\" : \"PO Box {{$randomInt}}\",\r\n      \"city\" : \"Little Rock\",\r\n      \"state\" : \"{{randState}}\",\r\n      \"country\" : \"United States\",\r\n      \"zipCode\" : \"33935\"\r\n    },\r\n  \"email\" : {\r\n    \"address\" : \"UniversityFitness{{orgNumber}}@ufit.com\"\r\n  },\r\n  \"phone\" : {\r\n      \"number\" : \"{{phoneNumber}}\",\r\n      \"extension\" : \"411\"\r\n    }\r\n}\r\n\r\n"
            },
            "url": {
              "raw": "{{my-organization}}/{{organizationId}}/location/{{locationId}}",
              "host": [
                "{{my-organization}}"
              ],
              "path": [
                "{{organizationId}}",
                "location",
                "{{locationId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetLocationDocument",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3202c8d0-aeef-43d0-9fab-b2044d06825e",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
                  "    tests[\"Response Body has Correct waiverDocId\"] = responseBody.has(\"\\\"waiverDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct termDocId\"] = responseBody.has(\"\\\"termDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"University Fitness Center #{{orgNumber}}\",\r\n    \"address\" : {\r\n      \"address1\" : \"123 Fitness Lane\",\r\n      \"address2\" : \"PO Box {{$randomInt}}\",\r\n      \"city\" : \"Little Rock\",\r\n      \"state\" : \"{{randState}}\",\r\n      \"country\" : \"United States\",\r\n      \"zipCode\" : \"33935\"\r\n    },\r\n  \"email\" : {\r\n    \"address\" : \"UniversityFitness{{orgNumber}}@ufit.com\"\r\n  },\r\n  \"phone\" : {\r\n      \"number\" : \"{{phoneNumber}}\",\r\n      \"extension\" : \"411\"\r\n    }\r\n}\r\n\r\n"
            },
            "url": {
              "raw": "{{my-organization}}/{{organizationId}}/{{locationId}}/document",
              "host": [
                "{{my-organization}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "document"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Send Reset Password Mail",
      "description": "Sends Reset Password email with Passcode for Reset Password/Forgot Password",
      "item": [
        {
          "name": "sendPasswordResetMail",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 202)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 202;"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Basic YXV0b21hdGVkLXRlc3RpbmctY2xpZW50OiNhbnRpLWpvbmFz"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"{{employeeEmail}}\"\r\n}"
            },
            "url": {
              "raw": "{{authentication}}/organization/{{organizationId}}/password?reset=true",
              "host": [
                "{{authentication}}"
              ],
              "path": [
                "organization",
                "{{organizationId}}",
                "password"
              ],
              "query": [
                {
                  "key": "reset",
                  "value": "true"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "GET Schedule",
      "description": null,
      "item": [
        {
          "name": "getEvents",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6f0c86c9-bd49-40fc-81d2-9e485530e30c",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200) {",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if (responseCode.code === 200) {",
                  "",
                  "    var jsonData = JSON.parse(responseBody);",
                  "",
                  "    tests[\"Response Body has Correct  checkInTime\"] = responseBody.has(\"\\\"checkInTime\\\":\"+60);",
                  "    tests[\"Response Body has Correct  eventId\"] = responseBody.has(\"\\\"eventId\\\":\" + \"\\\"\" +jsonData.content[0].eventId+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].eventLevel.name+\"\\\"\");",
                  "    tests[\"Response Body has Correct  eventCategoryId\"] = responseBody.has(\"\\\"eventCategoryId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "",
                  "    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\" + jsonData.pageable.sort.sorted);",
                  "    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\" + jsonData.pageable.sort.unsorted);",
                  "    tests[\"Response Body has Correct  pageSize\"] = responseBody.has(\"\\\"pageSize\\\":\" + jsonData.pageable.pageSize);",
                  "    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"pageNumber\\\":\" + jsonData.pageable.pageNumber);",
                  "    tests[\"Response Body has Correct  offset\"] = responseBody.has(\"\\\"offset\\\":\" + jsonData.pageable.offset);",
                  "    tests[\"Response Body has Correct  paged\"] = responseBody.has(\"\\\"paged\\\":\" + jsonData.pageable.paged);",
                  "    tests[\"Response Body has Correct  unpaged\"] = responseBody.has(\"\\\"unpaged\\\":\" + jsonData.pageable.unpaged);",
                  "",
                  "    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\" + jsonData.totalElements);",
                  "    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\" + jsonData.last);",
                  "    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\" + jsonData.totalPages);",
                  "    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\" + jsonData.first);",
                  "    ",
                  "    tests[\"Response Body has Correct  startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\" + \"\\\"\" +jsonData.content[0].startDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct  endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\" + \"\\\"\" +jsonData.content[0].endDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct  enrollmentFull\"] = responseBody.has(\"\\\"enrollmentFull\\\":\"+jsonData.content[0].enrollmentFull);",
                  "}",
                  " tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/schedule?startDateTime={{eventStartTime}}&endDateTime={{eventEndTime}}",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "schedule"
              ],
              "query": [
                {
                  "key": "startDateTime",
                  "value": "{{eventStartTime}}"
                },
                {
                  "key": "endDateTime",
                  "value": "{{eventEndTime}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "GET Registration",
      "description": null,
      "item": [
        {
          "name": "getEmployeeRegistration",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "97dcb97c-f56a-4c7b-804f-de0ce7f309ec",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "tests[\"Response Body has contains id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.user.id+\"\\\"\");",
                  "tests[\"Response Body has Correct Email id\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"getEmpEmailId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct First name\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"getEmpFirstName\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Last name\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"getEmpLastName\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Person id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.person.id+\"\\\"\");",
                  "tests[\"Response Body has Correct Phone number\"] = responseBody.has(\"phoneNumber\");",
                  "   ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{registration}}/{{organizationId}}/user/token/{{employeeTokenId}}",
              "host": [
                "{{registration}}"
              ],
              "path": [
                "{{organizationId}}",
                "user",
                "token",
                "{{employeeTokenId}}"
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "id": "0f30bc01-6c10-4100-a9d9-2bc6bc67473d",
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              ""
            ],
            "id": "f3f4037c-1b41-428b-bf1e-262d718a1bbd",
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "GET Enrollment",
      "description": null,
      "item": [
        {
          "name": "getEnrollment_1030AM",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b52668a3-72a1-4c2d-a682-26024ceb7181",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct event id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventLevel id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventLevel.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.event.eventLevel.name+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventType id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventType.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventType name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Yoga\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+jsonData.event.startDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+jsonData.event.endDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct maxCapacity\"] = responseBody.has(\"\\\"maxCapacity\\\":\"+jsonData.event.maxCapacity);",
                  "    ",
                  "    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].id+\"\\\"\");",
                  "    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].reservationDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.enrollment[0].status+\"\\\"\");",
                  "    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.userId+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.firstName+\"\\\"\");",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.lastName+\"\\\"\");",
                  "    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.photoId+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.email+\"\\\"\");",
                  "    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.enrollment[0].purchaseSummary.expiringSoon);",
                  "    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+jsonData.enrollment[0].purchaseSummary.purchaseOpportunity);",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.enrollment[0].purchaseSummary.unlimited);",
                  "    ",
                  "    ",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getEnrollment_1200PM",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "03a71685-118d-4566-be91-4f0436dbd8ea",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct event id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventLevel id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventLevel.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.event.eventLevel.name+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventType id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventType.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventType name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"P90X\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+jsonData.event.startDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+jsonData.event.endDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct maxCapacity\"] = responseBody.has(\"\\\"maxCapacity\\\":\"+jsonData.event.maxCapacity);",
                  "    ",
                  "    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].id+\"\\\"\");",
                  "    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].reservationDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.enrollment[0].status+\"\\\"\");",
                  "    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.userId+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.firstName+\"\\\"\");",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.lastName+\"\\\"\");",
                  "    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.photoId+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.email+\"\\\"\");",
                  "",
                  "    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.enrollment[0].purchaseSummary.expiringSoon);",
                  "    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+jsonData.enrollment[0].purchaseSummary.purchaseOpportunity);",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.enrollment[0].purchaseSummary.unlimited);",
                  "    ",
                  "    ",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getEnrollment_100PM",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aa6cfa28-13a7-43f4-95eb-516f62210480",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct event id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventLevel id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventLevel.id+\"\\\"\");",
                  "  //  tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Intermediate\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventType id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventType.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventType name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Aerobics\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+jsonData.event.startDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+jsonData.event.endDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct maxCapacity\"] = responseBody.has(\"\\\"maxCapacity\\\":\"+jsonData.event.maxCapacity);",
                  "    ",
                  "    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].id+\"\\\"\");",
                  "    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].reservationDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.enrollment[0].status+\"\\\"\");",
                  "    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.userId+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.firstName+\"\\\"\");",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.lastName+\"\\\"\");",
                  "    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.photoId+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.email+\"\\\"\");",
                  "    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.enrollment[0].purchaseSummary.expiringSoon);",
                  "    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+jsonData.enrollment[0].purchaseSummary.purchaseOpportunity);",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.enrollment[0].purchaseSummary.unlimited);",
                  "    ",
                  "    ",
                  "",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getEnrollment_200PM",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4fbc767b-c0e5-4561-91da-1232870e49c6",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct event id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventLevel id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventLevel.id+\"\\\"\");",
                  "  //  tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Beginner\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventType id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventType.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventType name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Pilates\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+jsonData.event.startDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+jsonData.event.endDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct maxCapacity\"] = responseBody.has(\"\\\"maxCapacity\\\":\"+jsonData.event.maxCapacity);",
                  "    ",
                  "    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].id+\"\\\"\");",
                  "    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].reservationDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.enrollment[0].status+\"\\\"\");",
                  "    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.userId+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.firstName+\"\\\"\");",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.lastName+\"\\\"\");",
                  "    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.photoId+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.email+\"\\\"\");",
                  "",
                  "    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");",
                  "    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.enrollment[0].purchaseSummary.expiringSoon);",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.enrollment[0].purchaseSummary.unlimited);",
                  "    ",
                  "    ",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getEnrollmentListByUserID",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f374fa69-9cdc-43b5-86b2-69a5c50546b3",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.firstName+\"\\\"\");",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.lastName+\"\\\"\");",
                  "    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.photoId+\"\\\"\");",
                  "    ",
                  "    ",
                  "    ",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getEnrollment_500PM",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0d5af6a5-72bc-46d6-89c5-8be16d92b4fa",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct event id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventLevel id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventLevel.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventType id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventType.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct eventType name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Cycling\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+jsonData.event.startDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+jsonData.event.endDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct maxCapacity\"] = responseBody.has(\"\\\"maxCapacity\\\":\"+jsonData.event.maxCapacity);",
                  "    ",
                  "    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].id+\"\\\"\");",
                  "    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].reservationDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.enrollment[0].status+\"\\\"\");",
                  "    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.userId+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.firstName+\"\\\"\");",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.lastName+\"\\\"\");",
                  "    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.photoId+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.email+\"\\\"\");",
                  "    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");",
                  "    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.enrollment[0].purchaseSummary.expiringSoon);",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.enrollment[0].purchaseSummary.unlimited);",
                  "    ",
                  "    ",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment"
              ]
            }
          },
          "response": []
        },
        {
          "name": "deleteEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c4b7cc97-eb3a-4d6d-8b6e-27af414cc0c8",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");",
                  "    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.member.userId+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\");",
                  "    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\");",
                  "    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");",
                  "    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.purchaseSummary.expiringSoon);",
                  "    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+jsonData.purchaseSummary.purchaseOpportunity);",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.purchaseSummary.unlimited);",
                  "    ",
                  "    ",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getDeleteEnrollment_500PM",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4158000b-5854-41c2-be5c-38ca7a1428b4",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 404)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 404) ",
                  "{",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 404\"] = responseCode.code === 404;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment"
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "id": "e4cda530-a2cb-4eb5-902d-ffb9925cbead",
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              ""
            ],
            "id": "de38ace0-0741-4734-b152-c7dc82c68e46",
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Login Tests",
      "description": null,
      "item": [
        {
          "name": "OwnerLogin",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e9f5cf37-a168-4582-8a61-e09ac55b62ea",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"loginAccessToken\", jsonData.accessToken);",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Basic YXV0b21hdGVkLXRlc3RpbmctY2xpZW50OiNhbnRpLWpvbmFz"
              },
              {
                "key": "",
                "value": "",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"password\": \"{{ownerPassword}}\",\r\n  \"username\": \"{{ownerEmail}}\"\r\n}"
            },
            "url": {
              "raw": "{{authentication}}/organization/{{organizationId}}/login?clientId=automated-testing-client",
              "host": [
                "{{authentication}}"
              ],
              "path": [
                "organization",
                "{{organizationId}}",
                "login"
              ],
              "query": [
                {
                  "key": "clientId",
                  "value": "automated-testing-client"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "ABCStaffLogin",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c28315bf-2127-47b7-a54a-1948f7ecc644",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    tests[\"Response Body has Correct accessToken\"] = responseBody.has(\"\\\"accessToken\\\":\"+\"\\\"\"+jsonData.accessToken+\"\\\"\");",
                  "    tests[\"Response Body has Correct locationId\"] =  responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct clientId\"] = responseBody.has(\"\\\"clientId\\\":\"+\"\\\"\"+\"automated-testing-client\"+\"\\\"\");",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Basic YXV0b21hdGVkLXRlc3RpbmctY2xpZW50OiNhbnRpLWpvbmFz"
              },
              {
                "key": "",
                "value": "",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"password\": \"abc1234$\",\r\n  \"username\": \"Test5ABC3@abcfinancial.com\"\r\n}"
            },
            "url": {
              "raw": "{{authentication}}/organization/{{organizationId}}/login?clientId=automated-testing-client",
              "host": [
                "{{authentication}}"
              ],
              "path": [
                "organization",
                "{{organizationId}}",
                "login"
              ],
              "query": [
                {
                  "key": "clientId",
                  "value": "automated-testing-client"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "GET Package",
      "description": null,
      "item": [
        {
          "name": "getPackage_yoga",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "05047f10-5710-4f93-96cf-be03f1933592",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
                  "    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].name+\"\\\"\");",
                  "    tests[\"Response Body has Correct  type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+jsonData.content[0].type+\"\\\"\");",
                  "    tests[\"Response Body has Correct  unitPrice\"] = responseBody.has(\"\\\"unitPrice\\\":\"+100);",
                  "    tests[\"Response Body has Correct  quantity\"] = responseBody.has(\"\\\"quantity\\\":\"+1);",
                  "    tests[\"Response Body has Correct  metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
                  "    tests[\"Response Body has Correct  extendedPrice\"] = responseBody.has(\"\\\"extendedPrice\\\":\"+100);",
                  "    tests[\"Response Body has Correct  expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct  expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+1);",
                  "    tests[\"Response Body has Correct  expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"DAYS\"+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct  associatedEventTypes\"] = responseBody.has(\"associatedEventTypes\");",
                  "    ",
                  "    ",
                  "    tests[\"Response Body has Correct  pageable\"] = responseBody.has(\"pageable\");",
                  "    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
                  "    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
                  "    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
                  "    tests[\"Response Body has Correct  size\"] = responseBody.has(\"\\\"size\\\":\"+jsonData.size);",
                  "    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"number\\\":\"+jsonData.number);",
                  "    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.pageable.sort.sorted);",
                  "    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.pageable.sort.unsorted);",
                  "    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
                  "    tests[\"Response Body has Correct  numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":\"+jsonData.numberOfElements);",
                  "    ",
                  "    ",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{package}}/{{organizationId}}/{{locationId}}/package/{{eventTypeId_yoga}}?userId={{userId}}",
              "host": [
                "{{package}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "package",
                "{{eventTypeId_yoga}}"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "getPackage_p90x",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9bc6643b-f4b6-4f25-b479-c282ecf98fd4",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
                  "    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].name+\"\\\"\");",
                  "    tests[\"Response Body has Correct  type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+jsonData.content[0].type+\"\\\"\");",
                  "    tests[\"Response Body has Correct  quantity\"] = responseBody.has(\"\\\"quantity\\\":\"+1);",
                  "    tests[\"Response Body has Correct  metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
                  "    tests[\"Response Body has Correct  expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct  expirationTime\"] = responseBody.has(\"expirationTime\");",
                  "    tests[\"Response Body has Correct  expirationUnit\"] = responseBody.has(\"expirationUnit\");",
                  "    ",
                  "    tests[\"Response Body has Correct  associatedEventTypes\"] = responseBody.has(\"associatedEventTypes\");",
                  "    ",
                  "    ",
                  "    tests[\"Response Body has Correct  pageable\"] = responseBody.has(\"pageable\");",
                  "    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
                  "    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
                  "    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
                  "    tests[\"Response Body has Correct  size\"] = responseBody.has(\"\\\"size\\\":\"+jsonData.size);",
                  "    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"number\\\":\"+jsonData.number);",
                  "    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.pageable.sort.sorted);",
                  "    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.pageable.sort.unsorted);",
                  "    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
                  "    tests[\"Response Body has Correct  numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":\"+jsonData.numberOfElements);",
                  "    ",
                  "    ",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{package}}/{{organizationId}}/{{locationId}}/package/{{eventTypeId_p90x}}?userId={{userId}}",
              "host": [
                "{{package}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "package",
                "{{eventTypeId_p90x}}"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "getPackage_pilates",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "51cdc318-f851-4054-8313-397ac2f7f0e3",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
                  "    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].name+\"\\\"\");",
                  "    tests[\"Response Body has Correct  type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+jsonData.content[0].type+\"\\\"\");",
                  "    tests[\"Response Body has Correct  unitPrice\"] = responseBody.has(\"unitPrice\");",
                  "    tests[\"Response Body has Correct  quantity\"] = responseBody.has(\"\\\"quantity\\\":\"+5);",
                  "    tests[\"Response Body has Correct  metered\"] = responseBody.has(\"metered\");",
                  "    tests[\"Response Body has Correct  extendedPrice\"] = responseBody.has(\"extendedPrice\");",
                  "    tests[\"Response Body has Correct  expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct  expirationTime\"] = responseBody.has(\"expirationTime\");",
                  "    tests[\"Response Body has Correct  expirationUnit\"] = responseBody.has(\"expirationUnit\");",
                  "",
                  "    ",
                  "    tests[\"Response Body has Correct  associatedEventTypes\"] = responseBody.has(\"associatedEventTypes\");",
                  "    ",
                  "    ",
                  "    tests[\"Response Body has Correct  pageable\"] = responseBody.has(\"pageable\");",
                  "    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
                  "    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
                  "    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
                  "    tests[\"Response Body has Correct  size\"] = responseBody.has(\"\\\"size\\\":\"+jsonData.size);",
                  "    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"number\\\":\"+jsonData.number);",
                  "    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.pageable.sort.sorted);",
                  "    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.pageable.sort.unsorted);",
                  "    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
                  "    tests[\"Response Body has Correct  numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":\"+jsonData.numberOfElements);",
                  "    ",
                  "    ",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{package}}/{{organizationId}}/{{locationId}}/package/{{eventTypeId_pilates}}?userId={{userId}}",
              "host": [
                "{{package}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "package",
                "{{eventTypeId_pilates}}"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "getPackage_cycling",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "908c14de-1909-42cd-aa01-29fa464a4f43",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
                  "    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].name+\"\\\"\");",
                  "    tests[\"Response Body has Correct  type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+jsonData.content[0].type+\"\\\"\");",
                  "    tests[\"Response Body has Correct  unitPrice\"] = responseBody.has(\"unitPrice\");",
                  "    tests[\"Response Body has Correct  quantity\"] = responseBody.has(\"quantity\");",
                  "    tests[\"Response Body has Correct  metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
                  "    tests[\"Response Body has Correct  extendedPrice\"] = responseBody.has(\"extendedPrice\");",
                  "    tests[\"Response Body has Correct  expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct  expirationTime\"] = responseBody.has(\"expirationTime\");",
                  "    tests[\"Response Body has Correct  expirationUnit\"] = responseBody.has(\"expirationUnit\");",
                  " ",
                  "    ",
                  "    tests[\"Response Body has Correct  associatedEventTypes\"] = responseBody.has(\"associatedEventTypes\");",
                  "    ",
                  "    ",
                  "    tests[\"Response Body has Correct  pageable\"] = responseBody.has(\"pageable\");",
                  "    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
                  "    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
                  "    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
                  "    tests[\"Response Body has Correct  size\"] = responseBody.has(\"\\\"size\\\":\"+jsonData.size);",
                  "    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"number\\\":\"+jsonData.number);",
                  "    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.pageable.sort.sorted);",
                  "    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.pageable.sort.unsorted);",
                  "    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
                  "    tests[\"Response Body has Correct  numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":\"+jsonData.numberOfElements);",
                  "    ",
                  "    ",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{package}}/{{organizationId}}/{{locationId}}/package/{{eventTypeId_cycling}}?userId={{userId}}",
              "host": [
                "{{package}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "package",
                "{{eventTypeId_cycling}}"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "getPackage_aerobics",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aa834f19-5d12-4057-99d7-3022e317c928",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
                  "    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].name+\"\\\"\");",
                  "    tests[\"Response Body has Correct  type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+jsonData.content[0].type+\"\\\"\");",
                  "    tests[\"Response Body has Correct  unitPrice\"] = responseBody.has(\"unitPrice\");",
                  "    tests[\"Response Body has Correct  quantity\"] = responseBody.has(\"\\\"quantity\\\":\"+5);",
                  "    tests[\"Response Body has Correct  metered\"] = responseBody.has(\"metered\");",
                  "    tests[\"Response Body has Correct  extendedPrice\"] = responseBody.has(\"extendedPrice\");",
                  "    tests[\"Response Body has Correct  expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct  expirationTime\"] = responseBody.has(\"expirationTime\");",
                  "    tests[\"Response Body has Correct  expirationUnit\"] = responseBody.has(\"expirationUnit\");",
                  "  ",
                  "    ",
                  "    tests[\"Response Body has Correct  associatedEventTypes\"] = responseBody.has(\"associatedEventTypes\");",
                  "    ",
                  "    ",
                  "    tests[\"Response Body has Correct  pageable\"] = responseBody.has(\"pageable\");",
                  "    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
                  "    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
                  "    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
                  "    tests[\"Response Body has Correct  size\"] = responseBody.has(\"\\\"size\\\":\"+jsonData.size);",
                  "    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"number\\\":\"+jsonData.number);",
                  "    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.pageable.sort.sorted);",
                  "    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.pageable.sort.unsorted);",
                  "    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
                  "    tests[\"Response Body has Correct  numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":\"+jsonData.numberOfElements);",
                  "    ",
                  "    ",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{package}}/{{organizationId}}/{{locationId}}/package/{{eventTypeId_aerobics}}?userId={{userId}}",
              "host": [
                "{{package}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "package",
                "{{eventTypeId_aerobics}}"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "getPackage_turboKick",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15ef756b-f901-4870-b2c8-fcc4dc1620f1",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
                  "    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].name+\"\\\"\");",
                  "    tests[\"Response Body has Correct  type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+jsonData.content[0].type+\"\\\"\");",
                  "    tests[\"Response Body has Correct  unitPrice\"] = responseBody.has(\"unitPrice\");",
                  "    tests[\"Response Body has Correct  quantity\"] = responseBody.has(\"quantity\");",
                  "    tests[\"Response Body has Correct  metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
                  "    tests[\"Response Body has Correct  extendedPrice\"] = responseBody.has(\"extendedPrice\");",
                  "    tests[\"Response Body has Correct  expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct  expirationTime\"] = responseBody.has(\"expirationTime\");",
                  "    tests[\"Response Body has Correct  expirationUnit\"] = responseBody.has(\"expirationUnit\");",
                  "    ",
                  "    tests[\"Response Body has Correct  associatedEventTypes\"] = responseBody.has(\"associatedEventTypes\");",
                  "    ",
                  "    ",
                  "    tests[\"Response Body has Correct  pageable\"] = responseBody.has(\"pageable\");",
                  "    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
                  "    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
                  "    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
                  "    tests[\"Response Body has Correct  size\"] = responseBody.has(\"\\\"size\\\":\"+jsonData.size);",
                  "    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"number\\\":\"+jsonData.number);",
                  "    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.pageable.sort.sorted);",
                  "    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.pageable.sort.unsorted);",
                  "    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
                  "    tests[\"Response Body has Correct  numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":\"+jsonData.numberOfElements);",
                  "    ",
                  "    ",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{package}}/{{organizationId}}/{{locationId}}/package/{{eventTypeId_turboKick}}?userId={{userId}}",
              "host": [
                "{{package}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "package",
                "{{eventTypeId_turboKick}}"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Omni Search Checks",
      "description": null,
      "item": [
        {
          "name": "getOrganization",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0f57a25c-eefd-4bf0-b35e-1a9a1cd9f49d",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "",
                  "var orgNameToSearchFor = postman.getEnvironmentVariable(\"orgName\");",
                  "",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
                  "    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].name+\"\\\"\");",
                  "    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.pageable.sort.sorted);",
                  "    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.pageable.sort.unsorted);",
                  "    tests[\"Response Body has Correct  pageSize\"] = responseBody.has(\"\\\"pageSize\\\":\"+jsonData.pageable.pageSize);",
                  "    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"pageNumber\\\":\"+jsonData.pageable.pageNumber);",
                  "    tests[\"Response Body has Correct  offset\"] = responseBody.has(\"\\\"offset\\\":\"+jsonData.pageable.offset);",
                  "    tests[\"Response Body has Correct  paged\"] = responseBody.has(\"\\\"paged\\\":\"+jsonData.pageable.paged);",
                  "    tests[\"Response Body has Correct  unpaged\"] = responseBody.has(\"\\\"unpaged\\\":\"+jsonData.pageable.unpaged);",
                  "    ",
                  "    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
                  "    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
                  "    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
                  "    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
                  "",
                  "tests[\"Searching for specific Org Name in response\"] = responseBody.has(orgNameToSearchFor);",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{omniSearch}}/{{organizationId}}/organization",
              "host": [
                "{{omniSearch}}"
              ],
              "path": [
                "{{organizationId}}",
                "organization"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getLocation",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "649aaf63-4f3f-4746-ba17-d68b21a0d1f0",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "var locationNameToSearchFor = postman.getEnvironmentVariable(\"locationName\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"organizationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"organizationId\")+\"\\\"\");",
                  "  ",
                  "tests[\"Response Body has Correct address1\"] = responseBody.has(\"\\\"address1\\\":\"+\"\\\"\"+\"123 Fitness Lane\"+\"\\\"\");",
                  "tests[\"Response Body has Correct address2\"] = responseBody.has(\"\\\"address2\\\":\"+\"\\\"\"+jsonData.content[0].address.address2+\"\\\"\");",
                  "tests[\"Response Body has Correct address city\"] = responseBody.has(\"\\\"city\\\":\"+\"\\\"\"+\"Little Rock\"+\"\\\"\");",
                  "tests[\"Response Body has Correct address zipCode\"] = responseBody.has(\"\\\"zipCode\\\":\"+\"\\\"33935\"+\"\\\"\");",
                  "tests[\"Response Body has Correct address state\"] = responseBody.has(\"state\");",
                  "tests[\"Response Body has Correct address country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"\"+\"United States\"+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.pageable.sort.sorted);",
                  "    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.pageable.sort.unsorted);",
                  "    tests[\"Response Body has Correct  pageSize\"] = responseBody.has(\"\\\"pageSize\\\":\"+jsonData.pageable.pageSize);",
                  "    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"pageNumber\\\":\"+jsonData.pageable.pageNumber);",
                  "    tests[\"Response Body has Correct  offset\"] = responseBody.has(\"\\\"offset\\\":\"+jsonData.pageable.offset);",
                  "    tests[\"Response Body has Correct  paged\"] = responseBody.has(\"\\\"paged\\\":\"+jsonData.pageable.paged);",
                  "    tests[\"Response Body has Correct  unpaged\"] = responseBody.has(\"\\\"unpaged\\\":\"+jsonData.pageable.unpaged);",
                  "    ",
                  "    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
                  "    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
                  "    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
                  "    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
                  "",
                  "",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{omniSearch}}/{{organizationId}}/location",
              "host": [
                "{{omniSearch}}"
              ],
              "path": [
                "{{organizationId}}",
                "location"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getEmployees",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ef250ef8-5642-4b81-aba8-4e28d0eb19bb",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    tests[\"Response Body has Correct  organizationId\"] = responseBody.has(\"\\\"organizationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"organizationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id\"] = responseBody.has(\"id\");",
                  "    tests[\"Response Body has Correct  userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.content[0].userId+\"\\\"\");",
                  "    tests[\"Response Body has Correct  email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.content[0].email+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.pageable.sort.sorted);",
                  "    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.pageable.sort.unsorted);",
                  "    tests[\"Response Body has Correct  pageSize\"] = responseBody.has(\"\\\"pageSize\\\":\"+jsonData.pageable.pageSize);",
                  "    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"pageNumber\\\":\"+jsonData.pageable.pageNumber);",
                  "    tests[\"Response Body has Correct  offset\"] = responseBody.has(\"\\\"offset\\\":\"+jsonData.pageable.offset);",
                  "    tests[\"Response Body has Correct  paged\"] = responseBody.has(\"\\\"paged\\\":\"+jsonData.pageable.paged);",
                  "    tests[\"Response Body has Correct  unpaged\"] = responseBody.has(\"\\\"unpaged\\\":\"+jsonData.pageable.unpaged);",
                  "    ",
                  "    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
                  "    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
                  "    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
                  "    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
                  "",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{omniSearch}}/{{organizationId}}/employee",
              "host": [
                "{{omniSearch}}"
              ],
              "path": [
                "{{organizationId}}",
                "employee"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getMembers",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fbc560f0-9d80-4ed6-8b67-13bd8e1f4299",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    ",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    tests[\"Response Body has Correct  locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId_1030am\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.content[0].userId+\"\\\"\");",
                  "    tests[\"Response Body has Correct  email address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+jsonData.content[0].person.email.address+\"\\\"\");",
                  "    tests[\"Response Body has Correct  photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.content[0].person.photoId+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.pageable.sort.sorted);",
                  "    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.pageable.sort.unsorted);",
                  "    tests[\"Response Body has Correct  pageSize\"] = responseBody.has(\"\\\"pageSize\\\":\"+jsonData.pageable.pageSize);",
                  "    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"pageNumber\\\":\"+jsonData.pageable.pageNumber);",
                  "    tests[\"Response Body has Correct  offset\"] = responseBody.has(\"\\\"offset\\\":\"+jsonData.pageable.offset);",
                  "    tests[\"Response Body has Correct  paged\"] = responseBody.has(\"\\\"paged\\\":\"+jsonData.pageable.paged);",
                  "    tests[\"Response Body has Correct  unpaged\"] = responseBody.has(\"\\\"unpaged\\\":\"+jsonData.pageable.unpaged);",
                  "    ",
                  "    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
                  "    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
                  "    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
                  "    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
                  "",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{omniSearch}}/{{organizationId}}/member",
              "host": [
                "{{omniSearch}}"
              ],
              "path": [
                "{{organizationId}}",
                "member"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Promotion",
      "description": null,
      "item": [
        {
          "name": "CreatePromoCode_1",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9f978107-eed4-423c-a724-f6e031bbbf39",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"promoCodeId\", jsonData.id);",
                  "var code = postman.getEnvironmentVariable(\"promoCode\").toUpperCase();",
                  "var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
                  "var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
                  "var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount\");",
                  "console.log(promoCodeAmount);",
                  "",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoCodeId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Code\"] = responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoStartDate\")+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoEndDate\")+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+promoCodeAmount);",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"FIXED_AMOUNT\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
                  "",
                  "}",
                  "",
                  "",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "651f470c-69ec-4ba4-a06e-1574cc9f5c11",
                "type": "text/javascript",
                "exec": [
                  "var promoCodeAmount=3;",
                  "var promoCodePrefix=\"Save\";",
                  "var promoCode=promoCodePrefix+promoCodeAmount;",
                  "",
                  "//smart date increment logic, which rolls over into the next month if we're at the end of month",
                  "var startDate = new Date();",
                  "startDate.setDate(startDate.getDate() + 1);",
                  "var endDate = new Date();",
                  "endDate.setDate(endDate.getDate() + 5);",
                  "",
                  "var startyear = startDate.getFullYear();",
                  "var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
                  "var startDate = ('0' + (startDate.getDate())).slice(-2);",
                  "var endyear = endDate.getFullYear();",
                  "var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
                  "var endDate = ('0' + (endDate.getDate())).slice(-2);",
                  "",
                  "var promoStartDate = startyear + \"-\" + startMonth + \"-\" + startDate;",
                  "var promoEndDate = endyear + \"-\" + endMonth + \"-\" + endDate;",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"promoStartDate\", promoStartDate);",
                  "postman.setEnvironmentVariable(\"promoEndDate\", promoEndDate);",
                  "postman.setEnvironmentVariable(\"promoCodeAmount\", promoCodeAmount);",
                  "postman.setEnvironmentVariable(\"promoCode\", promoCode);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "promotion"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreatePromoCode_2",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95675abf-a380-47b5-8044-1b06e328031d",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"promoCodeId_2\", jsonData.id);",
                  "var code = postman.getEnvironmentVariable(\"promoCode_2\").toUpperCase();",
                  "var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
                  "var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
                  "var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount_2\");",
                  "",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoCodeId_2\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Code\"] = responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoStartDate\")+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoEndDate\")+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+promoCodeAmount);",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"FIXED_AMOUNT\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
                  "}",
                  "",
                  "",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4616c289-d6b8-4546-8fd7-24faacc15c61",
                "type": "text/javascript",
                "exec": [
                  "//smart date increment logic, which rolls over into the next month if we're at the end of month",
                  "var startDate = new Date();",
                  "startDate.setDate(startDate.getDate() + 1);",
                  "var endDate = new Date();",
                  "endDate.setDate(endDate.getDate() + 5);",
                  "",
                  "var startyear = startDate.getFullYear();",
                  "var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
                  "var startDate = ('0' + (startDate.getDate())).slice(-2);",
                  "var endyear = endDate.getFullYear();",
                  "var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
                  "var endDate = ('0' + (endDate.getDate())).slice(-2);",
                  "",
                  "var promoStartDate = startyear + \"-\" + startMonth + \"-\" + startDate;",
                  "var promoEndDate = endyear + \"-\" + endMonth + \"-\" + endDate;",
                  "",
                  "var promoCodeAmount_2=60;",
                  "var promoCodePrefix=\"Save\";",
                  "var promoCode_2=promoCodePrefix+promoCodeAmount_2;",
                  "",
                  "postman.setEnvironmentVariable(\"promoStartDate\", promoStartDate);",
                  "postman.setEnvironmentVariable(\"promoEndDate\", promoEndDate);",
                  "postman.setEnvironmentVariable(\"promoCodeAmount_2\", promoCodeAmount_2);",
                  "postman.setEnvironmentVariable(\"promoCode_2\", promoCode_2);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode_2}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount_2}}\",\r\n  \"currency\" : \"USD\"\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "promotion"
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetPromoCodeByCode",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7eff8a04-b8f3-46af-bbf8-35613164545c",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "var code = postman.getEnvironmentVariable(\"promoCode\").toUpperCase();",
                  "var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
                  "var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
                  "var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount\");",
                  "",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoCodeId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoCode\"] = responseBody.has(\"\\\"code\\\":\\\"\"+code+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoStartDate\")+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoEndDate\")+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+postman.getEnvironmentVariable(\"promoCodeAmount\"));",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"FIXED_AMOUNT\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
                  "",
                  "}",
                  "",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "11ed69d9-22dd-4a40-829c-7dcc08ccf078",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCode}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "promotion",
                "{{promoCode}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetPromoCodeByAll",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "33003718-39a3-4252-93ad-5c6dccc0d6a8",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "var code = postman.getEnvironmentVariable(\"promoCode\").toUpperCase();",
                  "var code2 = postman.getEnvironmentVariable(\"promoCode_2\").toUpperCase();",
                  "var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
                  "var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
                  "var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount\");",
                  "var promoCodeAmount2 = postman.getEnvironmentVariable(\"promoCodeAmount_2\");",
                  "var promoCodeId = postman.getEnvironmentVariable(\"promoCodeId\");",
                  "var promoCodeId2 = postman.getEnvironmentVariable(\"promoCodeId_2\");",
                  "",
                  "",
                  "tests[\"Response Body has Correct PromoCode\"] = responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoCode2\"] = responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code2+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+promoStartDate+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+promoEndDate+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount+\"\");",
                  "tests[\"Response Body has Correct PromoCodeAmount2\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount2+\"\");",
                  "tests[\"Response Body has Correct PromoCodeId1\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoCodeId2\"] = tests[\"Response Body has Correct PromoCodeId1\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId2+\"\\\"\");",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"FIXED_AMOUNT\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
                  "",
                  "",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "11ed69d9-22dd-4a40-829c-7dcc08ccf078",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "promotion"
              ]
            }
          },
          "response": []
        },
        {
          "name": "UpdatePromoCode",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1fc2a842-17f8-46c6-8d7c-4f1dfba1f4e2",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var code = postman.getEnvironmentVariable(\"updatePromoCode\").toUpperCase();",
                  "var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
                  "var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
                  "var promoCodeAmount = postman.getEnvironmentVariable(\"updatePromoCodeAmount\");",
                  "var promoCodeId = postman.getEnvironmentVariable(\"promoCodeId\");",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoCode\"] =  responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+promoStartDate+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+promoEndDate+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount+\"\");",
                  "tests[\"Response Body has Correct PromoCodeId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId+\"\\\"\");",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"FIXED_AMOUNT\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffb73f7-a2fb-4b3c-b9b5-c762055d9958",
                "type": "text/javascript",
                "exec": [
                  "var updateCodeAmount=38;",
                  "var promoCodePrefix=\"SAVE\";",
                  "var updatePromoCode=promoCodePrefix+updateCodeAmount;",
                  "",
                  "//smart date increment logic, which rolls over into the next month if we're at the end of month",
                  "var startDate = new Date();",
                  "startDate.setDate(startDate.getDate() + 1);",
                  "var endDate = new Date();",
                  "endDate.setDate(endDate.getDate() + 5);",
                  "",
                  "var startyear = startDate.getFullYear();",
                  "var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
                  "var startDate = ('0' + (startDate.getDate())).slice(-2);",
                  "var endyear = endDate.getFullYear();",
                  "var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
                  "var endDate = ('0' + (endDate.getDate())).slice(-2);",
                  "",
                  "var promoStartDate = startyear + \"-\" + startMonth + \"-\" + startDate;",
                  "var promoEndDate = endyear + \"-\" + endMonth + \"-\" + endDate;",
                  "",
                  "postman.setEnvironmentVariable(\"promoStartDate\", promoStartDate);",
                  "postman.setEnvironmentVariable(\"promoEndDate\", promoEndDate);",
                  "postman.setEnvironmentVariable(\"updatePromoCodeAmount\", updateCodeAmount);",
                  "postman.setEnvironmentVariable(\"updatePromoCode\", updatePromoCode);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{updatePromoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{updatePromoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCodeId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "promotion",
                "{{promoCodeId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "PatchPromoCode",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c05bed9e-2227-488c-a628-e075a52fd4f9",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"promoCodeId\", jsonData.id);",
                  "postman.setEnvironmentVariable(\"updatedPromoCode\", jsonData.code);",
                  "var code = postman.getEnvironmentVariable(\"updatePromoCode\").toUpperCase();",
                  "var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
                  "var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
                  "var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount_2\");",
                  "var promoCodeId = postman.getEnvironmentVariable(\"promoCodeId_2\");",
                  "",
                  "tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoCode\"] =  responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+promoStartDate+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+promoEndDate+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount+\"\");",
                  "tests[\"Response Body has Correct PromoCodeId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId+\"\\\"\");",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"FIXED_AMOUNT\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save2\\\"\");",
                  "}",
                  "",
                  "",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3806108e-88cd-4169-8c59-eaeda27490ce",
                "type": "text/javascript",
                "exec": [
                  "",
                  "var updatePromoCodePrefix=postman.getEnvironmentVariable(\"updatePromoCode\").replace(\"SAVE\",\"OFFER\");",
                  "",
                  "",
                  "postman.setEnvironmentVariable(\"updatePromoCodePrefix\", updatePromoCodePrefix);",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Offer to Save2\",\r\n  \"code\" : \"{{updatePromoCode}}\"\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCodeId_2}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "promotion",
                "{{promoCodeId_2}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "DeletePromoCode",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6baba519-0330-4390-8f87-11ab666ff0a4",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var code = postman.getEnvironmentVariable(\"updatePromoCode\").toUpperCase();",
                  "var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
                  "var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
                  "var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount_2\");",
                  "var promoCodeId = postman.getEnvironmentVariable(\"promoCodeId\");",
                  "var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoCode\"] =  responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+promoStartDate+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+promoEndDate+\"\\\"\");",
                  "tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount+\"\");",
                  "tests[\"Response Body has Correct PromoCodeId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId+\"\\\"\");",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"FIXED_AMOUNT\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save2\\\"\");",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ccc1cfc3-7a43-4173-9781-a3c9f869e30f",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCodeId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "promotion",
                "{{promoCodeId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetDeletedPromoCodeByCode",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d59b8adc-01c1-4976-b1e9-70800d61857f",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  "if (responseCode.code != 404)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 404) ",
                  "{",
                  "",
                  "}",
                  "",
                  "",
                  "tests[\"Response code should be 404\"] = responseCode.code === 404;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "11ed69d9-22dd-4a40-829c-7dcc08ccf078",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCode}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "promotion",
                "{{promoCode}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Merchant_Account",
      "description": null,
      "item": [
        {
          "name": "GetMerchantAccount",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "24acab91-e6d2-4a00-8e33-b9c7dd321b52",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var locationId = postman.getEnvironmentVariable(\"locationId\");",
                  "var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has  contains Id\"] =  responseBody.has(\"id\");",
                  "tests[\"Response Body has Correct LocationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct customerKey\"] = responseBody.has(\"customerKey\");",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "11ed69d9-22dd-4a40-829c-7dcc08ccf078",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/merchant-account",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "merchant-account"
              ]
            }
          },
          "response": []
        },
        {
          "name": "GetPlatformId",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4dcfe14d-b7f6-4131-81b4-730d3d2467ba",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"PlatformId\",jsonData.platformId);",
                  "tests[\"Response Body has  contains Id\"] =  responseBody.has(\"platformId\");",
                  "tests[\"Response Body has Correct platformId\"] = responseBody.has(\"\\\"platformId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"PlatformId\")+\"\\\"\");",
                  "",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "11ed69d9-22dd-4a40-829c-7dcc08ccf078",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/merchant-account/platformId",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "merchant-account",
                "platformId"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Get Member",
      "description": null,
      "item": [
        {
          "name": "createMember",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fea39f12-3a70-4573-9280-18acc403698c",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7912f397-dcae-4006-97b2-84a7b408bab0",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberEmailId\", jsonData.person.email.address);",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
                  "tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.userId+\"\\\"\"); ",
                  "tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
                  "tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n    \"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Member By Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed8ca277-1824-4413-8565-c586a0de4827",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if(responseCode.code===200) {",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberEmailId\", jsonData.person.email.address);",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
                  "tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.userId+\"\\\"\"); ",
                  "tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\"); ",
                  "tests[\"Response Body has Correct lastName\"] = responseBody.has(\"lastName\");",
                  "tests[\"Response Body has Correct number\"] = responseBody.has(\"number\");",
                  "tests[\"Response Body has Correct address\"] = responseBody.has(\"address\");",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/member/{{memberId}}",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "member",
                "{{memberId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Member by Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3d765305-652d-4bac-b738-b520b9b93316",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if(responseCode.code===200) {",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberEmailId\", jsonData.person.email.address);",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
                  "tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.userId+\"\\\"\"); ",
                  "tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
                  "tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
                  "tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/member/?email={{memberEmailId}}",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "member",
                ""
              ],
              "query": [
                {
                  "key": "email",
                  "value": "{{memberEmailId}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Update Member",
      "description": null,
      "item": [
        {
          "name": "updateMember",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f8ad2961-6ea3-4b58-8c32-06972cac7d6f",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "47f2e1b4-cb9c-4335-83b0-ebbc70cd43f8",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if(responseCode.code===200) {",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);    ",
                  "tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
                  "tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.userId+\"\\\"\"); ",
                  "tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randLastName}}.{{randFirstName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n    \"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member/{{memberId}}",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member",
                "{{memberId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Get Person",
      "description": null,
      "item": [
        {
          "name": "getPerson",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c7b4c28f-eabc-47eb-8722-fedd1b2b6d80",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"personId\", jsonData.content[0].id);",
                  "tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"personId\")+\"\\\"\");   ",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                  "tests[\"Response Body has Correct lastName\"] = responseBody.has(\"lastName\");",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"userId\");",
                  "tests[\"Response Body has Correct address1\"] = responseBody.has(\"\\\"address1\\\":\"+\"\\\"10 Fit Lane\\\"\");",
                  "tests[\"Response Body has Correct address2\"] = responseBody.has(\"\\\"address2\\\":\"+\"\\\"PO Box\");",
                  "tests[\"Response Body has Correct zipCode\"] = responseBody.has(\"zipCode\");",
                  "tests[\"Response Body has Correct state\"] = responseBody.has(\"state\");",
                  "tests[\"Response Body has Correct country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"United States\");",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{manageUser}}/{{organizationId}}/person",
              "host": [
                "{{manageUser}}"
              ],
              "path": [
                "{{organizationId}}",
                "person"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getPersonByUserId",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6b25c7b8-21cc-4952-94bc-300e9ce4128c",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if(responseCode.code==200) {",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"personId_UID\", jsonData.id);",
                  "tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"personId_UID\")+\"\\\"\");   ",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"ownerId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct userType\"] = responseBody.has(\"\\\"userType\\\":\"+\"\\\"Customer\");",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{manageUser}}/{{organizationId}}/user/{{ownerId}}",
              "host": [
                "{{manageUser}}"
              ],
              "path": [
                "{{organizationId}}",
                "user",
                "{{ownerId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updatePerson",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f1e7449a-f45f-4cf2-8c7a-a236bd65f095",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if(responseCode.code===200) {",
                  "var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"personId\")+\"\\\"\");   ",
                  "tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
                  "tests[\"Response Body has Correct userId\"] = responseBody.has(\"userId\");",
                  "tests[\"Response Body has Correct address1\"] = responseBody.has(\"\\\"address1\\\":\"+\"\\\"Belouve Hard\");",
                  "tests[\"Response Body has Correct address2\"] = responseBody.has(\"\\\"address2\\\":\"+\"\\\"13/211 ,Goir Street\");",
                  "tests[\"Response Body has Correct zipCode\"] = responseBody.has(\"zipCode\");",
                  "tests[\"Response Body has Correct state\"] = responseBody.has(\"\\\"state\\\":\"+\"\\\"Alabama\");",
                  "tests[\"Response Body has Correct country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"United States\");",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "14d9d8ed-398c-47f3-ac01-0f3fe8ed4a89",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"password\" : \"Password1\",\r\n  \"phone\" : {\r\n    \"phoneNumber\" : \"{{randPhoneNumber}}\",\r\n    \"phoneExtension\" : \"118\"\r\n  },\r\n  \"address\" : {\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"21253\",\r\n    \"address2\" : \"13/211 ,Goir Street\",\r\n    \"city\" : \"Albama1\",\r\n    \"address1\" : \"Belouve Hard {{$randomInt}}\",\r\n    \"state\" : \"Alabama\"\r\n  },\r\n  \"birthDate\" : \"1998-01-22\",\r\n  \"email\" : \"TestUser{{randPhoneNumber}}@qa4life.com\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageUser}}/{{organizationId}}/person/{{personId}}",
              "host": [
                "{{manageUser}}"
              ],
              "path": [
                "{{organizationId}}",
                "person",
                "{{personId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updatePersonPhotoId",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cdefeab2-b3b2-433c-837b-9d11526843a2",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if(responseCode.code===200) {",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Response Body has  contains firstName\"] = responseBody.has(\"firstName\");",
                  "tests[\"Response Body has  contains lastName\"] =   responseBody.has(\"lastName\");",
                  "tests[\"Response Body has  contains photoId\"] =  responseBody.has(\"photoId\");",
                  "tests[\"Response Body has  contains email\"] =  responseBody.has(\"email\"); ",
                  "tests[\"Response Body has  contains userId\"] =  responseBody.has(\"userId\");",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "14d9d8ed-398c-47f3-ac01-0f3fe8ed4a89",
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"type\" : \"Customer\",\r\n  \"content\" :\"\",\r\n  \"personId\" : \"{{personId}}\",\r\n  \"name\": \"Tyler Durden\"\r\n}"
            },
            "url": {
              "raw": "{{manageUser}}/{{organizationId}}/person/{{personId}}/photo",
              "host": [
                "{{manageUser}}"
              ],
              "path": [
                "{{organizationId}}",
                "person",
                "{{personId}}",
                "photo"
              ]
            }
          },
          "response": []
        },
        {
          "name": "isAllowedToUpdateRole",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5079d3ad-d644-460e-b457-727d2c504117",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if(responseCode.code==200) {",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Response Body has Correct id\"] = responseBody.has(\"allowedToUpdateRole\");   ",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{manageUser}}/{{organizationId}}/user/{{ownerId}}/allowedToUpdateRole",
              "host": [
                "{{manageUser}}"
              ],
              "path": [
                "{{organizationId}}",
                "user",
                "{{ownerId}}",
                "allowedToUpdateRole"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Items",
      "description": null,
      "item": [
        {
          "name": "createItemUnlimitedTrue",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6cc6a65a-33c5-47f7-9fbf-8aa91f8ecfc0",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"itemId_Unlimited_true_1\", jsonData.id);",
                  "var eventTypeIdYoga = postman.getEnvironmentVariable(\"eventTypeId_yoga\");",
                  "",
                  "tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
                  "tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
                  "tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
                  "tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
                  "tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
                  "tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
                  "tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Yoga{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" :true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createItemUnlimitedTrueMultiple",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70c7e6df-4e1d-4fbb-a26e-4da510d3cf2e",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"itemId_Unlimited_true_Multiple\", jsonData.id);",
                  "var eventTypeIdYoga = postman.getEnvironmentVariable(\"eventTypeId_yoga\");",
                  "var eventTypeIdCycling = postman.getEnvironmentVariable(\"eventTypeId_cycling\");",
                  "var eventTypeIdZumba = postman.getEnvironmentVariable(\"eventTypeId_zumba\");",
                  "",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_Multiple\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeId1\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeId2\"] =responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_cycling\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeId3\"] =responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_zumba\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Item with Multiple\");",
                  "tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
                  "tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
                  "tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
                  "tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
                  "tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
                  "tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Item with Multiple{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" :true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  },{\r\n    \"eventTypeId\" : \"{{eventTypeId_zumba}}\"\r\n  },{\r\n    \"eventTypeId\" : \"{{eventTypeId_cycling}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createItemUnlimitedFalse",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c14d1930-344e-4fcd-914f-7a0dd925f63b",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"itemId_Unlimited_false_1\", jsonData.id);",
                  "var eventTypeIdYoga = postman.getEnvironmentVariable(\"eventTypeId_yoga\");",
                  "",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_false_1\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
                  "",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
                  "tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
                  "tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
                  "tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
                  "tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
                  "tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
                  "tests[\"Response Body has Correct ExpirationUnit\"] =responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Yoga{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" :false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createItemUnlimitedFalseMultiple",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1b27f4e4-3e89-4478-abc8-7e528ef971dc",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"itemId_Unlimited_false_Multiple\", jsonData.id);",
                  "var eventTypeIdYoga = postman.getEnvironmentVariable(\"eventTypeId_yoga\");",
                  "var eventTypeIdCycling = postman.getEnvironmentVariable(\"eventTypeId_cycling\");",
                  "var eventTypeIdZumba = postman.getEnvironmentVariable(\"eventTypeId_zumba\");",
                  "",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_false_Multiple\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventType Id1\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventType Id2\"] =responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_cycling\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventType Id3\"] =responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_zumba\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
                  "tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
                  "tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
                  "tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
                  "tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
                  "tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
                  "tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Yoga{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" :false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  },{\r\n    \"eventTypeId\" : \"{{eventTypeId_zumba}}\"\r\n  },{\r\n    \"eventTypeId\" : \"{{eventTypeId_cycling}}\"\r\n  } ]\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d29f4f50-4444-4fda-b0a1-8773b23d82b6",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var eventTypeIdYoga = postman.getEnvironmentVariable(\"eventTypeId_yoga\");",
                  "var itemIdUnlimitedTrue1 = postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\");",
                  "var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeId1\"] =responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
                  "tests[\"Response Body has Correct ItemId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
                  "tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
                  "tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
                  "tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
                  "tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
                  "tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
                  "tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item/{{itemId_Unlimited_true_1}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item",
                "{{itemId_Unlimited_true_1}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getItems_all_items",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b5c2de51-80d0-4eb6-a59b-8155cf55c06e",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    tests[\"Response Body has Correct  id1\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id2\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_metered\")+\"\\\"\");",
                  "    /*",
                  "    tests[\"Response Body has Correct  id3\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_aero\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id4\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_zum\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id5\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_yoga\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id6\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_pilates\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id7\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_zumba\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id8\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlmtd_cycle\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id9\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_false_1\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id10\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_p90x\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id11\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_pil\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id12\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_cyc\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id13\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_tur\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id14\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_p90x\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id15\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_aerobics\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id16\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_cycling\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id17\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_turboKick\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id18\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_metered_yoga\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id19\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_Multiple\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  id20\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_false_Multiple\")+\"\\\"\");",
                  "    */",
                  "    tests[\"Response Body has Correct  expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":14\");",
                  "    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
                  "    tests[\"Response Body has Correct  Number of Elements\"] = responseBody.has(\"\\\"numberOfElements\\\":14\");",
                  "    tests[\"Response Body has Correct  Size\"] = responseBody.has(\"\\\"size\\\":20\");",
                  "    ",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "55cf55b6-2d8e-4ebd-9c5d-551b7a746040",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var eventTypeIdYoga = postman.getEnvironmentVariable(\"eventTypeId_yoga\");",
                  "var eventTypeIdCycling = postman.getEnvironmentVariable(\"eventTypeId_cycling\");",
                  "var eventTypeIdZumba = postman.getEnvironmentVariable(\"eventTypeId_zumba\");",
                  "var itemIdUnlimitedTrue1 = postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\");",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeIdYoga\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeIdCycling\"] =responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_cycling\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeIdZumba\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_zumba\")+\"\\\"\");",
                  "tests[\"Response Body has Correct ItemIdUnlimitedTrue\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
                  "tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
                  "tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
                  "tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
                  "tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
                  "tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
                  "tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{itemId_Unlimited_true_1}}\",\n    \"name\": \"YogaEdit{{$randomInt}}\",\n    \"type\": \"SERVICE\",\n    \"unitPrice\": 100,\n    \"quantity\": 1,\n    \"unlimited\": true,\n    \"expirationStart\": \"PURCHASE\",\n    \"expirationTime\": 1,\n    \"expirationUnit\": \"DAYS\",\n    \"currencyId\": \"USD\",\n     \"eligibleClasses\" : [ {\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\n  },{\n    \"eventTypeId\" : \"{{eventTypeId_zumba}}\"\n  },{\n    \"eventTypeId\" : \"{{eventTypeId_cycling}}\"\n  } ]\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item/{{itemId_Unlimited_true_1}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item",
                "{{itemId_Unlimited_true_1}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "deleteItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ac85a358-001e-489d-83f9-b12598c888d6",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var eventTypeIdYoga = postman.getEnvironmentVariable(\"eventTypeId_yoga\");",
                  "var eventTypeIdCycling = postman.getEnvironmentVariable(\"eventTypeId_cycling\");",
                  "var eventTypeIdZumba = postman.getEnvironmentVariable(\"eventTypeId_zumba\");",
                  "var itemIdUnlimitedTrue1 = postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\");",
                  "var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeIdYoga\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
                  "",
                  "tests[\"Response Body has Correct ItemId Unlimited True\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
                  "tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
                  "tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
                  "tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
                  "tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
                  "tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
                  "tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item/{{itemId_Unlimited_true_1}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item",
                "{{itemId_Unlimited_true_1}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getDeletedItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f2a293c-a2da-4528-a6c6-54046e3f2ff4",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 404)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 404) ",
                  "{",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 404\"] = responseCode.code === 404;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item/{{itemId_Unlimited_true_1}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item",
                "{{itemId_Unlimited_true_1}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "patchItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f40404d7-4f21-4961-a25e-c8014ee41484",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var eventTypeIdYoga = postman.getEnvironmentVariable(\"eventTypeId_yoga\");",
                  "var eventTypeIdCycling = postman.getEnvironmentVariable(\"eventTypeId_cycling\");",
                  "var eventTypeIdZumba = postman.getEnvironmentVariable(\"eventTypeId_zumba\");",
                  "var itemIdUnlimitedFalse1 = postman.getEnvironmentVariable(\"itemId_Unlimited_false_1\");",
                  "var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_false_1\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeIdYoga\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeIdCycling\"] =responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_cycling\")+\"\\\"\");",
                  "tests[\"Response Body has Correct EventTypeIdZumba\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_zumba\")+\"\\\"\");",
                  "",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
                  "tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
                  "tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
                  "tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
                  "tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
                  "tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
                  "tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
                  "tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{itemId_Unlimited_false_1}}\",\n    \"name\": \"Yoga{{$randomInt}}\",\n    \"type\": \"SERVICE\",\n    \"unitPrice\": 100,\n    \"quantity\": 1,\n    \"unlimited\": false,\n    \"expirationStart\": \"PURCHASE\",\n    \"expirationTime\": 1,\n    \"expirationUnit\": \"DAYS\",\n    \"currencyId\": \"USD\",\n     \"eligibleClasses\" : [ {\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\n  },{\n    \"eventTypeId\" : \"{{eventTypeId_zumba}}\"\n  },{\n    \"eventTypeId\" : \"{{eventTypeId_cycling}}\"\n  } ]\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item/{{itemId_Unlimited_false_1}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "inventory",
                "item",
                "{{itemId_Unlimited_false_1}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Event Type",
      "description": null,
      "item": [
        {
          "name": "CreateEventType",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72d5c08c-cb7f-41f4-ad18-a580997c4cc2",
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"eventTypeId1\", jsonData.id);",
                  "",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(jsonData.id);",
                  "tests[\"Response Body has Correct EventCategoryId\"] = responseBody.has(\"\\\"eventCategoryId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct LocationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Zumba Advanced\"+\"\\\"\");",
                  "tests[\"Response Body has Correct CheckInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":15\");",
                  "tests[\"Response Body has Correct Duration\"] = responseBody.has(\"\\\"duration\\\":\"+\"90\");",
                  "tests[\"Response Body has Correct event level Id\"] = responseBody.has(jsonData.eventLevelId);",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "}",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2d7c99ab-2a16-401c-b97e-faefbbc27b15",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Zumba Advanced\",\r\n    \"checkInWindow\": 15,\r\n    \"duration\": 90,\r\n    \"eventCategoryId\":\"{{eventCategoryId}}\"\r\n    \r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventType",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventType"
              ]
            }
          },
          "response": []
        },
        {
          "name": "UpdateEventType",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f96a7d4c-c0a9-4d5a-842d-299401a12e46",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if(responseCode.code===200) {",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(jsonData.id);",
                  "tests[\"Response Body has Correct EventCategoryId\"] = responseBody.has(\"\\\"eventCategoryId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct LocationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Zumba Advanced\"+\"\\\"\");",
                  "tests[\"Response Body has Correct event level Id\"] = responseBody.has(jsonData.eventLevelId);",
                  "tests[\"Response Body has Correct CheckInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":15\");",
                  "tests[\"Response Body has Correct Duration\"] = responseBody.has(\"\\\"duration\\\":60\");",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2d7c99ab-2a16-401c-b97e-faefbbc27b15",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Zumba Advanced\",\r\n    \"checkInWindow\": 15,\r\n    \"duration\": 60,\r\n    \"eventCategoryId\":\"{{eventCategoryId}}\"\r\n    \r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventType/{{eventTypeId1}}",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventType",
                "{{eventTypeId1}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "PatchEventType",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1dbc8b21-0d53-4356-813c-9d2e37de51d7",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200)",
                  "{",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    ",
                  "    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_zumba\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  eventCategoryId\"] = responseBody.has(\"\\\"eventCategoryId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
                  "    ",
                  "    tests[\"Response Body has Correct  eventLevelId\"] = responseBody.has(\"\\\"eventLevelId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventLevelId_advanced\")+\"\\\"\");",
                  "    ",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2d7c99ab-2a16-401c-b97e-faefbbc27b15",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\" : \"Outdoor class\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventType/{{eventTypeId_zumba}}",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventType",
                "{{eventTypeId_zumba}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getEventType Copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5104229c-48a1-4ac5-8e76-b6cc606cbf5f",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if(responseCode.code==200) {",
                  "    ",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventTypeId_yoga\", jsonData.id);",
                  "    ",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"name\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(\"id\");",
                  "tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
                  "tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
                  "tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
                  "tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\");",
                  "tests[\"Response Body has Correct eventLevelId\"] =responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventType",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventType"
              ]
            }
          },
          "response": []
        },
        {
          "name": "DeleteEventType",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0a3419af-671e-4506-8220-65fc2c4b372b",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if(responseCode.code===200) {",
                  "var eventCategoryId = postman.getEnvironmentVariable(\"eventCategoryId\");",
                  "var locationId = postman.getEnvironmentVariable(\"locationId\");",
                  "var id = postman.getEnvironmentVariable(\"eventTypeId1\");",
                  "var jsonData = JSON.parse(responseBody);",
                  "tests[\"Response Body has  contains Id\"] = responseBody.has(jsonData.id);",
                  "tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(eventCategoryId);",
                  "tests[\"Response Body has Correct EventCategoryId\"] = responseBody.has(eventCategoryId);",
                  "tests[\"Response Body has Correct LocationId\"] = responseBody.has(locationId);",
                  "tests[\"Response Body has Correct Name\"] = responseBody.has(\"Zumba Advanced\");",
                  "tests[\"Response Body has Correct CheckInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":15\");",
                  "tests[\"Response Body has Correct event level Id\"] = responseBody.has(jsonData.eventLevelId);",
                  "tests[\"Response Body has Correct Duration\"] = responseBody.has(\"\\\"duration\\\":60\");",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2d7c99ab-2a16-401c-b97e-faefbbc27b15",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventType/{{eventTypeId1}}",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventType",
                "{{eventTypeId1}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getEventType",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5104229c-48a1-4ac5-8e76-b6cc606cbf5f",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "} else if(responseCode.code==200) {",
                  "    ",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    postman.setEnvironmentVariable(\"eventTypeId_yoga\", jsonData.id);",
                  "    ",
                  "tests[\"Response Body has Name\"] = responseBody.has(\"name\");",
                  "tests[\"Response Body has Event Type Id\"] = responseBody.has(\"id\");",
                  "tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
                  "tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
                  "tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
                  "tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
                  "tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\");",
                  "tests[\"Response Body has Correct eventLevelId\"] =responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
                  "    ",
                  "}",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventType",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "eventType"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Save Card and Purchase",
      "description": null,
      "item": [
        {
          "name": "createStripeId",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "51e6c76f-f782-4a5d-a3b6-1daa17632825",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"stripeId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if(responseCode.code===200) {",
                  "",
                  "tests[\"Response Body has Correct exp_month\"] = responseBody.has(\"\\\"exp_month\\\": 4\");",
                  "tests[\"Response Body has Correct exp_year\"] = responseBody.has(\"\\\"exp_year\\\": 2024\");",
                  "tests[\"Response Body has Correct brand\"] = responseBody.has(\"\\\"brand\\\": \\\"Visa\");        ",
                  "tests[\"Response Body has Correct CVC Checked\"] = responseBody.has(\"\\\"cvc_check\\\": \\\"unchecked\");  ",
                  "tests[\"Response Body has Correct funding\"] = responseBody.has(\"\\\"funding\\\": \\\"credit\");  ",
                  "tests[\"Response Body has Correct last 4\"] = responseBody.has(\"\\\"last4\\\": \\\"4242\");  ",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2d7c99ab-2a16-401c-b97e-faefbbc27b15",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{cardDetailsBody}}"
            },
            "url": {
              "raw": "{{stripe}}",
              "host": [
                "{{stripe}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createCard",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2fb1f33b-7fd1-4ef7-881e-5b92fb6c7fe6",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"cardId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"newCardIdForPurchase\", jsonData.id);",
                  "",
                  "tests[\"Response Body has Correct expiryMonth\"] = responseBody.has(\"\\\"expiryMonth\\\":4\");",
                  "tests[\"Response Body has Correct expiryYear\"] = responseBody.has(\"\\\"expiryYear\\\":24\");",
                  "      ",
                  "tests[\"Response Body has Correct gateway\"] = responseBody.has(\"\\\"gateway\\\":\\\"STRIPE\"); ",
                  "tests[\"Response Body has Correct last 4\"] = responseBody.has(\"\\\"lastFour\\\":\\\"4242\");",
                  "",
                  "tests[\"Response Body has  contains locationId\"] =  responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "",
                  "tests[\"Response Body has  contains Card Type\"] =  responseBody.has(\"\\\"cardType\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randCardType\")+\"\\\"\");",
                  "",
                  "",
                  "",
                  "}",
                  "",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "34c063fb-b6ea-413b-879d-3a571ad46e86",
                "type": "text/javascript",
                "exec": [
                  "var cardTypes = ['Paypal','Mastercard','VISA','American Express','Discover'];",
                  "var randCardType = cardTypes[Math.floor(Math.random() * cardTypes.length)];",
                  "",
                  "postman.setEnvironmentVariable(\"randCardType\", randCardType);",
                  "",
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"collectedUserId\" : \"{{randEmployee}}\",\r\n  \"lastFour\" : \"4242\",\r\n  \"expiryMonth\" : 4,\r\n  \"expiryYear\" : 24,\r\n  \"gateway\" : \"STRIPE\",\r\n  \"gatewayResponse\" : \"{\\\"id\\\":\\\"{{stripeId}}\\\",\\\"object\\\":\\\"source\\\",\\\"client_secret\\\":\\\"src_client_secret_BtwYR1BVfM1hBafiBCcNaoc9\\\",\\\"created\\\":1512588904,\\\"flow\\\":\\\"none\\\",\\\"livemode\\\":false,\\\"metadata\\\":[],\\\"owner\\\":{\\\"address\\\":{\\\"postal_code\\\":\\\"72032\\\"}}}\",\r\n  \r\n  \"cardType\" : \"{{randCardType}}\"\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/card",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "card"
              ]
            }
          },
          "response": []
        },
        {
          "name": "saveCardToUser",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "98ec790c-7dd6-4b74-bc03-7dd4bbbd6f36",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"cardIdForPurchase\", jsonData.id);",
                  "postman.setEnvironmentVariable(\"gatewayResponseOfSaveCard\", jsonData.gatewayResponse);",
                  "",
                  "tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"cardIdForPurchase\")+\"\\\"\");",
                  "tests[\"Response Body has Correct expiryMonth\"] = responseBody.has(\"\\\"expiryMonth\\\":4\");",
                  "tests[\"Response Body has Correct expiryYear\"] = responseBody.has(\"\\\"expiryYear\\\":24\");",
                  "tests[\"Response Body has Correct user id\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");       ",
                  "tests[\"Response Body has Correct gateway\"] = responseBody.has(\"\\\"gateway\\\":\\\"STRIPE\"); ",
                  "tests[\"Response Body has Correct last 4\"] = responseBody.has(\"\\\"lastFour\\\":\\\"4242\");",
                  "tests[\"Response Body has Correct cardType\"] = responseBody.has(\"\\\"cardType\\\":\\\"VISA\");",
                  "tests[\"Response Body has  contains locationId\"] =  responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "tests[\"Response Body has  contains token\"] =  responseBody.has(\"\\\"token\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"stripeId\")+\"\\\"\");",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"cardType\": \"VISA\",\r\n  \"collectedUserId\": \"{{employeeId}}\",\r\n  \"expiryMonth\": 4,\r\n  \"expiryYear\": 24,\r\n  \"gateway\": \"STRIPE\",\r\n  \"gatewayResponse\": \"{\\r\\n  \\\"id\\\": \\\"{{stripeId}}\\\",\\r\\n  \\\"object\\\": \\\"source\\\",\\r\\n  \\\"amount\\\": null,\\r\\n  \\\"client_secret\\\": \\\"src_client_secret_CfLCSV7hXlJbrl4Wf00bLtsD\\\",\\r\\n  \\\"created\\\": 1523520642,\\r\\n  \\\"currency\\\": null,\\r\\n  \\\"flow\\\": \\\"none\\\",\\r\\n  \\\"livemode\\\": false,\\r\\n  \\\"metadata\\\": {},\\r\\n  \\\"owner\\\": {\\r\\n    \\\"address\\\": {\\r\\n      \\\"city\\\": \\\"Berlin\\\",\\r\\n      \\\"country\\\": \\\"DE\\\",\\r\\n      \\\"line1\\\": \\\"Nollendorfstra\\u00DFe 27\\\",\\r\\n      \\\"line2\\\": null,\\r\\n      \\\"postal_code\\\": \\\"72032\\\",\\r\\n      \\\"state\\\": null\\r\\n    },\\r\\n    \\\"email\\\": \\\"jenny.rosen@example.com\\\",\\r\\n    \\\"name\\\": \\\"Jenny Rosen\\\",\\r\\n    \\\"phone\\\": null,\\r\\n    \\\"verified_address\\\": null,\\r\\n    \\\"verified_email\\\": null,\\r\\n    \\\"verified_name\\\": null,\\r\\n    \\\"verified_phone\\\": null\\r\\n  },\\r\\n  \\\"statement_descriptor\\\": null,\\r\\n  \\\"status\\\": \\\"chargeable\\\",\\r\\n  \\\"type\\\": \\\"card\\\",\\r\\n  \\\"usage\\\": \\\"reusable\\\",\\r\\n  \\\"card\\\": {\\r\\n    \\\"exp_month\\\": 4,\\r\\n    \\\"exp_year\\\": 2024,\\r\\n    \\\"address_line1_check\\\": \\\"unchecked\\\",\\r\\n    \\\"address_zip_check\\\": \\\"unchecked\\\",\\r\\n    \\\"brand\\\": \\\"Visa\\\",\\r\\n    \\\"card_automatically_updated\\\": false,\\r\\n    \\\"country\\\": \\\"US\\\",\\r\\n    \\\"cvc_check\\\": \\\"unchecked\\\",\\r\\n    \\\"funding\\\": \\\"credit\\\",\\r\\n    \\\"last4\\\": \\\"4242\\\",\\r\\n    \\\"three_d_secure\\\": \\\"optional\\\",\\r\\n    \\\"tokenization_method\\\": null,\\r\\n    \\\"dynamic_last4\\\": null\\r\\n  }\\r\\n}\",\r\n  \r\n  \"lastFour\": \"4242\",\r\n  \r\n  \"userId\": \"{{userId}}\"\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/card/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "card",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getCardByUserId",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e526aee8-aac3-40b6-9100-4c42b8f63c0e",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "",
                  "tests[\"Response Body has Correct expiryMonth\"] = responseBody.has(\"\\\"expiryMonth\\\":4\");",
                  "tests[\"Response Body has Correct expiryYear\"] = responseBody.has(\"\\\"expiryYear\\\":24\");",
                  "tests[\"Response Body has Correct user id\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");       ",
                  "tests[\"Response Body has Correct gateway\"] = responseBody.has(\"\\\"gateway\\\":\\\"STRIPE\"); ",
                  "tests[\"Response Body has Correct last 4\"] = responseBody.has(\"\\\"lastFour\\\":\\\"4242\");",
                  "tests[\"Response Body has Correct cardType\"] = responseBody.has(\"\\\"cardType\\\":\\\"VISA\");",
                  "tests[\"Response Body has  contains locationId\"] =  responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "tests[\"Response Body has  contains token\"] =  responseBody.has(\"\\\"token\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"stripeId\")+\"\\\"\");",
                  "tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"cardIdForPurchase\")+\"\\\"\");",
                  "",
                  "}",
                  "",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/card/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "card",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createUnlimitedPurchaseBySaveCard",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "96278fae-dc2a-41cd-a441-0cebda8a4467",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
                  "    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
                  "    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"itemId\"); ",
                  "    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"invoiceId\");  ",
                  "    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
                  "    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CARD\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "",
                  "}",
                  "",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6086e282-7c8e-4faf-8b8d-ec9502fdfbcb",
                "type": "text/javascript",
                "exec": [
                  "// var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CARD\",\n    \"cardId\": \"{{cardIdForPurchase}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createlimitedPurchaseBySaveCard",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e27d1651-b380-44c7-902f-f0c9c7e039a5",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);  ",
                  "    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
                  "    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_metered\")+\"\\\"\");   ",
                  "    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"invoiceId\");  ",
                  "    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+true);",
                  "    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CARD\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d05b1c8d-9402-48ce-ae65-85909c0691e9",
                "type": "text/javascript",
                "exec": [
                  "//var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n   \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CARD\",\r\n    \"cardId\": \"{{cardIdForPurchase}}\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createlimitedPurchaseByNewCard",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8c46b57-faf2-4c38-998a-b3a771fa5017",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);  ",
                  "    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
                  "    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_metered\")+\"\\\"\");   ",
                  "    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"invoiceId\");  ",
                  "    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+true);",
                  "    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CARD\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "",
                  "}",
                  "",
                  "",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "802e7db4-031b-44ca-ab0a-629666148be2",
                "type": "text/javascript",
                "exec": [
                  "//var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n   \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CARD\",\r\n    \"cardId\": \"{{newCardIdForPurchase}}\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createUnlimitedPurchaseByNewCard",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "06fe3412-19ad-4951-81f4-cac9a469d619",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
                  "    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
                  "    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"itemId\"); ",
                  "    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"invoiceId\");  ",
                  "    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
                  "    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
                  "    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
                  "    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CARD\"+\"\\\"\");",
                  "    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
                  "",
                  "}",
                  "",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6086e282-7c8e-4faf-8b8d-ec9502fdfbcb",
                "type": "text/javascript",
                "exec": [
                  "// var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CARD\",\n    \"cardId\": \"{{newCardIdForPurchase}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Roles",
      "description": null,
      "item": [
        {
          "name": "getRoles",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0a79273c-a4fe-454c-af03-2346b8a51c6d",
                "type": "text/javascript",
                "exec": [
                  "//jsonData.content[0].id",
                  "",
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"permissionGroupId_1\", jsonData.content[0].permissions[0].permissionGroupId);",
                  "",
                  " tests[\"Response Body has Correct Organization ID\"] = responseBody.has(\"\\\"organizationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"organizationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                  "     tests[\"Response Body has Correct description name\"] = responseBody.has(\"description\");",
                  "     tests[\"Response Body has Correct permissionGroupId\"] = responseBody.has(\"permissionGroupId\");",
                  "      tests[\"Response Body has Correct permissionKey\"] = responseBody.has(\"permissionKey\");",
                  "}",
                  "",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{authentication}}/{{organizationId}}/role",
              "host": [
                "{{authentication}}"
              ],
              "path": [
                "{{organizationId}}",
                "role"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getRolesById",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "33cea620-a205-4e64-9a9d-96fb774a8217",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  " tests[\"Response Body has Correct Organization ID\"] = responseBody.has(\"\\\"organizationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"organizationId\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
                  "     tests[\"Response Body has Correct description name\"] = responseBody.has(\"description\");",
                  "     tests[\"Response Body has Correct permissionGroupId\"] = responseBody.has(\"permissionGroupId\");",
                  "      tests[\"Response Body has Correct permissionKey\"] = responseBody.has(\"permissionKey\");",
                  "}",
                  "",
                  "",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{authentication}}/{{organizationId}}/role/{{roleId}}",
              "host": [
                "{{authentication}}"
              ],
              "path": [
                "{{organizationId}}",
                "role",
                "{{roleId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Permission",
      "description": null,
      "item": [
        {
          "name": "getAllPermissionGroups",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c5cd3f45-8efb-4b30-bf37-e19df0698950",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "    ",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"permissionGroupId_Application_Access\", jsonData.content[0].permissions[0].permissionGroupId);",
                  "",
                  "postman.setEnvironmentVariable(\"permissionGroupId_Schedule_and_Bookings\", jsonData.content[1].permissions[0].permissionGroupId);",
                  "postman.setEnvironmentVariable(\"permissionGroupId_Settings\", jsonData.content[2].permissions[0].permissionGroupId);",
                  "     tests[\"Response Body has Correct Id 1\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"permissionGroupId_Application_Access\")+\"\\\"\");",
                  "     ",
                  "      tests[\"Response Body has Correct Id 2\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"permissionGroupId_Schedule_and_Bookings\")+\"\\\"\");",
                  "      ",
                  "      tests[\"Response Body has Correct Id 3\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"permissionGroupId_Settings\")+\"\\\"\");",
                  "      ",
                  "      ",
                  " ",
                  "    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\\\"Application Access\\\"\");",
                  "    ",
                  "     tests[\"Response Body has Correct description\"] = responseBody.has(\"\\\"description\\\":\\\"Application Access\\\"\");",
                  "      ",
                  "      tests[\"Response Body has numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":3\");",
                  "      ",
                  "      ",
                  "    tests[\"Response Body has unsorted\"] = responseBody.has(\"\\\"unsorted\\\":true\");",
                  "    tests[\"Response Body has sorted\"] = responseBody.has(\"\\\"sorted\\\":false\");",
                  "    tests[\"Response Body has pageSize\"] = responseBody.has(\"\\\"pageSize\\\":50\");",
                  "    tests[\"Response Body has pageNumber\"] = responseBody.has(\"\\\"pageNumber\\\":0\");",
                  "    tests[\"Response Body has offset\"] = responseBody.has(\"\\\"offset\\\":0\");",
                  "    tests[\"Response Body has paged\"] = responseBody.has(\"\\\"paged\\\":true\");",
                  "    tests[\"Response Body has unpaged\"] = responseBody.has(\"\\\"unpaged\\\":false\");",
                  "    tests[\"Response Body has total\"] = responseBody.has(\"\\\"total\\\":0\");",
                  "    tests[\"Response Body has totalPages\"] = responseBody.has(\"\\\"totalPages\\\":0\");",
                  "    tests[\"Response Body has last\"] = responseBody.has(\"\\\"last\\\":true\");",
                  "    tests[\"Response Body has first\"] = responseBody.has(\"\\\"first\\\":true\");",
                  "    tests[\"Response Body has totalElements\"] = responseBody.has(\"\\\"totalElements\\\":0\");",
                  "    tests[\"Response Body has size\"] = responseBody.has(\"\\\"size\\\":50\");",
                  "    tests[\"Response Body has number\"] = responseBody.has(\"\\\"number\\\":0\");",
                  "    tests[\"Response Body has numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":4\");",
                  "    tests[\"Response Body has permission name1\"] = responseBody.has(\"\\\"jsonData.content[0].permissions[0].name \\\": Access Member\");",
                  "    tests[\"Response Body has permission name1\"] = responseBody.has(\"\\\"name\\\":\\\"Access Member\\\"\");",
                  "    tests[\"Response Body has permissionKey1\"] = responseBody.has(\"\\\"permissionKey\\\":\\\"ACCESS_MEMBER\\\"\");",
                  "     tests[\"Response Body has description1\"] = responseBody.has(\"\\\"description\\\":\\\"Ability to login to the member app\\\"\");",
                  "tests[\"Response Body has permission name2\"] = responseBody.has(\"\\\"name\\\":\\\"Access Business\\\"\");",
                  "    tests[\"Response Body has permissionKey2\"] = responseBody.has(\"\\\"permissionKey\\\":\\\"ACCESS_BUSINESS\\\"\");",
                  "     tests[\"Response Body has description2\"] = responseBody.has(\"\\\"description\\\":\\\"Ability to login to the business app (sauron)\\\"\");",
                  "     ",
                  "     tests[\"Response Body has permission name3\"] = responseBody.has(\"\\\"name\\\":\\\"Access Roster\\\"\");",
                  "    tests[\"Response Body has permissionKey3\"] = responseBody.has(\"\\\"permissionKey\\\":\\\"ACCESS_ROSTER\\\"\");",
                  "     tests[\"Response Body has description3\"] = responseBody.has(\"\\\"description\\\":\\\"Ability to access the roster menu link of the business app\\\"\");",
                  "     ",
                  "     tests[\"Response Body has permission name4\"] = responseBody.has(\"\\\"name\\\":\\\"Access my profile\\\"\");",
                  "    tests[\"Response Body has permissionKey4\"] = responseBody.has(\"\\\"permissionKey\\\":\\\"ACCESS_MY_PROFILE\\\"\");",
                  "     tests[\"Response Body has description4\"] = responseBody.has(\"\\\"description\\\":\\\"Ability to access the my profile icon of the business app\\\"\");",
                  "     ",
                  "     tests[\"Response Body has permission name5\"] = responseBody.has(\"\\\"name\\\":\\\"Access Settings\\\"\");",
                  "    tests[\"Response Body has permissionKey5\"] = responseBody.has(\"\\\"permissionKey\\\":\\\"ACCESS_SETTINGS\\\"\");",
                  "     tests[\"Response Body has description5\"] = responseBody.has(\"\\\"description\\\":\\\"Ability to access the gear icon of the business app\\\"\");",
                  "     ",
                  "     ",
                  "      ",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://qa-authentication.greatestclubmanagementsoftwareever.com/permissionGroup",
              "protocol": "http",
              "host": [
                "qa-authentication",
                "greatestclubmanagementsoftwareever",
                "com"
              ],
              "path": [
                "permissionGroup"
              ]
            }
          },
          "response": []
        },
        {
          "name": "getAllPermissionGroupById",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c0d43ab-48dc-49b3-820b-b5e4e3a582db",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 200)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 200) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "     tests[\"Response Body has Correct Id 1\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"permissionGroupId_Application_Access\")+\"\\\"\");",
                  "    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\\\"Application Access\\\"\");",
                  "     tests[\"Response Body has Correct description\"] = responseBody.has(\"\\\"description\\\":\\\"Application Access\\\"\");",
                  "      ",
                  "   ",
                  "    tests[\"Response Body has permission name1\"] = responseBody.has(\"\\\"jsonData.content[0].permissions[0].name \\\": Access Member\");",
                  "    tests[\"Response Body has permission name1\"] = responseBody.has(\"\\\"name\\\":\\\"Access Member\\\"\");",
                  "    tests[\"Response Body has permissionKey1\"] = responseBody.has(\"\\\"permissionKey\\\":\\\"ACCESS_MEMBER\\\"\");",
                  "     tests[\"Response Body has description1\"] = responseBody.has(\"\\\"description\\\":\\\"Ability to login to the member app\\\"\");",
                  "     ",
                  "     ",
                  "    tests[\"Response Body has permission name2\"] = responseBody.has(\"\\\"name\\\":\\\"Access Business\\\"\");",
                  "    tests[\"Response Body has permissionKey2\"] = responseBody.has(\"\\\"permissionKey\\\":\\\"ACCESS_BUSINESS\\\"\");",
                  "     tests[\"Response Body has description2\"] = responseBody.has(\"\\\"description\\\":\\\"Ability to login to the business app (sauron)\\\"\");",
                  "     ",
                  "}",
                  "tests[\"Response code should be 200\"] = responseCode.code === 200;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "http://qa-authentication.greatestclubmanagementsoftwareever.com/permissionGroup/{{permissionGroupId_Application_Access}}",
              "protocol": "http",
              "host": [
                "qa-authentication",
                "greatestclubmanagementsoftwareever",
                "com"
              ],
              "path": [
                "permissionGroup",
                "{{permissionGroupId_Application_Access}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Member SignUp",
      "description": null,
      "item": [
        {
          "name": "createMemberSignUp",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "405b9b2c-13e9-4ef1-9051-f6110a0a32a3",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "else if (responseCode.code === 201) ",
                  "{",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "",
                  "tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct organizationId\"] = responseBody.has(\"\\\"organizationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"organizationId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
                  "tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"healthNote\\\":\\\"Wrist pain\\\"\");",
                  "",
                  "tests[\"Response Body has Correct emailId\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+jsonData.person.email.address+\"\\\"\");",
                  "",
                  "tests[\"Response Body has Correct phone number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+jsonData.person.phone.number+\"\\\"\");",
                  "",
                  "",
                  "}",
                  "",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "09baed31-0893-4ca0-a3ba-8cc1945bc7f9",
                "type": "text/javascript",
                "exec": [
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"birthDate\" : \"03/26/1980\",\r\n  \"email\" : {\r\n    \"address\" : \"joh1n.snow{{$randomInt}}@qa4life.com\"\r\n  },\r\n  \"phone\" : {\r\n    \"number\" : \"{{randPhoneNumber}}\",\r\n    \"extension\": \"{{$randomInt}}\"\r\n  },\r\n\r\n  \"healthNote\" : \"Wrist pain\",\r\n  \"items\" : [ {\r\n    \"quantity\" : 1,\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 60,\r\n    \"expirationUnit\" : \"DAYS\",\r\n    \"unitPrice\" : 10.0,\r\n    \"salesTax\" : 1.2,\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\" : 11.2,\r\n    \"type\" : \"CASH\",\r\n    \"email\" : \"john.snow{{$randomInt}}Kings{{$randomInt}}North@abc.com\",\r\n     \"currency\":\"USD\"\r\n  },\r\n\"salesEmployeeId\" : \"{{employeeId_2}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\",\r\n  \"waiverId\" : \"{{waiverId}}\"\r\n\r\n}\r\n"
            },
            "url": {
              "raw": "{{memberSignUp}}/{{organizationId}}/{{locationId}}/signUp",
              "host": [
                "{{memberSignUp}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "signUp"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Logout",
      "description": "",
      "item": [
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fc2594f0-f4ab-424d-8673-e90ef9fafeed",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 204)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 204\"] = responseCode.code === 204;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "",
                "value": "",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{authentication}}/organization/{{organizationId}}/logout?token={{loginAccessToken}}",
              "host": [
                "{{authentication}}"
              ],
              "path": [
                "organization",
                "{{organizationId}}",
                "logout"
              ],
              "query": [
                {
                  "key": "token",
                  "value": "{{loginAccessToken}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}