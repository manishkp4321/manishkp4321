{
	"info": {
		"_postman_id": "dcd4d134-0474-4abd-977b-0cb76fb41de6",
		"name": "Full_API_Automation_Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Org, Location and User",
			"description": null,
			"item": [
				{
					"name": "createUserForOrg",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f2bda97-db29-4430-a691-0d52e978c805",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    var appURL = postman.getEnvironmentVariable(\"baseURL\") + jsonData.organizationId;",
									"    postman.setEnvironmentVariable(\"ownerId\", jsonData.userId);",
									"    postman.setEnvironmentVariable(\"organizationId\", jsonData.organizationId);",
									"    postman.setEnvironmentVariable(\"ownerEmail\", jsonData.email);",
									"    postman.setEnvironmentVariable(\"ownerPassword\", jsonData.password);",
									"    postman.setEnvironmentVariable(\"appURL\", appURL);",
									"    postman.setEnvironmentVariable(\"roleId\", jsonData.roleId);",
									"    postman.setEnvironmentVariable(\"personId\", jsonData.personId);",
									"    ",
									"    tests[\"Response Body has Correct Organization ID\"] = responseBody.has(\"\\\"organizationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"organizationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct User ID\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"ownerId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct FirstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct LastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Password\"] = responseBody.has(\"\\\"password\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"ownerPassword\")+\"\\\"\");",
									"    tests[\"Response Body has Correct PhoneNumber\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"phoneNumber\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"ownerEmail\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Birthdate\"] = responseBody.has(\"birthDate\");",
									"    tests[\"Response Body has Correct extension\"] = responseBody.has(\"extension\");",
									"    tests[\"Response Body has Correct person id\"] = responseBody.has(\"\\\"personId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"personId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct role id\"] = responseBody.has(\"\\\"roleId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"roleId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct employee id\"] = responseBody.has(\"employeeId\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "298a76db-c033-4c5e-929e-d573e0515bb9",
								"type": "text/javascript",
								"exec": [
									"var phoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"phoneNumber\", phoneNumber);",
									"",
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"password\" : \"Password1\",\r\n  \"phone\" : {\r\n    \"number\" : \"{{phoneNumber}}\",\r\n    \"extension\" : \"1234\"\r\n  },\r\n  \"birthDate\" : \"1998-01-27\",\r\n  \"email\" : \"TestUser@abc.com\"\r\n}"
						},
						"url": {
							"raw": "{{registration}}/user",
							"host": [
								"{{registration}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "760ddec9-aa94-423d-84cd-6fd75378c360",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);",
									"   ",
									"    tests[\"Response Body has Correct Token Type\"] = responseBody.has(\"\\\"tokenType\\\":\\\"Bearer\\\"\");",
									"    tests[\"Response Body has Access Token\"] = responseBody.has(\"\\\"accessToken\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"accessToken\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Client Id\"] = responseBody.has(\"clientId\");",
									"    tests[\"Response Body has Correct Username\"] = responseBody.has(\"\\\"username\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"ownerEmail\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YXV0b21hdGVkLXRlc3RpbmctY2xpZW50OiNhbnRpLWpvbmFz"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{ownerPassword}}\",\r\n  \"username\": \"{{ownerEmail}}\"\r\n}"
						},
						"url": {
							"raw": "{{authentication}}/organization/{{organizationId}}/login?clientId=automated-testing-client",
							"host": [
								"{{authentication}}"
							],
							"path": [
								"organization",
								"{{organizationId}}",
								"login"
							],
							"query": [
								{
									"key": "clientId",
									"value": "automated-testing-client"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "createOrgLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2961228b-261a-48f4-82f5-4885d4903661",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"addressId\", jsonData.location.address.id);",
									"    postman.setEnvironmentVariable(\"locationId\", jsonData.location.id);",
									"    postman.setEnvironmentVariable(\"locationName\", jsonData.location.name);",
									"    postman.setEnvironmentVariable(\"orgName\", jsonData.name);",
									"    ",
									"    var loc_address1 = \"123 Fitness Lane\";",
									"    var loc_address2 = \"PO Box #\"+postman.getEnvironmentVariable(\"orgNumber\");",
									"    var city = \"Little Rock\";",
									"   ",
									"    var emailaddress = \"UniversityFitness\"+postman.getEnvironmentVariable(\"orgNumber\")+\"@ufit.com\";",
									"    ",
									"    responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+\"UniversityFitness\"+postman.getEnvironmentVariable(\"phoneNumber\")+\"@ufit.com\"+\"\\\"\");",
									"    ",
									"    ",
									"    ",
									"    tests[\"Response Body has Correct Location id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Address id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"addressId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Org name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"orgName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Owner ID\"] = responseBody.has(\"\\\"ownerId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"ownerId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Loc name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Loc addr1\"] = responseBody.has(loc_address1);",
									"    tests[\"Response Body has Correct Loc addr2\"] = responseBody.has(loc_address2);",
									"    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
									"    tests[\"Response Body has Correct State\"] =responseBody.has(\"\\\"state\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randState\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
									"    tests[\"Response Body has Correct Zip code\"] = responseBody.has(\"zipCode\");",
									"    tests[\"Response Body has Correct Phone number\"] =  responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"phoneNumber\")+\"\\\"\");",
									"    tests[\"Response Body has Correct extension\"] = responseBody.has(\"extension\");",
									"    tests[\"Response Body has Correct Email\"] = responseBody.has(emailaddress);",
									"    ",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "697738f3-b9f4-4646-9044-97f803022747",
								"type": "text/javascript",
								"exec": [
									"var orgNumber = Math.floor(Math.random() * 9000000) + 1000000;",
									"",
									"postman.setEnvironmentVariable(\"orgNumber\", orgNumber);",
									"",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"postman.setEnvironmentVariable(\"randState\", randState);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\" : \"University Sports and Fitness #{{orgNumber}}\",\n  \"ownerId\" : \"{{ownerId}}\",\n  \"location\" : {\n    \"name\" : \"University Fitness Center #{{orgNumber}}\",\n    \"address\" : {\n      \"address1\" : \"123 Fitness Lane\",\n      \"address2\" : \"PO Box #{{orgNumber}}\",\n      \"city\" : \"Little Rock\",\n      \"state\" : \"{{randState}}\",\n      \"country\" : \"United States\",\n      \"zipCode\" : \"33935\"\n    },\n    \"phone\" : {\n      \"number\" : \"{{phoneNumber}}\",\n      \"extension\" : \"411\"\n    },\n    \"email\" : {\n      \"address\" : \"UniversityFitness{{orgNumber}}@ufit.com\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/organization",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"organization"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Photos For Org",
			"description": null,
			"item": [
				{
					"name": "SaveEmployeePhoto1_male",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ce9d9fb-8a9b-44b9-bda5-3f6a60376ec1",
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"photoId_male_1\", jsonData.id);",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e8\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee1\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e8\",\n    \"name\": \"employee1\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				},
				{
					"name": "SaveEmployeePhoto2_male",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5cc65a61-97ef-4382-945b-fa074f741c83",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"photoId_male_2\", jsonData.id);",
									"    ",
									"    ",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e7\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee2\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e7\",\n    \"name\": \"employee2\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				},
				{
					"name": "SaveEmployeePhoto3_male",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72e71899-4212-4452-a4d5-c06e93f09051",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"photoId_male_3\", jsonData.id);",
									"    ",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e5\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee4\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e5\",\n    \"name\": \"employee4\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				},
				{
					"name": "SaveEmployeePhoto4_male",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a04596f-7b39-48e7-aae7-9654f5be8306",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"photoId_male_4\", jsonData.id);",
									"        ",
									"    ",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e1\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee8\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e1\",\n    \"name\": \"employee8\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				},
				{
					"name": "SaveEmployeePhoto5_male",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb4f5fd7-97a8-4cbb-8fa3-dee4079f22ba",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"photoId_male_5\", jsonData.id);",
									"        ",
									"    ",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e4\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee5\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e4\",\n    \"name\": \"employee5\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				},
				{
					"name": "SaveEmployeePhoto6_male",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "779c1046-9b47-4cc2-9510-3dc561b1a653",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"   var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"photoId_male_6\", jsonData.id); ",
									"    ",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e1\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee8\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e1\",\n    \"name\": \"employee8\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				},
				{
					"name": "SaveEmployeePhoto7_male",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c67f4e2-79ec-4eb2-969b-312aeda788a2",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"photoId_male_7\", jsonData.id);",
									"    ",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e2\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee7\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e2\",\n    \"name\": \"employee7\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				},
				{
					"name": "SaveEmployeePhoto8_male",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42929f92-f853-470e-87fe-766ff4c44045",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"photoId_male_8\", jsonData.id);",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"  var jsonData = JSON.parse(responseBody);",
									"  postman.setEnvironmentVariable(\"photoId_male_8\", jsonData.id); ",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"     tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e1\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee16\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBxITEhUSExMWFRUXGBoXFxgYGRgVHRoaFxgXFxcaFxgYHiggGBonHRcaITEhJSkrLi4uFx8zODMtOCgtLisBCgoKDg0OGhAQGC0lHyUrLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf/AABEIARMAtwMBIgACEQEDEQH/xAAcAAABBQEBAQAAAAAAAAAAAAAFAAMEBgcCAQj/xAA/EAACAQIEAwUFBQYGAgMAAAABAhEAAwQSITEFQVEGImFxgRMykaGxByNCwfAUM1Jy0fEVYoKiwuGSshZD4v/EABkBAAMBAQEAAAAAAAAAAAAAAAABAgMEBf/EACgRAAICAgIBAwQCAwAAAAAAAAABAhEDIRIxBBNBUSIycYGh0UJhkf/aAAwDAQACEQMRAD8ALmxTTW6M3rEVCu24qGiyAUporUq4KYYVmykMOtNZakkU3lqWy6OAlLJTOPxGRZqk4/tYyvAoWxMvZt02bdUD/wCXv415/wDK38adMLNBFuvCtVLhHEL19goMDm2kfWZqyX8MlsAtiNf4WUAHwz7Cj3DslBflXJSnuCYvDMpYIWjnnIIjQwY38NZj0qGzpcuMLZO8DSYbnIIGUDX3huKYiQtunPZUL47w7FWUNwENlEsACunWIiPEGKpzdrLg01mirCzRRbrxrYrOD2vueNcN2uueNOgs0pLdOBKo/Z7tE9xoNXqyZANAjwLXjrT2WuXFUhEK6KVOXVpVTYF7xyATQW+1TMZiC01AYVLkJDDLTZtVLCUstQ0MhtbpsWqnMlc5KTQ7AfG7PcNZNxe194a2XjSdw1kfGRF004jQPSzRPg3BWxDFVB0EmI08ddx61CVuVWxFbCYdWuKyM8uASNlgcuuYRP8ASm7HSB2NYYcmzbuDuwXJ0MncKNvzrm7cS3mdQSrRlZtyToYYchDHxgVM4bhTiXa5cw+rRG4nYZmjfkN9Zov/AIT937BSWIIi3AgQQd+X/wCfMVLaXZccbYIxXD8UARYte1DgFbyB80QJUkNlAB0yxy6VDXBX0tZyzIUMsslSDy1/h28orc/s8wBt4fviJ0845gHxLDyiqn9qlhbaG6BAYgGNPP4indKynjW0Vy32ju2Ys3XzoVzLcAy5GzMI6HRRvprqRuGOJdiFu4ZsVYMGSWtx3eoyEe6CNQNd4nahX7ctzCukKHYhRP4QTJPgIgT4+lTuCcexFjCFrJytbJDoRM7SQPhI8SRzmbrZkyiulNMlWDjC+1CYkIFFwEkKIAKkqYHTT60FZa1TEHextuX9a1fC2u6KzDsUvf8AWtawqd0UhMa9lTdxKnlaauJTEC7iUqkXUpUrAPXUqMVqdfqIagDmK8iu4rynYjlhXEU6RXMUhg7jK9ysd48PvTWz8YHcNY52hEXTTTKSI2BtlmUKJMjSAefz+NF+1l5r1xVMk5QAdfxEABQdInwofwdyLoIAJAJ5+m3jFHOzmCbFcQRZLKv3jT0twVEfzZaFuRTXsXexjjbKZrTBNNI6arPlAPnVs4dh8Io/aQuoGrHx+W9VO52Q9q6l2uF8xLkQogkECZ5ARI115Ve+G8G9ngf2fMWLAgMd/A/StZJG/KtDFrtrg83s5idATp/bXSgn2g4C1iMNcdWzZAGAkwNQCxXnpNV/E9nr9tzbt3FNwNGW6MsoR7xjVzMaCNNNDsT4ZgroJstYKAyDAGS4hEH3dOe2m4rnyXRSir0ZUwtjMF95ysk6RAB9dZ3pzG48ZBbnM5EFp5hQBPM6Dn0qb2z7IPgwzAlkL5kPMb6GqrhLIdozqoOhzGI8x4UJJq2c8/plQVbiE23w2UezUFrfnAZwD494+goGRRnB2w1q6xkrbDKrbT+FYnWYkmfDpQg+FWn7CSss/Yhe961reGXuiso7Djveta1h17oqkRJUz2KbuCnstcXFqiSDdWvKdurSpMYSuXJpoGpuJwcGomSs6GIV7lr1RXVAHDCuIp1q5AoBEHiw+7NYx2k/emtq4svcNYr2o/emhFR7OeBLN0DwPw0n4CT6Vpn2TYEK1+7GuYIPIEk6891rMOGqwZSN5+ulXvs12l/ZbV2dTJKjfYQIA60RajK2bcTUO1PFBhsM11VDNoACcsmdh4+FV+x2+us6BsK5tkxKQWB5EL7xGvIVRsDfxOOfO1wIia5rhYidDooEk/Laih4RiF71u/afKScoLq0zOkpEydNRVTnKtL+TSCRrL4aziABetDOu2YQR0MjanvZpbEKNB4k/XWs27Odt7rMEvkyNCW95Y3Bjf/qre3G7RHvCf66flUOcWTwZXftPUHC97Ytl+IIrEeD3rSvmcAuv4WAZGI5kMCJ8xWmdteNC8cgMgaRvr1is/wCP8NRcRFqcoC+ZMDNA596amMk7ROSHuWK9hLb4NiQLTEs+ggHQfhgD4R86opIHOavPHbTWcKiSM0CJB0B3UEazvyj6VQSarH0Qi49hPe9a13Dr3RWQ9gPf9a2LDjuitEZS7Flpu4KfIri4Kokg3RXlPOtKlQy1Y5AaEXLdFbzzUG4KlgQyleZakFa4K0hjJFcRT7LXBWkBB4oPuzWLdp1++jxrbeKj7s1kuM4e13EEgbGls2wx5SSIGHtQAenpUcXD7RlOxJPx1H5VYsRwpguojpQviGCOX2gG0BhBOnUfrnSSaez0/M8fjBSiO4PjJXRWKiZ8ByAA+VGsL2haypgnmCG3Ovj6wOWaqDffXXTbb1/XpTtvEsDMbjblvz+FW4I8pZGtBvEcWe5ea4O7rPTfSm8V2gfMTJA1iNOZg/MfCh5Jy5usSZiDOoA+HnFRb7jSegiB4nlU+mmV6jCq4ouXYGTlJ+Gv1qPwrGX3xdu859q5KOc0AELAA00ERRvs/wADY4e9fYR3CFkep9KA8Gh2JZ8pCsVbkrAE7+MVKaSdBNS1Zeu2rq1osVZWCkiSJ1BiDAMCZPrWYPWg9reIXP2VVMrmUZtSDG4nmDESP7DPmNVj6EXD7Ph3/Wtkse6Kxv7Pvf8AWtnw47orRGc+zyK8daeC0itUQRTapVIC0qAJhem2Nck1zmrMo7NcRXU1yTQBy1Nmu2puaQETiv7s1UeG4ZSSTpqfXnVu4t+7PlVGXExcy9TVQrls7vBhyyBHjgXKqqdt6DWrqrcA5bHxJq3Wuzdy+B7MGObtos+J/ISamJwNMLovfuRLXNtTIIXmFEbc5M7CNZQbej1Mvk4cceL2/j+yi8R7AJd+8tO1smTkdZGvIbECgOM7H4q1K91l6zry0j0rUPaHNHjrUbiGGYnwrX0VR4zgm+jKLnCbmgJAA5Dw01+dGezvZI3HXNqAZM86u2D7NZ9SOdWTh3D1t6AVyZINaNVCCI2J4ai4dljTLEDy2qqfZ92EXM5Z1FwGbZIJGxGwPzrQ8bh82VToB3iOp2WfXX0FQhhCh7vyrlk5Rkq690EkprfZnvbfsfxOGIwr3UH47RW6D4hQc/8AtrLrikEqwII0IIggjcEcjX2Th7MKomCBqR1571C432cwmNUribCXByYiHH8rrDL6Gu/gcCnR86fZ4e/61tWG90UAf7J3wt03MHc9rbmfZuQHGusPorDzg+dHbQZAFdSp6MI+tTTQNpj4FJhXgavWqiTilXhNKgZ7mrzNXf7K/SkMI/SsqY7R5NeGnRhH6Uv2R+lFMLQw1NMalthH6VL4XwmTnuDujZf4j4+FNRbY7SBg4NexCwsKp/G23oNzU3hHYjCWDnYe3u6HNcAIB/yJsvrJ8asLXCdNh0pV0RxJEerJdOiPjnOUgdNKq10EmYJ5EdQfzq0X6GYixrI3+tbxpKjNNp2A24QX1Bjx/rUqzwoj3mmpi3cp17p8dPh19Jp0sCNSI/U1ElL2OyPkKtiw1saCptpFGwFRLLA+4C/iNvVjp6TPhXWPskWyXOp0CjbXef4tPTwrJxS2yZZXN1EjXHzMW+Hly+X1rrBMgfO7BVQZmLEADXSSdtdusGmbVGOEYUeyLMP3mp/lIhflr4ZjXJiXOds0yPjGgjbcMJBBHKNfpXRNR8FgbdoRbQINJA0mBEnqY57nnT5Ndpxnq3SK9uX9NgeWtMXyQsggHlIJHwBE0Hwt/FEg3ltgd6QCVKgaKcveBJ1PvaTzooCbieBI2ttsp6HUf1HzoPirD2zlcQeXQ+Ro0L8U81xLi5HEj5jxB5GpcQsq5NKue1OBaxaLh+5I73mdAa9pKDZVosKuvhXWdfCqml5utd+2brS5oOLLT7Reope0XwqrC83WkbzdaXqIOLLObyyBprTlhjJ6cvDl+vWq9wcEuzk7CB5nUn4CPWjHD7+Z7i/w5fmX/pW8FcbIl3QRArljXJeo+IxqqcupY/hUZmA2zR0Ej4iqoQ44obxXH27A725DFRBMkRoSNtx86lWcUigh7yMQdZyqQCQBmA23AJganlVO4nd9pcZgDLHXXMO7I7p/EvQ00rAO8E4smIWGAR9ipIMmJOXw33osmDQfhX4CqnwlhbabdtWfcs093lqdQq66mJiYq28Nx1u6so0kb6FeokTusg6iRp4UpASraUD41iJu5Rsgj1O/9KOYi8LaM52UT+QHxqm2mLEsdyZPma4/KnSUfk6/Ghbcvgn4ayXK2/4jr/KNW+Wnmwq1EgDkAPSqvw3FOtwlbWYRlDZo0U9+J/zGInXLRs4yd1BpYpRhHYZYSnLSJa3AdQQfIz9K8LVBwCWkBCKFJOpgAnUmCRuBMAcqku9dCkn0c7i46aEx51Bv3takM1DDcFMQ8zU2MRBpotNLLNMCsfahxlreFgMRJX/2FKoH2rYVjhuW6/UUqpOhB63TlNoa6muL2Nz2K8alNdW0zMB1P96ErAJ8OTKg8dT6j+kVCxXEhbF+DDkIB6lhPpU5n0Pr+VUntJiwl8FtFKEnp3CGB+Rr1IwqNHK3bsvhxqW1GY5V0GxIHnGw8TTWJ4pdVx7O17VDEMDB1EkLIh50OhG1AOzvGDetrcbnmYfyFmy/FYPrTB4j7W9nNsXEUlRJ0AEzG06kawdviOAWH+P45msEeydC0S3dYQp0DHceEgET6VWFYctqk4rHJdMIjISSAqEAGNBHdnWPTpUUplEB1aeaHMPHWPl4jrSSoZ7odxPht8+VWvscGhiLaJb/AIhOZiPEkyoBPx051VgZ10+X5/repGCJDqCYExJaABvy5azoRvUS6GtsP9p8SSQoc5W3XSNDvtP9vgLtkgaAE8umY6L6SaWMvZ3Lb8h5D6U9gFlx/lGY+ZkL8sx+FeJObnO2etGCiqQTw+IVFW2wIaIgBn2iTIUA76nxqSxptmqI151ZpMry01Hw358q0l0JMlNr5V1a4koOSZ6f90P/AGhbglWBXqDpUXEY+1b90Fm8NahZHB2XLGpxphy7foVavSaiY3GuyZspBI2qiY3j1y28I7pcB1RllW8mAj416XJVZ5fF3Rpknwr027p90gfrwqgcO7alu5cGVvgKMWuNqw3PoZ+lUnYmmhrt/wAKvvh9bqxI09RXlMcexIe0QBzH1pUxB9GrsMOtQcVdyrNBzxbvBa5UXOfEspYdamcMUElumnx/t86qDcS+tXLhFkpZTMIZu8QdPe2HwgVthhcjN5LVHbnUeo+hH0qrdoMMrqCVnKTp4GQw+tWbErIYetVXjt6Nzo+hHRwDBHQHX1rubJR32QQWsFbzEnLmEgEnKrsq6DfugVMxVlEKvmHtST4EZgNkCmBEa77b1x2JUnCWiTvmI56M7GD0YTB8Qam38AltGd275YGdycuqhRyPkOvQEWqpEsicRtLlksmbKICglpG5uM4kc41g6chNJuHOLQuM1sBhmU5pL6bKBz6iNKewnEbyuwREIJO6AFhPMrqdPPb4lLwa5q1q3JQoNzkBB2ElQfGOVZO0UgdguD3rqBgoVSoOZpEjTaBLbb8/rKvcNt27OZkOeYk6SecAE6ac/PnRHhPFFS2tlwVyiAx230DfwmNOe1Qu0OKD3AoMhRy5k68t+Xwrj8rJKMTp8eKlIH2FmiXCcIf32Zu/rl/DGymOuXLQ8JmhBPfOXTpEv/tBHmRVkWzmQe8mxEd0iOUfka4MML2deSdHjiht3C3C0+0MA6AAaiNQ076+HLxogMJlYsHeDupOYE9dZI9CK8fBqxzkldCCQxXTxA0J6TtWzgZcwOoiQ8IAYAU5pHgIkfCuxYIBYItpBvdvELp1A/rFS2xDAZcPbzHY3rggeYAAzekCoeL4Qul3F3S5nu59delu0NJ8hNZPFs0WWkQ8ZxS3kiyGxDRrcINu2PHMdSPKaxLthxu7cv3LYchFOUhe7J/FPOJkQelbnx7E+yw12+y5EtIzBOZIGmc/xEwAOU180vcLEsTJJknqTqa7UtI4m9l5+z6JggEc+c1dsf2fC/eYZ8piTaJ7p/lP4T4HTyrPOxN2DV5x3EmBAHSk3Qm6RBHFFdSpaGBgqe6QQdd6VRMbhFvnMQQw3ZSATy1ka0ql5UuwjUlaTLtxFvu6q5ufeCrnc4c5ERQi7wF52pcWKceRFwVxA6+09zMC2k6T0rQ/bBlBUhkOoYGdPDrVHPBXiIorwTAG2pGYrJ1jadtjp8q3wy46omOFvSC+LvKdQfAg6VT+0ygqyt7rDcciDo3xo/xFXjZH+Kn5zPyqmdodEPdYf6lI/wDaflW0skfkv0Zr2D/2VFnwJQEZ891knac7Sp8J73+o0T7Q4cvcRWG0EKNddZ1I0GnyGm9V37KLkYN2nKbd5yD0kKwHrr8auuGtoy+2uPndwAwEyCIaAqmc2x05DlqTtF6TMmt0O8Kw2UyBqoBJ65pBj0BPqKIY9FO2rHYDnB1mNh4mh+FIHfsFQrE5lIIEKSqwBqrdQRrBmImpuGukF82XQKJUECAGaIJMQD151nLsEQeIW0GmWdOgX4SZ36A/nQZbfSuO0HH8Ol7JcYBzMTyUFlEDbXXXw0500OKWwjXMwKqCxjXYTHqdK8vzZ3NQPQ8WFRcgrweyXvMe8otjLOVcrE95wCZO+UehFWYLVf4C9xbKRluSMxjumW1Y6mDqT0oxbxAYkbERIO4mYnlyPwreEOKownPk7HXFNNaDb7Dmdh+Vdhqbv4XP75OX+EafGm4k8iJd4gSclgAnY3CO6P5R+I1xhOHKHzuS9w/iYy3kP4R4CBRBU2VRA20pu9eVO6IzcwNY8WP5UKGwcyh/bXjMmAFkf/bcVfRZuEx5qvxrB7tmK+n+OdlcNjwgxK3DkkqUuFCM8TpsTCjcVWOI/Ytgm1t4rEW9dnFu76CAvzmq5RFxZlnY8a1o+D7N3b5Vj93bj3iN/wCUc/ParN2b7C4TAju5rzDXNcy6eIUCPjNE+I4oKZnX/qsJyNoYeXYFv8GtWrfdWNtTqT5mlVZ7WdoSFy5uf50qyUW90dNqGjSlvW+tNs9vrVD/AMQu12uOu132jh9Nl2e7bAJ6VBcFV8dz60H4Rcd3721WHF4WV0PpUyaRtijx7K7i8XPOqn2lvd01ZMdhGQljMdDVbu2DfvpaHM6+Q1PyFZXZ0SpIOfZxhyuEfLEte1B55FQQB45SPU7VdThE1CgRsWK5i3MKY1I1LeojwC8Jwww6W7Y3zXGH8zaemkiiD3gyLMkBiCsxLBiACemkmelejFPijy5fcx0YspbYrGe2xzAxzUgHaY708tj41Ow4lcqyRqxuNpmY89d501iIiNqrfFLgQMxg5lysBroGDJvuO6VnxNOYztAZuqrD92SkeOQKfHVjSkqVijt0DruEwl/ML1kOZOpAJGgHdZdVGk8udBcZwHD4V7dy1cuQxP3RYOhABJksJyzlGpPvAc6aGIJOk9Rry5UOxtwviPaM0i3FtR4j3zHM5iVn/LXjwfqZb/Z6mZLHjr9F24Jig1kWiuUjdgYLAkxJiRy26Uf4MECkD95oH0ynSYA01USdfGqpwviaKhVZzkjUR7umgnb57mlwTieW/maFTUEhRJ8JAlhMHma9Kjzi9A0+j6VCF8EBlIIIkEc6ctXagB+7mOi90cyN/TpXmHwSjcQo1/vXaXP0KaxXEEUR7K4/XKD+jSAjjiROZlEgmBHhpSucQfLtQjBZA5Nu4StwscrCCsESpHgCNadx9+2k66+dcU5tN2dkKpEHH42+NZCjnP60qucX4+EUgkk9akcV4gCCY0rOO0mMLExV48bnt9F5MyiiJx3imc786VVy4xnWlXWqWjhcm3dn0QmC8KcXBDpUv9rSK8GNSseZtzPOHWwHaOQH9aJ+30ig2BvyXbqxjymB8hTzX5on0dEVo64q0oQdarvZrCj9od491YH+o/0B+NFOJYju70z2bdVW453Zvko/qTWcWLI6iSWxquLN0e60gT/mIKn/AGmuzfCw417zZhyaZ7wBHpMe6ddtBS3Bew7+zYv37jKeZIuMY9ZI9ai8O4sisJzwQYYS3KQuXXXQDblXsRX0o86XYexfGrZRs9pnQiDAQrE6AlSYExz6bVSsTiPZnv8AdBXKAdRuJGm/X1FH71zO5a7KswiFMQDPcYjRpAOsxOlVHiHD0v3jaKkWV+8NwN7NkQEK4khs26wuWSYGhrLNByxtIrFLjNMnpjEVS8ghQWPOYBMeug9aHcFBuoBu8ywAOYz3i2mwkn9A0DHs7F4qbrlSo+6dM5IcApFwQOYJaFIKmBIminCeN3LClUynWST5ZY0PgK87BicO2dXkZvUqg1YR80d4kkDl3tY3n9fV/E4rLlmARuAZggjU9JnbrQj/ABB7pJd+7sAoyg8zoN/X8qM9m+Gi63tbgi2DoOTEcvEDn1+NdbOYt/ZwlcMk+JEiNCZGnTn60SF8UF4liioMc9B016+hn0qBwDi63W9mWHtG1UbA8oBI3qALS+IuxNu4F8xNMninEBsbT/EVDS5LlActwfgbSfLxrpbt2cqq2bxBoGNYnieKffBo7wQCvdOu/fkRsPlQzFcJuBu85fQGTpuAdhpvp6VaMJw+82t66Qv8K6T5npQrjvHLa3GVYgQBHkKynGPbRcJtdFI7TKbaGTWdPjQzGrN2842X7o0mqJVQeiZuyTiLXMUqj5z1r2qbINouX260rBY866NqmhZYAmseKOoP8NMWxzrovBNM4Bu4KWJ0BMa0sp1IHcVxUDenMIgCqpBYaSo3aTqo8TMetDWHtLqpyGp8h+o9ac7QI3swi55eT3RJAWNd5ABIOgO1Zx6Msjt0QcJxl8OFFxUXOM4hSggyA0SdWjNPOZ51GxGMQ3Tct3FUHVlObfnEChtzDM7nMZOgMhgRAAAKkZhAAG3KpCcEB2b5EflWq8nMtLr8C9HHWwpxDjdlo+9g7mELcwdJiD+eu9QDY/bBkDsiMzZyYVmFtA5IGoygEkiZ10mmf8Ks29WuL6so+p86LW8ErW0dVLFBc9kwZVDe1VUYEnRwADABnvNO4ipZsjvkyXigul/JS7y6qSNVVVB5jL3T6TP6NE8GtsIfaITmYBWBynX6jQ69dKEYm4rEwdi31p5LvdGsx8p5fQ1pFnK+wvhsTb9ooYRbLKNYnLtMgCAd9PrV/t3EK9w90ch+GOa+XTp88tbGL7MmBI0G8jRo+TD/AMRR7g3GS6AicywHE+90Jn6joR5aNoRZOI8dNtfdDgkSvXuyY300+u+tccPwuExJPsboW7Mm3chCp0IFtjo2vrQTEcQQsrTCnMG5FSASQdOk/HpFMOi3VVcoJESYiDGsHpWbYy18R4hctxa4hbeBpbxKaOsbZuTipeH7QY5V+5vWcYnI5lRx/MrkEH41W7WPu4a1F3E/cRot2LoPgitLHyB+FVfFdpAHY4O0LEiGuZQHYHeANEGnialySKUWzTRxjE32XDXbltL923dZLKk6FbbG2rNyYkTA/hO9VHFoFBdmmdd6pmD40+HvpiFJNxXW5JMkwRIJO8iR60P4lxZ7jNrCkmB0E6Corltjvjo749jBcuabChdKlVmYqVKlQBsDYydq5GMcQDz0oXhsco5rUs41W00msk7OpFrw4OUAaVG4ncABFPYK73R5UL4xc3+VLOzqXRzwu6FzXDz0E6QB4+f0ob2hvNcuoUUMoXllaTmk6a9BrXWLRr1xMPZI0WTJyyeQk8z/AMpMAEgTiy9kMDpcnII1y83bzA28SKxbl0jOKj2+/gV/GXRorsI3VblxSNdRGaOfga9tY7G7q189CLl4j61L4Re9mCqhBMMQroGkgasAZmOtELvELg1Ac/E/OqTn8lcItXoipxDGKO+90dMxfltq3nXHFeN5rdtJZhkyn8IzK8sTK94EOOmpNFuGcYVyA4NrYEmT1JJgajSIjmNeYqOK4lauW1RVIuKWL9DGaCF2VYIEa7TROUmnslKKfWyp2cQefnXZuMSAoLHkAJO3KKiJcI6eoB+tFOGY68D3LwsCN5yKY2DQNTvXSzgOzw7FMJGHvEDeLVwgQNzp019K94Yl1GVmR1U+8SCoKk75jA8fSuMTxC9JnESeqE6+UAAfKoN15OYyT1YliafIdF54PwoY26tmw6Fx32AP4B3d1Bn3hoOutReN8fbDPcw1qwyXLZKs14AsCOYtxl8QTm3oT9n+OuWeIYW5abK3tVU+KscrqfAgkVbO3/DcRiuK3PZ2HuMy2pyKSNUADOdh0k9KmTpWVFW9lBuXbl1/aXWZ2PNjJ/6HhT6SdFBZjyUT8hWndm/savMA+Nui0u/s7ZzN/qbYek+dFO0uJ4dwmybeHtqLhET7zE9STqalQcuynNLSMMxtl1aHBB6Heo9SMfi2u3GuNuxmo9aGIqVKlQAqVKlQBttjsQvSveI9mUsW/aaSCoHqRV2s3RQ3tmwOEfwKEf8Amo/Os1FWaRb5Ir+GJAFe8PwH7RfCHZQWPpp9SKbwbEqP18KO9jLOW7cY81j/AHa/QUsquSO7JrGzNeMgYfF3FLEMj6EIWWdCMpGsrtsIIoa143faO2YADKmYEEknU+ZJn0FTMfez4q8x1m9cb43GNccZu95QNl1A/lGaskk/+iqkScLxW8RCM2UbKRbdY8A6H605b4oysbjC1mSW79u0CT4QAc2o68pFB8Ldyxvyp3jWLDWTJGaQirG4MyZ67COh30g1Gb+RSxxok4njNy5bW4SzNOcmCwB7ungIB00GlMthS94AIFNwAQJOrFUGp19PGh+PQm2QmgUAE89thRvsxffFYjDWypDIypI3IVy8+mU6n8qzm3KvyKlC/wABC79kN46qzL/MAf6VTONdn7mGuNaYMSI7wBCn0gzy56V9I2sPiV2fN4Ex+VdCyGdPa4dSxYQxCsNJO+/Kuxo4Ez5aW05EZTI0gKZ9YGu/OrZ2c+zPiOMXMtr2ScmvSk+QiT5xX0VhuHWrZm1hrSak5gqg9dIH51KdHb8UeQpJFc9Gd9ifsesYUi9inF28rh0yEqiZYI00LGRz/wC60O/jbVlDlKT4sATFeDh+b3pP8zfkKHcYs4a0ha4UWOkfWnRNlO7b/aEFtkWrgRo1Ed6fA7VgnFeJPfcu7Ek9aP8Ab/i1q9eItAZQd6qdMBUqVKkAqVKlQAqVKlQB9NW7lCO2OJiwq/xuo9BLfkKl2b1V7tnfl7K+Dt81A/Oogto2xq5IfwFliB5VLucVGFm4w0Gp8uY+FQ8Hi4AmgHa7iSvNoGZBPw0/OqyqmdzVqis8OuZ7pk+9J9dzTXE7v3jDov8A7GPpUX9nu2Ew98iUuAsjDmUYq6nowjXzpPjRcYsVyyAN55z+VYqLRjzTQ7bv6R0r021JzHeh5u7+g+Vdi8Y03qOLXRfJBE3pTL4j6irV9m1lmxjPbXMUVm6b93/kaqNlBlUTMwenOrz9kthmu3iDlhE+ZOnyqccfrr/ZOZ/SzU04yV0uIy+JGnxqYmPRykEe9/xb41GQ3R+MEeNeO8MhIX3jqAJ9xuddzR54cfERND8RiXOifOmhdzyNOcnX02Ir1EUbt86SAj3cPcOr3SB0FZt9o/ELVpSBLN1Yz8BV07UcbS1bMMJjlqa+e+1HFWv3SSTA61XsAIuPJJPOuKVKoGKlSpUAKlSr2KAPKVKlQB9DWDVb7ZH761/I31pUqmPaNsP3oYwtw+zBnUkj6VUse5OKAJ0yn60qVGT7jtfQRxNhX4Xg8wmMc9sb6K+rD1ImpnaDs3hbIsG3ajOzhu87SFyR7zHqaVKqOB/cVzjuCtooKqAf1yNA7nuzSpUe4Xo4umCCN/6Vqv2aaLcI3y2/+f8ASlSrP/OJb+2X6NAwt1m3M0zibhF1AD1+hpUq3kc4QS620mm0UMYbX+wpUqlDAXbGyq2mgRpXz/jT328zSpU30JDFKlSqRipUqVACFdNSpUAc0qVKgD//2Q==\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e1\",\n    \"name\": \"employee16\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				},
				{
					"name": "SaveEmployeePhoto1_female",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5cbf6d0-f047-4768-866f-56c90ba1df1a",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"photoId_female_1\", jsonData.id);",
									"        ",
									"    ",
									"    ",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"     tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e6\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee3\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e6\",\n    \"name\": \"employee3\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				},
				{
					"name": "SaveEmployeePhoto2_female",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "719fd4ad-9f67-4441-a201-8bc3bce6f948",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"photoId_female_2\", jsonData.id);",
									"    ",
									"    ",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"     tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e3\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee6\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e3\",\n    \"name\": \"employee6\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				},
				{
					"name": "SaveEmployeePhoto3_female",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "991c1fbc-7865-4773-b6ed-28abcfdc5767",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"photoId_female_3\", jsonData.id);",
									"        ",
									"    ",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"     tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e1\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee9\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e1\",\n    \"name\": \"employee9\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				},
				{
					"name": "SaveEmployeePhoto4_female",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "beb41216-06b2-4fae-9332-e6c24fbc793f",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"photoId_female_4\", jsonData.id);",
									"        ",
									"   ",
									"    var metadataID = \"\";",
									"    var metadataName = \"employee10\";",
									"    var metadataType = \"ABC Employee\";",
									"    ",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e1\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee10\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e1\",\n    \"name\": \"employee10\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				},
				{
					"name": "SaveEmployeePhoto5_female",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "790e6977-1833-49f1-b69d-3e903078c338",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"photoId_female_5\", jsonData.id); ",
									"    ",
									"    ",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"     tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e1\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee11\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e1\",\n    \"name\": \"employee11\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				},
				{
					"name": "SaveEmployeePhoto6_female",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de140ee6-e871-4c56-ac5e-d76b8f3aea1f",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"photoId_female_6\", jsonData.id);",
									"        ",
									"    ",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e1\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee12\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e1\",\n    \"name\": \"employee12\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				},
				{
					"name": "SaveEmployeePhoto7_female",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19bb7e88-0d9e-45f8-aa07-7015fbc3e922",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"photoId_female_7\", jsonData.id);",
									"   ",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"     tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e1\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee13\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e1\",\n    \"name\": \"employee13\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				},
				{
					"name": "SaveEmployeePhoto8_female",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17b10a19-8405-4325-845e-41f0e564f7b6",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"photoId_female_8\", jsonData.id);",
									"   ",
									"    tests[\"Response Body has Correct Photo ID\"] = responseBody.has(jsonData.id);",
									"    tests[\"Response Body has Correct Metadata ID\"] = responseBody.has(\"\\\"id\\\":\\\"11a36fad-1933-47d3-88e2-31b540c455e1\\\"\");",
									"    tests[\"Response Body has Correct Metadata Name\"] = responseBody.has(\"\\\"name\\\":\\\"employee14\\\"\");",
									"    tests[\"Response Body has Correct Metadata Type\"] = responseBody.has(\"\\\"type\\\":\\\"ABC Employee\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"\",\n  \"metadata\": {\n    \"id\": \"11a36fad-1933-47d3-88e2-31b540c455e1\",\n    \"name\": \"employee14\",\n    \"type\": \"ABC Employee\"\n  }\n}"
						},
						"url": {
							"raw": "{{staypuft}}/userPhoto",
							"host": [
								"{{staypuft}}"
							],
							"path": [
								"userPhoto"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Employees",
			"description": null,
			"item": [
				{
					"name": "createEmployee",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "666de056-cb1f-48dd-8119-01033bac3521",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"employeeUserId\", jsonData.userId);",
									"    postman.setEnvironmentVariable(\"employeeId\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"employeeTokenId\", jsonData.token.id);",
									"    postman.setEnvironmentVariable(\"EmpTokenExpirationTime\", jsonData.token.expirationTime);",
									"    postman.setEnvironmentVariable(\"employeeEmail\", jsonData.email);",
									"    ",
									"    tests[\"Response Body has Correct Employee id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Email id\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeEmail\")+\"\\\"\");",
									"    tests[\"Response Body has Correct First name\"] =  responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Last name\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct addr1\"] = responseBody.has(\"address1\");",
									"    tests[\"Response Body has Correct addr2\"] = responseBody.has(\"address2\");",
									"    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
									"    tests[\"Response Body has Correct State\"] =  responseBody.has(\"state\");",
									"    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
									"    tests[\"Response Body has Correct Zip code\"] =  responseBody.has(\"zipCode\");",
									"    tests[\"Response Body has Correct Phone number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"    tests[\"Response Body has Correct photo Id\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhotoId\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "700b6baf-f587-4d45-8668-15aea4eb7a8a",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"var orgNumber = Math.floor(Math.random() * 9000000) + 1000000;",
									"",
									"postman.setEnvironmentVariable(\"orgNumber\", orgNumber);",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box #{{orgNumber}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/employee",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEmployee 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca3d4ab8-a46a-4c9e-a0fd-a2d8a6752a06",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"employeeUserId_2\", jsonData.userId);",
									"    postman.setEnvironmentVariable(\"employeeId_2\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"employeeTokenId_2\", jsonData.token.id);",
									"    postman.setEnvironmentVariable(\"EmpTokenExpirationTime_2\", jsonData.token.expirationTime);",
									"    postman.setEnvironmentVariable(\"employeeEmail_2\", jsonData.email);",
									"    ",
									"    tests[\"Response Body has Correct Employee id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId_2\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Email id\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeEmail_2\")+\"\\\"\");",
									"    tests[\"Response Body has Correct First name\"] =  responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Last name\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct addr1\"] = responseBody.has(\"address1\");",
									"    tests[\"Response Body has Correct addr2\"] = responseBody.has(\"address2\");",
									"    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
									"    tests[\"Response Body has Correct State\"] =  responseBody.has(\"state\");",
									"    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
									"    tests[\"Response Body has Correct Zip code\"] =  responseBody.has(\"zipCode\");",
									"    tests[\"Response Body has Correct Phone number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"    tests[\"Response Body has Correct photo Id\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhotoId\")+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3b63656b-5cb9-4582-9684-ba967f1c6167",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box #{{orgNumber}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/employee",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEmployee 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8868ee77-c442-4790-9b0f-c313bded8de5",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"employeeUserId\", jsonData.userId);",
									"    postman.setEnvironmentVariable(\"employeeId_3\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"employeeTokenId\", jsonData.token.id);",
									"    postman.setEnvironmentVariable(\"EmpTokenExpirationTime\", jsonData.token.expirationTime);",
									"    postman.setEnvironmentVariable(\"employeeEmail_3\", jsonData.email);",
									"    ",
									"    tests[\"Response Body has Correct Employee id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId_3\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Email id\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeEmail_3\")+\"\\\"\");",
									"    tests[\"Response Body has Correct First name\"] =  responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Last name\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct addr1\"] = responseBody.has(\"address1\");",
									"    tests[\"Response Body has Correct addr2\"] = responseBody.has(\"address2\");",
									"    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
									"    tests[\"Response Body has Correct State\"] =  responseBody.has(\"state\");",
									"    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
									"    tests[\"Response Body has Correct Zip code\"] =  responseBody.has(\"zipCode\");",
									"    tests[\"Response Body has Correct Phone number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"    tests[\"Response Body has Correct photo Id\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhotoId\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b8753fe0-c702-4f05-ac59-6e0f511ccaf8",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box #{{orgNumber}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/employee",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEmployee 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62f28205-8098-4806-b973-640644e95448",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"employeeUserId\", jsonData.userId);",
									"    postman.setEnvironmentVariable(\"employeeId_4\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"employeeTokenId\", jsonData.token.id);",
									"    postman.setEnvironmentVariable(\"EmpTokenExpirationTime\", jsonData.token.expirationTime);",
									"    postman.setEnvironmentVariable(\"employeeEmail_4\", jsonData.email);",
									"    ",
									"    tests[\"Response Body has Correct Employee id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId_4\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Email id\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeEmail_4\")+\"\\\"\");",
									"    tests[\"Response Body has Correct First name\"] =  responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Last name\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct addr1\"] = responseBody.has(\"address1\");",
									"    tests[\"Response Body has Correct addr2\"] = responseBody.has(\"address2\");",
									"    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
									"    tests[\"Response Body has Correct State\"] =  responseBody.has(\"state\");",
									"    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
									"    tests[\"Response Body has Correct Zip code\"] =  responseBody.has(\"zipCode\");",
									"    tests[\"Response Body has Correct Phone number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"    tests[\"Response Body has Correct photo Id\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhotoId\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b5ab9df0-47b4-4ad0-ad12-78ac361de79f",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box #{{orgNumber}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/employee",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEmployee 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "644de9a3-4f76-4fe0-8841-b2b88dc1a230",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"employeeUserId\", jsonData.userId);",
									"    postman.setEnvironmentVariable(\"employeeId_5\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"employeeTokenId\", jsonData.token.id);",
									"    postman.setEnvironmentVariable(\"EmpTokenExpirationTime\", jsonData.token.expirationTime);",
									"    postman.setEnvironmentVariable(\"employeeEmail_5\", jsonData.email);",
									"    ",
									"    tests[\"Response Body has Correct Employee id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId_5\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Email id\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeEmail_5\")+\"\\\"\");",
									"    tests[\"Response Body has Correct First name\"] =  responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Last name\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct addr1\"] = responseBody.has(\"address1\");",
									"    tests[\"Response Body has Correct addr2\"] = responseBody.has(\"address2\");",
									"    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
									"    tests[\"Response Body has Correct State\"] =  responseBody.has(\"state\");",
									"    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
									"    tests[\"Response Body has Correct Zip code\"] =  responseBody.has(\"zipCode\");",
									"    tests[\"Response Body has Correct Phone number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"    tests[\"Response Body has Correct photo Id\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhotoId\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5672e134-b300-4b6e-8eb6-28034fc9cc36",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box #{{orgNumber}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/employee",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEmployee 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3809a7a5-a614-43f6-a24d-55358a946cb8",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"employeeUserId\", jsonData.userId);",
									"    postman.setEnvironmentVariable(\"employeeId_6\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"employeeTokenId\", jsonData.token.id);",
									"    postman.setEnvironmentVariable(\"EmpTokenExpirationTime\", jsonData.token.expirationTime);",
									"    postman.setEnvironmentVariable(\"employeeEmail_6\", jsonData.email);",
									"    ",
									"    tests[\"Response Body has Correct Employee id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId_6\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Email id\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeEmail_6\")+\"\\\"\");",
									"    tests[\"Response Body has Correct First name\"] =  responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Last name\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct addr1\"] = responseBody.has(\"address1\");",
									"    tests[\"Response Body has Correct addr2\"] = responseBody.has(\"address2\");",
									"    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
									"    tests[\"Response Body has Correct State\"] =  responseBody.has(\"state\");",
									"    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
									"    tests[\"Response Body has Correct Zip code\"] =  responseBody.has(\"zipCode\");",
									"    tests[\"Response Body has Correct Phone number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"    tests[\"Response Body has Correct photo Id\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhotoId\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "55a3b829-f542-4995-bd54-725d0fc3c479",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box #{{orgNumber}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/employee",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEmployee 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "497b3b04-f16c-4c0b-86fd-ec940f41cb66",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"employeeUserId\", jsonData.userId);",
									"    postman.setEnvironmentVariable(\"employeeId_7\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"employeeTokenId\", jsonData.token.id);",
									"    postman.setEnvironmentVariable(\"EmpTokenExpirationTime\", jsonData.token.expirationTime);",
									"    postman.setEnvironmentVariable(\"employeeEmail_7\", jsonData.email);",
									"    ",
									"    tests[\"Response Body has Correct Employee id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId_7\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Email id\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeEmail_7\")+\"\\\"\");",
									"    tests[\"Response Body has Correct First name\"] =  responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Last name\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct addr1\"] = responseBody.has(\"address1\");",
									"    tests[\"Response Body has Correct addr2\"] = responseBody.has(\"address2\");",
									"    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
									"    tests[\"Response Body has Correct State\"] =  responseBody.has(\"state\");",
									"    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
									"    tests[\"Response Body has Correct Zip code\"] =  responseBody.has(\"zipCode\");",
									"    tests[\"Response Body has Correct Phone number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"    tests[\"Response Body has Correct photo Id\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhotoId\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f2a9dbaa-97f9-4025-b782-245353a63bdb",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box #{{orgNumber}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/employee",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEmployee 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a7f4f78-7f0d-494b-98de-30f9e3fa3ae4",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"employeeUserId\", jsonData.userId);",
									"    postman.setEnvironmentVariable(\"employeeId_8\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"employeeTokenId\", jsonData.token.id);",
									"    postman.setEnvironmentVariable(\"EmpTokenExpirationTime\", jsonData.token.expirationTime);",
									"    postman.setEnvironmentVariable(\"employeeEmail_8\", jsonData.email);",
									"    ",
									"    tests[\"Response Body has Correct Employee id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId_8\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Email id\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeEmail_8\")+\"\\\"\");",
									"    tests[\"Response Body has Correct First name\"] =  responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Last name\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct addr1\"] = responseBody.has(\"address1\");",
									"    tests[\"Response Body has Correct addr2\"] = responseBody.has(\"address2\");",
									"    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
									"    tests[\"Response Body has Correct State\"] =  responseBody.has(\"state\");",
									"    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
									"    tests[\"Response Body has Correct Zip code\"] =  responseBody.has(\"zipCode\");",
									"    tests[\"Response Body has Correct Phone number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"    tests[\"Response Body has Correct photo Id\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhotoId\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "855423e0-5a64-4f78-9346-1da985988068",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box #{{orgNumber}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/employee",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEmployee 9",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c3b1e99-84ac-4b50-a93a-8f76d551aef5",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"employeeUserId\", jsonData.userId);",
									"    postman.setEnvironmentVariable(\"employeeId_9\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"employeeTokenId\", jsonData.token.id);",
									"    postman.setEnvironmentVariable(\"EmpTokenExpirationTime\", jsonData.token.expirationTime);",
									"    postman.setEnvironmentVariable(\"employeeEmail_9\", jsonData.email);",
									"    ",
									"    postman.setEnvironmentVariable(\"getEmpFirstName\", jsonData.firstName);",
									"    postman.setEnvironmentVariable(\"getEmpLastName\", jsonData.lastName);",
									"    postman.setEnvironmentVariable(\"getEmpEmailId\", jsonData.email);",
									"    ",
									"    ",
									"    tests[\"Response Body has Correct Employee id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId_9\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Email id\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeEmail_9\")+\"\\\"\");",
									"    tests[\"Response Body has Correct First name\"] =  responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Last name\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct addr1\"] = responseBody.has(\"address1\");",
									"    tests[\"Response Body has Correct addr2\"] = responseBody.has(\"address2\");",
									"    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
									"    tests[\"Response Body has Correct State\"] =  responseBody.has(\"state\");",
									"    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
									"    tests[\"Response Body has Correct Zip code\"] =  responseBody.has(\"zipCode\");",
									"    tests[\"Response Body has Correct Phone number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"    tests[\"Response Body has Correct photo Id\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhotoId\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "439d1fee-4035-4c0c-bc76-2c54715ff475",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box #{{orgNumber}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/employee",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEmployee 10",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2372454c-96aa-4f10-9b59-46a6cf37a755",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"employeeUserId\", jsonData.userId);",
									"    postman.setEnvironmentVariable(\"employeeId_10\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"employeeTokenId_3\", jsonData.token.id);",
									"    postman.setEnvironmentVariable(\"EmpTokenExpirationTime\", jsonData.token.expirationTime);",
									"    postman.setEnvironmentVariable(\"employeeEmail_10\", jsonData.email);",
									"    postman.setEnvironmentVariable(\"employeeFirstName\", jsonData.firstName);",
									"    postman.setEnvironmentVariable(\"employeeLastName\", jsonData.lastName);",
									"     postman.setEnvironmentVariable(\"employeePhoneNumber\", jsonData.phone.number);",
									"    ",
									"    tests[\"Response Body has Correct Employee id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId_10\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Email id\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeEmail_10\")+\"\\\"\");",
									"    tests[\"Response Body has Correct First name\"] =  responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Last name\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"    tests[\"Response Body has Correct addr1\"] = responseBody.has(\"address1\");",
									"    tests[\"Response Body has Correct addr2\"] = responseBody.has(\"address2\");",
									"    tests[\"Response Body has Correct City\"] = responseBody.has(\"city\");",
									"    tests[\"Response Body has Correct State\"] =  responseBody.has(\"state\");",
									"    tests[\"Response Body has Correct Country\"] = responseBody.has(\"country\");",
									"    tests[\"Response Body has Correct Zip code\"] =  responseBody.has(\"zipCode\");",
									"    tests[\"Response Body has Correct Phone number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"    tests[\"Response Body has Correct photo Id\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhotoId\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "530f477a-aef2-44b0-9174-5b659f925f5b",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Golden','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\" : \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"address\" : {\r\n    \"address1\" : \"10 Fit Lane\",\r\n    \"address2\" : \"PO Box #{{orgNumber}}\",\r\n    \"city\" : \"Little Rock\",\r\n    \"state\" : \"{{randState}}\",\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"{{randZipCode}}\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"{{randPhoneNumber}}\"\r\n  },\r\n  \"userType\" : \"Customer\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/employee",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"employee"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UpdatePassword",
			"description": null,
			"item": [
				{
					"name": "UpdatePassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dff5df04-b6ad-4985-97b9-f200d05733b3",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5bec4b57-ca0a-47d2-b9f3-797bbbc64f00",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\" : \"password2\"\r\n}"
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/user/{{employeeUserId}}/password?token={{employeeTokenId_3}}",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"user",
								"{{employeeUserId}}",
								"password"
							],
							"query": [
								{
									"key": "token",
									"value": "{{employeeTokenId_3}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Documents",
			"description": null,
			"item": [
				{
					"name": "uploadTermsAndConditionsDoc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbc652ed-3977-472a-9645-8b07103e013a",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"termsId\", jsonData.location.termDocId);",
									"    ",
									"    tests[\"Response Body has Correct location.id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct location.termDocId\"] = responseBody.has(\"\\\"termDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"accountNumber\": \"123-456\",\r\n  \"document\": \"TERMS AND CONDITIONS - The use of this website is subject to the following terms of use: \\n\\n The content of the pages of this website is for your general information and use only. It is subject to change without notice.  \\n\\nThis website uses cookies to monitor browsing preferences. If you do allow cookies to be used, the following personal information may be stored by us for use by third parties: [insert list of information].  \\n\\nNeither we nor any third parties provide any warranty or guarantee as to the accuracy, timeliness, performance, completeness or suitability of the information and materials found or offered on this website for any particular purpose. You acknowledge that such information and materials may contain inaccuracies or errors and we expressly exclude liability for any such inaccuracies or errors to the fullest extent permitted by law.  \\n\\nYour use of any information or materials on this website is entirely at your own risk, for which we shall not be liable. It shall be your own responsibility to ensure that any products, services or information available through this website meet your specific requirements.  \\n\\nThis website contains material which is owned by or licensed to us. This material includes, but is not limited to, the design, layout, look, appearance and graphics. Reproduction is prohibited other than in accordance with the copyright notice, which forms part of these terms and conditions.  \\n\\nAll trade marks reproduced in this website which are not the property of, or licensed to, the operator are acknowledged on the website.  \\n\\nUnauthorised use of this website may give rise to a claim for damages and/or be a criminal offence.  \\n\\nFrom time to time this website may also include links to other websites. These links are provided for your convenience to provide further information. They do not signify that we endorse the website(s). We have no responsibility for the content of the linked website(s).  \\n\\nYour use of this website and any dispute arising out of such use of the website is subject to the laws of England, Northern Ireland, Scotland and Wales.\",\r\n  \"locationName\": \"Sherwood\"\r\n}"
						},
						"url": {
							"raw": "{{my-organization}}/{{organizationId}}/{{locationId}}/document/terms",
							"host": [
								"{{my-organization}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"document",
								"terms"
							]
						}
					},
					"response": []
				},
				{
					"name": "uploadWaiverDoc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9eca8605-261a-46bc-9bb1-bafcaa53f6ee",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"waiverId\", jsonData.location.waiverDocId);",
									"    ",
									"    tests[\"Response Body has Correct location id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct location waiverDocId\"] = responseBody.has(\"\\\"waiverDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct location.termDocId\"] = responseBody.has(\"\\\"termDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"accountNumber\": \"123-456\",\r\n  \"document\": \"WAIVER - The use of this website is subject to the following terms of use: \\n\\n The content of the pages of this website is for your general information and use only. It is subject to change without notice.  \\n\\nThis website uses cookies to monitor browsing preferences. If you do allow cookies to be used, the following personal information may be stored by us for use by third parties: [insert list of information].  \\n\\nNeither we nor any third parties provide any warranty or guarantee as to the accuracy, timeliness, performance, completeness or suitability of the information and materials found or offered on this website for any particular purpose. You acknowledge that such information and materials may contain inaccuracies or errors and we expressly exclude liability for any such inaccuracies or errors to the fullest extent permitted by law.  \\n\\nYour use of any information or materials on this website is entirely at your own risk, for which we shall not be liable. It shall be your own responsibility to ensure that any products, services or information available through this website meet your specific requirements.  \\n\\nThis website contains material which is owned by or licensed to us. This material includes, but is not limited to, the design, layout, look, appearance and graphics. Reproduction is prohibited other than in accordance with the copyright notice, which forms part of these terms and conditions.  \\n\\nAll trade marks reproduced in this website which are not the property of, or licensed to, the operator are acknowledged on the website.  \\n\\nUnauthorised use of this website may give rise to a claim for damages and/or be a criminal offence.  \\n\\nFrom time to time this website may also include links to other websites. These links are provided for your convenience to provide further information. They do not signify that we endorse the website(s). We have no responsibility for the content of the linked website(s).  \\n\\nYour use of this website and any dispute arising out of such use of the website is subject to the laws of England, Northern Ireland, Scotland and Wales.\",\r\n  \"locationName\": \"Sherwood\"\r\n}"
						},
						"url": {
							"raw": "{{my-organization}}/{{organizationId}}/{{locationId}}/document/waiver",
							"host": [
								"{{my-organization}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"document",
								"waiver"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Event/Item Category and Promo Code",
			"description": null,
			"item": [
				{
					"name": "CreateEventCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e5b9caf-0988-4195-adf7-237f2d7f614b",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventCategoryId\", jsonData.id);",
									"",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");    ",
									"    tests[\"Response Body has Correct Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
									"    tests[\"Response Body has Name\"] =responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "39089364-adfc-454b-8b9f-4dbbdb8bd98a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Yoga\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateEventCategory1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f31698a-8b4b-40f1-8180-46d1205ba53c",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventCategoryId1\", jsonData.id);",
									"    ",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");    ",
									"    tests[\"Response Body has Correct Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId1\")+\"\\\"\");",
									"    tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b7bddb01-901f-4784-8254-744ec228cf84",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Video Games\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateEventCategory2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8bb50de-5d50-4557-826b-abd62e6a99ce",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventCategoryId2\", jsonData.id);",
									"",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");    ",
									"    tests[\"Response Body has Correct Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId2\")+\"\\\"\");",
									"    tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\");",
									"",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f4f0fc2d-3262-4e0e-b6e8-0d7b9381765e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Adventure\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get/Put Event Category",
			"description": null,
			"item": [
				{
					"name": "getEventCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb1d6b80-31b9-4021-bcd9-0709a871cd9c",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if(responseCode.code==200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"    ",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");    ",
									"    tests[\"Response Body has Correct Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
									"    tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory",
								"{{eventCategoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateEventCategorybyID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26e71c09-7f2c-4d94-95db-e5d8393b805f",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    //postman.setEnvironmentVariable(\"eventCategoryId1\", jsonData.id);",
									"    ",
									"     tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");    ",
									"    tests[\"Response Body has Correct Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
									"    tests[\"Response Body has Name\"] =responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "34657a65-5676-4eb2-838a-db95226e4eb1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Movies\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory",
								"{{eventCategoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEventCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ca87798-78ce-4f1b-ba17-51a6e0bf6f96",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} ",
									"else if(responseCode.code==200) ",
									"{",
									"    tests[\"Response Body has Name\"] = responseBody.has(\"name\");",
									"    tests[\"Response Body has Correct Event CategoryId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Event Category Id1\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId1\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Event Category Id2\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId2\")+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has numberOfElements\"] = responseBody.has(\"numberOfElements\");",
									"    tests[\"Response Body has unsorted\"] = responseBody.has(\"unsorted\");",
									"    tests[\"Response Body has sorted\"] = responseBody.has(\"sorted\");",
									"    tests[\"Response Body has pageSize\"] = responseBody.has(\"pageSize\");",
									"    tests[\"Response Body has pageNumber\"] = responseBody.has(\"pageNumber\");",
									"    tests[\"Response Body has offset\"] = responseBody.has(\"offset\");",
									"    tests[\"Response Body has paged\"] = responseBody.has(\"paged\");",
									"    tests[\"Response Body has unpaged\"] = responseBody.has(\"unpaged\");",
									"    tests[\"Response Body has total\"] = responseBody.has(\"total\");",
									"    tests[\"Response Body has totalPages\"] = responseBody.has(\"totalPages\");",
									"    tests[\"Response Body has last\"] = responseBody.has(\"last\");",
									"    tests[\"Response Body has first\"] = responseBody.has(\"first\");",
									"    tests[\"Response Body has totalElements\"] = responseBody.has(\"totalElements\");",
									"    tests[\"Response Body has size\"] = responseBody.has(\"size\");",
									"    tests[\"Response Body has number\"] = responseBody.has(\"number\");",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory"
							]
						}
					},
					"response": []
				},
				{
					"name": "patchUpdateEventCategorybyID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "006c947c-eed6-47b4-a725-8d29d1b57e0a",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    ",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\");",
									"}",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ac707f20-34a5-4b17-91bd-13b5f33aa701",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Gym\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory",
								"{{eventCategoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEventCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cbe3732-c547-4ad4-a77f-84e1a42fefb6",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} ",
									"else if(responseCode.code==200) ",
									"{",
									"    ",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId1\")+\"\\\"\");",
									"    tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId2\")+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has numberOfElements\"] = responseBody.has(\"numberOfElements\");",
									"    tests[\"Response Body has unsorted\"] = responseBody.has(\"unsorted\");",
									"    tests[\"Response Body has sorted\"] = responseBody.has(\"sorted\");",
									"    tests[\"Response Body has pageSize\"] = responseBody.has(\"pageSize\");",
									"    tests[\"Response Body has pageNumber\"] = responseBody.has(\"pageNumber\");",
									"    tests[\"Response Body has offset\"] = responseBody.has(\"offset\");",
									"    tests[\"Response Body has paged\"] = responseBody.has(\"paged\");",
									"    tests[\"Response Body has unpaged\"] = responseBody.has(\"unpaged\");",
									"    tests[\"Response Body has total\"] = responseBody.has(\"total\");",
									"    tests[\"Response Body has totalPages\"] = responseBody.has(\"totalPages\");",
									"    tests[\"Response Body has last\"] = responseBody.has(\"last\");",
									"    tests[\"Response Body has first\"] = responseBody.has(\"first\");",
									"    tests[\"Response Body has totalElements\"] = responseBody.has(\"totalElements\");",
									"    tests[\"Response Body has size\"] = responseBody.has(\"size\");",
									"    tests[\"Response Body has number\"] = responseBody.has(\"number\");",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Event Levels",
			"description": null,
			"item": [
				{
					"name": "getEventLevels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4885b658-0c4a-4c83-844e-900628952905",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    const levels =  jsonData.content[0].id;",
									"    const levels2 =  jsonData.content[1].id;",
									"    const levels3 =  jsonData.content[2].id;",
									"    ",
									"    postman.setEnvironmentVariable(\"eventLevelId_beginner\", levels);",
									"    postman.setEnvironmentVariable(\"eventLevelId_intermediate\", levels2);",
									"    postman.setEnvironmentVariable(\"eventLevelId_advanced\", levels3);",
									"    ",
									"    postman.setEnvironmentVariable(\"eventLevelId1\", levels);",
									"    postman.setEnvironmentVariable(\"eventLevelId2\", levels2);",
									"    postman.setEnvironmentVariable(\"eventLevelId3\", levels3);",
									"    ",
									"tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\\\"Beginner\\\"\");",
									"tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\\\"Intermediate\\\"\");",
									"tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\\\"Advanced\\\"\");",
									"tests[\"Response Body has Correct Event Level for Begineer\"] = responseBody.has(postman.getEnvironmentVariable(\"eventLevelId_beginner\"));",
									"tests[\"Response Body has Correct Event Level for Intermediate\"] = responseBody.has(postman.getEnvironmentVariable(\"eventLevelId_intermediate\"));",
									"tests[\"Response Body has Correct Event Level for Advanced\"] = responseBody.has(postman.getEnvironmentVariable(\"eventLevelId_advanced\"));",
									"tests[\"Response Body has pageable\"] = responseBody.has(\"INSTANCE\");",
									"tests[\"Response Body has totalPages\"] = responseBody.has(\"\\\"totalPages\\\":1\");",
									"tests[\"Response Body has last\"] = responseBody.has(\"\\\"last\\\":true\");",
									"tests[\"Response Body has totalElements\"] = responseBody.has(\"\\\"totalElements\\\":4\");",
									"tests[\"Response Body has unsorted\"] = responseBody.has(\"\\\"unsorted\\\":true\");",
									"tests[\"Response Body has sorted\"] = responseBody.has(\"\\\"sorted\\\":false\");",
									"tests[\"Response Body has first\"] = responseBody.has(\"\\\"first\\\":true\");",
									"tests[\"Response Body has numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":4\");",
									"tests[\"Response Body has size\"] = responseBody.has(\"\\\"size\\\":0\");",
									"tests[\"Response Body has number\"] = responseBody.has(\"\\\"number\\\":0\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventLevel",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventLevel"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEventLevels_test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c979b96-476e-4042-b6c2-7a980ba30f28",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if(responseCode.code==200) {",
									"    ",
									"tests[\"Response Body has Name\"] = responseBody.has(\"Beginner\");",
									"tests[\"Response Body has Name\"] = responseBody.has(\"Intermediate\");",
									"tests[\"Response Body has Name\"] = responseBody.has(\"Advanced\");",
									"tests[\"Response Body has Correct Event Level for Begineer\"] = responseBody.has(postman.getEnvironmentVariable(\"eventLevelId_beginner\"));",
									"tests[\"Response Body has Correct Event Level for Intermediate\"] = responseBody.has(postman.getEnvironmentVariable(\"eventLevelId_intermediate\"));",
									"tests[\"Response Body has Correct Event Level for Advanced\"] = responseBody.has(postman.getEnvironmentVariable(\"eventLevelId_advanced\"));",
									"tests[\"Response Body has pageable\"] = responseBody.has(\"INSTANCE\");",
									"tests[\"Response Body has totalPages\"] = responseBody.has(\"\\\"totalPages\\\":1\");",
									"tests[\"Response Body has last\"] = responseBody.has(\"\\\"last\\\":true\");",
									"tests[\"Response Body has totalElements\"] = responseBody.has(\"\\\"totalElements\\\":4\");",
									"tests[\"Response Body has unsorted\"] = responseBody.has(\"\\\"unsorted\\\":true\");",
									"tests[\"Response Body has sorted\"] = responseBody.has(\"\\\"sorted\\\":false\");",
									"tests[\"Response Body has first\"] = responseBody.has(\"\\\"first\\\":true\");",
									"tests[\"Response Body has numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":4\");",
									"tests[\"Response Body has size\"] = responseBody.has(\"\\\"size\\\":0\");",
									"tests[\"Response Body has number\"] = responseBody.has(\"\\\"number\\\":0\");",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventLevel",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventLevel"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteEventCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "debe3188-3811-4a16-bd82-d362a4f9f69a",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if(responseCode.code==200) {",
									"",
									"tests[\"Response Body has Name\"] = responseBody.has(\"Adventure\");",
									"tests[\"Response Body has Correct locationID\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));",
									"tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId2\"));    ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e766f3f-3a84-4b2c-819a-9fab07816d1d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId2}}",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory",
								"{{eventCategoryId2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Events",
			"description": null,
			"item": [
				{
					"name": "Create Event Type - Yoga",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55b0a19d-14d6-4ea5-a2a0-819443e8b7d4",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventTypeId_yoga\", jsonData.id);",
									"    ",
									"tests[\"Response Body has Name\"] = responseBody.has(\"Yoga\");",
									"tests[\"Response Body has Event Type Id for Yoga\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_yoga\"));",
									"tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
									"tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
									"tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
									"tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
									"tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\"); ",
									"tests[\"Response Body has Correct eventLevelId\"] = responseBody.has(jsonData.eventLevelId);",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Yoga\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory",
								"{{eventCategoryId}}",
								"eventType"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Event Type - P90X",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6740882d-8803-40f2-a7b6-c93ccb850e35",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventTypeId_p90x\", jsonData.id);",
									"",
									"tests[\"Response Body has Name\"] = responseBody.has(\"P90X\");",
									"tests[\"Response Body has Event Type Id for Yoga\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_p90x\"));",
									"tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
									"tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
									"tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
									"tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
									"tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\"); ",
									"tests[\"Response Body has Correct eventLevelId\"] = responseBody.has(jsonData.eventLevelId);",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"P90X\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory",
								"{{eventCategoryId}}",
								"eventType"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Event Type - Pilates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33575790-7086-4ac4-ad5f-fe6b79e22997",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventTypeId_pilates\", jsonData.id);",
									"    ",
									"tests[\"Response Body has Name\"] = responseBody.has(\"Pilates\");",
									"tests[\"Response Body has Event Type Id for Yoga\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_pilates\"));",
									"tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
									"tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
									"tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
									"tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
									"tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\"); ",
									"tests[\"Response Body has Correct eventLevelId\"] = responseBody.has(jsonData.eventLevelId);",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Pilates\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory",
								"{{eventCategoryId}}",
								"eventType"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Event Type - Zumba",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "087335f9-e5f6-4934-ae4f-84412e8b9b0d",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventTypeId_zumba\", jsonData.id);",
									"    ",
									"tests[\"Response Body has Name\"] = responseBody.has(\"Zumba\");",
									"tests[\"Response Body has Event Type Id for Yoga\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_zumba\"));",
									"tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
									"tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
									"tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
									"tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
									"tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\"); ",
									"tests[\"Response Body has Correct eventLevelId\"] = responseBody.has(jsonData.eventLevelId);",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Zumba\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory",
								"{{eventCategoryId}}",
								"eventType"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Event Type - Cycling",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b186623a-0e1b-41f8-90e8-3ac965856ed6",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventTypeId_cycling\", jsonData.id);",
									"    ",
									"tests[\"Response Body has Name\"] = responseBody.has(\"Cycling\");",
									"tests[\"Response Body has Event Type Id for Yoga\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_cycling\"));",
									"tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
									"tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
									"tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
									"tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
									"tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\"); ",
									"tests[\"Response Body has Correct eventLevelId\"] = responseBody.has(jsonData.eventLevelId);",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Cycling\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory",
								"{{eventCategoryId}}",
								"eventType"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Event Type - Aerobics",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a24ee62-b369-409e-90d9-8ad0675eac72",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventTypeId_aerobics\", jsonData.id);",
									"",
									"tests[\"Response Body has Name\"] = responseBody.has(\"Aerobics\");",
									"tests[\"Response Body has Event Type Id for Yoga\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_aerobics\"));",
									"tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
									"tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
									"tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
									"tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
									"tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\"); ",
									"tests[\"Response Body has Correct eventLevelId\"] = responseBody.has(jsonData.eventLevelId);",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Aerobics\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory",
								"{{eventCategoryId}}",
								"eventType"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Event Type - Turbo Kick",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6fc1d0a0-809a-464c-b724-e1878c7e3986",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventTypeId_turboKick\", jsonData.id);",
									"    ",
									"tests[\"Response Body has Name\"] = responseBody.has(\"Turbo Kick\");",
									"tests[\"Response Body has Event Type Id for Yoga\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_turboKick\"));",
									"tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
									"tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
									"tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
									"tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
									"tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\"); ",
									"tests[\"Response Body has Correct eventLevelId\"] = responseBody.has(jsonData.eventLevelId);",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Turbo Kick\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventCategory/{{eventCategoryId}}/eventType",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventCategory",
								"{{eventCategoryId}}",
								"eventType"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Packages",
			"description": null,
			"item": [
				{
					"name": "createUnlimitedItem_yoga",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05aea834-f319-417d-b0a2-6863a6575150",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_unlimited\", jsonData.id);",
									"",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51f532e5-939f-4784-83be-a5aa233ffbfb",
								"type": "text/javascript",
								"exec": [
									"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Yoga{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" :true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  } ]\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUnlimitedItem_p90x",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "814caa39-bff0-4bc6-9c50-080f72eaecd1",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_unlimited_p90x\", jsonData.id);",
									"",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_p90x\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_p90x\")+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51f532e5-939f-4784-83be-a5aa233ffbfb",
								"type": "text/javascript",
								"exec": [
									"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"P90x{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" :true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_p90x}}\"\r\n  } ]\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUnlimitedItem_aerobics",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5aa25c6-ce3a-424e-85e7-c770485c0753",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_unlimited_aero\", jsonData.id);",
									"",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_aero\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_aerobics\")+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51f532e5-939f-4784-83be-a5aa233ffbfb",
								"type": "text/javascript",
								"exec": [
									"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Aerobics{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" :true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_aerobics}}\"\r\n  } ]\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUnlimitedItem_pilates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46add26b-b6da-44ef-ab42-07bdfee12fb8",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_unlimited_pil\", jsonData.id);",
									"",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_pil\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_pilates\")+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51f532e5-939f-4784-83be-a5aa233ffbfb",
								"type": "text/javascript",
								"exec": [
									"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Pilates{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" :true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_pilates}}\"\r\n  } ]\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUnlimitedItem_zumba",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231a7288-7d30-4923-8bf6-021769cfbec2",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_unlimited_zum\", jsonData.id);",
									"",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_zum\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_zumba\")+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51f532e5-939f-4784-83be-a5aa233ffbfb",
								"type": "text/javascript",
								"exec": [
									"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Zumba{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" :true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_zumba}}\"\r\n  } ]\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUnlimitedItem_cycling",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93d9ce89-4f7c-49f1-b121-31ab4b0dbfc3",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_unlimited_cyc\", jsonData.id);",
									"",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_cyc\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_cycling\")+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51f532e5-939f-4784-83be-a5aa233ffbfb",
								"type": "text/javascript",
								"exec": [
									"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Cycling{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" :true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_cycling}}\"\r\n  } ]\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUnlimitedItem_turbokick",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3fce739-d805-4cd4-8edd-5de827c0f713",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_unlimited_tur\", jsonData.id);",
									"",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_tur\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_turboKick\")+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51f532e5-939f-4784-83be-a5aa233ffbfb",
								"type": "text/javascript",
								"exec": [
									"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Turbo{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" :true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_turboKick}}\"\r\n  } ]\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createMeteredItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5724ac89-ccb3-426c-8ffc-5d2c1ae227f0",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_metered\", jsonData.id);",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_metered\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e71d7db4-4121-4003-a1c9-0453c97ebe3a",
								"type": "text/javascript",
								"exec": [
									"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Yoga{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" :false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  } ]\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createMeteredItem_yoga",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59206e1-4fe1-4b76-98cf-fe5fda518a0c",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_yoga\", jsonData.id);",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_yoga\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"unitPrice\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":2\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"MONTHS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bcf389d9-cdbc-4f58-a954-92c6bbade3ac",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Yoga Package\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 10,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" : false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 2,\r\n  \"expirationUnit\" : \"MONTHS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n    }\r\n  ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createMeteredItem_p90x",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8da239b2-ee44-464f-92c7-1c90fc1ec9d3",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_p90x\", jsonData.id);",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_p90x\", jsonData.id);",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_p90x\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_p90x\")+\"\\\"\");",
									"",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"unitPrice\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":2\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"MONTHS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "37755c1a-4f1b-446f-a870-1393ea237057",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"P90X Package\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 12,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" : false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 2,\r\n  \"expirationUnit\" : \"MONTHS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n      \"eventTypeId\" : \"{{eventTypeId_p90x}}\"\r\n    }\r\n  ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createMeteredItem_aerobics",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d9405c5-7f13-474b-9ec0-6b997e279f08",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_aerobics\", jsonData.id);",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_aerobics\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_aerobics\")+\"\\\"\");",
									"",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"unitPrice\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":2\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"MONTHS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3d86a0c-618f-4033-9860-18a42a888300",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Aerobics Package\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 15,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" : false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 2,\r\n  \"expirationUnit\" : \"MONTHS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n      \"eventTypeId\" : \"{{eventTypeId_aerobics}}\"\r\n    }\r\n  ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createMeteredItem_pilates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2aa17352-4d50-4ee4-ae0a-f7a46fdbe6dc",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_pilates\", jsonData.id);",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_pilates\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_pilates\")+\"\\\"\");",
									"",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"unitPrice\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":2\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"MONTHS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "09701f47-e4ef-4e23-8c96-28869fc42d39",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Pilates Package\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 5,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" : false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 2,\r\n  \"expirationUnit\" : \"MONTHS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n      \"eventTypeId\" : \"{{eventTypeId_pilates}}\"\r\n    }\r\n  ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createMeteredItem_zumba",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28dc1672-1ea6-40a5-b088-8bc1558e5e8b",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_zumba\", jsonData.id);",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_zumba\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_zumba\")+\"\\\"\");",
									"",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"unitPrice\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":2\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"MONTHS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "478c1bd8-5e95-4d0f-843a-d70f37609750",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Zumba Package\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 7.50,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" : false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 2,\r\n  \"expirationUnit\" : \"MONTHS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n      \"eventTypeId\" : \"{{eventTypeId_zumba}}\"\r\n    }\r\n  ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createMeteredItem_cycling",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc32b896-e653-4798-8037-afd0852ecd68",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_cycling\", jsonData.id);",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_cycling\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_cycling\")+\"\\\"\");",
									"",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"unitPrice\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":2\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"MONTHS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c73bba13-a5f2-4e87-bcac-2605ede1c37d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Cycling Package\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 20,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" : false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 2,\r\n  \"expirationUnit\" : \"MONTHS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n      \"eventTypeId\" : \"{{eventTypeId_cycling}}\"\r\n    }\r\n  ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createMeteredItem_turboKick",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b8c0f13-6f6e-42bb-8b8b-a531438492bd",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_turboKick\", jsonData.id);",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_turboKick\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_turboKick\")+\"\\\"\");",
									"",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"name\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"unitPrice\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":2\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"MONTHS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "62675862-a243-47ca-8563-afd3a62aa260",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Turbo Kick Package\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 17.50,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" : false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 2,\r\n  \"expirationUnit\" : \"MONTHS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n      \"eventTypeId\" : \"{{eventTypeId_turboKick}}\"\r\n    }\r\n  ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Item",
			"description": null,
			"item": [
				{
					"name": "createUnlimitedItem_cycling",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cfdb6c9e-7a38-44b4-a9b4-20b779f3ec3b",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_unlmtd_cycle\", jsonData.id);",
									"    ",
									"tests[\"Response Body has Name\"] = responseBody.has(\"Cycling \"+postman.getEnvironmentVariable(\"randItemNumber\"));",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Unit Price\"] = responseBody.has(\"\\\"unitPrice\\\":70\");",
									"tests[\"Response Body has Item Id\"] = responseBody.has(postman.getEnvironmentVariable(\"itemId_unlmtd_cycle\"));  ",
									"tests[\"Response Body has Correct quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\"); ",
									"tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\"); ",
									"tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":10\");",
									"tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"tests[\"Response Body has Correct currencyId\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":false\");",
									"tests[\"Response Body has Correct eventTypeId\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_cycling\"));",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a0ae3e57-f1e0-4376-b852-cdbbb39611c9",
								"type": "text/javascript",
								"exec": [
									"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Cycling {{randItemNumber}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 70,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" : true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 10,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_cycling}}\"\r\n  } ]\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createMeteredItem_yoga",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2227b71-3400-43b3-b12a-12afb2a6622e",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"itemId_metered_yoga\", jsonData.id);",
									"    ",
									"tests[\"Response Body has Name\"] = responseBody.has(\"Yoga \"+postman.getEnvironmentVariable(\"randItemNumber\"));",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Unit Price\"] = responseBody.has(\"\\\"unitPrice\\\":50\");",
									"tests[\"Response Body has Item Id\"] = responseBody.has(postman.getEnvironmentVariable(\"itemId_metered_yoga\"));  ",
									"tests[\"Response Body has Correct quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\"); ",
									"tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\"); ",
									"tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":5\");",
									"tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"tests[\"Response Body has Correct currencyId\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":true\");",
									"tests[\"Response Body has Correct eventTypeId\"] = responseBody.has(postman.getEnvironmentVariable(\"eventTypeId_yoga\"));",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0b42b1e-28d6-4d20-824a-4c14d9a61f9c",
								"type": "text/javascript",
								"exec": [
									"var randItemNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randItemNumber\", randItemNumber);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Yoga {{randItemNumber}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 50,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" : false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 5,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  } ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Purchase",
			"description": null,
			"item": [
				{
					"name": "getPurchase_metered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d171367-147b-4337-b035-4c5eb4ace29d",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if(responseCode.code==200) {",
									" ",
									"tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"multiple\\\"\");",
									"tests[\"Response Body has Correct Unit Price\"] = responseBody.has(\"\\\"unitPrice\\\":50\");",
									"tests[\"Response Body has Item Id\"] = responseBody.has(postman.getEnvironmentVariable(\"itemId_metered_yoga\"));  ",
									"tests[\"Response Body has Correct quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\"); ",
									"tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\"); ",
									"tests[\"Response Body has Correct currencyId\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":true\");",
									"tests[\"Response Body has Correct extendedPrice\"] = responseBody.has(\"\\\"extendedPrice\\\":50\");",
									"tests[\"Response Body has Correct tax\"] = responseBody.has(\"\\\"tax\\\":3\");",
									"tests[\"Response Body has Correct totalAmount\"] = responseBody.has(\"\\\"totalAmount\\\":53\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"item\" : {\r\n    \"id\" : \"{{itemId_metered_yoga}}\",\r\n    \"name\": \"Yoga\",\r\n    \"type\" : \"multiple\",\r\n    \"unitPrice\" : 50,\r\n    \"quantity\" : 1,\r\n    \"unlimited\" : false,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"currency\" : \"USD\",\r\n    \"eligibleClasses\" : [ ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPurchase_unlimited",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f75eb847-0fef-43bf-a5f9-7b1dad27dc20",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if(responseCode.code==200) {",
									"    ",
									"tests[\"Response Body has Name\"] = responseBody.has(\"\\\"name\\\":\\\"Cycling\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"multiple\\\"\");",
									"tests[\"Response Body has Correct Unit Price\"] = responseBody.has(\"\\\"unitPrice\\\":70\");",
									"tests[\"Response Body has Item Id\"] = responseBody.has(postman.getEnvironmentVariable(\"itemId_unlmtd_cycle\"));  ",
									"tests[\"Response Body has Correct quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\"); ",
									"tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\"); ",
									"tests[\"Response Body has Correct currencyId\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":false\");",
									"tests[\"Response Body has Correct extendedPrice\"] = responseBody.has(\"\\\"extendedPrice\\\":70\");",
									"tests[\"Response Body has Correct tax\"] = responseBody.has(\"\\\"tax\\\":4.2\");",
									"tests[\"Response Body has Correct totalAmount\"] = responseBody.has(\"\\\"totalAmount\\\":74.2\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"item\" : {\r\n    \"id\" : \"{{itemId_unlmtd_cycle}}\",\r\n    \"name\": \"Cycling\",\r\n    \"type\" : \"multiple\",\r\n    \"unitPrice\" : 70,\r\n    \"quantity\" : 1,\r\n    \"unlimited\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"currency\" : \"USD\",\r\n    \"eligibleClasses\" : [ ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Yoga for 10:30AM",
			"description": null,
			"item": [
				{
					"name": "CreateEvent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc3cdb85-8b66-4ec2-a2bf-32655e7eb021",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"eventId_1030am\", jsonData.id);",
									"tests[\"Response Body has Evnet Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_1030am\")+\"\\\"\");",
									"tests[\"Response Body has Evemt Type Id\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"\\\"eventLevelId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEventLevelId\")+\"\\\"\");",
									"tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
									"tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
									"tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
									"tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6a3a3412-54c5-4878-8c24-a212f62bc536",
								"type": "text/javascript",
								"exec": [
									"var current_timestamp = new Date();",
									"var current_year = current_timestamp.getFullYear();",
									"var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
									"var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
									"",
									"var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:00:00\";",
									"var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:30:00\";",
									"",
									"var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
									"",
									"var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"do {",
									"    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"}",
									"while (randEventLevelId === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
									"postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
									"postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_yoga}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"locationId\" : \"{{locationId}}\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateEventForSwap",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0ec1e16-ffde-43b4-8033-1442ba0e15cb",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventId_Swap\", jsonData.id); ",
									"    ",
									"    ",
									"tests[\"Response Body has Evnet Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_Swap\")+\"\\\"\");",
									"tests[\"Response Body has Evemt Type Id\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"\\\"eventLevelId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEventLevelId\")+\"\\\"\");",
									"tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
									"tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
									"tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":12\");",
									"tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9872d40a-2ce5-43e1-9222-8c9501f9b118",
								"type": "text/javascript",
								"exec": [
									"var current_timestamp = new Date();",
									"var current_year = current_timestamp.getFullYear();",
									"var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
									"var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
									"",
									"var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:00:00\";",
									"var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:30:00\";",
									"",
									"var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
									"",
									"var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"do {",
									"    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"}",
									"while (randEventLevelId === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
									"postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
									"postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_yoga}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"12\",\r\n  \"locationId\" : \"{{locationId}}\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateHost",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3ba80ad-8c4d-441b-8740-b2a5ce6938e1",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201){",
									"    ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventHostId\", jsonData.id);",
									"    tests[\"Response Body has eventHostId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventHostId\")+\"\\\"\");",
									"    tests[\"Response Body has employeeId\"] = responseBody.has(\"\\\"employeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");",
									"    tests[\"Response Body has substituteId\"] = responseBody.has(\"\\\"substituteId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"employeeId_2\")+\"\\\"\");",
									"    tests[\"Response Body has eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_1030am\")+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f85df667-db85-45b9-b383-ac874734086c",
								"type": "text/javascript",
								"exec": [
									"var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
									"",
									"var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"do {",
									"    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"}",
									"while (randEmployee === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventId\" : \"{{eventId_1030am}}\",\r\n  \"substituteId\" : \"{{employeeId_2}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/host",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_1030am}}",
								"host"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create P90X for 12PM",
			"description": null,
			"item": [
				{
					"name": "CreateEvent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbcd729f-3c4c-443e-8899-1842d7399c33",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventId_1200pm\", jsonData.id);",
									"    ",
									"tests[\"Response Body has Evnet Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_1200pm\")+\"\\\"\");",
									"tests[\"Response Body has Evemt Type Id\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_p90x\")+\"\\\"\");",
									"tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"\\\"eventLevelId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEventLevelId\")+\"\\\"\");",
									"tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
									"tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
									"tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
									"tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    ",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8f91bb57-5131-4ea1-b905-77642538b753",
								"type": "text/javascript",
								"exec": [
									"var current_timestamp = new Date();",
									"var current_year = current_timestamp.getFullYear();",
									"var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
									"var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
									"",
									"var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:00:00\";",
									"var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:30:00\";",
									"",
									"var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
									"",
									"var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"do {",
									"    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"}",
									"while (randEventLevelId === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
									"postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
									"postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_p90x}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"locationId\" : \"{{locationId}}\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateHost",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41fd1858-6d3a-4272-9c9b-fe500f3619e5",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventHostId_1200pm\", jsonData.id);",
									"",
									"    tests[\"Response Body has eventHostId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventHostId_1200pm\")+\"\\\"\");",
									"    tests[\"Response Body has employeeId\"] = responseBody.has(\"\\\"employeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");",
									"    tests[\"Response Body has eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_1200pm\")+\"\\\"\");    ",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "278fee7e-e725-4188-9bd0-fbef2ea812a4",
								"type": "text/javascript",
								"exec": [
									"var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
									"",
									"var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"do {",
									"    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"}",
									"while (randEmployee === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventId\" : \"{{eventId_1200pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/host",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_1200pm}}",
								"host"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Aerobics for 1PM",
			"description": null,
			"item": [
				{
					"name": "CreateEvent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53c6f0ac-e950-4fa8-b9fc-033eabbe638d",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventId_100pm\", jsonData.id);",
									"    ",
									"tests[\"Response Body has Evnet Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_100pm\")+\"\\\"\");",
									"tests[\"Response Body has Evemt Type Id\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_aerobics\")+\"\\\"\");",
									"tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"\\\"eventLevelId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEventLevelId\")+\"\\\"\");",
									"tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
									"tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
									"tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
									"tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6e556e7f-76f7-41ca-9c4d-477ba15ccba8",
								"type": "text/javascript",
								"exec": [
									"var current_timestamp = new Date();",
									"var current_year = current_timestamp.getFullYear();",
									"var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
									"var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
									"",
									"var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T18:00:00\";",
									"var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T18:30:00\";",
									"",
									"var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
									"",
									"var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"do {",
									"    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"}",
									"while (randEventLevelId === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
									"postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
									"postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_aerobics}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateHost",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43b0dbf7-b321-4157-8afd-d595e13eb0e1",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventHostId_100pm\", jsonData.id);",
									"   ",
									"    tests[\"Response Body has eventHostId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventHostId_100pm\")+\"\\\"\");",
									"    tests[\"Response Body has employeeId\"] = responseBody.has(\"\\\"employeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");",
									"    tests[\"Response Body has eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_100pm\")+\"\\\"\"); ",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ac0d47f1-9075-4a93-b210-46af370aa34e",
								"type": "text/javascript",
								"exec": [
									"var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
									"",
									"var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"do {",
									"    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"}",
									"while (randEmployee === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventId\" : \"{{eventId_100pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/host",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_100pm}}",
								"host"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Pilates for 2PM",
			"description": null,
			"item": [
				{
					"name": "CreateEvent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f70fd2ab-8024-47e3-b6e2-392d0405eec1",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventId_200pm\", jsonData.id);",
									"    ",
									"tests[\"Response Body has Evnet Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_200pm\")+\"\\\"\");",
									"tests[\"Response Body has Evemt Type Id\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_pilates\")+\"\\\"\");",
									"tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"\\\"eventLevelId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEventLevelId\")+\"\\\"\");",
									"tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
									"tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
									"tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
									"tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4b8cd431-ec76-4e45-8007-85f152ce9ee9",
								"type": "text/javascript",
								"exec": [
									"var current_timestamp = new Date();",
									"var current_year = current_timestamp.getFullYear();",
									"var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
									"var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
									"",
									"var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T19:00:00\";",
									"var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T19:30:00\";",
									"",
									"var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
									"",
									"var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"do {",
									"    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"}",
									"while (randEventLevelId === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
									"postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
									"postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_pilates}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateHost",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dbfcfada-bbf0-42f2-a5dd-fce00d7176d5",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventHostId_200pm\", jsonData.id); ",
									"    ",
									"  tests[\"Response Body has eventHostId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventHostId_200pm\")+\"\\\"\");",
									"    tests[\"Response Body has employeeId\"] = responseBody.has(\"\\\"employeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");",
									"    tests[\"Response Body has eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_200pm\")+\"\\\"\"); ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7bc0c619-422b-4894-8b68-14c4a9d0450b",
								"type": "text/javascript",
								"exec": [
									"var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
									"",
									"var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"do {",
									"    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"}",
									"while (randEmployee === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventId\" : \"{{eventId_200pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/host",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_200pm}}",
								"host"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Zumba for 3PM",
			"description": null,
			"item": [
				{
					"name": "CreateEvent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b6a3cef-556b-4e32-99c0-901fcf3f11a9",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventId_300pm\", jsonData.id);",
									"",
									"tests[\"Response Body has Evnet Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_300pm\")+\"\\\"\");",
									"tests[\"Response Body has Evemt Type Id\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_zumba\")+\"\\\"\");",
									"tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"\\\"eventLevelId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEventLevelId\")+\"\\\"\");",
									"tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
									"tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
									"tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
									"tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "31e65891-fd49-4dd1-80ea-9a9c70ea6fce",
								"type": "text/javascript",
								"exec": [
									"var current_timestamp = new Date();",
									"var current_year = current_timestamp.getFullYear();",
									"var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
									"var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
									"",
									"var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T20:00:00\";",
									"var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T20:30:00\";",
									"",
									"var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
									"",
									"var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"do {",
									"    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"}",
									"while (randEventLevelId === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
									"postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
									"postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_zumba}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateHost",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93d8d8d0-4346-4222-9ca4-cd5419e1c799",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventHostId_300pm\", jsonData.id);",
									"    ",
									"     tests[\"Response Body has eventHostId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventHostId_300pm\")+\"\\\"\");",
									"    tests[\"Response Body has employeeId\"] = responseBody.has(\"\\\"employeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");",
									"    tests[\"Response Body has eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_300pm\")+\"\\\"\"); ",
									"}",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e0a821f8-c37e-4b85-ad3f-b88528d6983f",
								"type": "text/javascript",
								"exec": [
									"var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
									"",
									"var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"do {",
									"    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"}",
									"while (randEmployee === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventId\" : \"{{eventId_300pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/host",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_300pm}}",
								"host"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Turbo Kick for 4:30PM",
			"description": null,
			"item": [
				{
					"name": "CreateEvent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a44a71ef-cf32-46ca-9854-6df537d85d02",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventId_430pm\", jsonData.id);",
									"",
									"tests[\"Response Body has Evnet Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_430pm\")+\"\\\"\");",
									"tests[\"Response Body has Evemt Type Id\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_turboKick\")+\"\\\"\");",
									"tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"\\\"eventLevelId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEventLevelId\")+\"\\\"\");",
									"tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
									"tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
									"tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
									"tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");    ",
									"   ",
									"    ",
									"}",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d23969e0-24c4-41eb-8060-a0b7e55e66cd",
								"type": "text/javascript",
								"exec": [
									"var current_timestamp = new Date();",
									"var current_year = current_timestamp.getFullYear();",
									"var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
									"var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
									"",
									"var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T21:30:00\";",
									"var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T22:00:00\";",
									"",
									"var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
									"",
									"var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"do {",
									"    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"}",
									"while (randEventLevelId === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
									"postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
									"postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_turboKick}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateHost",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eaeb10c3-5bdd-4e6b-b743-cfed4d0d7124",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventHostId_430pm\", jsonData.id);",
									"    ",
									"    tests[\"Response Body has eventHostId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventHostId_430pm\")+\"\\\"\");",
									"    tests[\"Response Body has employeeId\"] = responseBody.has(\"\\\"employeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");",
									"    tests[\"Response Body has eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_430pm\")+\"\\\"\");     ",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "95a8a384-3807-45d7-9d79-6b2b6e9381c6",
								"type": "text/javascript",
								"exec": [
									"var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
									"",
									"var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"do {",
									"    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"}",
									"while (randEmployee === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventId\" : \"{{eventId_430pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/host",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_430pm}}",
								"host"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Cycling for 5PM",
			"description": null,
			"item": [
				{
					"name": "CreateEvent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75bd5854-584e-4c30-8760-dee57f653d4b",
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventId_500pm\", jsonData.id);",
									"",
									"tests[\"Response Body has Evnet Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_500pm\")+\"\\\"\");",
									"tests[\"Response Body has Evemt Type Id\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_cycling\")+\"\\\"\");",
									"tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"\\\"eventLevelId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEventLevelId\")+\"\\\"\");",
									"tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
									"tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
									"tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
									"tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");       ",
									"",
									"}",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba91734f-97ec-41be-aa01-5a6fe2febb21",
								"type": "text/javascript",
								"exec": [
									"var current_timestamp = new Date();",
									"var current_year = current_timestamp.getFullYear();",
									"var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
									"var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
									"",
									"var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T22:00:00\";",
									"var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T22:30:00\";",
									"",
									"var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
									"",
									"var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"do {",
									"    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"}",
									"while (randEventLevelId === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
									"postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
									"postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_cycling}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateHost",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c54edfc9-37b3-4486-a88e-55622f66d91f",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventHostId\", jsonData.id);",
									"",
									"   tests[\"Response Body has eventHostId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventHostId\")+\"\\\"\");",
									"    tests[\"Response Body has employeeId\"] = responseBody.has(\"\\\"employeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");",
									"    tests[\"Response Body has eventId\"] = responseBody.has(\"\\\"eventId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_500pm\")+\"\\\"\");       ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "078bcf6e-2a77-4eff-a576-6d36029cb58d",
								"type": "text/javascript",
								"exec": [
									"var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
									"",
									"var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"do {",
									"    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"}",
									"while (randEmployee === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventId\" : \"{{eventId_500pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/host",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_500pm}}",
								"host"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create and Enroll Member for 10:30AM",
			"description": null,
			"item": [
				{
					"name": "createUserMember",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6093b9d-3cf4-43c6-bb9a-4ae16c547a56",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"memberId_1030am\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
									"    ",
									"tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "94036e42-4a01-4281-a429-e5779fcaa2ae",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n    \"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
						},
						"url": {
							"raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
							"host": [
								"{{manageMember}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"member"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUnlimitedPurchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0519fcf8-f287-4cfc-bf42-b9f50dfc92a1",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
									"    postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
									"    ",
									"    tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ea130f93-a6d5-483c-80f5-efa56bb79051",
								"type": "text/javascript",
								"exec": [
									"// var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
									"var randItemQuantity = 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
									"var purchaseAmount = randItemQuantity * unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUnlimitedPurchase_cycling",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6de6f11-5757-4319-9d84-83d87caeb76c",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"invoiceId1\", jsonData.items[0].invoiceId);",
									"    postman.setEnvironmentVariable(\"saleItemsId1\", jsonData.items[0].id);",
									"    ",
									"    ",
									"    ",
									"    tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId1\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlmtd_cycle\")+\"\\\"\");   ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId1\")+\"\\\"\");   ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"}",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "66fbb250-c6cb-46fe-bec5-b27e337bd67c",
								"type": "text/javascript",
								"exec": [
									"// var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
									"var randItemQuantity = 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
									"var purchaseAmount = randItemQuantity * unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlmtd_cycle}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createLimitedPurchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "971a3e20-4aea-40bc-8daf-ebd48bc5e33e",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"invoiceId2\", jsonData.items[0].invoiceId);",
									"postman.setEnvironmentVariable(\"saleItemsId2\", jsonData.items[0].id);",
									"",
									"tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId2\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_metered\")+\"\\\"\");   ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId2\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+true);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9d188d09-14c1-41e8-baed-39f59cb649ca",
								"type": "text/javascript",
								"exec": [
									"// var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
									"var randItemQuantity = 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
									"var purchaseAmount = randItemQuantity * unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : false,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_metered}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEnrollment_yoga",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6fad71b-1e0b-4b97-97d2-e11f1ca3d360",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
									"    ",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\");  ",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+false);  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_1030am}}",
								"enrollment",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEnrollment_yogaSwap",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd0ba3ee-8884-409c-b7c5-c6da38e31bd5",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"        var jsonData = JSON.parse(responseBody);",
									"        postman.setEnvironmentVariable(\"enrollmentIdSwap\", jsonData.id);",
									"        ",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentIdSwap\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
									"     tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+false);  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
									"        ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_Swap}}/enrollment/{{userId}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_Swap}}",
								"enrollment",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEnrollmentForSwap1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29b9eee3-d6fe-4c4e-8567-ee3b4fe4d553",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if(responseCode.code==200) {",
									"    ",
									"    var jsonData = JSON.parse(responseBody);",
									"    ",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/enrollment/{{userId}}/swap/{{eventId_Swap}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"enrollment",
								"{{userId}}",
								"swap",
								"{{eventId_Swap}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "swapEnrollmentUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b22fadba-1622-443c-b934-dfca989d9411",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    ",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"        var jsonData = JSON.parse(responseBody);",
									"        ",
									"        ",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");   ",
									"    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"photoId_female_5\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+false);  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
									"        ",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fromEventId\" : \"{{eventId_Swap}}\",\r\n  \"toEventId\" : \"{{eventId_300pm}}\",\r\n  \"userid\" : \"{{userId}}\"\r\n}"
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/enrollment/swap",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"enrollment",
								"swap"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc588d5a-46ea-4cd9-9240-94c0ea378620",
								"type": "text/javascript",
								"exec": [
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
									"postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
									"",
									"//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
									"if(attendStatus == 'reserved'){",
									"    if (responseCode.code != 409)",
									"    {",
									"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    }",
									"    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
									"}else{",
									"    if (responseCode.code != 200)",
									"    {",
									"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    }",
									"    tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
									"tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\\\"attended\\\"\");",
									"tests[\"Response Body has Correct Member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\");",
									"tests[\"Response Body has Correct LastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct photoId\"] =  responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
									"tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");",
									"tests[\"Response Body has Correct attendanceDateTime\"] = responseBody.has(\"\\\"attendanceDateTime\\\":\"+\"\\\"\"+jsonData.attendanceDateTime+\"\\\"\");",
									"tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"//tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"expirationDateTime\");",
									"tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");",
									"tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":false\");",
									"tests[\"Response Body has Correct unlimited\"] = responseBody.has(jsonData.purchaseSummary.unlimited);",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "642dbddc-894a-4264-a4b5-9df5ebc16978",
								"type": "text/javascript",
								"exec": [
									"var attendStatus = ''",
									"var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
									"//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
									"console.log(\"Attend percent:\" + attendPercent)",
									"if(Math.random() <=  attendPercent){",
									"    attendStatus = \"attended\"",
									"}else{",
									"    attendStatus = \"reserved\"",
									"}",
									"postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}?status={{attendStatus}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_1030am}}",
								"enrollment",
								"{{userId}}"
							],
							"query": [
								{
									"key": "status",
									"value": "{{attendStatus}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Turbo Event for Deletion",
			"description": null,
			"item": [
				{
					"name": "CreateEvent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e56b1015-6e89-4552-a662-9da0ab232190",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201)",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"eventId_new\", jsonData.id);",
									"tests[\"Response Body has Evnet Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_new\")+\"\\\"\");",
									"tests[\"Response Body has Evemt Type Id\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_turboKick\")+\"\\\"\");",
									"tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"\\\"eventLevelId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventLevelId_beginner\")+\"\\\"\");",
									"tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
									"tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
									"tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":10\");",
									"tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "745a7f3f-95c6-4ed4-bd84-92a530ca675c",
								"type": "text/javascript",
								"exec": [
									"var current_timestamp = new Date();",
									"var current_year = current_timestamp.getFullYear();",
									"var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
									"var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
									"",
									"var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T18:00:00\";",
									"var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T18:30:00\";",
									"",
									"var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
									"",
									"var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"do {",
									"    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"}",
									"while (randEventLevelId === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
									"postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
									"postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_turboKick}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_beginner}}\",\r\n  \"capacity\" : \"10\",\r\n  \"locationId\" : \"{{locationId}}\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUserMember",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79afd1ef-23cd-4d98-b5bb-8a17529fe583",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"memberId_new\", jsonData.id);",
									"postman.setEnvironmentVariable(\"userId_new\", jsonData.userId);",
									"",
									"tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId_new\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId_new\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0521e28-0fcd-4020-9902-4b59134dc251",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
						},
						"url": {
							"raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
							"host": [
								"{{manageMember}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"member"
							]
						}
					},
					"response": []
				},
				{
					"name": "createPurchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a9e8bc7-63b9-4b1f-b6b1-2c7bfe8996c9",
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
									"//postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
									"postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
									"postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
									"",
									"tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId_new\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_tur\")+\"\\\"\");   ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"",
									"}",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "14b8d380-03f0-42b1-90e9-ba610166dec3",
								"type": "text/javascript",
								"exec": [
									"var randItemQuantity = 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
									"var purchaseAmount = randItemQuantity * unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited_tur}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId_new}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId_new}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98368231-6568-43ab-a4e2-72d4eed2b6f9",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"enrollmentId_new\", jsonData.id);",
									"",
									"tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId_new\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId_new\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
									"",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_new}}/enrollment/{{userId_new}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_new}}",
								"enrollment",
								"{{userId_new}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8dbecf3e-332b-4e1d-9ed8-277dc446295c",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct event id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventLevel id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventLevel.id+\"\\\"\");",
									"  //  tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Intermediate\"+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventType.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType name\"] = responseBody.has(\"name\");",
									"    tests[\"Response Body has Correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+jsonData.event.startDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+jsonData.event.endDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct maxCapacity\"] = responseBody.has(\"\\\"maxCapacity\\\":\"+jsonData.event.maxCapacity);",
									"    ",
									"    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].reservationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.enrollment[0].status+\"\\\"\");",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.id+\"\\\"\");",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.userId+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.firstName+\"\\\"\");",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.lastName+\"\\\"\");",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.photoId+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.email+\"\\\"\");",
									"    ",
									"    //tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].purchaseSummary.expirationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.enrollment[0].purchaseSummary.expiringSoon);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+jsonData.enrollment[0].purchaseSummary.purchaseOpportunity);",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.enrollment[0].purchaseSummary.unlimited);",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_new}}/enrollment",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_new}}",
								"enrollment"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateEvent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9af611f4-e766-4c3f-a644-9c882eb08761",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventId_newup\", jsonData.id); ",
									"    ",
									"    ",
									"tests[\"Response Body has Event Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_newup\")+\"\\\"\");",
									"tests[\"Response Body has Evemt Type Id\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_turboKick\")+\"\\\"\");",
									"tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"\\\"eventLevelId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventLevelId_beginner\")+\"\\\"\");",
									"tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
									"tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
									"tests[\"Response Body has Capacity\"] = responseBody.has(\"\\\"capacity\\\":12\");",
									"tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9872d40a-2ce5-43e1-9222-8c9501f9b118",
								"type": "text/javascript",
								"exec": [
									"var current_timestamp = new Date();",
									"var current_year = current_timestamp.getFullYear();",
									"var current_date = ('0' + current_timestamp.getDate()).slice(-2);",
									"var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);",
									"",
									"var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:00:00\";",
									"var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:30:00\";",
									"",
									"var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];",
									"",
									"var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"do {",
									"    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];",
									"}",
									"while (randEventLevelId === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);",
									"postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);",
									"postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_turboKick}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{eventLevelId_beginner}}\",\r\n  \"capacity\" : \"12\",\r\n  \"locationId\" : \"{{locationId}}\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_new}}",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_new}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteEvent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8dd43107-f5e9-422b-a8ef-04c3f264b96d",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200) ",
									"{",
									"        var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventId_Swap\", jsonData.id); ",
									"    ",
									"    ",
									"tests[\"Response Body has Evnet Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventId_Swap\")+\"\\\"\");",
									"tests[\"Response Body has Evemt Type Id\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_turboKick\")+\"\\\"\");",
									"tests[\"Response Body has correct event Level Id\"] = responseBody.has(\"\\\"eventLevelId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventLevelId_beginner\")+\"\\\"\");",
									"tests[\"Response Body has correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventStartTime\")+\"\\\"\");",
									"tests[\"Response Body has correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventEndTime\")+\"\\\"\");",
									"tests[\"Response Body has Capacity\"] = responseBody.has(\"capacity\");",
									"tests[\"Response Body has Location Id\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"",
									"}",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ccc1cfc3-7a43-4173-9781-a3c9f869e30f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_new}}",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_new}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEnrollment Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8dbecf3e-332b-4e1d-9ed8-277dc446295c",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct event id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventLevel id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventLevel.id+\"\\\"\");",
									"  //  tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Intermediate\"+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventType.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType name\"] = responseBody.has(\"name\");",
									"    tests[\"Response Body has Correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+jsonData.event.startDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+jsonData.event.endDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct maxCapacity\"] = responseBody.has(\"\\\"maxCapacity\\\":\"+jsonData.event.maxCapacity);",
									"    ",
									"    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].reservationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.enrollment[0].status+\"\\\"\");",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.id+\"\\\"\");",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.userId+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.firstName+\"\\\"\");",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.lastName+\"\\\"\");",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.photoId+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.email+\"\\\"\");",
									"    ",
									"    //tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].purchaseSummary.expirationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.enrollment[0].purchaseSummary.expiringSoon);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+jsonData.enrollment[0].purchaseSummary.purchaseOpportunity);",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.enrollment[0].purchaseSummary.unlimited);",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_new}}/enrollment",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_new}}",
								"enrollment"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create and Enroll Member for 12PM",
			"description": null,
			"item": [
				{
					"name": "createUserMember",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff96a54b-20a2-4596-b000-35c176fed70a",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} ",
									"",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									" var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
									"postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
									"postman.setEnvironmentVariable(\"memberId_1200pm\", jsonData.id);",
									"",
									"tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dd748f69-7b63-4c0a-b2a5-4f6225e4f8c4",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
						},
						"url": {
							"raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
							"host": [
								"{{manageMember}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"member"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUnlimitedPurchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea2a1bac-b4fd-4c01-aef8-b2b2400e6000",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
									"postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
									"",
									"tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_p90x\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"",
									"}",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "23033a14-685a-46a3-a15b-1d93d6f52054",
								"type": "text/javascript",
								"exec": [
									"var randItemQuantity = 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
									"var purchaseAmount = randItemQuantity * unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited_p90x}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "578937bb-8366-40dd-a665-e8d13cba1a1c",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
									"",
									"tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
									"    ",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
									"",
									"}",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_1200pm}}",
								"enrollment",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e543a9b6-e0b7-4a0e-b040-86574ef49dab",
								"type": "text/javascript",
								"exec": [
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var attendStatus = postman.getEnvironmentVariable(\"attendStatus\");",
									"postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id); ",
									"//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
									"if(attendStatus == 'reserved'){",
									"    if (responseCode.code != 409)",
									"    {",
									"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    }",
									"    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
									"}else{",
									"    if (responseCode.code != 200)",
									"    {",
									"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    }",
									"    tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
									"tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\\\"attended\\\"\");",
									"tests[\"Response Body has Correct Member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\");",
									"tests[\"Response Body has Correct LastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct photoId\"] =  responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
									"tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");",
									"tests[\"Response Body has Correct attendanceDateTime\"] = responseBody.has(\"\\\"attendanceDateTime\\\":\"+\"\\\"\"+jsonData.attendanceDateTime+\"\\\"\");",
									"tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"//tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"expirationDateTime\");",
									"tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");",
									"tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":false\");",
									"tests[\"Response Body has Correct unlimited\"] = responseBody.has(jsonData.purchaseSummary.unlimited);",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "37c56aff-b4b7-44d9-b334-93b7a1e98ac8",
								"type": "text/javascript",
								"exec": [
									"var attendStatus = ''",
									"var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
									"//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
									"console.log(\"Attend percent:\" + attendPercent)",
									"if(Math.random() <=  attendPercent){",
									"    attendStatus = \"attended\"",
									"}else{",
									"    attendStatus = \"reserved\"",
									"}",
									"postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_1200pm}}",
								"enrollment",
								"{{userId}}"
							],
							"query": [
								{
									"key": "status",
									"value": "{{attendStatus}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create and Enroll Member for 1PM (2)",
			"description": null,
			"item": [
				{
					"name": "createUserMember",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f8f7f6f-0af2-4ffe-86cb-dc292ca0023a",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
									"postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
									"",
									"tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7303811a-caad-4b71-b84d-8348cf94bbe1",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
						},
						"url": {
							"raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
							"host": [
								"{{manageMember}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"member"
							]
						}
					},
					"response": []
				},
				{
					"name": "createMeteredPurchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ad33b5b-bd51-440c-bf37-55f50a7d1645",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
									"postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
									"",
									"tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_aerobics\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+true);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0fabd4f2-6c7a-4b8e-b9dc-fd2e78cc0aab",
								"type": "text/javascript",
								"exec": [
									"var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
									"var purchaseAmount = randItemQuantity * unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_aerobics}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb81e41d-f105-4a96-80ea-3bfd8b8294b1",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
									"",
									"tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
									" ",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(jsonData.purchaseSummary.purchaseOpportunity);  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_100pm}}",
								"enrollment",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdd27504-ee86-485b-ae18-786b9dbacc20",
								"type": "text/javascript",
								"exec": [
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var attendStatus = postman.getEnvironmentVariable(\"attendStatus\");",
									"postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id); ",
									"//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
									"if(attendStatus == 'reserved'){",
									"    if (responseCode.code != 409)",
									"    {",
									"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    }",
									"    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
									"}else{",
									"    if (responseCode.code != 200)",
									"    {",
									"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    }",
									"    tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
									"tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\\\"attended\\\"\");",
									"tests[\"Response Body has Correct Member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\");",
									"tests[\"Response Body has Correct LastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct photoId\"] =  responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
									"tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");",
									"tests[\"Response Body has Correct attendanceDateTime\"] = responseBody.has(\"\\\"attendanceDateTime\\\":\"+\"\\\"\"+jsonData.attendanceDateTime+\"\\\"\");",
									"tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"//tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"expirationDateTime\");",
									"tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");",
									"tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":false\");",
									"tests[\"Response Body has Correct unlimited\"] = responseBody.has(jsonData.purchaseSummary.unlimited);",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0cb9d1ca-53c0-485f-8d6d-5ae17fd4ffac",
								"type": "text/javascript",
								"exec": [
									"var attendStatus = ''",
									"var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
									"//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
									"console.log(\"Attend percent:\" + attendPercent)",
									"if(Math.random() <=  attendPercent){",
									"    attendStatus = \"attended\"",
									"}else{",
									"    attendStatus = \"reserved\"",
									"}",
									"postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}?status={{attendStatus}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_100pm}}",
								"enrollment",
								"{{userId}}"
							],
							"query": [
								{
									"key": "status",
									"value": "{{attendStatus}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create and Enroll Member for 2PM (3)",
			"description": null,
			"item": [
				{
					"name": "createUserMember",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47066dea-7933-475d-8ce8-751bebeb1293",
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
									"postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
									"",
									"tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"}",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cde17f47-54c3-49ef-8c9b-af761f45b504",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
						},
						"url": {
							"raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
							"host": [
								"{{manageMember}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"member"
							]
						}
					},
					"response": []
				},
				{
					"name": "createPurchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18b83da2-9ca7-4f59-98d0-18081f40b44f",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
									"postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
									"",
									"tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_pilates\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+true);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"}",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "84b4d7ae-0464-46fe-b515-5fe02c149ea3",
								"type": "text/javascript",
								"exec": [
									"var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
									"var purchaseAmount = randItemQuantity * unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_pilates}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d8f0eaf-66fe-4536-b7d0-63faa923052e",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
									"",
									"tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhotoId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);",
									"",
									"",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_200pm}}",
								"enrollment",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a55046ca-1550-4b33-a99f-6e2622469d42",
								"type": "text/javascript",
								"exec": [
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var attendStatus = postman.getEnvironmentVariable(\"attendStatus\");",
									"postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id); ",
									"//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
									"if(attendStatus == 'reserved'){",
									"    if (responseCode.code != 409)",
									"    {",
									"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    }",
									"    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
									"}else{",
									"    if (responseCode.code != 200)",
									"    {",
									"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    }",
									"    tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
									"tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\\\"attended\\\"\");",
									"tests[\"Response Body has Correct Member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\");",
									"tests[\"Response Body has Correct LastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct photoId\"] =  responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
									"tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");",
									"tests[\"Response Body has Correct attendanceDateTime\"] = responseBody.has(\"\\\"attendanceDateTime\\\":\"+\"\\\"\"+jsonData.attendanceDateTime+\"\\\"\");",
									"tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"//tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"expirationDateTime\");",
									"tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");",
									"tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":false\");",
									"tests[\"Response Body has Correct unlimited\"] = responseBody.has(jsonData.purchaseSummary.unlimited);",
									"}",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d1e4094a-a304-4b01-bbd8-5b090a2eb0ea",
								"type": "text/javascript",
								"exec": [
									"var attendStatus = ''",
									"var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
									"//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
									"console.log(\"Attend percent:\" + attendPercent)",
									"if(Math.random() <=  attendPercent){",
									"    attendStatus = \"attended\"",
									"}else{",
									"    attendStatus = \"reserved\"",
									"}",
									"postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_200pm}}",
								"enrollment",
								"{{userId}}"
							],
							"query": [
								{
									"key": "status",
									"value": "{{attendStatus}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create and Enroll Member for 3PM (2)",
			"description": null,
			"item": [
				{
					"name": "createUserMember",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7586c3b-87ee-4b37-ac01-75c06a22a7c1",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
									"postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
									"",
									"tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0272aff1-9918-45f1-a243-8a27bc110926",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
						},
						"url": {
							"raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
							"host": [
								"{{manageMember}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"member"
							]
						}
					},
					"response": []
				},
				{
					"name": "createPurchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f757573-4310-4259-9a95-9a6223ad1b00",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
									"postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
									"",
									"tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_zumba\")+\"\\\"\");   ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+true);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"}",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6fc8c0ed-c601-430e-afb4-d16a435e267d",
								"type": "text/javascript",
								"exec": [
									"var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
									"var purchaseAmount = randItemQuantity * unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_zumba}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15c86299-7781-4189-a730-07b21766fd1d",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
									"",
									"tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);",
									"",
									"}",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_300pm}}",
								"enrollment",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf6fdc58-768b-4522-b259-0f63dcbc1be3",
								"type": "text/javascript",
								"exec": [
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var attendStatus = postman.getEnvironmentVariable(\"attendStatus\");",
									"postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id); ",
									"//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
									"if(attendStatus == 'reserved'){",
									"    if (responseCode.code != 409)",
									"    {",
									"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    }",
									"    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
									"}else{",
									"    if (responseCode.code != 200)",
									"    {",
									"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    }",
									"    tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
									"tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\\\"attended\\\"\");",
									"tests[\"Response Body has Correct Member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\");",
									"tests[\"Response Body has Correct LastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct photoId\"] =  responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
									"tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");",
									"tests[\"Response Body has Correct attendanceDateTime\"] = responseBody.has(\"\\\"attendanceDateTime\\\":\"+\"\\\"\"+jsonData.attendanceDateTime+\"\\\"\");",
									"tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"//tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"expirationDateTime\");",
									"tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");",
									"tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":false\");",
									"tests[\"Response Body has Correct unlimited\"] = responseBody.has(jsonData.purchaseSummary.unlimited);",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "44d00465-d338-4c20-9584-62dffdf9fc10",
								"type": "text/javascript",
								"exec": [
									"var attendStatus = ''",
									"var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
									"//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
									"console.log(\"Attend percent:\" + attendPercent)",
									"if(Math.random() <=  attendPercent){",
									"    attendStatus = \"attended\"",
									"}else{",
									"    attendStatus = \"reserved\"",
									"}",
									"postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}?status={{attendStatus}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_300pm}}",
								"enrollment",
								"{{userId}}"
							],
							"query": [
								{
									"key": "status",
									"value": "{{attendStatus}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create and Enroll Member for 4:30PM",
			"description": null,
			"item": [
				{
					"name": "createUserMember",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bdf8c6b8-b198-47af-8139-9d9b0cae8848",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
									"postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
									"",
									"tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0521e28-0fcd-4020-9902-4b59134dc251",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
						},
						"url": {
							"raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
							"host": [
								"{{manageMember}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"member"
							]
						}
					},
					"response": []
				},
				{
					"name": "createPurchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d565bf7-fc62-4012-a346-622ff43ff09f",
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
									"postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
									"postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
									"postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
									"",
									"tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_tur\")+\"\\\"\");   ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"",
									"}",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "14b8d380-03f0-42b1-90e9-ba610166dec3",
								"type": "text/javascript",
								"exec": [
									"var randItemQuantity = 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
									"var purchaseAmount = randItemQuantity * unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited_tur}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1087294-ddf7-4710-9179-4e91c0eba491",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
									"",
									"tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
									"",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_430pm}}",
								"enrollment",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6f78b2e-db62-48b2-a411-998c27ed5477",
								"type": "text/javascript",
								"exec": [
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var attendStatus = postman.getEnvironmentVariable(\"attendStatus\");",
									"postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id); ",
									"//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
									"if(attendStatus == 'reserved'){",
									"    if (responseCode.code != 409)",
									"    {",
									"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    }",
									"    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
									"}else{",
									"    if (responseCode.code != 200)",
									"    {",
									"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    }",
									"    tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
									"tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\\\"attended\\\"\");",
									"tests[\"Response Body has Correct Member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\");",
									"tests[\"Response Body has Correct LastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct photoId\"] =  responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
									"tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");",
									"tests[\"Response Body has Correct attendanceDateTime\"] = responseBody.has(\"\\\"attendanceDateTime\\\":\"+\"\\\"\"+jsonData.attendanceDateTime+\"\\\"\");",
									"tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"//tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"expirationDateTime\");",
									"tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");",
									"tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":false\");",
									"tests[\"Response Body has Correct unlimited\"] = responseBody.has(jsonData.purchaseSummary.unlimited);",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7c939697-ff25-4040-8386-de831c1fda68",
								"type": "text/javascript",
								"exec": [
									"var attendStatus = ''",
									"var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
									"//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
									"console.log(\"Attend percent:\" + attendPercent)",
									"if(Math.random() <=  attendPercent){",
									"    attendStatus = \"attended\"",
									"}else{",
									"    attendStatus = \"reserved\"",
									"}",
									"postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}?status={{attendStatus}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_430pm}}",
								"enrollment",
								"{{userId}}"
							],
							"query": [
								{
									"key": "status",
									"value": "{{attendStatus}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create and Enroll Member for 5PM",
			"description": null,
			"item": [
				{
					"name": "createUserMember",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1deb1e60-457e-4b3d-a4ad-cc428e6a1845",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
									"postman.setEnvironmentVariable(\"userId\", jsonData.userId);",
									"",
									"tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bb4b9981-d58c-491c-a5b8-fb7f556bc302",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
						},
						"url": {
							"raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
							"host": [
								"{{manageMember}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"member"
							]
						}
					},
					"response": []
				},
				{
					"name": "createPurchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96c9c375-6089-4e93-ac24-5e526a001e2c",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
									"postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
									"",
									"tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct Item id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"saleItemsId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited_cyc\")+\"\\\"\");   ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"\\\"invoiceId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"invoiceId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CASH\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@qa4life.com\"+\"\\\"\");",
									"",
									"}",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c53e27b-7a62-465d-b01a-1c67e95d6d65",
								"type": "text/javascript",
								"exec": [
									"var randItemQuantity = 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
									"var purchaseAmount = randItemQuantity * unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited_cyc}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@qa4life.com\",\n    \"type\": \"CASH\"\n  }\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4fa55911-c4a9-4815-bf68-6abc06374897",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
									"",
									"tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");  ",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\"); ",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\");  ",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+false);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);",
									"",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_500pm}}",
								"enrollment",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca32753b-54c0-48c5-962d-73e5904a63da",
								"type": "text/javascript",
								"exec": [
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var attendStatus = postman.getEnvironmentVariable(\"attendStatus\");",
									"postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id); ",
									"//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
									"if(attendStatus == 'reserved'){",
									"    if (responseCode.code != 409)",
									"    {",
									"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    }",
									"    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
									"}else{",
									"    if (responseCode.code != 200)",
									"    {",
									"        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"        tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"    }",
									"    tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"enrollmentId\")+\"\\\"\");  ",
									"tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\\\"attended\\\"\");",
									"tests[\"Response Body has Correct Member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");  ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\");",
									"tests[\"Response Body has Correct LastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct photoId\"] =  responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\"); ",
									"tests[\"Response Body has Correct reservationDateTime\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");",
									"tests[\"Response Body has Correct attendanceDateTime\"] = responseBody.has(\"\\\"attendanceDateTime\\\":\"+\"\\\"\"+jsonData.attendanceDateTime+\"\\\"\");",
									"tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"//tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"expirationDateTime\");",
									"tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");",
									"tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":false\");",
									"tests[\"Response Body has Correct unlimited\"] = responseBody.has(jsonData.purchaseSummary.unlimited);",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "160ec3a8-ee43-45b6-b44a-d9c571b3ff34",
								"type": "text/javascript",
								"exec": [
									"var attendStatus = ''",
									"var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
									"//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
									"console.log(\"Attend percent:\" + attendPercent)",
									"if(Math.random() <=  attendPercent){",
									"    attendStatus = \"attended\"",
									"}else{",
									"    attendStatus = \"reserved\"",
									"}",
									"postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}?status={{attendStatus}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_500pm}}",
								"enrollment",
								"{{userId}}"
							],
							"query": [
								{
									"key": "status",
									"value": "{{attendStatus}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Available Session",
			"description": null,
			"item": [
				{
					"name": "getAvailableSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f59284c-9d6a-49c0-8ebf-71e4a08b53d9",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if(responseCode.code==200) {",
									"    ",
									"    tests[\"Response Body has Correct enrolled\"] = responseBody.has(\"\\\"enrolled\\\":\"+false);",
									"",
									"    tests[\"Response Body has scheduled\"] = responseBody.has(\"scheduled\");",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"unlimited\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/enrollment/{{userId}}/session/{{eventId_1030am}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"enrollment",
								"{{userId}}",
								"session",
								"{{eventId_1030am}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Location",
			"description": null,
			"item": [
				{
					"name": "updateLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95a4d4d9-7655-4e1d-bdab-aab2b136ecbf",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\"); ",
									"tests[\"Response Body has Correct phoneNumber\"] = responseBody.has(\"\\\"phoneNumber\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"phoneNumber\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct phoneExtension\"] = responseBody.has(\"\\\"phoneExtension\\\":\"+\"\\\"\"+411+\"\\\"\"); ",
									"tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.email+\"\\\"\"); ",
									"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+jsonData.number+\"\\\"\"); ",
									"tests[\"Response Body has Correct waiverDocId\"] = responseBody.has(\"\\\"waiverDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\");",
									"tests[\"Response Body has Correct termDocId\"] = responseBody.has(\"\\\"termDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
									"tests[\"Response Body has Correct address id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.address.id+\"\\\"\");",
									"tests[\"Response Body has Correct address1\"] = responseBody.has(\"\\\"address1\\\":\"+\"\\\"\"+\"123 Fitness Lane\"+\"\\\"\");",
									"tests[\"Response Body has Correct address2\"] = responseBody.has(\"\\\"address2\\\":\"+\"\\\"\"+jsonData.address.address2+\"\\\"\");",
									"tests[\"Response Body has Correct address city\"] = responseBody.has(\"\\\"city\\\":\"+\"\\\"\"+\"Little Rock\"+\"\\\"\");",
									"tests[\"Response Body has Correct address zipCode\"] = responseBody.has(\"\\\"zipCode\\\":\"+\"\\\"33935\"+\"\\\"\");",
									"tests[\"Response Body has Correct address state\"] = responseBody.has(\"\\\"state\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randState\")+\"\\\"\");",
									"tests[\"Response Body has Correct address country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"\"+\"United States\"+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"University Fitness Center #{{orgNumber}}\",\r\n    \"address\" : {\r\n      \"address1\" : \"123 Fitness Lane\",\r\n      \"address2\" : \"PO Box {{$randomInt}}\",\r\n      \"city\" : \"Little Rock\",\r\n      \"state\" : \"{{randState}}\",\r\n      \"country\" : \"United States\",\r\n      \"zipCode\" : \"33935\"\r\n    },\r\n  \"email\" : {\r\n    \"address\" : \"UniversityFitness{{orgNumber}}@ufit.com\"\r\n  },\r\n  \"phone\" : {\r\n      \"number\" : \"{{phoneNumber}}\",\r\n      \"extension\" : \"411\"\r\n    }\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{my-organization}}/{{organizationId}}/location/{{locationId}}",
							"host": [
								"{{my-organization}}"
							],
							"path": [
								"{{organizationId}}",
								"location",
								"{{locationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ffe900d-6ec7-49bc-a20a-181905d8cb81",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if(responseCode.code==200) {",
									"     var jsonData = JSON.parse(responseBody);",
									"    ",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.name+\"\\\"\"); ",
									"tests[\"Response Body has Correct phoneNumber\"] = responseBody.has(\"\\\"phoneNumber\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"phoneNumber\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct phoneExtension\"] = responseBody.has(\"\\\"phoneExtension\\\":\"+\"\\\"\"+411+\"\\\"\"); ",
									"tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.email+\"\\\"\"); ",
									"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+jsonData.number+\"\\\"\"); ",
									"tests[\"Response Body has Correct waiverDocId\"] = responseBody.has(\"\\\"waiverDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\");",
									"tests[\"Response Body has Correct termDocId\"] = responseBody.has(\"\\\"termDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
									"tests[\"Response Body has Correct address id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.address.id+\"\\\"\");",
									"tests[\"Response Body has Correct address1\"] = responseBody.has(\"\\\"address1\\\":\"+\"\\\"\"+\"123 Fitness Lane\"+\"\\\"\");",
									"tests[\"Response Body has Correct address2\"] = responseBody.has(\"\\\"address2\\\":\"+\"\\\"\"+jsonData.address.address2+\"\\\"\");",
									"tests[\"Response Body has Correct address city\"] = responseBody.has(\"\\\"city\\\":\"+\"\\\"\"+\"Little Rock\"+\"\\\"\");",
									"tests[\"Response Body has Correct address zipCode\"] = responseBody.has(\"\\\"zipCode\\\":\"+\"\\\"33935\"+\"\\\"\");",
									"tests[\"Response Body has Correct address country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"\"+\"United States\"+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"University Fitness Center #{{orgNumber}}\",\r\n    \"address\" : {\r\n      \"address1\" : \"123 Fitness Lane\",\r\n      \"address2\" : \"PO Box {{$randomInt}}\",\r\n      \"city\" : \"Little Rock\",\r\n      \"state\" : \"{{randState}}\",\r\n      \"country\" : \"United States\",\r\n      \"zipCode\" : \"33935\"\r\n    },\r\n  \"email\" : {\r\n    \"address\" : \"UniversityFitness{{orgNumber}}@ufit.com\"\r\n  },\r\n  \"phone\" : {\r\n      \"number\" : \"{{phoneNumber}}\",\r\n      \"extension\" : \"411\"\r\n    }\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{my-organization}}/{{organizationId}}/location/{{locationId}}",
							"host": [
								"{{my-organization}}"
							],
							"path": [
								"{{organizationId}}",
								"location",
								"{{locationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetLocationDocument",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3202c8d0-aeef-43d0-9fab-b2044d06825e",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
									"    tests[\"Response Body has Correct waiverDocId\"] = responseBody.has(\"\\\"waiverDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\");",
									"tests[\"Response Body has Correct termDocId\"] = responseBody.has(\"\\\"termDocId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"University Fitness Center #{{orgNumber}}\",\r\n    \"address\" : {\r\n      \"address1\" : \"123 Fitness Lane\",\r\n      \"address2\" : \"PO Box {{$randomInt}}\",\r\n      \"city\" : \"Little Rock\",\r\n      \"state\" : \"{{randState}}\",\r\n      \"country\" : \"United States\",\r\n      \"zipCode\" : \"33935\"\r\n    },\r\n  \"email\" : {\r\n    \"address\" : \"UniversityFitness{{orgNumber}}@ufit.com\"\r\n  },\r\n  \"phone\" : {\r\n      \"number\" : \"{{phoneNumber}}\",\r\n      \"extension\" : \"411\"\r\n    }\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{my-organization}}/{{organizationId}}/{{locationId}}/document",
							"host": [
								"{{my-organization}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"document"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Send Reset Password Mail",
			"description": "Sends Reset Password email with Passcode for Reset Password/Forgot Password",
			"item": [
				{
					"name": "sendPasswordResetMail",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 202)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 202;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YXV0b21hdGVkLXRlc3RpbmctY2xpZW50OiNhbnRpLWpvbmFz"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{employeeEmail}}\"\r\n}"
						},
						"url": {
							"raw": "{{authentication}}/organization/{{organizationId}}/password?reset=true",
							"host": [
								"{{authentication}}"
							],
							"path": [
								"organization",
								"{{organizationId}}",
								"password"
							],
							"query": [
								{
									"key": "reset",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET Schedule",
			"description": null,
			"item": [
				{
					"name": "{{schedule}}/{{organizationId}}/{{locationId}}/schedule?startDateTime={{eventStartTime}}&endDateTime={{eventEndTime}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ef2e740-0d9d-45ee-bf86-34fc0f5601e3",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200) {",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if (responseCode.code === 200) {",
									"",
									"    var jsonData = JSON.parse(responseBody);",
									"",
									"    tests[\"Response Body has Correct  checkInTime\"] = responseBody.has(\"\\\"checkInTime\\\":\"+60);",
									"    tests[\"Response Body has Correct  eventId\"] = responseBody.has(\"\\\"eventId\\\":\" + \"\\\"\" +jsonData.content[0].eventId+\"\\\"\");",
									"    tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].eventLevel.name+\"\\\"\");",
									"    tests[\"Response Body has Correct  eventCategoryId\"] = responseBody.has(\"\\\"eventCategoryId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct  locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"",
									"    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\" + jsonData.pageable.sort.sorted);",
									"    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\" + jsonData.pageable.sort.unsorted);",
									"    tests[\"Response Body has Correct  pageSize\"] = responseBody.has(\"\\\"pageSize\\\":\" + jsonData.pageable.pageSize);",
									"    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"pageNumber\\\":\" + jsonData.pageable.pageNumber);",
									"    tests[\"Response Body has Correct  offset\"] = responseBody.has(\"\\\"offset\\\":\" + jsonData.pageable.offset);",
									"    tests[\"Response Body has Correct  paged\"] = responseBody.has(\"\\\"paged\\\":\" + jsonData.pageable.paged);",
									"    tests[\"Response Body has Correct  unpaged\"] = responseBody.has(\"\\\"unpaged\\\":\" + jsonData.pageable.unpaged);",
									"",
									"    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\" + jsonData.totalElements);",
									"    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\" + jsonData.last);",
									"    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\" + jsonData.totalPages);",
									"    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\" + jsonData.first);",
									"    ",
									"    tests[\"Response Body has Correct  startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\" + \"\\\"\" +jsonData.content[0].startDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct  endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\" + \"\\\"\" +jsonData.content[0].endDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct  enrollmentFull\"] = responseBody.has(\"\\\"enrollmentFull\\\":\"+jsonData.content[0].enrollmentFull);",
									"    ",
									"  //  tests[\"Response Body has Correct  event type name1\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\" +\"Yoga\"+\"\\\"\");",
									" //   tests[\"Response Body has Correct  event type name2\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\" +\"Advanced\"+\"\\\"\");",
									"    // tests[\"Response Body has Correct  event type name3\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\" +\"Movies\"+\"\\\"\");",
									" //   tests[\"Response Body has Correct  event type name4\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\" +\"Intermediate\"+\"\\\"\");",
									"//    tests[\"Response Body has Correct  event type name5\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\" +\"Beginner\"+\"\\\"\");",
									" //   tests[\"Response Body has Correct  event type name6\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\" +\"P90X\"+\"\\\"\");",
									"",
									"",
									"    tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/schedule?startDateTime={{eventStartTime}}&endDateTime={{eventEndTime}}",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"schedule"
							],
							"query": [
								{
									"key": "startDateTime",
									"value": "{{eventStartTime}}"
								},
								{
									"key": "endDateTime",
									"value": "{{eventEndTime}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET Registration",
			"description": null,
			"item": [
				{
					"name": "getEmployeeRegistration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97dcb97c-f56a-4c7b-804f-de0ce7f309ec",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    ",
									"tests[\"Response Body has contains id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.user.id+\"\\\"\");",
									"tests[\"Response Body has Correct Email id\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"getEmpEmailId\")+\"\\\"\");",
									"tests[\"Response Body has Correct First name\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"getEmpFirstName\")+\"\\\"\");",
									"tests[\"Response Body has Correct Last name\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"getEmpLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct Person id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.person.id+\"\\\"\");",
									"tests[\"Response Body has Correct Phone number\"] = responseBody.has(\"phoneNumber\");",
									"   ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{registration}}/{{organizationId}}/user/token/{{employeeTokenId}}",
							"host": [
								"{{registration}}"
							],
							"path": [
								"{{organizationId}}",
								"user",
								"token",
								"{{employeeTokenId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"id": "0f30bc01-6c10-4100-a9d9-2bc6bc67473d",
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"id": "f3f4037c-1b41-428b-bf1e-262d718a1bbd",
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "GET Enrollment",
			"description": null,
			"item": [
				{
					"name": "getEnrollment_1030AM",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bee2d2f-3ece-4918-b089-ed6cb6a34576",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct event id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventLevel id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventLevel.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.event.eventLevel.name+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventType.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Yoga\"+\"\\\"\");",
									"    tests[\"Response Body has Correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+jsonData.event.startDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+jsonData.event.endDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct maxCapacity\"] = responseBody.has(\"\\\"maxCapacity\\\":\"+jsonData.event.maxCapacity);",
									"    ",
									"    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].reservationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.enrollment[0].status+\"\\\"\");",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.id+\"\\\"\");",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.userId+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.firstName+\"\\\"\");",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.lastName+\"\\\"\");",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.photoId+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.email+\"\\\"\");",
									"    ",
									"    //tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].purchaseSummary.expirationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.enrollment[0].purchaseSummary.expiringSoon);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+jsonData.enrollment[0].purchaseSummary.purchaseOpportunity);",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.enrollment[0].purchaseSummary.unlimited);",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_1030am}}",
								"enrollment"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEnrollment_1200PM",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22b0349a-24ad-47a4-9081-294e4fdc68bd",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct event id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventLevel id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventLevel.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.event.eventLevel.name+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventType.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"P90X\"+\"\\\"\");",
									"    tests[\"Response Body has Correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+jsonData.event.startDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+jsonData.event.endDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct maxCapacity\"] = responseBody.has(\"\\\"maxCapacity\\\":\"+jsonData.event.maxCapacity);",
									"    ",
									"    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].reservationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.enrollment[0].status+\"\\\"\");",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.id+\"\\\"\");",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.userId+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.firstName+\"\\\"\");",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.lastName+\"\\\"\");",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.photoId+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.email+\"\\\"\");",
									"    ",
									"    //tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].purchaseSummary.expirationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.enrollment[0].purchaseSummary.expiringSoon);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+jsonData.enrollment[0].purchaseSummary.purchaseOpportunity);",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.enrollment[0].purchaseSummary.unlimited);",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_1200pm}}",
								"enrollment"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEnrollment_100PM",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff3fa8d1-9e53-42ab-be57-fd19bcb2be27",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct event id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventLevel id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventLevel.id+\"\\\"\");",
									"  //  tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Intermediate\"+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventType.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Aerobics\"+\"\\\"\");",
									"    tests[\"Response Body has Correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+jsonData.event.startDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+jsonData.event.endDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct maxCapacity\"] = responseBody.has(\"\\\"maxCapacity\\\":\"+jsonData.event.maxCapacity);",
									"    ",
									"    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].reservationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.enrollment[0].status+\"\\\"\");",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.id+\"\\\"\");",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.userId+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.firstName+\"\\\"\");",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.lastName+\"\\\"\");",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.photoId+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.email+\"\\\"\");",
									"    ",
									"    //tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"expirationDateTime\");",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.enrollment[0].purchaseSummary.expiringSoon);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+jsonData.enrollment[0].purchaseSummary.purchaseOpportunity);",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.enrollment[0].purchaseSummary.unlimited);",
									"    ",
									"    ",
									"",
									"}",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_100pm}}",
								"enrollment"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEnrollment_200PM",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "260888b0-e207-4908-bbc3-d20917831243",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct event id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventLevel id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventLevel.id+\"\\\"\");",
									"  //  tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Beginner\"+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventType.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Pilates\"+\"\\\"\");",
									"    tests[\"Response Body has Correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+jsonData.event.startDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+jsonData.event.endDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct maxCapacity\"] = responseBody.has(\"\\\"maxCapacity\\\":\"+jsonData.event.maxCapacity);",
									"    ",
									"    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].reservationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.enrollment[0].status+\"\\\"\");",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.id+\"\\\"\");",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.userId+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.firstName+\"\\\"\");",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.lastName+\"\\\"\");",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.photoId+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.email+\"\\\"\");",
									"    ",
									"    //tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"expirationDateTime\");",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"purchaseOpportunity\");",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.enrollment[0].purchaseSummary.expiringSoon);",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.enrollment[0].purchaseSummary.unlimited);",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_200pm}}",
								"enrollment"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEnrollment_300PM ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20ba03af-2a94-4e84-93c4-7530c618cfbf",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct event id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventLevel id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventLevel.id+\"\\\"\");",
									"//    tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Advanced\"+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventType.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Zumba\"+\"\\\"\");",
									"    tests[\"Response Body has Correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+jsonData.event.startDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+jsonData.event.endDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct maxCapacity\"] = responseBody.has(\"\\\"maxCapacity\\\":\"+jsonData.event.maxCapacity);",
									"    ",
									"    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].reservationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.enrollment[0].status+\"\\\"\");",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.id+\"\\\"\");",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.userId+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.firstName+\"\\\"\");",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.lastName+\"\\\"\");",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.photoId+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.email+\"\\\"\");",
									"    ",
									"    //tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].purchaseSummary.expirationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.enrollment[0].purchaseSummary.expiringSoon);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+jsonData.enrollment[0].purchaseSummary.purchaseOpportunity);",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.enrollment[0].purchaseSummary.unlimited);",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_300pm}}",
								"enrollment"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEnrollment_430PM",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88a224b1-b6d3-43da-a7aa-4b6fdd133d5d",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct event id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventLevel id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventLevel.id+\"\\\"\");",
									"  //  tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Intermediate\"+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventType.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Turbo Kick\"+\"\\\"\");",
									"    tests[\"Response Body has Correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+jsonData.event.startDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+jsonData.event.endDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct maxCapacity\"] = responseBody.has(\"\\\"maxCapacity\\\":\"+jsonData.event.maxCapacity);",
									"    ",
									"    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].reservationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.enrollment[0].status+\"\\\"\");",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.id+\"\\\"\");",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.userId+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.firstName+\"\\\"\");",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.lastName+\"\\\"\");",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.photoId+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.email+\"\\\"\");",
									"    ",
									"    //tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].purchaseSummary.expirationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.enrollment[0].purchaseSummary.expiringSoon);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+jsonData.enrollment[0].purchaseSummary.purchaseOpportunity);",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.enrollment[0].purchaseSummary.unlimited);",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_430pm}}",
								"enrollment"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEnrollment_500PM",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "183551b0-d853-4286-88c2-e76ecd985e02",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct event id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventLevel id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventLevel.id+\"\\\"\");",
									"  //  tests[\"Response Body has Correct eventLevel name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Advanced\"+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.event.eventType.id+\"\\\"\");",
									"    tests[\"Response Body has Correct eventType name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Cycling\"+\"\\\"\");",
									"    tests[\"Response Body has Correct startDateTime\"] = responseBody.has(\"\\\"startDateTime\\\":\"+\"\\\"\"+jsonData.event.startDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct endDateTime\"] = responseBody.has(\"\\\"endDateTime\\\":\"+\"\\\"\"+jsonData.event.endDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct maxCapacity\"] = responseBody.has(\"\\\"maxCapacity\\\":\"+jsonData.event.maxCapacity);",
									"    ",
									"    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].reservationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.enrollment[0].status+\"\\\"\");",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.id+\"\\\"\");",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.userId+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.firstName+\"\\\"\");",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.lastName+\"\\\"\");",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.photoId+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.enrollment[0].member.person.email+\"\\\"\");",
									"    ",
									"    //tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.enrollment[0].purchaseSummary.expirationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.enrollment[0].purchaseSummary.expiringSoon);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+jsonData.enrollment[0].purchaseSummary.purchaseOpportunity);",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.enrollment[0].purchaseSummary.unlimited);",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_500pm}}",
								"enrollment"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEnrollmentListByUserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f374fa69-9cdc-43b5-86b2-69a5c50546b3",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    ",
									"    ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.firstName+\"\\\"\");",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.lastName+\"\\\"\");",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.photoId+\"\\\"\");",
									"    ",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/enrollment/{{userId}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"enrollment",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteEnrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4b7cc97-eb3a-4d6d-8b6e-27af414cc0c8",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    ",
									"    tests[\"Response Body has Correct enrollment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");",
									"    tests[\"Response Body has Correct enrollment date\"] = responseBody.has(\"\\\"reservationDateTime\\\":\"+\"\\\"\"+jsonData.reservationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct status\"] = responseBody.has(\"\\\"status\\\":\"+\"\\\"\"+jsonData.status+\"\\\"\");",
									"    tests[\"Response Body has Correct member id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.member.id+\"\\\"\");",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.member.userId+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+jsonData.member.person.firstName+\"\\\"\");",
									"    tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+jsonData.member.person.lastName+\"\\\"\");",
									"    tests[\"Response Body has Correct photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.member.person.photoId+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.member.person.email+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct expirationDateTime\"] = responseBody.has(\"\\\"expirationDateTime\\\":\"+\"\\\"\"+jsonData.purchaseSummary.expirationDateTime+\"\\\"\");",
									"    tests[\"Response Body has Correct expiringSoon\"] = responseBody.has(\"\\\"expiringSoon\\\":\"+jsonData.purchaseSummary.expiringSoon);",
									"    tests[\"Response Body has Correct purchaseOpportunity\"] = responseBody.has(\"\\\"purchaseOpportunity\\\":\"+jsonData.purchaseSummary.purchaseOpportunity);",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+jsonData.purchaseSummary.unlimited);",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}",
							"host": [
								"{{enrollment}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"event",
								"{{eventId_500pm}}",
								"enrollment",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"id": "e4cda530-a2cb-4eb5-902d-ffb9925cbead",
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"id": "de38ace0-0741-4734-b152-c7dc82c68e46",
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Login Tests",
			"description": null,
			"item": [
				{
					"name": "OwnerLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9f5cf37-a168-4582-8a61-e09ac55b62ea",
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"loginAccessToken\", jsonData.accessToken);",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YXV0b21hdGVkLXRlc3RpbmctY2xpZW50OiNhbnRpLWpvbmFz"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{ownerPassword}}\",\r\n  \"username\": \"{{ownerEmail}}\"\r\n}"
						},
						"url": {
							"raw": "{{authentication}}/organization/{{organizationId}}/login?clientId=automated-testing-client",
							"host": [
								"{{authentication}}"
							],
							"path": [
								"organization",
								"{{organizationId}}",
								"login"
							],
							"query": [
								{
									"key": "clientId",
									"value": "automated-testing-client"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ABCStaffLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c28315bf-2127-47b7-a54a-1948f7ecc644",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    ",
									"    tests[\"Response Body has Correct accessToken\"] = responseBody.has(\"\\\"accessToken\\\":\"+\"\\\"\"+jsonData.accessToken+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] =  responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct clientId\"] = responseBody.has(\"\\\"clientId\\\":\"+\"\\\"\"+\"automated-testing-client\"+\"\\\"\");",
									"}",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YXV0b21hdGVkLXRlc3RpbmctY2xpZW50OiNhbnRpLWpvbmFz"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Sydney@32\",\r\n  \"username\": \"animesh.kumar@abcfinancial.com\"\r\n}"
						},
						"url": {
							"raw": "{{authentication}}/organization/{{organizationId}}/login?clientId=automated-testing-client",
							"host": [
								"{{authentication}}"
							],
							"path": [
								"organization",
								"{{organizationId}}",
								"login"
							],
							"query": [
								{
									"key": "clientId",
									"value": "automated-testing-client"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc2594f0-f4ab-424d-8673-e90ef9fafeed",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 204)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"tests[\"Response code should be 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authentication}}/organization/{{organizationId}}/logout?token={{loginAccessToken}}",
							"host": [
								"{{authentication}}"
							],
							"path": [
								"organization",
								"{{organizationId}}",
								"logout"
							],
							"query": [
								{
									"key": "token",
									"value": "{{loginAccessToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET Package",
			"description": null,
			"item": [
				{
					"name": "getPackage_yoga",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b732fa0-69bd-4b2b-9f77-01be9ab4eec0",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].name+\"\\\"\");",
									"    tests[\"Response Body has Correct  type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+jsonData.content[0].type+\"\\\"\");",
									"    tests[\"Response Body has Correct  unitPrice\"] = responseBody.has(\"\\\"unitPrice\\\":\"+100);",
									"    tests[\"Response Body has Correct  quantity\"] = responseBody.has(\"\\\"quantity\\\":\"+1);",
									"    tests[\"Response Body has Correct  metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct  extendedPrice\"] = responseBody.has(\"\\\"extendedPrice\\\":\"+100);",
									"    tests[\"Response Body has Correct  expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");",
									"    tests[\"Response Body has Correct  expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+1);",
									"    tests[\"Response Body has Correct  expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"DAYS\"+\"\\\"\");",
									"    tests[\"Response Body has Correct  lastPurchasedPackage\"] = responseBody.has(\"\\\"lastPurchasedPackage\\\":\"+false);",
									"    ",
									"    tests[\"Response Body has Correct  associatedEventTypes\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+jsonData.content[0].associatedEventTypes[0].eligibility[0].itemId+\"\\\"\");",
									"    ",
									"    ",
									"    tests[\"Response Body has Correct  pageable\"] = responseBody.has(\"\\\"pageable\\\":\"+\"\\\"\"+jsonData.pageable);",
									"    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
									"    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
									"    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
									"    tests[\"Response Body has Correct  size\"] = responseBody.has(\"\\\"size\\\":\"+jsonData.size);",
									"    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"number\\\":\"+jsonData.number);",
									"    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.sort.sorted);",
									"    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.sort.unsorted);",
									"    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
									"    tests[\"Response Body has Correct  numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":\"+jsonData.numberOfElements);",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{package}}/{{organizationId}}/{{locationId}}/package/{{eventTypeId_yoga}}?userId={{userId}}",
							"host": [
								"{{package}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"package",
								"{{eventTypeId_yoga}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getPackage_p90x",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6bdb6804-358a-4a97-9864-1f9326670c30",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].name+\"\\\"\");",
									"    tests[\"Response Body has Correct  type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+jsonData.content[0].type+\"\\\"\");",
									"    tests[\"Response Body has Correct  quantity\"] = responseBody.has(\"\\\"quantity\\\":\"+1);",
									"    tests[\"Response Body has Correct  metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct  expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");",
									"    tests[\"Response Body has Correct  expirationTime\"] = responseBody.has(\"expirationTime\");",
									"    tests[\"Response Body has Correct  expirationUnit\"] = responseBody.has(\"expirationUnit\");",
									"    tests[\"Response Body has Correct  lastPurchasedPackage\"] = responseBody.has(\"\\\"lastPurchasedPackage\\\":\"+false);",
									"    ",
									"    tests[\"Response Body has Correct  associatedEventTypes\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+jsonData.content[0].associatedEventTypes[0].eligibility[0].itemId+\"\\\"\");",
									"   ",
									"    ",
									"    tests[\"Response Body has Correct  pageable\"] = responseBody.has(\"\\\"pageable\\\":\"+\"\\\"\"+jsonData.pageable);",
									"    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
									"    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
									"    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
									"    tests[\"Response Body has Correct  size\"] = responseBody.has(\"\\\"size\\\":\"+jsonData.size);",
									"    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"number\\\":\"+jsonData.number);",
									"    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.sort.sorted);",
									"    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.sort.unsorted);",
									"    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
									"    tests[\"Response Body has Correct  numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":\"+jsonData.numberOfElements);",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{package}}/{{organizationId}}/{{locationId}}/package/{{eventTypeId_p90x}}?userId={{userId}}",
							"host": [
								"{{package}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"package",
								"{{eventTypeId_p90x}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getPackage_pilates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b89263af-a3a3-4d39-915c-b425d6baca1e",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].name+\"\\\"\");",
									"    tests[\"Response Body has Correct  type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+jsonData.content[0].type+\"\\\"\");",
									"    tests[\"Response Body has Correct  unitPrice\"] = responseBody.has(\"unitPrice\");",
									"    tests[\"Response Body has Correct  quantity\"] = responseBody.has(\"\\\"quantity\\\":\"+5);",
									"    tests[\"Response Body has Correct  metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct  extendedPrice\"] = responseBody.has(\"extendedPrice\");",
									"    tests[\"Response Body has Correct  expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");",
									"    tests[\"Response Body has Correct  expirationTime\"] = responseBody.has(\"expirationTime\");",
									"    tests[\"Response Body has Correct  expirationUnit\"] = responseBody.has(\"expirationUnit\");",
									"    tests[\"Response Body has Correct  lastPurchasedPackage\"] = responseBody.has(\"\\\"lastPurchasedPackage\\\":\"+false);",
									"    ",
									"    tests[\"Response Body has Correct  associatedEventTypes\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+jsonData.content[0].associatedEventTypes[0].eligibility[0].itemId+\"\\\"\");",
									"   ",
									"    ",
									"    tests[\"Response Body has Correct  pageable\"] = responseBody.has(\"\\\"pageable\\\":\"+\"\\\"\"+jsonData.pageable);",
									"    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
									"    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
									"    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
									"    tests[\"Response Body has Correct  size\"] = responseBody.has(\"\\\"size\\\":\"+jsonData.size);",
									"    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"number\\\":\"+jsonData.number);",
									"    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.sort.sorted);",
									"    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.sort.unsorted);",
									"    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
									"    tests[\"Response Body has Correct  numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":\"+jsonData.numberOfElements);",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{package}}/{{organizationId}}/{{locationId}}/package/{{eventTypeId_pilates}}?userId={{userId}}",
							"host": [
								"{{package}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"package",
								"{{eventTypeId_pilates}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getPackage_zumba",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d7499a4-3e34-4964-8d61-28073a922398",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].name+\"\\\"\");",
									"    tests[\"Response Body has Correct  type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+jsonData.content[0].type+\"\\\"\");",
									"    tests[\"Response Body has Correct  unitPrice\"] = responseBody.has(\"unitPrice\");",
									"    tests[\"Response Body has Correct  quantity\"] = responseBody.has(\"\\\"quantity\\\":\"+5);",
									"    tests[\"Response Body has Correct  metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct  extendedPrice\"] = responseBody.has(\"extendedPrice\");",
									"    tests[\"Response Body has Correct  expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");",
									"    tests[\"Response Body has Correct  expirationTime\"] = responseBody.has(\"expirationTime\");",
									"    tests[\"Response Body has Correct  expirationUnit\"] = responseBody.has(\"expirationUnit\");",
									"    tests[\"Response Body has Correct  lastPurchasedPackage\"] = responseBody.has(\"\\\"lastPurchasedPackage\\\":\"+false);",
									"    ",
									"    tests[\"Response Body has Correct  associatedEventTypes\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+jsonData.content[0].associatedEventTypes[0].eligibility[0].itemId+\"\\\"\");",
									"    ",
									"    ",
									"    tests[\"Response Body has Correct  pageable\"] = responseBody.has(\"\\\"pageable\\\":\"+\"\\\"\"+jsonData.pageable);",
									"    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
									"    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
									"    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
									"    tests[\"Response Body has Correct  size\"] = responseBody.has(\"\\\"size\\\":\"+jsonData.size);",
									"    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"number\\\":\"+jsonData.number);",
									"    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.sort.sorted);",
									"    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.sort.unsorted);",
									"    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
									"    tests[\"Response Body has Correct  numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":\"+jsonData.numberOfElements);",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{package}}/{{organizationId}}/{{locationId}}/package/{{eventTypeId_zumba}}?userId={{userId}}",
							"host": [
								"{{package}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"package",
								"{{eventTypeId_zumba}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getPackage_cycling",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08df365b-bb4f-4d08-9ec6-59837273ebe2",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].name+\"\\\"\");",
									"    tests[\"Response Body has Correct  type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+jsonData.content[0].type+\"\\\"\");",
									"    tests[\"Response Body has Correct  unitPrice\"] = responseBody.has(\"unitPrice\");",
									"    tests[\"Response Body has Correct  quantity\"] = responseBody.has(\"\\\"quantity\\\":\"+5);",
									"    tests[\"Response Body has Correct  metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct  extendedPrice\"] = responseBody.has(\"extendedPrice\");",
									"    tests[\"Response Body has Correct  expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");",
									"    tests[\"Response Body has Correct  expirationTime\"] = responseBody.has(\"expirationTime\");",
									"    tests[\"Response Body has Correct  expirationUnit\"] = responseBody.has(\"expirationUnit\");",
									"    tests[\"Response Body has Correct  lastPurchasedPackage\"] = responseBody.has(\"\\\"lastPurchasedPackage\\\":\"+false);",
									"    ",
									"    tests[\"Response Body has Correct  associatedEventTypes\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+jsonData.content[0].associatedEventTypes[0].eligibility[0].itemId+\"\\\"\");",
									"   ",
									"    ",
									"    tests[\"Response Body has Correct  pageable\"] = responseBody.has(\"\\\"pageable\\\":\"+\"\\\"\"+jsonData.pageable);",
									"    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
									"    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
									"    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
									"    tests[\"Response Body has Correct  size\"] = responseBody.has(\"\\\"size\\\":\"+jsonData.size);",
									"    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"number\\\":\"+jsonData.number);",
									"    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.sort.sorted);",
									"    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.sort.unsorted);",
									"    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
									"    tests[\"Response Body has Correct  numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":\"+jsonData.numberOfElements);",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{package}}/{{organizationId}}/{{locationId}}/package/{{eventTypeId_cycling}}?userId={{userId}}",
							"host": [
								"{{package}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"package",
								"{{eventTypeId_cycling}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getPackage_aerobics",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "362909a5-8cda-4a4b-8af7-fc568c946fd0",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].name+\"\\\"\");",
									"    tests[\"Response Body has Correct  type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+jsonData.content[0].type+\"\\\"\");",
									"    tests[\"Response Body has Correct  unitPrice\"] = responseBody.has(\"unitPrice\");",
									"    tests[\"Response Body has Correct  quantity\"] = responseBody.has(\"\\\"quantity\\\":\"+5);",
									"    tests[\"Response Body has Correct  metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct  extendedPrice\"] = responseBody.has(\"extendedPrice\");",
									"    tests[\"Response Body has Correct  expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");",
									"    tests[\"Response Body has Correct  expirationTime\"] = responseBody.has(\"expirationTime\");",
									"    tests[\"Response Body has Correct  expirationUnit\"] = responseBody.has(\"expirationUnit\");",
									"    tests[\"Response Body has Correct  lastPurchasedPackage\"] = responseBody.has(\"\\\"lastPurchasedPackage\\\":\"+false);",
									"    ",
									"    tests[\"Response Body has Correct  associatedEventTypes\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+jsonData.content[0].associatedEventTypes[0].eligibility[0].itemId+\"\\\"\");",
									"    ",
									"    ",
									"    tests[\"Response Body has Correct  pageable\"] = responseBody.has(\"\\\"pageable\\\":\"+\"\\\"\"+jsonData.pageable);",
									"    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
									"    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
									"    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
									"    tests[\"Response Body has Correct  size\"] = responseBody.has(\"\\\"size\\\":\"+jsonData.size);",
									"    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"number\\\":\"+jsonData.number);",
									"    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.sort.sorted);",
									"    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.sort.unsorted);",
									"    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
									"    tests[\"Response Body has Correct  numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":\"+jsonData.numberOfElements);",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{package}}/{{organizationId}}/{{locationId}}/package/{{eventTypeId_aerobics}}?userId={{userId}}",
							"host": [
								"{{package}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"package",
								"{{eventTypeId_aerobics}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getPackage_turboKick",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "487b24ee-6d76-4527-a328-36104ecc4fc4",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].name+\"\\\"\");",
									"    tests[\"Response Body has Correct  type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+jsonData.content[0].type+\"\\\"\");",
									"    tests[\"Response Body has Correct  unitPrice\"] = responseBody.has(\"unitPrice\");",
									"    tests[\"Response Body has Correct  quantity\"] = responseBody.has(\"\\\"quantity\\\":\"+5);",
									"    tests[\"Response Body has Correct  metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct  extendedPrice\"] = responseBody.has(\"extendedPrice\");",
									"    tests[\"Response Body has Correct  expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");",
									"    tests[\"Response Body has Correct  expirationTime\"] = responseBody.has(\"expirationTime\");",
									"    tests[\"Response Body has Correct  expirationUnit\"] = responseBody.has(\"expirationUnit\");",
									"    tests[\"Response Body has Correct  lastPurchasedPackage\"] = responseBody.has(\"\\\"lastPurchasedPackage\\\":\"+false);",
									"    ",
									"    tests[\"Response Body has Correct  associatedEventTypes\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+jsonData.content[0].associatedEventTypes[0].eligibility[0].itemId+\"\\\"\");",
									"    ",
									"    ",
									"    tests[\"Response Body has Correct  pageable\"] = responseBody.has(\"\\\"pageable\\\":\"+\"\\\"\"+jsonData.pageable);",
									"    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
									"    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
									"    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
									"    tests[\"Response Body has Correct  size\"] = responseBody.has(\"\\\"size\\\":\"+jsonData.size);",
									"    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"number\\\":\"+jsonData.number);",
									"    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.sort.sorted);",
									"    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.sort.unsorted);",
									"    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
									"    tests[\"Response Body has Correct  numberOfElements\"] = responseBody.has(\"\\\"numberOfElements\\\":\"+jsonData.numberOfElements);",
									"    ",
									"    ",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{package}}/{{organizationId}}/{{locationId}}/package/{{eventTypeId_turboKick}}?userId={{userId}}",
							"host": [
								"{{package}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"package",
								"{{eventTypeId_turboKick}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Omni Search Checks",
			"description": null,
			"item": [
				{
					"name": "getOrganization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55c4c831-45d3-412a-b0f3-830a1144b2a4",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200)",
									"{",
									"",
									"var orgNameToSearchFor = postman.getEnvironmentVariable(\"orgName\");",
									"",
									"    var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
									"    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+jsonData.content[0].name+\"\\\"\");",
									"    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.pageable.sort.sorted);",
									"    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.pageable.sort.unsorted);",
									"    tests[\"Response Body has Correct  pageSize\"] = responseBody.has(\"\\\"pageSize\\\":\"+jsonData.pageable.pageSize);",
									"    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"pageNumber\\\":\"+jsonData.pageable.pageNumber);",
									"    tests[\"Response Body has Correct  offset\"] = responseBody.has(\"\\\"offset\\\":\"+jsonData.pageable.offset);",
									"    tests[\"Response Body has Correct  paged\"] = responseBody.has(\"\\\"paged\\\":\"+jsonData.pageable.paged);",
									"    tests[\"Response Body has Correct  unpaged\"] = responseBody.has(\"\\\"unpaged\\\":\"+jsonData.pageable.unpaged);",
									"    ",
									"    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
									"    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
									"    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
									"    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
									"    ",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"tests[\"Searching for specific Org Name in response\"] = responseBody.has(orgNameToSearchFor);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{omniSearch}}/{{organizationId}}/organization",
							"host": [
								"{{omniSearch}}"
							],
							"path": [
								"{{organizationId}}",
								"organization"
							]
						}
					},
					"response": []
				},
				{
					"name": "getLocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70f07e26-4782-496f-96ca-f1004b7e71e5",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200)",
									"{",
									"var locationNameToSearchFor = postman.getEnvironmentVariable(\"locationName\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct  name\"] = responseBody.has(\"\\\"organizationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"organizationId\")+\"\\\"\");",
									"  ",
									"tests[\"Response Body has Correct address1\"] = responseBody.has(\"\\\"address1\\\":\"+\"\\\"\"+\"123 Fitness Lane\"+\"\\\"\");",
									"tests[\"Response Body has Correct address2\"] = responseBody.has(\"\\\"address2\\\":\"+\"\\\"\"+jsonData.content[0].address.address2+\"\\\"\");",
									"tests[\"Response Body has Correct address city\"] = responseBody.has(\"\\\"city\\\":\"+\"\\\"\"+\"Little Rock\"+\"\\\"\");",
									"tests[\"Response Body has Correct address zipCode\"] = responseBody.has(\"\\\"zipCode\\\":\"+\"\\\"33935\"+\"\\\"\");",
									"tests[\"Response Body has Correct address state\"] = responseBody.has(\"state\");",
									"tests[\"Response Body has Correct address country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"\"+\"United States\"+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.pageable.sort.sorted);",
									"    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.pageable.sort.unsorted);",
									"    tests[\"Response Body has Correct  pageSize\"] = responseBody.has(\"\\\"pageSize\\\":\"+jsonData.pageable.pageSize);",
									"    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"pageNumber\\\":\"+jsonData.pageable.pageNumber);",
									"    tests[\"Response Body has Correct  offset\"] = responseBody.has(\"\\\"offset\\\":\"+jsonData.pageable.offset);",
									"    tests[\"Response Body has Correct  paged\"] = responseBody.has(\"\\\"paged\\\":\"+jsonData.pageable.paged);",
									"    tests[\"Response Body has Correct  unpaged\"] = responseBody.has(\"\\\"unpaged\\\":\"+jsonData.pageable.unpaged);",
									"    ",
									"    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
									"    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
									"    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
									"    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
									"",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{omniSearch}}/{{organizationId}}/location",
							"host": [
								"{{omniSearch}}"
							],
							"path": [
								"{{organizationId}}",
								"location"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEmployees",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff255b9b-bee4-458b-8a5c-be964560414b",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    ",
									"    tests[\"Response Body has Correct  organizationId\"] = responseBody.has(\"\\\"organizationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"organizationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct  id\"] = responseBody.has(\"id\");",
									"    tests[\"Response Body has Correct  userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.content[0].userId+\"\\\"\");",
									"    tests[\"Response Body has Correct  email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+jsonData.content[0].email+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.pageable.sort.sorted);",
									"    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.pageable.sort.unsorted);",
									"    tests[\"Response Body has Correct  pageSize\"] = responseBody.has(\"\\\"pageSize\\\":\"+jsonData.pageable.pageSize);",
									"    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"pageNumber\\\":\"+jsonData.pageable.pageNumber);",
									"    tests[\"Response Body has Correct  offset\"] = responseBody.has(\"\\\"offset\\\":\"+jsonData.pageable.offset);",
									"    tests[\"Response Body has Correct  paged\"] = responseBody.has(\"\\\"paged\\\":\"+jsonData.pageable.paged);",
									"    tests[\"Response Body has Correct  unpaged\"] = responseBody.has(\"\\\"unpaged\\\":\"+jsonData.pageable.unpaged);",
									"    ",
									"    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
									"    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
									"    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
									"    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
									"    ",
									"",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{omniSearch}}/{{organizationId}}/employee",
							"host": [
								"{{omniSearch}}"
							],
							"path": [
								"{{organizationId}}",
								"employee"
							]
						}
					},
					"response": []
				},
				{
					"name": "getMembers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ceb2af76-e80e-4ae3-ba64-a9f40ff74b4e",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200)",
									"{",
									"    ",
									"    var jsonData = JSON.parse(responseBody);",
									"    ",
									"    tests[\"Response Body has Correct  locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId_1030am\")+\"\\\"\");",
									"    tests[\"Response Body has Correct  userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.content[0].userId+\"\\\"\");",
									"    tests[\"Response Body has Correct  email address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+jsonData.content[0].person.email.address+\"\\\"\");",
									"    tests[\"Response Body has Correct  photoId\"] = responseBody.has(\"\\\"photoId\\\":\"+\"\\\"\"+jsonData.content[0].person.photoId+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.pageable.sort.sorted);",
									"    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.pageable.sort.unsorted);",
									"    tests[\"Response Body has Correct  pageSize\"] = responseBody.has(\"\\\"pageSize\\\":\"+jsonData.pageable.pageSize);",
									"    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"pageNumber\\\":\"+jsonData.pageable.pageNumber);",
									"    tests[\"Response Body has Correct  offset\"] = responseBody.has(\"\\\"offset\\\":\"+jsonData.pageable.offset);",
									"    tests[\"Response Body has Correct  paged\"] = responseBody.has(\"\\\"paged\\\":\"+jsonData.pageable.paged);",
									"    tests[\"Response Body has Correct  unpaged\"] = responseBody.has(\"\\\"unpaged\\\":\"+jsonData.pageable.unpaged);",
									"    ",
									"    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
									"    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
									"    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
									"    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
									"",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{omniSearch}}/{{organizationId}}/member",
							"host": [
								"{{omniSearch}}"
							],
							"path": [
								"{{organizationId}}",
								"member"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Promotion",
			"description": null,
			"item": [
				{
					"name": "CreatePromoCode_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f978107-eed4-423c-a724-f6e031bbbf39",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"promoCodeId\", jsonData.id);",
									"var code = postman.getEnvironmentVariable(\"promoCode\").toUpperCase();",
									"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
									"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
									"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount\");",
									"console.log(promoCodeAmount);",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoCodeId\")+\"\\\"\");",
									"tests[\"Response Body has Correct Code\"] = responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
									"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoStartDate\")+\"\\\"\");",
									"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoEndDate\")+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+promoCodeAmount);",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"FIXED_AMOUNT\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
									"",
									"}",
									"",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "651f470c-69ec-4ba4-a06e-1574cc9f5c11",
								"type": "text/javascript",
								"exec": [
									"var promoCodeAmount=3;",
									"var promoCodePrefix=\"Save\";",
									"var promoCode=promoCodePrefix+promoCodeAmount;",
									"",
									"//smart date increment logic, which rolls over into the next month if we're at the end of month",
									"var startDate = new Date();",
									"startDate.setDate(startDate.getDate() + 1);",
									"var endDate = new Date();",
									"endDate.setDate(endDate.getDate() + 5);",
									"",
									"var startyear = startDate.getFullYear();",
									"var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
									"var startDate = ('0' + (startDate.getDate())).slice(-2);",
									"var endyear = endDate.getFullYear();",
									"var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
									"var endDate = ('0' + (endDate.getDate())).slice(-2);",
									"",
									"var promoStartDate = startyear + \"-\" + startMonth + \"-\" + startDate;",
									"var promoEndDate = endyear + \"-\" + endMonth + \"-\" + endDate;",
									"",
									"",
									"postman.setEnvironmentVariable(\"promoStartDate\", promoStartDate);",
									"postman.setEnvironmentVariable(\"promoEndDate\", promoEndDate);",
									"postman.setEnvironmentVariable(\"promoCodeAmount\", promoCodeAmount);",
									"postman.setEnvironmentVariable(\"promoCode\", promoCode);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"promotion"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreatePromoCode_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95675abf-a380-47b5-8044-1b06e328031d",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"promoCodeId_2\", jsonData.id);",
									"var code = postman.getEnvironmentVariable(\"promoCode_2\").toUpperCase();",
									"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
									"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
									"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount_2\");",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoCodeId_2\")+\"\\\"\");",
									"tests[\"Response Body has Correct Code\"] = responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
									"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoStartDate\")+\"\\\"\");",
									"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoEndDate\")+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+promoCodeAmount);",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"FIXED_AMOUNT\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
									"}",
									"",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4616c289-d6b8-4546-8fd7-24faacc15c61",
								"type": "text/javascript",
								"exec": [
									"//smart date increment logic, which rolls over into the next month if we're at the end of month",
									"var startDate = new Date();",
									"startDate.setDate(startDate.getDate() + 1);",
									"var endDate = new Date();",
									"endDate.setDate(endDate.getDate() + 5);",
									"",
									"var startyear = startDate.getFullYear();",
									"var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
									"var startDate = ('0' + (startDate.getDate())).slice(-2);",
									"var endyear = endDate.getFullYear();",
									"var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
									"var endDate = ('0' + (endDate.getDate())).slice(-2);",
									"",
									"var promoStartDate = startyear + \"-\" + startMonth + \"-\" + startDate;",
									"var promoEndDate = endyear + \"-\" + endMonth + \"-\" + endDate;",
									"",
									"var promoCodeAmount_2=60;",
									"var promoCodePrefix=\"Save\";",
									"var promoCode_2=promoCodePrefix+promoCodeAmount_2;",
									"",
									"postman.setEnvironmentVariable(\"promoStartDate\", promoStartDate);",
									"postman.setEnvironmentVariable(\"promoEndDate\", promoEndDate);",
									"postman.setEnvironmentVariable(\"promoCodeAmount_2\", promoCodeAmount_2);",
									"postman.setEnvironmentVariable(\"promoCode_2\", promoCode_2);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode_2}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount_2}}\",\r\n  \"currency\" : \"USD\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"promotion"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPromoCodeByCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7eff8a04-b8f3-46af-bbf8-35613164545c",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"var code = postman.getEnvironmentVariable(\"promoCode\").toUpperCase();",
									"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
									"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
									"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount\");",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoCodeId\")+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCode\"] = responseBody.has(\"\\\"code\\\":\\\"\"+code+\"\\\"\");",
									"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoStartDate\")+\"\\\"\");",
									"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"promoEndDate\")+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+postman.getEnvironmentVariable(\"promoCodeAmount\"));",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"FIXED_AMOUNT\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
									"",
									"}",
									"",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "11ed69d9-22dd-4a40-829c-7dcc08ccf078",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCode}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"promotion",
								"{{promoCode}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPromoCodeByAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33003718-39a3-4252-93ad-5c6dccc0d6a8",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var code = postman.getEnvironmentVariable(\"promoCode\").toUpperCase();",
									"var code2 = postman.getEnvironmentVariable(\"promoCode_2\").toUpperCase();",
									"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
									"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
									"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount\");",
									"var promoCodeAmount2 = postman.getEnvironmentVariable(\"promoCodeAmount_2\");",
									"var promoCodeId = postman.getEnvironmentVariable(\"promoCodeId\");",
									"var promoCodeId2 = postman.getEnvironmentVariable(\"promoCodeId_2\");",
									"",
									"",
									"tests[\"Response Body has Correct PromoCode\"] = responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCode2\"] = responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code2+\"\\\"\");",
									"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+promoStartDate+\"\\\"\");",
									"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+promoEndDate+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount+\"\");",
									"tests[\"Response Body has Correct PromoCodeAmount2\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount2+\"\");",
									"tests[\"Response Body has Correct PromoCodeId1\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCodeId2\"] = tests[\"Response Body has Correct PromoCodeId1\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId2+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"FIXED_AMOUNT\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
									"",
									"",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "11ed69d9-22dd-4a40-829c-7dcc08ccf078",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"promotion"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdatePromoCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fc2a842-17f8-46c6-8d7c-4f1dfba1f4e2",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"var code = postman.getEnvironmentVariable(\"updatePromoCode\").toUpperCase();",
									"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
									"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
									"var promoCodeAmount = postman.getEnvironmentVariable(\"updatePromoCodeAmount\");",
									"var promoCodeId = postman.getEnvironmentVariable(\"promoCodeId\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCode\"] =  responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
									"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+promoStartDate+\"\\\"\");",
									"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+promoEndDate+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount+\"\");",
									"tests[\"Response Body has Correct PromoCodeId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"FIXED_AMOUNT\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save\\\"\");",
									"}",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6ffb73f7-a2fb-4b3c-b9b5-c762055d9958",
								"type": "text/javascript",
								"exec": [
									"var updateCodeAmount=38;",
									"var promoCodePrefix=\"SAVE\";",
									"var updatePromoCode=promoCodePrefix+updateCodeAmount;",
									"",
									"//smart date increment logic, which rolls over into the next month if we're at the end of month",
									"var startDate = new Date();",
									"startDate.setDate(startDate.getDate() + 1);",
									"var endDate = new Date();",
									"endDate.setDate(endDate.getDate() + 5);",
									"",
									"var startyear = startDate.getFullYear();",
									"var startMonth = ('0' + (startDate.getMonth()+1)).slice(-2);",
									"var startDate = ('0' + (startDate.getDate())).slice(-2);",
									"var endyear = endDate.getFullYear();",
									"var endMonth = ('0' + (endDate.getMonth()+1)).slice(-2);",
									"var endDate = ('0' + (endDate.getDate())).slice(-2);",
									"",
									"var promoStartDate = startyear + \"-\" + startMonth + \"-\" + startDate;",
									"var promoEndDate = endyear + \"-\" + endMonth + \"-\" + endDate;",
									"",
									"postman.setEnvironmentVariable(\"promoStartDate\", promoStartDate);",
									"postman.setEnvironmentVariable(\"promoEndDate\", promoEndDate);",
									"postman.setEnvironmentVariable(\"updatePromoCodeAmount\", updateCodeAmount);",
									"postman.setEnvironmentVariable(\"updatePromoCode\", updatePromoCode);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{updatePromoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{updatePromoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCodeId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"promotion",
								"{{promoCodeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PatchPromoCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c05bed9e-2227-488c-a628-e075a52fd4f9",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"promoCodeId\", jsonData.id);",
									"postman.setEnvironmentVariable(\"updatedPromoCode\", jsonData.code);",
									"var code = postman.getEnvironmentVariable(\"updatePromoCode\").toUpperCase();",
									"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
									"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
									"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount_2\");",
									"var promoCodeId = postman.getEnvironmentVariable(\"promoCodeId_2\");",
									"",
									"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCode\"] =  responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
									"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+promoStartDate+\"\\\"\");",
									"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+promoEndDate+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount+\"\");",
									"tests[\"Response Body has Correct PromoCodeId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"FIXED_AMOUNT\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save2\\\"\");",
									"}",
									"",
									"",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3806108e-88cd-4169-8c59-eaeda27490ce",
								"type": "text/javascript",
								"exec": [
									"",
									"var updatePromoCodePrefix=postman.getEnvironmentVariable(\"updatePromoCode\").replace(\"SAVE\",\"OFFER\");",
									"",
									"",
									"postman.setEnvironmentVariable(\"updatePromoCodePrefix\", updatePromoCodePrefix);",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Offer to Save2\",\r\n  \"code\" : \"{{updatePromoCode}}\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCodeId_2}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"promotion",
								"{{promoCodeId_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeletePromoCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9b38d82-4e2a-4a48-91d8-0ee57164be0e",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200) ",
									"{",
									"var code = postman.getEnvironmentVariable(\"updatePromoCode\").toUpperCase();",
									"var promoStartDate = postman.getEnvironmentVariable(\"promoStartDate\");",
									"var promoEndDate = postman.getEnvironmentVariable(\"promoEndDate\");",
									"var promoCodeAmount = postman.getEnvironmentVariable(\"promoCodeAmount_2\");",
									"var promoCodeId = postman.getEnvironmentVariable(\"promoCodeId_2\");",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.id+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCode\"] =  responseBody.has(\"\\\"code\\\":\"+\"\\\"\"+code+\"\\\"\");",
									"tests[\"Response Body has Correct PromoStartDate\"] = responseBody.has(\"\\\"startDate\\\":\"+\"\\\"\"+promoStartDate+\"\\\"\");",
									"tests[\"Response Body has Correct PromoEndDate\"] = responseBody.has(\"\\\"endDate\\\":\"+\"\\\"\"+promoEndDate+\"\\\"\");",
									"tests[\"Response Body has Correct PromoCodeAmount\"] = responseBody.has(\"\\\"amount\\\":\"+\"\"+promoCodeAmount+\"\");",
									"tests[\"Response Body has Correct PromoCodeId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+promoCodeId+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"FIXED_AMOUNT\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Offer to Save2\\\"\");",
									"}",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ccc1cfc3-7a43-4173-9781-a3c9f869e30f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/promotion/{{promoCodeId_2}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"promotion",
								"{{promoCodeId_2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Merchant_Account",
			"description": null,
			"item": [
				{
					"name": "GetMerchantAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24acab91-e6d2-4a00-8e33-b9c7dd321b52",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200) ",
									"{",
									"var locationId = postman.getEnvironmentVariable(\"locationId\");",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"id\");",
									"tests[\"Response Body has Correct LocationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"tests[\"Response Body has Correct customerKey\"] = responseBody.has(\"customerKey\");",
									"}",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "11ed69d9-22dd-4a40-829c-7dcc08ccf078",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/merchant-account",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"merchant-account"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPlatformId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7e07de1-6cb4-403b-af26-1baef96592b4",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"PlatformId\",jsonData.platformId);",
									"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"platformId\");",
									"//tests[\"Response Body has Correct platformId\"] = responseBody.has(\"\\\"platformId\\\":\\\"ca_BwEdDu8YJO7eiDvJ9QGuXNQ8W6FjSIVO\");",
									"tests[\"Response Body has Correct platformId\"] = responseBody.has(\"\\\"platformId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"PlatformId\")+\"\\\"\");",
									"",
									"}",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "11ed69d9-22dd-4a40-829c-7dcc08ccf078",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Offer to Save\",\r\n  \"code\" : \"{{promoCode}}\",\r\n  \"type\" : \"FIXED_AMOUNT\",\r\n  \"startDate\" : \"{{promoStartDate}}\",\r\n  \"endDate\" : \"{{promoEndDate}}\",\r\n  \"amount\" : \"{{promoCodeAmount}}\",\r\n  \"currency\" : \"USD\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/merchant-account/platformId",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"merchant-account",
								"platformId"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Member",
			"description": null,
			"item": [
				{
					"name": "createMember",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fea39f12-3a70-4573-9280-18acc403698c",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "48e6f0e3-cc91-44b7-8620-e8bc34cb63ba",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"memberEmailId\", jsonData.person.email.address);",
									"postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
									"tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.userId+\"\\\"\"); ",
									"tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@gmail.com\"+\"\\\"\");",
									"",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n    \"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
						},
						"url": {
							"raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
							"host": [
								"{{manageMember}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"member"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Member By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ede9018a-79ae-48a3-bfe1-791201f2f77a",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if(responseCode.code===200) {",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"memberEmailId\", jsonData.person.email.address);",
									"postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
									"",
									"tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.userId+\"\\\"\"); ",
									"tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@gmail.com\"+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{manageMember}}/{{organizationId}}/member/{{memberId}}",
							"host": [
								"{{manageMember}}"
							],
							"path": [
								"{{organizationId}}",
								"member",
								"{{memberId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Member by Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df8fa354-23b7-4152-a870-aed84594c80b",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if(responseCode.code===200) {",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"memberEmailId\", jsonData.person.email.address);",
									"postman.setEnvironmentVariable(\"memberId\", jsonData.id);",
									"",
									"tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.userId+\"\\\"\"); ",
									"tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct lastName\"] = responseBody.has(\"\\\"lastName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randLastName\")+\"\\\"\");",
									"tests[\"Response Body has Correct number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"\\\"\");",
									"tests[\"Response Body has Correct address\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@gmail.com\"+\"\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{manageMember}}/{{organizationId}}/member/?email={{memberEmailId}}",
							"host": [
								"{{manageMember}}"
							],
							"path": [
								"{{organizationId}}",
								"member",
								""
							],
							"query": [
								{
									"key": "email",
									"value": "{{memberEmailId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Member",
			"description": null,
			"item": [
				{
					"name": "updateMember",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f8ad2961-6ea3-4b58-8c32-06972cac7d6f",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "47f2e1b4-cb9c-4335-83b0-ebbc70cd43f8",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if(responseCode.code===200) {",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"memberId\", jsonData.id);    ",
									"tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct memberId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"memberId\")+\"\\\"\"); ",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+jsonData.userId+\"\\\"\"); ",
									"tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\"); ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randLastName}}.{{randFirstName}}{{randPhoneNumber}}@qa4life.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n    \"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
						},
						"url": {
							"raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member/{{memberId}}",
							"host": [
								"{{manageMember}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"member",
								"{{memberId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Person",
			"description": null,
			"item": [
				{
					"name": "getPerson",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "610ca7db-3ae3-4090-a08c-429d39e960ff",
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 200) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"personId\", jsonData.content[0].id);",
									"tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"personId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
									"tests[\"Response Body has Correct lastName\"] = responseBody.has(\"lastName\");",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");",
									"tests[\"Response Body has Correct address1\"] = responseBody.has(\"\\\"address1\\\":\"+\"\\\"10 Fit Lane\\\"\");",
									"tests[\"Response Body has Correct address2\"] = responseBody.has(\"\\\"address2\\\":\"+\"\\\"PO Box\");",
									"tests[\"Response Body has Correct zipCode\"] = responseBody.has(\"zipCode\");",
									"tests[\"Response Body has Correct state\"] = responseBody.has(\"state\");",
									"tests[\"Response Body has Correct country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"United States\");",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{manageUser}}/{{organizationId}}/person",
							"host": [
								"{{manageUser}}"
							],
							"path": [
								"{{organizationId}}",
								"person"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPersonByUserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "504b321f-c51d-4c1c-a293-6871bca96c9f",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if(responseCode.code==200) {",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"personId_UID\", jsonData.id);",
									"tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"personId_UID\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"firstName\");",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"ownerId\")+\"\\\"\");",
									"/*tests[\"Response Body has Correct address1\"] = responseBody.has(jsonData.address.address1);",
									"tests[\"Response Body has Correct address2\"] = responseBody.has(jsonData.address.address2);",
									"tests[\"Response Body has Correct zipCode\"] = responseBody.has(jsonData.address.zipCode);",
									"tests[\"Response Body has Correct state\"] = responseBody.has(jsonData.address.state);",
									"tests[\"Response Body has Correct country\"] = responseBody.has(jsonData.address.country);*/",
									"tests[\"Response Body has Correct userType\"] = responseBody.has(\"\\\"userType\\\":\"+\"\\\"Customer\");",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{manageUser}}/{{organizationId}}/user/{{ownerId}}",
							"host": [
								"{{manageUser}}"
							],
							"path": [
								"{{organizationId}}",
								"user",
								"{{ownerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updatePerson",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "024a0382-f446-48d7-aec6-1e51cdac19a4",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if(responseCode.code===200) {",
									"var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"personId\", jsonData.id);    ",
									"tests[\"Response Body has Correct id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"personId\")+\"\\\"\");   ",
									"tests[\"Response Body has Correct firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\"\\\"\");",
									"tests[\"Response Body has Correct userId\"] = responseBody.has(\"userId\");",
									"tests[\"Response Body has Correct address1\"] = responseBody.has(\"\\\"address1\\\":\"+\"\\\"Belouve Hard\");",
									"tests[\"Response Body has Correct address2\"] = responseBody.has(\"\\\"address2\\\":\"+\"\\\"13/211 ,Goir Street\");",
									"tests[\"Response Body has Correct zipCode\"] = responseBody.has(\"zipCode\");",
									"tests[\"Response Body has Correct state\"] = responseBody.has(\"\\\"state\\\":\"+\"\\\"Alabama\");",
									"tests[\"Response Body has Correct country\"] = responseBody.has(\"\\\"country\\\":\"+\"\\\"United States\");",
									"",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "14d9d8ed-398c-47f3-ac01-0f3fe8ed4a89",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"password\" : \"Password1\",\r\n  \"phone\" : {\r\n    \"phoneNumber\" : \"{{randPhoneNumber}}\",\r\n    \"phoneExtension\" : \"118\"\r\n  },\r\n  \"address\" : {\r\n    \"country\" : \"United States\",\r\n    \"zipCode\" : \"21253\",\r\n    \"address2\" : \"13/211 ,Goir Street\",\r\n    \"city\" : \"Albama1\",\r\n    \"address1\" : \"Belouve Hard {{$randomInt}}\",\r\n    \"state\" : \"Alabama\"\r\n  },\r\n  \"birthDate\" : \"1998-01-22\",\r\n  \"email\" : \"TestUser{{randPhoneNumber}}@abc.com\",\r\n  \"photoId\" : \"{{randPhotoId}}\"\r\n}"
						},
						"url": {
							"raw": "{{manageUser}}/{{organizationId}}/person/{{personId}}",
							"host": [
								"{{manageUser}}"
							],
							"path": [
								"{{organizationId}}",
								"person",
								"{{personId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updatePersonPhotoId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2fa79680-cadf-4eff-a0fa-969503df3f62",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if(responseCode.code===200) {",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Response Body has  contains firstName\"] = responseBody.has(\"\\\"firstName\\\":\"+\"\\\"Tyler\");",
									"tests[\"Response Body has  contains lastName\"] =   responseBody.has(\"\\\"lastName\\\":\"+\"\\\"Durden\");",
									"tests[\"Response Body has  contains photoId\"] =  responseBody.has(\"photoId\");",
									"tests[\"Response Body has  contains email\"] =  responseBody.has(\"email\"); ",
									"tests[\"Response Body has  contains userId\"] =  responseBody.has(\"userId\");",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "14d9d8ed-398c-47f3-ac01-0f3fe8ed4a89",
								"type": "text/javascript",
								"exec": [
									"var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
									"var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
									"var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
									"var randFirstName = randFirstNameWithGenderArray[0];",
									"var gender = randFirstNameWithGenderArray[1];",
									"",
									"var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
									"var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
									"",
									"var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
									"",
									"var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
									"",
									"if(gender === 'male')",
									"{",
									"    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    do {",
									"        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"} ",
									"else if (gender === 'female')",
									"{",
									"        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    do {",
									"        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
									"    }",
									"    while (randPhotoId === undefined);",
									"}",
									"else",
									"{",
									"    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
									"}",
									"",
									"var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
									"var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
									"var randState = states[Math.floor(Math.random() * states.length)];",
									"var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
									"",
									"postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
									"postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
									"postman.setEnvironmentVariable(\"randLastName\", randLastName);",
									"postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
									"postman.setEnvironmentVariable(\"randState\", randState);",
									"postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"type\" : \"Customer\",\r\n  \"content\" :\"\",\r\n  \"personId\" : \"c3886c91-8136-483a-af9c-4c0cbd30ee67\",\r\n  \"name\": \"Tyler Durden\"\r\n}"
						},
						"url": {
							"raw": "{{manageUser}}/{{organizationId}}/person/{{personId}}/photo",
							"host": [
								"{{manageUser}}"
							],
							"path": [
								"{{organizationId}}",
								"person",
								"{{personId}}",
								"photo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Items",
			"description": null,
			"item": [
				{
					"name": "createItemUnlimitedTrue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cc6a65a-33c5-47f7-9fbf-8aa91f8ecfc0",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"itemId_Unlimited_true_1\", jsonData.id);",
									"var eventTypeIdYoga = postman.getEnvironmentVariable(\"eventTypeId_yoga\");",
									"",
									"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Yoga{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" :true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  } ]\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createItemUnlimitedTrueMultiple",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70c7e6df-4e1d-4fbb-a26e-4da510d3cf2e",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"itemId_Unlimited_true_Multiple\", jsonData.id);",
									"var eventTypeIdYoga = postman.getEnvironmentVariable(\"eventTypeId_yoga\");",
									"var eventTypeIdCycling = postman.getEnvironmentVariable(\"eventTypeId_cycling\");",
									"var eventTypeIdZumba = postman.getEnvironmentVariable(\"eventTypeId_zumba\");",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_Multiple\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId1\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId2\"] =responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_cycling\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId3\"] =responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_zumba\")+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Item with Multiple\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Item with Multiple{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 1,\r\n  \"unlimited\" :true,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  },{\r\n    \"eventTypeId\" : \"{{eventTypeId_zumba}}\"\r\n  },{\r\n    \"eventTypeId\" : \"{{eventTypeId_cycling}}\"\r\n  } ]\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createItemUnlimitedFalse",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c14d1930-344e-4fcd-914f-7a0dd925f63b",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"itemId_Unlimited_false_1\", jsonData.id);",
									"var eventTypeIdYoga = postman.getEnvironmentVariable(\"eventTypeId_yoga\");",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_false_1\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] =responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Yoga{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" :false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  } ]\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "createItemUnlimitedFalseMultiple",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb88c5e0-f59c-4d75-8de3-9745d92c1fa9",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"itemId_Unlimited_false_Multiple\", jsonData.id);",
									"var eventTypeIdYoga = postman.getEnvironmentVariable(\"eventTypeId_yoga\");",
									"var eventTypeIdCycling = postman.getEnvironmentVariable(\"eventTypeId_cycling\");",
									"var eventTypeIdZumba = postman.getEnvironmentVariable(\"eventTypeId_zumba\");",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_false_Multiple\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId1\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId2\"] =responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_cycling\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId3\"] =responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_zumba\")+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":5\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Yoga{{$randomInt}}\",\r\n  \"type\" : \"SERVICE\",\r\n  \"unitPrice\" : 100,\r\n  \"quantity\" : 5,\r\n  \"unlimited\" :false,\r\n  \"expirationStart\" : \"PURCHASE\",\r\n  \"expirationTime\" : 1,\r\n  \"expirationUnit\" : \"DAYS\",\r\n  \"currencyId\" : \"USD\",\r\n  \"eligibleClasses\" : [ {\r\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\r\n  },{\r\n    \"eventTypeId\" : \"{{eventTypeId_zumba}}\"\r\n  },{\r\n    \"eventTypeId\" : \"{{eventTypeId_cycling}}\"\r\n  } ]\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "getItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d29f4f50-4444-4fda-b0a1-8773b23d82b6",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200) ",
									"{",
									"var eventTypeIdYoga = postman.getEnvironmentVariable(\"eventTypeId_yoga\");",
									"var itemIdUnlimitedTrue1 = postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\");",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeId1\"] =responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"tests[\"Response Body has Correct ItemId\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\")+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item/{{itemId_Unlimited_true_1}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item",
								"{{itemId_Unlimited_true_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getItems_all_items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "975dd941-3513-4e60-bcbf-a99dfd4f3917",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    ",
									"    tests[\"Response Body has Correct  id1\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_unlimited\")+\"\\\"\");",
									"    tests[\"Response Body has Correct  id2\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_metered\")+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct  expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct  sorted\"] = responseBody.has(\"\\\"sorted\\\":\"+jsonData.pageable.sort.sorted);",
									"    tests[\"Response Body has Correct  unsorted\"] = responseBody.has(\"\\\"unsorted\\\":\"+jsonData.pageable.sort.unsorted);",
									"    tests[\"Response Body has Correct  pageSize\"] = responseBody.has(\"\\\"pageSize\\\":\"+jsonData.pageable.pageSize);",
									"    tests[\"Response Body has Correct  number\"] = responseBody.has(\"\\\"pageNumber\\\":\"+jsonData.pageable.pageNumber);",
									"    tests[\"Response Body has Correct  offset\"] = responseBody.has(\"\\\"offset\\\":\"+jsonData.pageable.offset);",
									"    tests[\"Response Body has Correct  paged\"] = responseBody.has(\"\\\"paged\\\":\"+jsonData.pageable.paged);",
									"    tests[\"Response Body has Correct  unpaged\"] = responseBody.has(\"\\\"unpaged\\\":\"+jsonData.pageable.unpaged);",
									"    ",
									"    tests[\"Response Body has Correct  totalElements\"] = responseBody.has(\"\\\"totalElements\\\":\"+jsonData.totalElements);",
									"    tests[\"Response Body has Correct  last\"] = responseBody.has(\"\\\"last\\\":\"+jsonData.last);",
									"    tests[\"Response Body has Correct  totalPages\"] = responseBody.has(\"\\\"totalPages\\\":\"+jsonData.totalPages);",
									"    tests[\"Response Body has Correct  first\"] = responseBody.has(\"\\\"first\\\":\"+jsonData.first);",
									"    ",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55cf55b6-2d8e-4ebd-9c5d-551b7a746040",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200) ",
									"{",
									"var eventTypeIdYoga = postman.getEnvironmentVariable(\"eventTypeId_yoga\");",
									"var eventTypeIdCycling = postman.getEnvironmentVariable(\"eventTypeId_cycling\");",
									"var eventTypeIdZumba = postman.getEnvironmentVariable(\"eventTypeId_zumba\");",
									"var itemIdUnlimitedTrue1 = postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\");",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeIdYoga\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeIdCycling\"] =responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_cycling\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeIdZumba\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_zumba\")+\"\\\"\");",
									"tests[\"Response Body has Correct ItemIdUnlimitedTrue\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\")+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{itemId_Unlimited_true_1}}\",\n    \"name\": \"YogaEdit{{$randomInt}}\",\n    \"type\": \"SERVICE\",\n    \"unitPrice\": 100,\n    \"quantity\": 1,\n    \"unlimited\": true,\n    \"expirationStart\": \"PURCHASE\",\n    \"expirationTime\": 1,\n    \"expirationUnit\": \"DAYS\",\n    \"currencyId\": \"USD\",\n     \"eligibleClasses\" : [ {\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\n  },{\n    \"eventTypeId\" : \"{{eventTypeId_zumba}}\"\n  },{\n    \"eventTypeId\" : \"{{eventTypeId_cycling}}\"\n  } ]\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item/{{itemId_Unlimited_true_1}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item",
								"{{itemId_Unlimited_true_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b69805ed-a02a-450f-8204-f9550506435a",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200) ",
									"{",
									"var eventTypeIdYoga = postman.getEnvironmentVariable(\"eventTypeId_yoga\");",
									"var eventTypeIdCycling = postman.getEnvironmentVariable(\"eventTypeId_cycling\");",
									"var eventTypeIdZumba = postman.getEnvironmentVariable(\"eventTypeId_zumba\");",
									"var itemIdUnlimitedTrue1 = postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\");",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeIdYoga\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"",
									"tests[\"Response Body has Correct ItemIdUnlimitedTrue\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_true_1\")+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":true\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item/{{itemId_Unlimited_true_1}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item",
								"{{itemId_Unlimited_true_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patchItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f40404d7-4f21-4961-a25e-c8014ee41484",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200) ",
									"{",
									"var eventTypeIdYoga = postman.getEnvironmentVariable(\"eventTypeId_yoga\");",
									"var eventTypeIdCycling = postman.getEnvironmentVariable(\"eventTypeId_cycling\");",
									"var eventTypeIdZumba = postman.getEnvironmentVariable(\"eventTypeId_zumba\");",
									"var itemIdUnlimitedFalse1 = postman.getEnvironmentVariable(\"itemId_Unlimited_false_1\");",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_Unlimited_false_1\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeIdYoga\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_yoga\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeIdCycling\"] =responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_cycling\")+\"\\\"\");",
									"tests[\"Response Body has Correct EventTypeIdZumba\"] = responseBody.has(\"\\\"eventTypeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_zumba\")+\"\\\"\");",
									"",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"currencyId\\\":\\\"USD\\\"\");",
									"tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\\\"SERVICE\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\\\"Yoga\");",
									"tests[\"Response Body has Correct Quantity\"] = responseBody.has(\"\\\"quantity\\\":1\");",
									"tests[\"Response Body has Correct Price\"] = responseBody.has(\"\\\"unitPrice\\\":100\");",
									"tests[\"Response Body has Correct Unlimited\"] = responseBody.has(\"\\\"unlimited\\\":false\");",
									"tests[\"Response Body has Correct ExpirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\\\"PURCHASE\\\"\");",
									"tests[\"Response Body has Correct Expiration Time\"] = responseBody.has(\"\\\"expirationTime\\\":1\");",
									"tests[\"Response Body has Correct ExpirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\\\"DAYS\\\"\");",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{itemId_Unlimited_false_1}}\",\n    \"name\": \"Yoga{{$randomInt}}\",\n    \"type\": \"SERVICE\",\n    \"unitPrice\": 100,\n    \"quantity\": 1,\n    \"unlimited\": false,\n    \"expirationStart\": \"PURCHASE\",\n    \"expirationTime\": 1,\n    \"expirationUnit\": \"DAYS\",\n    \"currencyId\": \"USD\",\n     \"eligibleClasses\" : [ {\n    \"eventTypeId\" : \"{{eventTypeId_yoga}}\"\n  },{\n    \"eventTypeId\" : \"{{eventTypeId_zumba}}\"\n  },{\n    \"eventTypeId\" : \"{{eventTypeId_cycling}}\"\n  } ]\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/inventory/item/{{itemId_Unlimited_false_1}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"inventory",
								"item",
								"{{itemId_Unlimited_false_1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Event Type",
			"description": null,
			"item": [
				{
					"name": "CreateEventType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72d5c08c-cb7f-41f4-ad18-a580997c4cc2",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"eventTypeId1\", jsonData.id);",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(jsonData.id);",
									"tests[\"Response Body has Correct EventCategoryId\"] = responseBody.has(\"\\\"eventCategoryId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
									"tests[\"Response Body has Correct LocationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Zumba Advanced\"+\"\\\"\");",
									"tests[\"Response Body has Correct CheckInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":15\");",
									"tests[\"Response Body has Correct Duration\"] = responseBody.has(\"\\\"duration\\\":\"+\"90\");",
									"tests[\"Response Body has Correct event level Id\"] = responseBody.has(jsonData.eventLevelId);",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2d7c99ab-2a16-401c-b97e-faefbbc27b15",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Zumba Advanced\",\r\n    \"checkInWindow\": 15,\r\n    \"duration\": 90,\r\n    \"eventCategoryId\":\"{{eventCategoryId}}\"\r\n    \r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventType",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventType"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateEventType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f96a7d4c-c0a9-4d5a-842d-299401a12e46",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if(responseCode.code===200) {",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(jsonData.id);",
									"tests[\"Response Body has Correct EventCategoryId\"] = responseBody.has(\"\\\"eventCategoryId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
									"tests[\"Response Body has Correct LocationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"\\\"name\\\":\"+\"\\\"\"+\"Zumba Advanced\"+\"\\\"\");",
									"tests[\"Response Body has Correct event level Id\"] = responseBody.has(jsonData.eventLevelId);",
									"tests[\"Response Body has Correct CheckInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":15\");",
									"tests[\"Response Body has Correct Duration\"] = responseBody.has(\"\\\"duration\\\":60\");",
									"}",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2d7c99ab-2a16-401c-b97e-faefbbc27b15",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Zumba Advanced\",\r\n    \"checkInWindow\": 15,\r\n    \"duration\": 60,\r\n    \"eventCategoryId\":\"{{eventCategoryId}}\"\r\n    \r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventType/{{eventTypeId1}}",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventType",
								"{{eventTypeId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PatchEventType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dbc8b21-0d53-4356-813c-9d2e37de51d7",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200)",
									"{",
									"    var jsonData = JSON.parse(responseBody);",
									"    ",
									"    tests[\"Response Body has Correct  id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventTypeId_zumba\")+\"\\\"\");",
									"    tests[\"Response Body has Correct  eventCategoryId\"] = responseBody.has(\"\\\"eventCategoryId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventCategoryId\")+\"\\\"\");",
									"    ",
									"    tests[\"Response Body has Correct  eventLevelId\"] = responseBody.has(\"\\\"eventLevelId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"eventLevelId_advanced\")+\"\\\"\");",
									"    ",
									"    tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2d7c99ab-2a16-401c-b97e-faefbbc27b15",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Outdoor class\"\r\n}"
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventType/{{eventTypeId_zumba}}",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventType",
								"{{eventTypeId_zumba}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteEventType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a3419af-671e-4506-8220-65fc2c4b372b",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if(responseCode.code===200) {",
									"var eventCategoryId = postman.getEnvironmentVariable(\"eventCategoryId\");",
									"var locationId = postman.getEnvironmentVariable(\"locationId\");",
									"var id = postman.getEnvironmentVariable(\"eventTypeId1\");",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Response Body has  contains Id\"] = responseBody.has(jsonData.id);",
									"tests[\"Response Body has Correct EventTypeId\"] = responseBody.has(eventCategoryId);",
									"tests[\"Response Body has Correct EventCategoryId\"] = responseBody.has(eventCategoryId);",
									"tests[\"Response Body has Correct LocationId\"] = responseBody.has(locationId);",
									"tests[\"Response Body has Correct Name\"] = responseBody.has(\"Zumba Advanced\");",
									"tests[\"Response Body has Correct CheckInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":15\");",
									"tests[\"Response Body has Correct event level Id\"] = responseBody.has(jsonData.eventLevelId);",
									"tests[\"Response Body has Correct Duration\"] = responseBody.has(\"\\\"duration\\\":60\");",
									"}",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2d7c99ab-2a16-401c-b97e-faefbbc27b15",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventType/{{eventTypeId1}}",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventType",
								"{{eventTypeId1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Save Card and Purchase",
			"description": null,
			"item": [
				{
					"name": "createStripeId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd5d6799-6ef2-40e2-9f7f-e3c0cf058a1e",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"stripeId\", jsonData.id);",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if(responseCode.code===200) {",
									"",
									"",
									"//tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"stripeId\")+\"\\\"\");",
									"",
									"",
									"tests[\"Response Body has Correct exp_month\"] = responseBody.has(\"\\\"exp_month\\\": 4\");",
									"tests[\"Response Body has Correct exp_year\"] = responseBody.has(\"\\\"exp_year\\\": 2024\");",
									"tests[\"Response Body has Correct brand\"] = responseBody.has(\"\\\"brand\\\": \\\"Visa\");        ",
									"tests[\"Response Body has Correct CVC Checked\"] = responseBody.has(\"\\\"cvc_check\\\": \\\"unchecked\");  ",
									"tests[\"Response Body has Correct funding\"] = responseBody.has(\"\\\"funding\\\": \\\"credit\");  ",
									"tests[\"Response Body has Correct last 4\"] = responseBody.has(\"\\\"last4\\\": \\\"4242\");  ",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;",
									"",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2d7c99ab-2a16-401c-b97e-faefbbc27b15",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{cardDetailsBody}}"
						},
						"url": {
							"raw": "{{stripe}}",
							"host": [
								"{{stripe}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createCard",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "793f4fba-bcf9-466c-8bf5-9fe03a03e938",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"cardId\", jsonData.id);",
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"newCardIdForPurchase\", jsonData.id);",
									"",
									"",
									"",
									"tests[\"Response Body has Correct expiryMonth\"] = responseBody.has(\"\\\"expiryMonth\\\":4\");",
									"tests[\"Response Body has Correct expiryYear\"] = responseBody.has(\"\\\"expiryYear\\\":24\");",
									"      ",
									"tests[\"Response Body has Correct gateway\"] = responseBody.has(\"\\\"gateway\\\":\\\"STRIPE\"); ",
									"tests[\"Response Body has Correct last 4\"] = responseBody.has(\"\\\"lastFour\\\":\\\"4242\");",
									"",
									"tests[\"Response Body has  contains locationId\"] =  responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"",
									"tests[\"Response Body has  contains Card Type\"] =  responseBody.has(\"\\\"cardType\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randCardType\")+\"\\\"\");",
									"",
									"",
									"",
									"}",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "34c063fb-b6ea-413b-879d-3a571ad46e86",
								"type": "text/javascript",
								"exec": [
									"var cardTypes = ['Paypal','Mastercard','VISA','American Express','Discover'];",
									"var randCardType = cardTypes[Math.floor(Math.random() * cardTypes.length)];",
									"",
									"postman.setEnvironmentVariable(\"randCardType\", randCardType);",
									"",
									"var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
									"",
									"var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"do {",
									"    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
									"}",
									"while (randEmployee === undefined);",
									"",
									"postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"collectedUserId\" : \"{{randEmployee}}\",\r\n  \"lastFour\" : \"4242\",\r\n  \"expiryMonth\" : 4,\r\n  \"expiryYear\" : 24,\r\n  \"gateway\" : \"STRIPE\",\r\n  \"gatewayResponse\" : \"{\\\"id\\\":\\\"{{stripeId}}\\\",\\\"object\\\":\\\"source\\\",\\\"client_secret\\\":\\\"src_client_secret_BtwYR1BVfM1hBafiBCcNaoc9\\\",\\\"created\\\":1512588904,\\\"flow\\\":\\\"none\\\",\\\"livemode\\\":false,\\\"metadata\\\":[],\\\"owner\\\":{\\\"address\\\":{\\\"postal_code\\\":\\\"72032\\\"}}}\",\r\n  \r\n  \"cardType\" : \"{{randCardType}}\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/card",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"card"
							]
						}
					},
					"response": []
				},
				{
					"name": "saveCardToUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98ec790c-7dd6-4b74-bc03-7dd4bbbd6f36",
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"cardIdForPurchase\", jsonData.id);",
									"postman.setEnvironmentVariable(\"gatewayResponseOfSaveCard\", jsonData.gatewayResponse);",
									"",
									"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"cardIdForPurchase\")+\"\\\"\");",
									"tests[\"Response Body has Correct expiryMonth\"] = responseBody.has(\"\\\"expiryMonth\\\":4\");",
									"tests[\"Response Body has Correct expiryYear\"] = responseBody.has(\"\\\"expiryYear\\\":24\");",
									"tests[\"Response Body has Correct user id\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");       ",
									"tests[\"Response Body has Correct gateway\"] = responseBody.has(\"\\\"gateway\\\":\\\"STRIPE\"); ",
									"tests[\"Response Body has Correct last 4\"] = responseBody.has(\"\\\"lastFour\\\":\\\"4242\");",
									"tests[\"Response Body has Correct cardType\"] = responseBody.has(\"\\\"cardType\\\":\\\"VISA\");",
									"tests[\"Response Body has  contains locationId\"] =  responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"tests[\"Response Body has  contains token\"] =  responseBody.has(\"\\\"token\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"stripeId\")+\"\\\"\");",
									"",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"cardType\": \"VISA\",\r\n  \"collectedUserId\": \"{{employeeId}}\",\r\n  \"expiryMonth\": 4,\r\n  \"expiryYear\": 24,\r\n  \"gateway\": \"STRIPE\",\r\n  \"gatewayResponse\": \"{\\r\\n  \\\"id\\\": \\\"{{stripeId}}\\\",\\r\\n  \\\"object\\\": \\\"source\\\",\\r\\n  \\\"amount\\\": null,\\r\\n  \\\"client_secret\\\": \\\"src_client_secret_CfLCSV7hXlJbrl4Wf00bLtsD\\\",\\r\\n  \\\"created\\\": 1523520642,\\r\\n  \\\"currency\\\": null,\\r\\n  \\\"flow\\\": \\\"none\\\",\\r\\n  \\\"livemode\\\": false,\\r\\n  \\\"metadata\\\": {},\\r\\n  \\\"owner\\\": {\\r\\n    \\\"address\\\": {\\r\\n      \\\"city\\\": \\\"Berlin\\\",\\r\\n      \\\"country\\\": \\\"DE\\\",\\r\\n      \\\"line1\\\": \\\"Nollendorfstra\\u00DFe 27\\\",\\r\\n      \\\"line2\\\": null,\\r\\n      \\\"postal_code\\\": \\\"72032\\\",\\r\\n      \\\"state\\\": null\\r\\n    },\\r\\n    \\\"email\\\": \\\"jenny.rosen@example.com\\\",\\r\\n    \\\"name\\\": \\\"Jenny Rosen\\\",\\r\\n    \\\"phone\\\": null,\\r\\n    \\\"verified_address\\\": null,\\r\\n    \\\"verified_email\\\": null,\\r\\n    \\\"verified_name\\\": null,\\r\\n    \\\"verified_phone\\\": null\\r\\n  },\\r\\n  \\\"statement_descriptor\\\": null,\\r\\n  \\\"status\\\": \\\"chargeable\\\",\\r\\n  \\\"type\\\": \\\"card\\\",\\r\\n  \\\"usage\\\": \\\"reusable\\\",\\r\\n  \\\"card\\\": {\\r\\n    \\\"exp_month\\\": 4,\\r\\n    \\\"exp_year\\\": 2024,\\r\\n    \\\"address_line1_check\\\": \\\"unchecked\\\",\\r\\n    \\\"address_zip_check\\\": \\\"unchecked\\\",\\r\\n    \\\"brand\\\": \\\"Visa\\\",\\r\\n    \\\"card_automatically_updated\\\": false,\\r\\n    \\\"country\\\": \\\"US\\\",\\r\\n    \\\"cvc_check\\\": \\\"unchecked\\\",\\r\\n    \\\"funding\\\": \\\"credit\\\",\\r\\n    \\\"last4\\\": \\\"4242\\\",\\r\\n    \\\"three_d_secure\\\": \\\"optional\\\",\\r\\n    \\\"tokenization_method\\\": null,\\r\\n    \\\"dynamic_last4\\\": null\\r\\n  }\\r\\n}\",\r\n  \r\n  \"lastFour\": \"4242\",\r\n  \r\n  \"userId\": \"{{userId}}\"\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/card/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"card",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCardByUserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e526aee8-aac3-40b6-9100-4c42b8f63c0e",
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"",
									"tests[\"Response Body has Correct expiryMonth\"] = responseBody.has(\"\\\"expiryMonth\\\":4\");",
									"tests[\"Response Body has Correct expiryYear\"] = responseBody.has(\"\\\"expiryYear\\\":24\");",
									"tests[\"Response Body has Correct user id\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");       ",
									"tests[\"Response Body has Correct gateway\"] = responseBody.has(\"\\\"gateway\\\":\\\"STRIPE\"); ",
									"tests[\"Response Body has Correct last 4\"] = responseBody.has(\"\\\"lastFour\\\":\\\"4242\");",
									"tests[\"Response Body has Correct cardType\"] = responseBody.has(\"\\\"cardType\\\":\\\"VISA\");",
									"tests[\"Response Body has  contains locationId\"] =  responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"tests[\"Response Body has  contains token\"] =  responseBody.has(\"\\\"token\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"stripeId\")+\"\\\"\");",
									"tests[\"Response Body has  contains Id\"] =  responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"cardIdForPurchase\")+\"\\\"\");",
									"",
									"}",
									"",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/card/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"card",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUnlimitedPurchaseBySaveCard",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1630af57-80f9-4f30-bc24-beedf193a876",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"itemId\"); ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"invoiceId\");  ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CARD\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@gmail.com\"+\"\\\"\");",
									"",
									"}",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6086e282-7c8e-4faf-8b8d-ec9502fdfbcb",
								"type": "text/javascript",
								"exec": [
									"// var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
									"var randItemQuantity = 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
									"var purchaseAmount = randItemQuantity * unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\n    \"type\": \"CARD\",\n    \"cardId\": \"{{cardIdForPurchase}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createlimitedPurchaseBySaveCard",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "889ded58-3288-4932-9e16-6aae95755013",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_metered\")+\"\\\"\");   ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"invoiceId\");  ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+true);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CARD\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@gmail.com\"+\"\\\"\");",
									"",
									"}",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5c654eb7-1060-4111-b2ec-caf0ad42f3be",
								"type": "text/javascript",
								"exec": [
									"var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
									"var purchaseAmount = randItemQuantity * unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n   \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CARD\",\r\n    \"cardId\": \"{{cardIdForPurchase}}\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createlimitedPurchaseByNewCard",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eab1c7fc-c805-460b-8a64-5a36fa81b334",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+false);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"\\\"itemId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"itemId_metered\")+\"\\\"\");   ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"invoiceId\");  ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+true);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CARD\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@gmail.com\"+\"\\\"\");",
									"",
									"}",
									"",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5c654eb7-1060-4111-b2ec-caf0ad42f3be",
								"type": "text/javascript",
								"exec": [
									"var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
									"var purchaseAmount = randItemQuantity * unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n   \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CARD\",\r\n    \"cardId\": \"{{newCardIdForPurchase}}\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUnlimitedPurchaseByNewCard",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1630af57-80f9-4f30-bc24-beedf193a876",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"",
									"",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"tests[\"Response Body has Correct salesEmployeeId\"] = responseBody.has(\"\\\"salesEmployeeId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randEmployee\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct userId\"] = responseBody.has(\"\\\"userId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"userId\")+\"\\\"\");  ",
									"    tests[\"Response Body has Correct unlimited\"] = responseBody.has(\"\\\"unlimited\\\":\"+true);  ",
									"    tests[\"Response Body has Correct expirationStart\"] = responseBody.has(\"\\\"expirationStart\\\":\"+\"\\\"\"+\"PURCHASE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct expirationTime\"] = responseBody.has(\"\\\"expirationTime\\\":\"+2);  ",
									"    tests[\"Response Body has Correct expirationUnit\"] = responseBody.has(\"\\\"expirationUnit\\\":\"+\"\\\"\"+\"MONTHS\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct itemId\"] = responseBody.has(\"itemId\"); ",
									"    tests[\"Response Body has Correct currency\"] = responseBody.has(\"\\\"currency\\\":\"+\"\\\"\"+\"USD\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct invoiceId\"] = responseBody.has(\"invoiceId\");  ",
									"    tests[\"Response Body has Correct itemType\"] = responseBody.has(\"\\\"itemType\\\":\"+\"\\\"\"+\"SERVICE\"+\"\\\"\");  ",
									"    tests[\"Response Body has Correct metered\"] = responseBody.has(\"\\\"metered\\\":\"+false);",
									"    tests[\"Response Body has Correct Payment id\"] = responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.payment.id+\"\\\"\");",
									"    tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct type\"] = responseBody.has(\"\\\"type\\\":\"+\"\\\"\"+\"CARD\"+\"\\\"\");",
									"    tests[\"Response Body has Correct email\"] = responseBody.has(\"\\\"email\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"randFirstName\")+\".\"+postman.getEnvironmentVariable(\"randLastName\")+postman.getEnvironmentVariable(\"randPhoneNumber\")+\"@gmail.com\"+\"\\\"\");",
									"",
									"}",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6086e282-7c8e-4faf-8b8d-ec9502fdfbcb",
								"type": "text/javascript",
								"exec": [
									"// var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
									"var randItemQuantity = 1;",
									"var unitPrice = 22.5;",
									"var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
									"var purchaseAmount = randItemQuantity * unitPrice;",
									"purchaseAmount = +purchaseAmount + +salesTax;",
									"",
									"postman.setEnvironmentVariable(\"salesTax\", salesTax);",
									"postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
									"postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
									"postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\n    \"type\": \"CARD\",\n    \"cardId\": \"{{newCardIdForPurchase}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
							"host": [
								"{{purchase}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"purchase",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Roles",
			"description": null,
			"item": [
				{
					"name": "getRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a24d998-08cb-4a04-ad4b-626394c81f76",
								"type": "text/javascript",
								"exec": [
									"//jsonData.content[0].id",
									"",
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"permissionGroupId_1\", jsonData.content[0].permissions[0].permissionGroupId);",
									"",
									"",
									"",
									" tests[\"Response Body has Correct Organization ID\"] = responseBody.has(\"\\\"organizationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"organizationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
									"     tests[\"Response Body has Correct description name\"] = responseBody.has(\"description\");",
									"     tests[\"Response Body has Correct permissionGroupId\"] = responseBody.has(\"permissionGroupId\");",
									"      tests[\"Response Body has Correct permissionKey\"] = responseBody.has(\"permissionKey\");",
									"}",
									"",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authentication}}/{{organizationId}}/role",
							"host": [
								"{{authentication}}"
							],
							"path": [
								"{{organizationId}}",
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "getRolesById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33cea620-a205-4e64-9a9d-96fb774a8217",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 200) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									" tests[\"Response Body has Correct Organization ID\"] = responseBody.has(\"\\\"organizationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"organizationId\")+\"\\\"\");",
									"    tests[\"Response Body has Correct name\"] = responseBody.has(\"name\");",
									"     tests[\"Response Body has Correct description name\"] = responseBody.has(\"description\");",
									"     tests[\"Response Body has Correct permissionGroupId\"] = responseBody.has(\"permissionGroupId\");",
									"      tests[\"Response Body has Correct permissionKey\"] = responseBody.has(\"permissionKey\");",
									"}",
									"",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authentication}}/{{organizationId}}/role/{{roleId}}",
							"host": [
								"{{authentication}}"
							],
							"path": [
								"{{organizationId}}",
								"role",
								"{{roleId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Member SignUp",
			"description": null,
			"item": [
				{
					"name": "createMemberSignUp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd02d51b-7114-4ab4-971e-8ecbbb134326",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 201)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"}",
									"else if (responseCode.code === 201) ",
									"{",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"tests[\"Response Body has Correct locationId\"] = responseBody.has(\"\\\"locationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"locationId\")+\"\\\"\");",
									"tests[\"Response Body has Correct organizationId\"] = responseBody.has(\"\\\"organizationId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"organizationId\")+\"\\\"\");",
									"tests[\"Response Body has Correct waiverId\"] = responseBody.has(\"\\\"waiverId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"waiverId\")+\"\\\"\");",
									"tests[\"Response Body has Correct termsAndConditionsId\"] = responseBody.has(\"\\\"termsAndConditionsId\\\":\"+\"\\\"\"+postman.getEnvironmentVariable(\"termsId\")+\"\\\"\");",
									"tests[\"Response Body has Correct Currency\"] = responseBody.has(\"\\\"healthNote\\\":\\\"Wrist pain\\\"\");",
									"",
									"tests[\"Response Body has Correct emailId\"] = responseBody.has(\"\\\"address\\\":\"+\"\\\"\"+jsonData.person.email.address+\"\\\"\");",
									"",
									"tests[\"Response Body has Correct phone number\"] = responseBody.has(\"\\\"number\\\":\"+\"\\\"\"+jsonData.person.phone.number+\"\\\"\");",
									"",
									"",
									"}",
									"",
									"",
									"tests[\"Response code should be 201\"] = responseCode.code === 201;",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\" : \"{{randFirstName}}\",\r\n  \"lastName\" : \"{{randLastName}}\",\r\n  \"email\" : {\r\n    \"address\" : \"john{{$randomInt}}.snow{{$randomInt}}@abc.com\"\r\n  },\r\n  \"phone\" : {\r\n    \"number\" : \"{{phoneNumber}}\"\r\n  },\r\n\r\n  \"healthNote\" : \"Wrist pain\",\r\n  \"items\" : [ {\r\n    \"quantity\" : 1,\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 60,\r\n    \"expirationUnit\" : \"DAYS\",\r\n    \"unitPrice\" : 10.0,\r\n    \"salesTax\" : 1.2,\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\" : 11.2,\r\n    \"type\" : \"CASH\",\r\n    \"email\" : \"john.snowKingInTheNorth@abc.com\",\r\n     \"currency\":\"USD\"\r\n  },\r\n\"salesEmployeeId\" : \"{{employeeId_2}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\",\r\n  \"waiverId\" : \"{{waiverId}}\"\r\n\r\n}\r\n"
						},
						"url": {
							"raw": "{{memberSignUp}}/{{organizationId}}/{{locationId}}/signUp",
							"host": [
								"{{memberSignUp}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"signUp"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Event Type",
			"description": null,
			"item": [
				{
					"name": "getEventType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48fc6ea2-79ea-4941-9326-b12376cb2775",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code != 200)",
									"{",
									"    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
									"    tests[\"[INFO] Response Body: \" + responseBody] = true;",
									"} else if(responseCode.code==200) {",
									"    ",
									"    var jsonData = JSON.parse(responseBody);",
									"    postman.setEnvironmentVariable(\"eventTypeId_yoga\", jsonData.id);",
									"    ",
									"tests[\"Response Body has Name\"] = responseBody.has(\"name\");",
									"tests[\"Response Body has Event Type Id\"] = responseBody.has(\"id\");",
									"tests[\"Response Body has Correct Event Category Id\"] = responseBody.has(postman.getEnvironmentVariable(\"eventCategoryId\"));    ",
									"tests[\"Response Body has Correct Location Id\"] = responseBody.has(postman.getEnvironmentVariable(\"locationId\"));  ",
									"tests[\"Response Body has Correct checkInWindow\"] = responseBody.has(\"\\\"checkInWindow\\\":60\");",
									"tests[\"Response Body has Correct duration\"] = responseBody.has(\"\\\"duration\\\":60\"); ",
									"tests[\"Response Body has Correct capacity\"] = responseBody.has(\"\\\"capacity\\\":1\"); ",
									"//tests[\"Response Body has Correct eventLevelId\"] = responseBody.has(\"eventLevelId\");",
									"tests[\"Response Body has Correct eventLevelId\"] =responseBody.has(\"\\\"id\\\":\"+\"\\\"\"+jsonData.content[0].id+\"\\\"\");",
									"    ",
									"}",
									"",
									"tests[\"Response code should be 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schedule}}/{{organizationId}}/{{locationId}}/eventType",
							"host": [
								"{{schedule}}"
							],
							"path": [
								"{{organizationId}}",
								"{{locationId}}",
								"eventType"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}