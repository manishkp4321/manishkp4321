{
  "info": {
    "_postman_id": "b5b9b702-c53d-4c36-b4af-34128f0944a3",
    "name": "2_Create_Events_Per_Day copy",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Create Yoga for 10:30AM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventId_1030am\", jsonData.id);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// var current_timestamp = new Date();\r",
                  "// var current_year = current_timestamp.getFullYear();\r",
                  "// var current_date = ('0' + current_timestamp.getDate()).slice(-2);\r",
                  "// var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);\r",
                  "\r",
                  "// var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T15:30:00\";\r",
                  "// var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T16:00:00\";\r",
                  "\r",
                  "var date = data.dateForEventCreation;\r",
                  "// var date = \"2018-03-13\";\r",
                  "\r",
                  "var eventStartTime = date + \"T15:30:00\";\r",
                  "var eventEndTime = date + \"T16:00:00\";\r",
                  "\r",
                  "// postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
                  "\r",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];\r",
                  "\r",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];\r",
                  "do {\r",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];\r",
                  "}\r",
                  "while (randEventLevelId === undefined);\r",
                  "\r",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);\r",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);\r",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_yoga}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\",\r\n  \"locationId\" : \"{{locationId}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventHostId\", jsonData.id);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_1030am}}\",\r\n  \"substituteId\" : \"{{employeeId_2}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/host",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "host"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create P90X for 12PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventId_1200pm\", jsonData.id);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// var current_timestamp = new Date();\r",
                  "// var current_year = current_timestamp.getFullYear();\r",
                  "// var current_date = ('0' + current_timestamp.getDate()).slice(-2);\r",
                  "// var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);\r",
                  "\r",
                  "// var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:00:00\";\r",
                  "// var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T17:30:00\";\r",
                  "\r",
                  "var date = data.dateForEventCreation;\r",
                  "\r",
                  "var eventStartTime = date + \"T17:00:00\";\r",
                  "var eventEndTime = date + \"T17:30:00\";\r",
                  "\r",
                  "// postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
                  "\r",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];\r",
                  "\r",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];\r",
                  "do {\r",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];\r",
                  "}\r",
                  "while (randEventLevelId === undefined);\r",
                  "\r",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);\r",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);\r",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_p90x}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventHostId_1200pm\", jsonData.id);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_1200pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/host",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "host"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Aerobics for 1PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventId_100pm\", jsonData.id);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// var current_timestamp = new Date();\r",
                  "// var current_year = current_timestamp.getFullYear();\r",
                  "// var current_date = ('0' + current_timestamp.getDate()).slice(-2);\r",
                  "// var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);\r",
                  "\r",
                  "// var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T18:00:00\";\r",
                  "// var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T18:30:00\";\r",
                  "\r",
                  "var date = data.dateForEventCreation;\r",
                  "\r",
                  "var eventStartTime = date + \"T18:00:00\";\r",
                  "var eventEndTime = date + \"T18:30:00\";\r",
                  "\r",
                  "// postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
                  "\r",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];\r",
                  "\r",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];\r",
                  "do {\r",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];\r",
                  "}\r",
                  "while (randEventLevelId === undefined);\r",
                  "\r",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);\r",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);\r",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_aerobics}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventHostId_100pm\", jsonData.id);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_100pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/host",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "host"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Pilates for 2PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventId_200pm\", jsonData.id);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// var current_timestamp = new Date();\r",
                  "// var current_year = current_timestamp.getFullYear();\r",
                  "// var current_date = ('0' + current_timestamp.getDate()).slice(-2);\r",
                  "// var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);\r",
                  "\r",
                  "// var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T19:00:00\";\r",
                  "// var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T19:30:00\";\r",
                  "\r",
                  "var date = data.dateForEventCreation;\r",
                  "\r",
                  "var eventStartTime = date + \"T19:00:00\";\r",
                  "var eventEndTime = date + \"T19:30:00\";\r",
                  "\r",
                  "// postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
                  "\r",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];\r",
                  "\r",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];\r",
                  "do {\r",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];\r",
                  "}\r",
                  "while (randEventLevelId === undefined);\r",
                  "\r",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);\r",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);\r",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_pilates}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventHostId_200pm\", jsonData.id);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_200pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/host",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "host"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Zumba for 3PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventId_300pm\", jsonData.id);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// var current_timestamp = new Date();\r",
                  "// var current_year = current_timestamp.getFullYear();\r",
                  "// var current_date = ('0' + current_timestamp.getDate()).slice(-2);\r",
                  "// var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);\r",
                  "\r",
                  "// var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T20:00:00\";\r",
                  "// var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T20:30:00\";\r",
                  "\r",
                  "var date = data.dateForEventCreation;\r",
                  "\r",
                  "var eventStartTime = date + \"T20:00:00\";\r",
                  "var eventEndTime = date + \"T20:30:00\";\r",
                  "\r",
                  "// postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
                  "\r",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];\r",
                  "\r",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];\r",
                  "do {\r",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];\r",
                  "}\r",
                  "while (randEventLevelId === undefined);\r",
                  "\r",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);\r",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);\r",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_zumba}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventHostId_300pm\", jsonData.id);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_300pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/host",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "host"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Turbo Kick for 4:30PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventId_430pm\", jsonData.id);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// var current_timestamp = new Date();\r",
                  "// var current_year = current_timestamp.getFullYear();\r",
                  "// var current_date = ('0' + current_timestamp.getDate()).slice(-2);\r",
                  "// var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);\r",
                  "\r",
                  "// var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T21:30:00\";\r",
                  "// var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T22:00:00\";\r",
                  "\r",
                  "var date = data.dateForEventCreation;\r",
                  "\r",
                  "var eventStartTime = date + \"T21:30:00\";\r",
                  "var eventEndTime = date + \"T22:00:00\";\r",
                  "\r",
                  "// postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
                  "\r",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];\r",
                  "\r",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];\r",
                  "do {\r",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];\r",
                  "}\r",
                  "while (randEventLevelId === undefined);\r",
                  "\r",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);\r",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);\r",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_turboKick}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventHostId_430pm\", jsonData.id);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_430pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/host",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "host"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create Cycling for 5PM",
      "description": null,
      "item": [
        {
          "name": "CreateEvent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventId_500pm\", jsonData.id);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// var current_timestamp = new Date();\r",
                  "// var current_year = current_timestamp.getFullYear();\r",
                  "// var current_date = ('0' + current_timestamp.getDate()).slice(-2);\r",
                  "// var current_month = ('0' + (current_timestamp.getMonth()+1)).slice(-2);\r",
                  "\r",
                  "// var eventStartTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T22:00:00\";\r",
                  "// var eventEndTime = current_year + \"-\" + current_month + \"-\" + current_date + \"T22:30:00\";\r",
                  "\r",
                  "var date = data.dateForEventCreation;\r",
                  "\r",
                  "var eventStartTime = date + \"T22:00:00\";\r",
                  "var eventEndTime = date + \"T22:30:00\";\r",
                  "\r",
                  "// postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
                  "\r",
                  "var eventLevels = [postman.getEnvironmentVariable(\"eventLevelId_beginner\"),postman.getEnvironmentVariable(\"eventLevelId_intermediate\"),postman.getEnvironmentVariable(\"eventLevelId_advanced\")];\r",
                  "\r",
                  "var randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];\r",
                  "do {\r",
                  "    randEventLevelId = eventLevels[Math.floor(Math.random() * eventLevels.length)];\r",
                  "}\r",
                  "while (randEventLevelId === undefined);\r",
                  "\r",
                  "postman.setEnvironmentVariable(\"randEventLevelId\", randEventLevelId);\r",
                  "postman.setEnvironmentVariable(\"eventStartTime\", eventStartTime);\r",
                  "postman.setEnvironmentVariable(\"eventEndTime\", eventEndTime);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventTypeId\" : \"{{eventTypeId_cycling}}\",\r\n  \"startDateTime\" : \"{{eventStartTime}}\",\r\n  \"endDateTime\" : \"{{eventEndTime}}\",\r\n  \"eventLevelId\" : \"{{randEventLevelId}}\",\r\n  \"capacity\" : \"10\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateHost",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"eventHostId\", jsonData.id);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var employeeList = [postman.getEnvironmentVariable(\"employeeId\"),postman.getEnvironmentVariable(\"employeeId_2\"),postman.getEnvironmentVariable(\"employeeId_3\"),postman.getEnvironmentVariable(\"employeeId_4\"),postman.getEnvironmentVariable(\"employeeId_5\"),postman.getEnvironmentVariable(\"employeeId_6\"),postman.getEnvironmentVariable(\"employeeId_7\"),postman.getEnvironmentVariable(\"employeeId_8\"),postman.getEnvironmentVariable(\"employeeId_9\"),postman.getEnvironmentVariable(\"employeeId_10\")];",
                  "",
                  "var randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "do {",
                  "    randEmployee = employeeList[Math.floor(Math.random() * employeeList.length)];",
                  "}",
                  "while (randEmployee === undefined);",
                  "",
                  "postman.setEnvironmentVariable(\"randEmployee\", randEmployee);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"eventId\" : \"{{eventId_500pm}}\",\r\n  \"employeeId\" : \"{{randEmployee}}\"\r\n}"
            },
            "url": {
              "raw": "{{schedule}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/host",
              "host": [
                "{{schedule}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "host"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 10:30AM",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"memberId_1030am\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n    \"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createUnlimitedPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"itemCategoryId\" : \"{{itemCatId}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 10:30AM (2)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"memberId_1030am\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n    \"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 10:30AM (3)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"memberId_1030am\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n    \"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 10:30AM (4)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"memberId_1030am\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n    \"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 10:30AM (5)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"memberId_1030am\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n    \"extension\": \"{{$randomInt}}\",\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1030am}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1030am}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 12PM",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createUnlimitedPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"itemCategoryId\" : \"{{itemCatId}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 12PM (2)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 12PM (3)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 12PM (4)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 12PM (5)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_1200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_1200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 1PM",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createUnlimitedPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"itemCategoryId\" : \"{{itemCatId}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 1PM (2)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 1PM (3)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 1PM (4)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 1PM (5)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createMeteredPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_100pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_100pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 2PM",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = 1",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"itemCategoryId\" : \"{{itemCatId}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 2PM (2)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 2PM (3)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 2PM (4)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 2PM (5)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_200pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_200pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 3PM",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"itemCategoryId\" : \"{{itemCatId}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 3PM (2)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 3PM (3)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 3PM (4)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 3PM (5)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_300pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_300pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 4:30PM",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"itemCategoryId\" : \"{{itemCatId}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 4:30PM (2)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 4:30PM (3)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 4:30PM (4)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 4:30PM (5)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_430pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_430pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 5PM",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\n  \"items\" : [ {\n    \"quantity\" : 1,\n    \"unlimited\" : true,\n    \"expirationStart\" : \"PURCHASE\",\n    \"expirationTime\" : 2,\n    \"expirationUnit\" : \"MONTHS\",\n    \"unitPrice\" : \"{{unitPrice}}\",\n    \"salesTax\" : \"{{salesTax}}\",\n    \"itemId\" : \"{{itemId_unlimited}}\",\n    \"itemCategoryId\" : \"{{itemCatId}}\",\n    \"currency\" : \"USD\",\n    \"itemType\" : \"SERVICE\"\n  } ],\n  \"payment\" : {\n    \"amount\": \"{{purchaseAmount}}\",\n    \"currency\": \"USD\",\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\n    \"type\": \"CASH\"\n  }\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 5PM (2)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 5PM (3)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 5PM (4)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Create and Enroll Member for 5PM (5)",
      "description": null,
      "item": [
        {
          "name": "createUserMember",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "postman.setEnvironmentVariable(\"memberId\", jsonData.id);\r",
                  "postman.setEnvironmentVariable(\"userId\", jsonData.userId);\r",
                  "\r",
                  "if (responseCode.code != 201)\r",
                  "{\r",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;\r",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;\r",
                  "}\r",
                  "\r",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var firstNames = ['Michael,male', 'Alicia,female', 'Thomas,male', 'Olivia,female', 'Daniel,male', 'Candice,female', 'Amy,female', 'Barbara,female', 'Matthew,male', 'Ryan,male', 'Craig,male','Tammy,female','Heaven,female','Kent,male','Floretta,female','Sylvester,male','Mandi,female','Damion,male','Noel,male','Jacklyn,female','Viva,female','Taina,female','Myrtle,male','Ernest,male','Vina,female','Dorsey,female','Rico,male','Will,male','Wilber,male','Lacie,female','Orena,female','Eliana,female','Elva,female','Marilyn,female','Sharita,female','Nina,female','Tori,female','Rufina,female','Isiah,female','Lavenia,female','Coleman,male','Donald,male','Jannette,female','Zaida,female','Darius,male','Shelton,male','Jackson,male','Rochelle,female','Kermit,male','Branda,female','Casandra,female','Matt,male','Lorna,female','Angela,female','China,female','Alena,female','Barrett,male','Aaron,male','Rana,female','Jeffrey,male','Zane,male','Shane,male','Melinda,female','Valencia,female','Jacque,female','Venessa,female','Don,male','Harold,male','Charol,female','Rebbecca,female','Melissa,female','Diego,male','Jorge,male','Katie,female','Gina,female','Denise,female','Lorita,female','Mina,female','Anthony,male','Debbie,female','Jason,male','Kassie,female','Misty,female','Misti,female','Dianne,female','Lashay,female','Tonia,female','Mariana,female','Peter,male','Zack,male','Kevin,male','Vickie,female','Magda,female','Kris,male','Ralph,male','Maureen,female','Frederick,male','Emmaline,female','Marylee,female','Zoe,female','Katelyn,female','Birdee,female','Loren,female','Fran,female','Melvin,male','Delbert,male','Mittie,female','Clarence,female','Demetra,female','Nancy,female','Vaughn,male','Arminda,female','Garrett,male','Keith,male','Trudy,female','Theresia,female','Kelly,female'];",
                  "var randFirstNameWithGender = firstNames[Math.floor(Math.random() * firstNames.length)];",
                  "var randFirstNameWithGenderArray = randFirstNameWithGender.split(',');",
                  "var randFirstName = randFirstNameWithGenderArray[0];",
                  "var gender = randFirstNameWithGenderArray[1];",
                  "",
                  "var lastNames = ['Savage', 'Stephens', 'Sparks', 'Stark', 'Sparks', 'Bottin', 'Jones', 'Arthurson', 'Harden', 'Gray', 'Bryson', 'Matthison', 'Wilson', 'Ivey', 'Netzley', 'Piche','Metz','Cass','Kuzma','Reno','Avis','Saville','Selvey','Stoecker','Auerbach','Eilerman','Holsey','Zepp','Davids','Foster','Sim','Messana','Schloss','Sylvester','Leathers','Niles','Combs','Phillips','Augsburger','Stroman','Beveridge','Gattis','Minnis','Fortes','Ullman','Bunkley','Spivey','Sterrett','Crist','Chow','Lierman','Ashalintubbi','Laura','Crawford','Balmer','Mcmullin','Dussault','Holbrook','Dion','Lechler','Beaton','Elzey','Sams','Irby','Hollaway','Levert','Gough','Croom','Dedman','Hatmaker','Tippetts','Odoms','Banaszak','Viveros','Hempstead','Tower','Atlas','Lozoya','Fulp','Corbo','Chapell','Monier','Selle','Parenti','Karl','Kuehn','Speers','Cambron','Blossom','Peart','Gunter','Hagenbuch','Amend','Tiernan','Ayala','Maclenn','Goldman','Colone','Golding','Landreth','Shams','Liddle','Alley','Levy','Barajas','Tetrault','Shue','Lenton','Boss','Weedman','Bergeron','Valls','Pooler','Mollett','Viger','Donnellan','Dedeaux'];",
                  "var states = ['Alabama','Alaska','Arizona','Arkansas','California','Colorado','Connecticut','Delaware','Florida','Georgia','Hawaii','Idaho','Illinois','Indiana','Iowa','Kansas','Kentucky','Louisiana','Maine','Maryland','Massachusetts','Michigan','Minnesota','Mississippi','Missouri','Montana','Nebraska','Nevada','New Hampshire','New Jersey','New Mexico','New York','North Carolina','North Dakota','Ohio','Oklahoma','Oregon','Pennsylvania','Rhode Island','South Carolina','South Dakota','Tennessee','Texas','Utah','Vermont','Virginia','Washington','West Virginia','Wisconsin','Wyoming'];",
                  "",
                  "var userPhotos_male = [postman.getEnvironmentVariable(\"photoId_male_1\"),postman.getEnvironmentVariable(\"photoId_male_2\"),postman.getEnvironmentVariable(\"photoId_male_3\"),postman.getEnvironmentVariable(\"photoId_male_4\"),postman.getEnvironmentVariable(\"photoId_male_5\"),postman.getEnvironmentVariable(\"photoId_male_6\"),postman.getEnvironmentVariable(\"photoId_male_7\"),postman.getEnvironmentVariable(\"photoId_male_8\")];",
                  "",
                  "var userPhotos_female = [postman.getEnvironmentVariable(\"photoId_female_1\"),postman.getEnvironmentVariable(\"photoId_female_2\"),postman.getEnvironmentVariable(\"photoId_female_3\"),postman.getEnvironmentVariable(\"photoId_female_4\"),postman.getEnvironmentVariable(\"photoId_female_5\"),postman.getEnvironmentVariable(\"photoId_female_6\"),postman.getEnvironmentVariable(\"photoId_female_7\"),postman.getEnvironmentVariable(\"photoId_female_8\")];",
                  "",
                  "if(gender === 'male')",
                  "{",
                  "    var randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_male[Math.floor(Math.random() * userPhotos_male.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "} ",
                  "else if (gender === 'female')",
                  "{",
                  "        var randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    do {",
                  "        randPhotoId = userPhotos_female[Math.floor(Math.random() * userPhotos_female.length)];",
                  "    }",
                  "    while (randPhotoId === undefined);",
                  "}",
                  "else",
                  "{",
                  "    //GENDER FOR FIRST NAME WAS NOT SET AS 'male' OR 'female'",
                  "}",
                  "",
                  "var randLastName = lastNames[Math.floor(Math.random() * lastNames.length)];",
                  "var randZipCode = Math.floor(Math.random() * 90000) + 10000;",
                  "var randState = states[Math.floor(Math.random() * states.length)];",
                  "var randPhoneNumber = Math.floor(Math.random() * 9000000000) + 1000000000;",
                  "",
                  "postman.setEnvironmentVariable(\"randPhoneNumber\", randPhoneNumber);",
                  "postman.setEnvironmentVariable(\"randFirstName\", randFirstName);",
                  "postman.setEnvironmentVariable(\"randLastName\", randLastName);",
                  "postman.setEnvironmentVariable(\"randZipCode\", randZipCode);",
                  "postman.setEnvironmentVariable(\"randState\", randState);",
                  "postman.setEnvironmentVariable(\"randPhotoId\", randPhotoId);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n \"person\": {\r\n  \"photoId\": \"{{randPhotoId}}\",\r\n  \"email\": {\r\n    \"address\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\"\r\n  },\r\n  \"firstName\": \"{{randFirstName}}\",\r\n  \"lastName\": \"{{randLastName}}\",\r\n  \"phone\": {\r\n     \"number\": \"{{randPhoneNumber}}\"\r\n  }\r\n },\r\n  \"waiverId\" : \"{{waiverId}}\",\r\n  \"termsAndConditionsId\" : \"{{termsId}}\"\r\n}"
            },
            "url": {
              "raw": "{{manageMember}}/{{organizationId}}/{{locationId}}/member",
              "host": [
                "{{manageMember}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "member"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createPurchase",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"invoiceId\", jsonData.items[0].invoiceId);",
                  "postman.setEnvironmentVariable(\"saleItemsId\", jsonData.items[0].id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var randItemQuantity = Math.floor(Math.random() * 10) + 1;",
                  "var unitPrice = 22.5;",
                  "var salesTax = (unitPrice * randItemQuantity * .06).toFixed(2);",
                  "var purchaseAmount = randItemQuantity * unitPrice;",
                  "purchaseAmount = +purchaseAmount + +salesTax;",
                  "",
                  "postman.setEnvironmentVariable(\"salesTax\", salesTax);",
                  "postman.setEnvironmentVariable(\"unitPrice\", unitPrice);",
                  "postman.setEnvironmentVariable(\"purchaseAmount\", purchaseAmount);",
                  "postman.setEnvironmentVariable(\"randItemQuantity\", randItemQuantity);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"salesEmployeeId\" : \"{{randEmployee}}\",\r\n  \"items\" : [ {\r\n    \"quantity\" : \"{{randItemQuantity}}\",\r\n    \"metered\" : true,\r\n    \"expirationStart\" : \"PURCHASE\",\r\n    \"expirationTime\" : 2,\r\n    \"expirationUnit\" : \"MONTHS\",\r\n    \"unitPrice\" : \"{{unitPrice}}\",\r\n    \"salesTax\" : \"{{salesTax}}\",\r\n    \"itemId\" : \"{{itemId_metered}}\",\r\n    \"itemCategoryId\" : \"{{itemCatId}}\",\r\n    \"currency\" : \"USD\",\r\n    \"itemType\" : \"SERVICE\"\r\n  } ],\r\n  \"payment\" : {\r\n    \"amount\": \"{{purchaseAmount}}\",\r\n    \"currency\": \"USD\",\r\n    \"email\": \"{{randFirstName}}.{{randLastName}}{{randPhoneNumber}}@gmail.com\",\r\n    \"type\": \"CASH\"\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{purchase}}/{{organizationId}}/{{locationId}}/purchase/user/{{userId}}",
              "host": [
                "{{purchase}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "purchase",
                "user",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "createEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "if (responseCode.code != 201)",
                  "{",
                  "    tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "    tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "}",
                  "",
                  "tests[\"Response code should be 201\"] = responseCode.code === 201;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "updateEnrollment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var attendStatus = postman.getEnvironmentVariable(\"attendStatus\")",
                  "postman.setEnvironmentVariable(\"enrollmentId\", jsonData.id);",
                  "",
                  "//Returns 409 conflict when you send attendStatus of reserved to an existing enrollment.",
                  "if(attendStatus == 'reserved'){",
                  "    if (responseCode.code != 409)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 409\"] = responseCode.code === 409;    ",
                  "}else{",
                  "    if (responseCode.code != 200)",
                  "    {",
                  "        tests[\"[INFO]  Request Body: \" + JSON.stringify(request)] = true;",
                  "        tests[\"[INFO] Response Body: \" + responseBody] = true;",
                  "    }",
                  "    tests[\"Response code should be 200\"] = responseCode.code === 200;",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var attendStatus = ''",
                  "var attendPercent = postman.getEnvironmentVariable(\"attendPercent\"); //Approximate",
                  "//Pass \"%\" threshold from Jenkins? -TimothyW 2018-03-05",
                  "console.log(\"Attend percent:\" + attendPercent)",
                  "if(Math.random() <=  attendPercent){",
                  "    attendStatus = \"attended\"",
                  "}else{",
                  "    attendStatus = \"reserved\"",
                  "}",
                  "postman.setEnvironmentVariable(\"attendStatus\", attendStatus);"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{enrollment}}/{{organizationId}}/{{locationId}}/event/{{eventId_500pm}}/enrollment/{{userId}}?status={{attendStatus}}",
              "host": [
                "{{enrollment}}"
              ],
              "path": [
                "{{organizationId}}",
                "{{locationId}}",
                "event",
                "{{eventId_500pm}}",
                "enrollment",
                "{{userId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "{{attendStatus}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}